<?xml version="1.0" encoding="utf-8"?><span>
<doc>
  <assembly>
    <name>System.Linq.Expressions</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>Dynamic site type.</summary>
      <typeparam name="T">The delegate type.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Creates an instance of the dynamic call site, initialized with the binder responsible for the runtime binding of the dynamic operations at this call site.</summary>
      <param name="binder">The binder responsible for the runtime binding of the dynamic operations at this call site.</param>
      <returns>The new instance of dynamic call site.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>The Level 0 cache - a delegate specialized based on the site history.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>The update delegate. Called when the dynamic site experiences cache miss.</summary>
      <returns>The update delegate.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>A dynamic call site base class. This type is used as a parameter type to the dynamic site targets.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>Class responsible for binding dynamic operations on the dynamic site.</summary>
      <returns>The <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see> object responsible for binding dynamic operations.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Creates a call site with the given delegate type and binder.</summary>
      <param name="delegateType">The call site delegate type.</param>
      <param name="binder">The call site binder.</param>
      <returns>The new call site.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>Class responsible for runtime binding of the dynamic operations on the dynamic call site.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Performs the runtime binding of the dynamic operation on a set of arguments.</summary>
      <param name="args">An array of arguments to the dynamic operation.</param>
      <param name="parameters">The array of <see cref="T:System.Linq.Expressions.ParameterExpression"></see> instances that represent the parameters of the call site in the binding process.</param>
      <param name="returnLabel">A LabelTarget used to return the result of the dynamic binding.</param>
      <returns>An Expression that performs tests on the dynamic operation arguments, and performs the dynamic operation if the tests are valid. If the tests fail on subsequent occurrences of the dynamic operation, Bind will be called again to produce a new <see cref="T:System.Linq.Expressions.Expression"></see> for the new argument types.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>Provides low-level runtime binding support. Classes can override this and provide a direct delegate for the implementation of rule. This can enable saving rules to disk, having specialized rules available at runtime, or providing a different caching policy.</summary>
      <param name="site">The CallSite the bind is being performed for.</param>
      <param name="args">The arguments for the binder.</param>
      <typeparam name="T">The target type of the CallSite.</typeparam>
      <returns>A new delegate which replaces the CallSite Target.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>Adds a target to the cache of known targets. The cached targets will be scanned before calling BindDelegate to produce the new rule.</summary>
      <param name="target">The target delegate to be added to the cache.</param>
      <typeparam name="T">The type of target being added.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>Gets a label that can be used to cause the binding to be updated. It indicates that the expression's binding is no longer valid. This is typically used when the &quot;version&quot; of a dynamic object has changed.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget"></see> object representing a label that can be used to trigger the binding update.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>Class that contains helper methods for DLR CallSites.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>Checks if a <see cref="T:System.Reflection.MethodBase"></see> is internally used by DLR and should not be displayed on the language code's stack.</summary>
      <param name="mb">The input <see cref="T:System.Reflection.MethodBase"></see></param>
      <returns>True if the input <see cref="T:System.Reflection.MethodBase"></see> is internally used by DLR and should not be displayed on the language code's stack. Otherwise, false.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DebugInfoGenerator">
      <summary>Generates debug information for lambda expressions in an expression tree.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator"></see> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator">
      <summary>Creates a program database (PDB) symbol generator.</summary>
      <returns>A PDB symbol generator.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.MarkSequencePoint(System.Linq.Expressions.LambdaExpression,System.Int32,System.Linq.Expressions.DebugInfoExpression)">
      <summary>Marks a sequence point in Microsoft intermediate language (MSIL) code.</summary>
      <param name="method">The lambda expression that is generated.</param>
      <param name="ilOffset">The offset within MSIL code at which to mark the sequence point.</param>
      <param name="sequencePoint">Debug information that corresponds to the sequence point.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>Indicates that the use of <see cref="T:System.Object"></see> on a member is meant to be treated as a dynamically dispatched type.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DynamicAttribute"></see> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DynamicAttribute"></see> class.</summary>
      <param name="transformFlags">Specifies, in a prefix traversal of a type's construction, which <see cref="T:System.Object"></see> occurrences are meant to be treated as a dynamically dispatched type.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>Specifies, in a prefix traversal of a type's construction, which <see cref="T:System.Object"></see> occurrences are meant to be treated as a dynamically dispatched type.</summary>
      <returns>The list of <see cref="T:System.Object"></see> occurrences that are meant to be treated as a dynamically dispatched type.</returns>
    </member>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>Represents the binary dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.BinaryOperationBinder"></see> class.</summary>
      <param name="operation">The binary operation kind.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic binary operation.</summary>
      <param name="target">The target of the dynamic operation.</param>
      <param name="args">An array of arguments of the dynamic operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the binary dynamic operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic binary operation.</param>
      <param name="arg">The right hand side operand of the dynamic binary operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the binary dynamic operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic binary operation.</param>
      <param name="arg">The right hand side operand of the dynamic binary operation.</param>
      <param name="errorSuggestion">The binding result if the binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>The binary operation kind.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> object representing the kind of binary operation.</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>Represents a set of binding restrictions on the <see cref="T:System.Dynamic.DynamicMetaObject"></see> under which the dynamic binding is valid.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>Combines binding restrictions from the list of <see cref="T:System.Dynamic.DynamicMetaObject"></see> instances into one set of restrictions.</summary>
      <param name="contributingObjects">The list of <see cref="T:System.Dynamic.DynamicMetaObject"></see> instances from which to combine restrictions.</param>
      <returns>The new set of binding restrictions.</returns>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>Represents an empty set of binding restrictions. This field is read only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>Creates the binding restriction that checks the expression for arbitrary immutable properties.</summary>
      <param name="expression">The expression representing the restrictions.</param>
      <returns>The new binding restrictions.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>Creates the binding restriction that checks the expression for object instance identity.</summary>
      <param name="expression">The expression to test.</param>
      <param name="instance">The exact object instance to test.</param>
      <returns>The new binding restrictions.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates the binding restriction that check the expression for runtime type identity.</summary>
      <param name="expression">The expression to test.</param>
      <param name="type">The exact type to test.</param>
      <returns>The new binding restrictions.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>Merges the set of binding restrictions with the current binding restrictions.</summary>
      <param name="restrictions">The set of restrictions with which to merge the current binding restrictions.</param>
      <returns>The new set of binding restrictions.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>Creates the <see cref="T:System.Linq.Expressions.Expression"></see> representing the binding restrictions.</summary>
      <returns>The expression tree representing the restrictions.</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>Describes arguments in the dynamic binding process.</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Creates a new CallInfo that represents arguments in the dynamic binding process.</summary>
      <param name="argCount">The number of arguments.</param>
      <param name="argNames">The argument names.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>Creates a new PositionalArgumentInfo.</summary>
      <param name="argCount">The number of arguments.</param>
      <param name="argNames">The argument names.</param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>The number of arguments.</summary>
      <returns>The number of arguments.</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>The argument names.</summary>
      <returns>The read-only collection of argument names.</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>Determines whether the specified CallInfo instance is considered equal to the current.</summary>
      <param name="obj">The instance of <see cref="T:System.Dynamic.CallInfo"></see> to compare with the current instance.</param>
      <returns>true if the specified instance is equal to the current one otherwise, false.</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>Serves as a hash function for the current <see cref="T:System.Dynamic.CallInfo"></see>.</summary>
      <returns>A hash code for the current <see cref="T:System.Dynamic.CallInfo"></see>.</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>Represents the convert dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.ConvertBinder"></see>.</summary>
      <param name="type">The type to convert to.</param>
      <param name="explicit">Is true if the conversion should consider explicit conversions; otherwise, false.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic convert operation.</summary>
      <param name="target">The target of the dynamic convert operation.</param>
      <param name="args">An array of arguments of the dynamic convert operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>Gets the value indicating if the conversion should consider explicit conversions.</summary>
      <returns>True if there is an explicit conversion, otherwise false.</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic convert operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic convert operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic convert operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic convert operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type"></see> object representing the result type of the operation.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>The type to convert to.</summary>
      <returns>The <see cref="T:System.Type"></see> object that represents the type to convert to.</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>Represents the dynamic create operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new intsance of the <see cref="T:System.Dynamic.CreateInstanceBinder"></see>.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic create operation.</summary>
      <param name="target">The target of the dynamic create operation.</param>
      <param name="args">An array of arguments of the dynamic create operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic create operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic create operation.</param>
      <param name="args">The arguments of the dynamic create operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic create operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic create operation.</param>
      <param name="args">The arguments of the dynamic create operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type"></see> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>Represents the dynamic delete index operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DeleteIndexBinder"></see>.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic delete index operation.</summary>
      <param name="target">The target of the dynamic delete index operation.</param>
      <param name="args">An array of arguments of the dynamic delete index operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic delete index operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic delete index operation.</param>
      <param name="indexes">The arguments of the dynamic delete index operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic delete index operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic delete index operation.</param>
      <param name="indexes">The arguments of the dynamic delete index operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type"></see> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>Represents the dynamic delete member operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DeleteIndexBinder"></see>.</summary>
      <param name="name">The name of the member to delete.</param>
      <param name="ignoreCase">Is true if the name should be matched ignoring case; false otherwise.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic delete member operation.</summary>
      <param name="target">The target of the dynamic delete member operation.</param>
      <param name="args">An array of arguments of the dynamic delete member operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic delete member operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic delete member operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic delete member operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic delete member operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>Gets the value indicating if the string comparison should ignore the case of the member name.</summary>
      <returns>True if the string comparison should ignore the case, otherwise false.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>Gets the name of the member to delete.</summary>
      <returns>The name of the member to delete.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type"></see> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>Represents the dynamic binding and a binding logic of an object participating in the dynamic binding.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DynamicMetaObject"></see> class.</summary>
      <param name="expression">The expression representing this <see cref="T:System.Dynamic.DynamicMetaObject"></see> during the dynamic binding process.</param>
      <param name="restrictions">The set of binding restrictions under which the binding is valid.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DynamicMetaObject"></see> class.</summary>
      <param name="expression">The expression representing this <see cref="T:System.Dynamic.DynamicMetaObject"></see> during the dynamic binding process.</param>
      <param name="restrictions">The set of binding restrictions under which the binding is valid.</param>
      <param name="value">The runtime value represented by the <see cref="T:System.Dynamic.DynamicMetaObject"></see>.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic binary operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.BinaryOperationBinder"></see> that represents the details of the dynamic operation.</param>
      <param name="arg">An instance of the <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the right hand side of the binary operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>Performs the binding of the dynamic conversion operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.ConvertBinder"></see> that represents the details of the dynamic operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic create instance operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.CreateInstanceBinder"></see> that represents the details of the dynamic operation.</param>
      <param name="args">An array of <see cref="T:System.Dynamic.DynamicMetaObject"></see> instances - arguments to the create instance operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic delete index operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.DeleteIndexBinder"></see> that represents the details of the dynamic operation.</param>
      <param name="indexes">An array of <see cref="T:System.Dynamic.DynamicMetaObject"></see> instances - indexes for the delete index operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Performs the binding of the dynamic delete member operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.DeleteMemberBinder"></see> that represents the details of the dynamic operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic get index operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.GetIndexBinder"></see> that represents the details of the dynamic operation.</param>
      <param name="indexes">An array of <see cref="T:System.Dynamic.DynamicMetaObject"></see> instances - indexes for the get index operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>Performs the binding of the dynamic get member operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.GetMemberBinder"></see> that represents the details of the dynamic operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.InvokeBinder"></see> that represents the details of the dynamic operation.</param>
      <param name="args">An array of <see cref="T:System.Dynamic.DynamicMetaObject"></see> instances - arguments to the invoke operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke member operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.InvokeMemberBinder"></see> that represents the details of the dynamic operation.</param>
      <param name="args">An array of <see cref="T:System.Dynamic.DynamicMetaObject"></see> instances - arguments to the invoke member operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set index operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.SetIndexBinder"></see> that represents the details of the dynamic operation.</param>
      <param name="indexes">An array of <see cref="T:System.Dynamic.DynamicMetaObject"></see> instances - indexes for the set index operation.</param>
      <param name="value">The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the value for the set index operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set member operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.SetMemberBinder"></see> that represents the details of the dynamic operation.</param>
      <param name="value">The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the value for the set member operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>Performs the binding of the dynamic unary operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.UnaryOperationBinder"></see> that represents the details of the dynamic operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>Creates a meta-object for the specified object.</summary>
      <param name="value">The object to get a meta-object for.</param>
      <param name="expression">The expression representing this <see cref="T:System.Dynamic.DynamicMetaObject"></see> during the dynamic binding process.</param>
      <returns>If the given object implements <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"></see> and is not a remote object from outside the current AppDomain, returns the object's specific meta-object returned by <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)"></see>. Otherwise a plain new meta-object with no restrictions is created and returned.</returns>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>Represents an empty array of type <see cref="T:System.Dynamic.DynamicMetaObject"></see>. This field is read only.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>The expression representing the <see cref="T:System.Dynamic.DynamicMetaObject"></see> during the dynamic binding process.</summary>
      <returns>The expression representing the <see cref="T:System.Dynamic.DynamicMetaObject"></see> during the dynamic binding process.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>Returns the enumeration of all dynamic member names.</summary>
      <returns>The list of dynamic member names.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>Gets a value indicating whether the <see cref="T:System.Dynamic.DynamicMetaObject"></see> has the runtime value.</summary>
      <returns>True if the <see cref="T:System.Dynamic.DynamicMetaObject"></see> has the runtime value, otherwise false.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>Gets the limit type of the <see cref="T:System.Dynamic.DynamicMetaObject"></see>.</summary>
      <returns><see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType"></see> if runtime value is available, a type of the <see cref="P:System.Dynamic.DynamicMetaObject.Expression"></see> otherwise.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>The set of binding restrictions under which the binding is valid.</summary>
      <returns>The set of binding restrictions.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>Gets the <see cref="T:System.Type"></see> of the runtime value or null if the <see cref="T:System.Dynamic.DynamicMetaObject"></see> has no value associated with it.</summary>
      <returns>The <see cref="T:System.Type"></see> of the runtime value or null.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>The runtime value represented by this <see cref="T:System.Dynamic.DynamicMetaObject"></see>.</summary>
      <returns>The runtime value represented by this <see cref="T:System.Dynamic.DynamicMetaObject"></see>.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>The dynamic call site binder that participates in the <see cref="T:System.Dynamic.DynamicMetaObject"></see> binding protocol.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DynamicMetaObjectBinder"></see> class.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>When overridden in the derived class, performs the binding of the dynamic operation.</summary>
      <param name="target">The target of the dynamic operation.</param>
      <param name="args">An array of arguments of the dynamic operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Performs the runtime binding of the dynamic operation on a set of arguments.</summary>
      <param name="args">An array of arguments to the dynamic operation.</param>
      <param name="parameters">The array of <see cref="T:System.Linq.Expressions.ParameterExpression"></see> instances that represent the parameters of the call site in the binding process.</param>
      <param name="returnLabel">A LabelTarget used to return the result of the dynamic binding.</param>
      <returns>An Expression that performs tests on the dynamic operation arguments, and performs the dynamic operation if the tests are valid. If the tests fail on subsequent occurrences of the dynamic operation, Bind will be called again to produce a new <see cref="T:System.Linq.Expressions.Expression"></see> for the new argument types.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>Defers the binding of the operation until later time when the runtime values of all dynamic operation arguments have been computed.</summary>
      <param name="args">An array of arguments of the dynamic operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Defers the binding of the operation until later time when the runtime values of all dynamic operation arguments have been computed.</summary>
      <param name="target">The target of the dynamic operation.</param>
      <param name="args">An array of arguments of the dynamic operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>Gets an expression that will cause the binding to be updated. It indicates that the expression's binding is no longer valid. This is typically used when the &quot;version&quot; of a dynamic object has changed.</summary>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of the resulting expression; any type is allowed.</param>
      <returns>The update expression.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type"></see> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>Enables derived types to initialize a new instance of the <see cref="T:System.Dynamic.DynamicObject"></see> type.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>Returns the enumeration of all dynamic member names.</summary>
      <returns>A sequence that contains dynamic member names.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Provides a <see cref="T:System.Dynamic.DynamicMetaObject"></see> that dispatches to the dynamic virtual methods. The object can be encapsulated inside another <see cref="T:System.Dynamic.DynamicMetaObject"></see> to provide custom behavior for individual actions. This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</summary>
      <param name="parameter">The expression that represents <see cref="T:System.Dynamic.DynamicMetaObject"></see> to dispatch to the dynamic virtual methods.</param>
      <returns>An object of the <see cref="T:System.Dynamic.DynamicMetaObject"></see> type.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>Provides implementation for binary operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</summary>
      <param name="binder">Provides information about the binary operation. The binder.Operation property returns an <see cref="T:System.Linq.Expressions.ExpressionType"></see> object. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, binder.Operation returns ExpressionType.Add.</param>
      <param name="arg">The right operand for the binary operation. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, arg is equal to second.</param>
      <param name="result">The result of the binary operation.</param>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</summary>
      <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class, binder.Type returns the <see cref="T:System.String"></see> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param>
      <param name="result">The result of the type conversion operation.</param>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>Provides the implementation for operations that initialize a new instance of a dynamic object. This method is not intended for use in C# or Visual Basic.</summary>
      <param name="binder">Provides information about the initialization operation.</param>
      <param name="args">The arguments that are passed to the object during initialization. For example, for the new SampleType(100) operation, where SampleType is the type derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class, args[0] is equal to 100.</param>
      <param name="result">The result of the initialization.</param>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>Provides the implementation for operations that delete an object by index. This method is not intended for use in C# or Visual Basic.</summary>
      <param name="binder">Provides information about the deletion.</param>
      <param name="indexes">The indexes to be deleted.</param>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.</summary>
      <param name="binder">Provides information about the deletion.</param>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class can override this method to specify dynamic behavior for indexing operations.</summary>
      <param name="binder">Provides information about the operation.</param>
      <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic), where sampleObject is derived from the DynamicObject class, indexes[0] is equal to 3.</param>
      <param name="result">The result of the index operation.</param>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</summary>
      <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class, binder.Name returns &quot;SampleProperty&quot;. The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
      <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to result.</param>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>Provides the implementation for operations that invoke an object. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</summary>
      <param name="binder">Provides information about the invoke operation.</param>
      <param name="args">The arguments that are passed to the object during the invoke operation. For example, for the sampleObject(100) operation, where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class, args[0] is equal to 100.</param>
      <param name="result">The result of the object invocation.</param>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class can override this method to specify dynamic behavior for operations such as calling a method.</summary>
      <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class, binder.Name returns &quot;SampleMethod&quot;. The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
      <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class, args[0] is equal to 100.</param>
      <param name="result">The result of the member invocation.</param>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>Provides the implementation for operations that set a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</summary>
      <param name="binder">Provides information about the operation.</param>
      <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class, indexes[0] is equal to 3.</param>
      <param name="value">The value to set to the object that has the specified index. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class, value is equal to 10.</param>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</summary>
      <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = &quot;Test&quot;, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class, binder.Name returns &quot;SampleProperty&quot;. The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
      <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = &quot;Test&quot;, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class, the value is &quot;Test&quot;.</param>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>Provides implementation for unary operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"></see> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</summary>
      <param name="binder">Provides information about the unary operation. The binder.Operation property returns an <see cref="T:System.Linq.Expressions.ExpressionType"></see> object. For example, for the negativeNumber = -number statement, where number is derived from the DynamicObject class, binder.Operation returns &quot;Negate&quot;.</param>
      <param name="result">The result of the unary operation.</param>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>Represents an object whose members can be dynamically added and removed at run time.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>Initializes a new ExpandoObject that does not have members.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <param name="item"></param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Clear">
      
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <param name="item"></param>
      <returns></returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <param name="array"></param>
      <param name="arrayIndex"></param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Count">
      <returns></returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly">
      <returns></returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <param name="item"></param>
      <returns></returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Add(System.String,System.Object)">
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#ContainsKey(System.String)">
      <param name="key"></param>
      <returns></returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Item(System.String)">
      <param name="key"></param>
      <returns></returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Keys">
      <returns></returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Remove(System.String)">
      <param name="key"></param>
      <returns></returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#TryGetValue(System.String,System.Object@)">
      <param name="key"></param>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Values">
      <returns></returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator">
      <returns></returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>The provided MetaObject will dispatch to the dynamic virtual methods. The object can be encapsulated inside another MetaObject to provide custom behavior for individual actions.</summary>
      <param name="parameter">The expression that represents the MetaObject to dispatch to the Dynamic virtual methods.</param>
      <returns>The object of the <see cref="T:System.Dynamic.DynamicMetaObject"></see> type.</returns>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>Represents the dynamic get index operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.GetIndexBinder"></see>.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic get index operation.</summary>
      <param name="target">The target of the dynamic get index operation.</param>
      <param name="args">An array of arguments of the dynamic get index operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic get index operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic get index operation.</param>
      <param name="indexes">The arguments of the dynamic get index operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic get index operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic get index operation.</param>
      <param name="indexes">The arguments of the dynamic get index operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type"></see> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>Represents the dynamic get member operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.GetMemberBinder"></see>.</summary>
      <param name="name">The name of the member to obtain.</param>
      <param name="ignoreCase">Is true if the name should be matched ignoring case; false otherwise.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic get member operation.</summary>
      <param name="target">The target of the dynamic get member operation.</param>
      <param name="args">An array of arguments of the dynamic get member operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic get member operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic get member operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic get member operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic get member operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>Gets the value indicating if the string comparison should ignore the case of the member name.</summary>
      <returns>True if the case is ignored, otherwise false.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>Gets the name of the member to obtain.</summary>
      <returns>The name of the member to obtain.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type"></see> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>Represents a dynamic object, that can have its operations bound at runtime.</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Returns the <see cref="T:System.Dynamic.DynamicMetaObject"></see> responsible for binding operations performed on this object.</summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> to bind this object.</returns>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>Represents information about a dynamic get member operation that indicates if the get member should invoke properties when they perform the get operation.</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>Gets the value indicating if this get member operation should invoke properties when they perform the get operation. The default value when this interface is not present is true.</summary>
      <returns>True if this get member operation should invoke properties when they perform the get operation; otherwise false.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>Represents the invoke dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.InvokeBinder"></see>.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke operation.</summary>
      <param name="target">The target of the dynamic invoke operation.</param>
      <param name="args">An array of arguments of the dynamic invoke operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic invoke operation.</param>
      <param name="args">The arguments of the dynamic invoke operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic invoke operation.</param>
      <param name="args">The arguments of the dynamic invoke operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type"></see> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>Represents the invoke member dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.InvokeMemberBinder"></see>.</summary>
      <param name="name">The name of the member to invoke.</param>
      <param name="ignoreCase">true if the name should be matched ignoring case; false otherwise.</param>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke member operation.</summary>
      <param name="target">The target of the dynamic invoke member operation.</param>
      <param name="args">An array of arguments of the dynamic invoke member operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic invoke operation.</param>
      <param name="args">The arguments of the dynamic invoke operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke member operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic invoke member operation.</param>
      <param name="args">The arguments of the dynamic invoke member operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic invoke member operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic invoke member operation.</param>
      <param name="args">The arguments of the dynamic invoke member operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>Gets the value indicating if the string comparison should ignore the case of the member name.</summary>
      <returns>True if the case is ignored, otherwise false.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>Gets the name of the member to invoke.</summary>
      <returns>The name of the member to invoke.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type"></see> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>Represents the dynamic set index operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.SetIndexBinder"></see>.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic set index operation.</summary>
      <param name="target">The target of the dynamic set index operation.</param>
      <param name="args">An array of arguments of the dynamic set index operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set index operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic set index operation.</param>
      <param name="indexes">The arguments of the dynamic set index operation.</param>
      <param name="value">The value to set to the collection.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic set index operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic set index operation.</param>
      <param name="indexes">The arguments of the dynamic set index operation.</param>
      <param name="value">The value to set to the collection.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type"></see> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>Represents the dynamic set member operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.SetMemberBinder"></see>.</summary>
      <param name="name">The name of the member to obtain.</param>
      <param name="ignoreCase">Is true if the name should be matched ignoring case; false otherwise.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic set member operation.</summary>
      <param name="target">The target of the dynamic set member operation.</param>
      <param name="args">An array of arguments of the dynamic set member operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set member operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic set member operation.</param>
      <param name="value">The value to set to the member.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set member operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic set member operation.</param>
      <param name="value">The value to set to the member.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>Gets the value indicating if the string comparison should ignore the case of the member name.</summary>
      <returns>True if the case is ignored, otherwise false.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>Gets the name of the member to obtain.</summary>
      <returns>The name of the member to obtain.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type"></see> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>Represents the unary dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.BinaryOperationBinder"></see> class.</summary>
      <param name="operation">The unary operation kind.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic unary operation.</summary>
      <param name="target">The target of the dynamic operation.</param>
      <param name="args">An array of arguments of the dynamic operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the unary dynamic operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic unary operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the unary dynamic operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic unary operation.</param>
      <param name="errorSuggestion">The binding result in case the binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject"></see> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>The unary operation kind.</summary>
      <returns>The object of the <see cref="T:System.Linq.Expressions.ExpressionType"></see> that represents the unary operation kind.</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type"></see> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>Represents the result of a sorting operation.</summary>
      <typeparam name="T">The type of the content of the data source.</typeparam>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>Represents the result of a sorting operation.</summary>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.</summary>
      <typeparam name="T">The type of the data in the data source.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>Provides functionality to evaluate queries against a specific data source wherein the type of the data is not specified.</summary>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable"></see> is executed.</summary>
      <returns>A <see cref="T:System.Type"></see> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable"></see>.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression"></see> that is associated with this instance of <see cref="T:System.Linq.IQueryable"></see>.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>Gets the query provider that is associated with this data source.</summary>
      <returns>The <see cref="T:System.Linq.IQueryProvider"></see> that is associated with this data source.</returns>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>Defines methods to create and execute queries that are described by an <see cref="T:System.Linq.IQueryable"></see> object.</summary>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Constructs an <see cref="T:System.Linq.IQueryable"></see> object that can evaluate the query represented by a specified expression tree.</summary>
      <param name="expression">An expression tree that represents a LINQ query.</param>
      <returns>An <see cref="T:System.Linq.IQueryable"></see> that can evaluate the query represented by the specified expression tree.</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Constructs an <see cref="T:System.Linq.IQueryable`1"></see> object that can evaluate the query represented by a specified expression tree.</summary>
      <param name="expression">An expression tree that represents a LINQ query.</param>
      <typeparam name="TElement">The type of the elements of the <see cref="T:System.Linq.IQueryable`1"></see> that is returned.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1"></see> that can evaluate the query represented by the specified expression tree.</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>Executes the query represented by a specified expression tree.</summary>
      <param name="expression">An expression tree that represents a LINQ query.</param>
      <returns>The value that results from executing the specified query.</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>Executes the strongly-typed query represented by a specified expression tree.</summary>
      <param name="expression">An expression tree that represents a LINQ query.</param>
      <typeparam name="TResult">The type of the value that results from executing the query.</typeparam>
      <returns>The value that results from executing the specified query.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IRuntimeVariables">
      <summary>Represents the values of run-time variables.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Count">
      <summary>Gets a count of the run-time variables.</summary>
      <returns>The number of run-time variables.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Item(System.Int32)">
      <summary>Gets the value of the run-time variable at the specified index.</summary>
      <param name="index">The zero-based index of the run-time variable whose value is to be returned.</param>
      <returns>The value of the run-time variable.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1">
      <summary>The builder for read only collection.</summary>
      <typeparam name="T">The type of the collection element.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor">
      <summary>Constructs a ReadOnlyCollectionBuilder.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Constructs a ReadOnlyCollectionBuilder, copying contents of the given collection.</summary>
      <param name="collection">Collection to copy elements from.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)">
      <summary>Constructs a ReadOnlyCollectionBuilder with a given initial capacity. The contents are empty but builder will have reserved room for the given number of elements before any reallocations are required.</summary>
      <param name="capacity">Initial capacity.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)">
      <summary>Adds an item to the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see>.</summary>
      <param name="item">The object to add to the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see>.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity">
      <summary>Gets and sets the capacity of this ReadOnlyCollectionBuilder.</summary>
      <returns>The capacity of this ReadOnlyCollectionBuilder.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear">
      <summary>Removes all items from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see>.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)">
      <summary>Determines whether the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see> contains a specific value</summary>
      <param name="item">the object to locate in the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see>.</param>
      <returns>true if item is found in the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see> to an <see cref="T:System.Array"></see>, starting at particular <see cref="T:System.Array"></see> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see>.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count">
      <summary>Returns number of elements in the ReadOnlyCollectionBuilder.</summary>
      <returns>The number of elements in the ReadOnlyCollectionBuilder.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)">
      <summary>Returns the index of the first occurrence of a given value in the builder.</summary>
      <param name="item">An item to search for.</param>
      <returns>The index of the first occurrence of an item.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)">
      <summary>Inserts an item to the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see> at the specified index.</summary>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see>.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see>.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see>.</param>
      <returns>true if item was successfully removed from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see>.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see> item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)">
      <summary>Reverses the order of the elements in the specified range.</summary>
      <param name="index">The zero-based starting index of the range to reverse.</param>
      <param name="count">The number of elements in the range to reverse.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse">
      <summary>Reverses the order of the elements in the entire <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see>.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray">
      <summary>Copies the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see> to a new array.</summary>
      <returns>An array containing copies of the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see>.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection">
      <summary>Creates a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"></see> containing all of the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see>, avoiding copying the elements to the new array if possible. Resets the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"></see> after the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"></see> has been created.</summary>
      <returns>A new instance of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"></see>.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList"></see>.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>.</param>
      <returns>The position into which the new element was inserted.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList"></see> contains a specific value.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
      <returns>true if <paramref name="item">item</paramref> is found in the <see cref="T:System.Collections.IList"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList"></see>.</summary>
      <param name="value">The object to locate in the <see cref="T:System.Collections.IList"></see>.</param>
      <returns>The index of <paramref name="item">item</paramref> if found in the list; otherwise, –1.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Collections.IList"></see> at the specified index.</summary>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="value">The object to insert into the <see cref="T:System.Collections.IList"></see>.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IList"></see> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IList"></see> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"></see>.</summary>
      <param name="value">The object to remove from the <see cref="T:System.Collections.IList"></see>.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuleCache`1">
      <summary>Represents a cache of runtime binding rules.</summary>
      <typeparam name="T">The delegate type.</typeparam>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>Represents an expression that has a binary operator.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)"></see>.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>True if the expression tree node can be reduced, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>Gets the type conversion function that is used by a coalescing or compound assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> that represents a type conversion function.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator.</summary>
      <returns>true if the node represents a lifted call; otherwise, false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.</summary>
      <returns>true if the operator's return type is lifted to a nullable type; otherwise, false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>Gets the left operand of the binary operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the left operand of the binary operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>Gets the implementing method for the binary operation.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo"></see> that represents the implementing method.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>Reduces the binary expression node to a simpler expression.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>Gets the right operand of the binary operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the right operand of the binary operation.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="left">The <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property of the result.</param>
      <param name="conversion">The <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> property of the result.</param>
      <param name="right">The <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>Represents a block that contains a sequence of expressions where variables can be defined.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)"></see>.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>Gets the expressions in this block.</summary>
      <returns>The read-only collection containing all the expressions in this block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension"></see> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>Gets the last expression in this block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression"></see> object representing the last expression in this block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.BlockExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="variables">The <see cref="P:System.Linq.Expressions.BlockExpression.Variables"></see> property of the result.</param>
      <param name="expressions">The <see cref="P:System.Linq.Expressions.BlockExpression.Expressions"></see> property of the result.</param>
      <returns>This expression if no children changed, or an expression with the updated children.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>Gets the variables defined in this block.</summary>
      <returns>The read-only collection containing all the variables defined in this block.</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>Represents a catch statement in a try block.</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>Gets the body of the catch block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression"></see> object representing the catch body.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>Gets the body of the <see cref="T:System.Linq.Expressions.CatchBlock"></see> filter.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression"></see> object representing the body of the <see cref="T:System.Linq.Expressions.CatchBlock"></see> filter.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>Gets the type of <see cref="T:System.Exception"></see> this handler catches.</summary>
      <returns>The <see cref="T:System.Type"></see> object representing the type of <see cref="T:System.Exception"></see> this handler catches.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.</summary>
      <returns>A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="variable">The <see cref="P:System.Linq.Expressions.CatchBlock.Variable"></see> property of the result.</param>
      <param name="filter">The <see cref="P:System.Linq.Expressions.CatchBlock.Filter"></see> property of the result.</param>
      <param name="body">The <see cref="P:System.Linq.Expressions.CatchBlock.Body"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>Gets a reference to the <see cref="T:System.Exception"></see> object caught by this handler.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ParameterExpression"></see> object representing a reference to the <see cref="T:System.Exception"></see> object caught by this handler.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>Represents an expression that has a conditional operator.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)"></see>.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>Gets the expression to execute if the test evaluates to false.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the expression to execute if the test is false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>Gets the expression to execute if the test evaluates to true.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the expression to execute if the test is true.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension"></see> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>Gets the test of the conditional operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the test of the conditional operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ConditionalExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression</summary>
      <param name="test">The <see cref="P:System.Linq.Expressions.ConditionalExpression.Test"></see> property of the result.</param>
      <param name="ifTrue">The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue"></see> property of the result.</param>
      <param name="ifFalse">The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse"></see> property of the result.</param>
      <returns>This expression if no children changed, or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>Represents an expression that has a constant value.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)"></see>.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension"></see> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ConstantExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>Gets the value of the constant expression.</summary>
      <returns>An <see cref="T:System.Object"></see> equal to the value of the represented expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>Emits or clears a sequence point for debug information. This allows the debugger to highlight the correct source code when debugging.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)"></see>.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>Gets the <see cref="T:System.Linq.Expressions.SymbolDocumentInfo"></see> that represents the source file.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo"></see> that represents the source file.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>Gets the end column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression"></see>.</summary>
      <returns>The number of the end column of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>Gets the end line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression"></see>.</summary>
      <returns>The number of the end line of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>Gets the value to indicate if the <see cref="T:System.Linq.Expressions.DebugInfoExpression"></see> is for clearing a sequence point.</summary>
      <returns>True if the <see cref="T:System.Linq.Expressions.DebugInfoExpression"></see> is for clearing a sequence point, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression"></see>.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>Gets the start column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression"></see>.</summary>
      <returns>The number of the start column of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>Gets the start line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression"></see>.</summary>
      <returns>The number of the start line of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>Represents the default value of a type or an empty expression.</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension"></see> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.DefaultExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>Represents a dynamic operation.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)"></see>.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>Gets the arguments to the dynamic operation.</summary>
      <returns>The read-only collections containing the arguments to the dynamic operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>Gets the <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see>, which determines the run-time behavior of the dynamic site.</summary>
      <returns>The <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see>, which determines the run-time behavior of the dynamic site.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>Gets the type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite"></see>.</summary>
      <returns>The <see cref="T:System.Type"></see> object representing the type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see>.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see>,  and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see>.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see>,  and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see>.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see>, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see>.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see>, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see>.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see>, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see>.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <param name="arg3">The fourth argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see>, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see> and four arguments.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite"></see>.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <param name="arg3">The fourth argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see>, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType"></see>, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see>, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see> and three arguments.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite"></see>.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see>, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType"></see>, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see>, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see> and two arguments.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite"></see>.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see>, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType"></see>, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see>, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see> and one argument.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite"></see>.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see>, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType"></see>, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see>, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see>.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite"></see>.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see>, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType"></see>, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see>, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see>.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite"></see>.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see>, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType"></see>, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see>, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension"></see> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.DynamicExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Compares the value sent to the parameter, arguments, to the Arguments property of the current instance of DynamicExpression. If the values of the parameter and the property are equal, the current instance is returned. If they are not equal, a new DynamicExpression instance is returned that is identical to the current instance except that the Arguments property is set to the value of parameter arguments.</summary>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <returns>Returns <see cref="T:System.Int32"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <param name="index">The index of the argument.</param>
      <returns>Returns <see cref="T:System.Linq.Expressions.Expression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite">
      <summary>Optionally creates the CallSite and returns the CallSite for the DynamicExpression’s polymorphic inline cache.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <returns>Returns <see cref="T:System.Object"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])">
      <summary>Rewrite this node replacing the dynamic expression’s arguments with the provided values.  The number of args needs to match the number of the current expression.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.  This helper method allows re-writing of nodes to be independent of the specific implementation class deriving from DynamicExpression that is being used at the call site.</summary>
      <param name="args">The arguments.</param>
      <returns>Returns <see cref="T:System.Linq.Expressions.Expression"></see>, the rewritten expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary>Represents a visitor or rewriter for dynamic expression trees.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor"></see>.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.DynamicExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>Returns <see cref="T:System.Linq.Expressions.Expression"></see>, the modified expression, if it or any subexpression is modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>Represents an initializer for a single element of an <see cref="T:System.Collections.IEnumerable"></see> collection.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>Gets the instance method that is used to add an element to an <see cref="T:System.Collections.IEnumerable"></see> collection.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo"></see> that represents an instance method that adds an element to a collection.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>Gets the collection of arguments that are passed to a method that adds an element to an <see cref="T:System.Collections.IEnumerable"></see> collection.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"></see> of <see cref="T:System.Linq.Expressions.Expression"></see> objects that represent the arguments for a method that adds an element to a collection.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>Returns a textual representation of an <see cref="T:System.Linq.Expressions.ElementInit"></see> object.</summary>
      <returns>A textual representation of the <see cref="T:System.Linq.Expressions.ElementInit"></see> object.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.ElementInit.Arguments"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <returns>Returns <see cref="T:System.Int32"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <param name="index">The index of the argument.</param>
      <returns>Returns <see cref="T:System.Linq.Expressions.Expression"></see>.</returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>Represents a strongly typed lambda expression as a data structure in the form of an expression tree. This class cannot be inherited.</summary>
      <typeparam name="TDelegate">The type of the delegate that the <see cref="T:System.Linq.Expressions.Expression`1"></see> represents.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>Compiles the lambda expression described by the expression tree into executable code and produces a delegate that represents the lambda expression.</summary>
      <returns>A delegate of type <paramref name="TDelegate">TDelegate</paramref> that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.Expression`1"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
      <param name="preferInterpretation"></param>
      <returns></returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Produces a delegate that represents the lambda expression.</summary>
      <param name="debugInfoGenerator">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</param>
      <returns>A delegate containing the compiled version of the lambda.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="body">The <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> property of the result.</param>
      <param name="parameters">The <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>Provides the base class from which the classes that represent expression tree nodes are derived. It also contains static (Shared in Visual Basic) factory methods to create the various node types. This is an abstract class.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression"></see>.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.Expressions.Expression"></see> class.</summary>
      <param name="nodeType">The <see cref="T:System.Linq.Expressions.ExpressionType"></see> to set as the node type.</param>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type"></see> of this <see cref="T:System.Linq.Expressions.Expression"></see>.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)"></see>.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an arithmetic addition operation that does not have overflow checking.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The addition operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the addition operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an addition assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an addition assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an addition assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an addition assignment operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an addition assignment operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an addition assignment operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an arithmetic addition operation that has overflow checking.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The addition operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the addition operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise AND operation.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise AND operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise AND operation. The implementing method can be specified.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the bitwise AND operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a conditional AND operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the bitwise AND operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.   -or-  <paramref name="method">method</paramref> is null and <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a conditional AND operation that evaluates the second operand only if the first operand evaluates to true.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise AND operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.   -or-  <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise AND assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise AND assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise AND assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression"></see> to access a multidimensional array.</summary>
      <param name="array">An expression that represents the multidimensional array.</param>
      <param name="indexes">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> containing expressions used to index the array.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression"></see> to access an array.</summary>
      <param name="array">An expression representing the array to index.</param>
      <param name="indexes">An array that contains expressions used to index the array.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that represents applying an array index operator to a multidimensional array.</summary>
      <param name="array">An array of <see cref="T:System.Linq.Expressions.Expression"></see> instances - indexes for the array index operation.</param>
      <param name="indexes">An array of <see cref="T:System.Linq.Expressions.Expression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call"></see> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"></see> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> or <paramref name="indexes">indexes</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref>.Type does not represent an array type.   -or-   The rank of <paramref name="array">array</paramref>.Type does not match the number of elements in <paramref name="indexes">indexes</paramref>.   -or-   The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of one or more elements of <paramref name="indexes">indexes</paramref> does not represent the <see cref="T:System.Int32"></see> type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that represents applying an array index operator to an array of rank more than one.</summary>
      <param name="array">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"></see> property equal to.</param>
      <param name="indexes">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.Expression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call"></see> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"></see> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> or <paramref name="indexes">indexes</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref>.Type does not represent an array type.   -or-   The rank of <paramref name="array">array</paramref>.Type does not match the number of elements in <paramref name="indexes">indexes</paramref>.   -or-   The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of one or more elements of <paramref name="indexes">indexes</paramref> does not represent the <see cref="T:System.Int32"></see> type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents applying an array index operator to an array of rank one.</summary>
      <param name="array">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="index">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> or <paramref name="index">index</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref>.Type does not represent an array type.   -or-  <paramref name="array">array</paramref>.Type represents an array type whose rank is not 1.   -or-  <paramref name="index">index</paramref>.Type does not represent the <see cref="T:System.Int32"></see> type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents an expression for obtaining the length of a one-dimensional array.</summary>
      <param name="array">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength"></see> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property equal to <paramref name="array">array</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref>.Type does not represent an array type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Assign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberAssignment"></see> that represents the initialization of a field or property.</summary>
      <param name="member">A <see cref="T:System.Reflection.MemberInfo"></see> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> property equal to.</param>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberAssignment"></see> that has <see cref="P:System.Linq.Expressions.MemberBinding.BindingType"></see> equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment"></see> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> and <see cref="P:System.Linq.Expressions.MemberAssignment.Expression"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="member">member</paramref> or <paramref name="expression">expression</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="member">member</paramref> does not represent a field or property.   -or-   The property represented by <paramref name="member">member</paramref> does not have a set accessor.   -or-  <paramref name="expression">expression</paramref>.Type is not assignable to the type of the field or property that <paramref name="member">member</paramref> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberAssignment"></see> that represents the initialization of a member by using a property accessor method.</summary>
      <param name="propertyAccessor">A <see cref="T:System.Reflection.MethodInfo"></see> that represents a property accessor method.</param>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberAssignment"></see> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType"></see> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment"></see>, the <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> property set to the <see cref="T:System.Reflection.PropertyInfo"></see> that represents the property accessed in <paramref name="propertyAccessor">propertyAccessor</paramref>, and the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression"></see> property set to <paramref name="expression">expression</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="propertyAccessor">propertyAccessor</paramref> or <paramref name="expression">expression</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="propertyAccessor">propertyAccessor</paramref> does not represent a property accessor method.   -or-   The property accessed by <paramref name="propertyAccessor">propertyAccessor</paramref> does not have a set accessor.   -or-  <paramref name="expression">expression</paramref>.Type is not assignable to the type of the field or property that <paramref name="member">member</paramref> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression"></see> that contains the given variables and expressions.</summary>
      <param name="type">The result type of the block.</param>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression"></see> that contains three expressions and has no variables.</summary>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
      <param name="arg2">The third expression in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression"></see> that contains five expressions and has no variables.</summary>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
      <param name="arg2">The third expression in the block.</param>
      <param name="arg3">The fourth expression in the block.</param>
      <param name="arg4">The fifth expression in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression"></see> that contains the given variables and expressions.</summary>
      <param name="type">The result type of the block.</param>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression"></see> that contains the given expressions, has no variables and has specific result type.</summary>
      <param name="type">The result type of the block.</param>
      <param name="expressions">The expressions in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression"></see> that contains four expressions and has no variables.</summary>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
      <param name="arg2">The third expression in the block.</param>
      <param name="arg3">The fourth expression in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression"></see> that contains two expressions and has no variables.</summary>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression"></see> that contains the given variables and expressions.</summary>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression"></see> that contains the given variables and expressions.</summary>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression"></see> that contains the given expressions and has no variables.</summary>
      <param name="expressions">The expressions in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression"></see> that contains the given expressions and has no variables.</summary>
      <param name="expressions">The expressions in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression"></see> that contains the given expressions, has no variables and has specific result type.</summary>
      <param name="type">The result type of the block.</param>
      <param name="expressions">The expressions in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression"></see> representing a break statement.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget"></see> that the <see cref="T:System.Linq.Expressions.GotoExpression"></see> will jump to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression"></see> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind"></see> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target"></see> property set to <paramref name="target">target</paramref>, and a null value to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression"></see> representing a break statement. The value passed to the label upon jumping can be specified.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget"></see> that the <see cref="T:System.Linq.Expressions.GotoExpression"></see> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression"></see> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind"></see> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target"></see> property set to <paramref name="target">target</paramref>, and <paramref name="value">value</paramref> to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression"></see> representing a break statement with the specified type.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget"></see> that the <see cref="T:System.Linq.Expressions.GotoExpression"></see> will jump to.</param>
      <param name="type">An <see cref="T:System.Type"></see> to set the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression"></see> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind"></see> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target"></see> property set to <paramref name="target">target</paramref>, and the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property set to <paramref name="type">type</paramref>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression"></see> representing a break statement with the specified type. The value passed to the label upon jumping can be specified.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget"></see> that the <see cref="T:System.Linq.Expressions.GotoExpression"></see> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type"></see> to set the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression"></see> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind"></see> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target"></see> property set to <paramref name="target">target</paramref>, the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property set to <paramref name="type">type</paramref>, and <paramref name="value">value</paramref> to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that represents a call to a static method that takes five arguments.</summary>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the third argument.</param>
      <param name="arg3">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the fourth argument.</param>
      <param name="arg4">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the fifth argument.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call"></see> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"></see> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="method">method</paramref> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that represents a call to a method that takes three arguments.</summary>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression"></see> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo"></see> that represents the target method.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the third argument.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call"></see> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"></see> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that represents a call to a static (Shared in Visual Basic) method by calling the appropriate factory method.</summary>
      <param name="type">The <see cref="T:System.Type"></see> that specifies the type that contains the specified static (Shared in Visual Basic) method.</param>
      <param name="methodName">The name of the method.</param>
      <param name="typeArguments">An array of <see cref="T:System.Type"></see> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"></see> objects that represent the arguments to the method.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call"></see>, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> property set to the <see cref="T:System.Reflection.MethodInfo"></see> that represents the specified static (Shared in Visual Basic) method, and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments"></see> property set to the specified arguments.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> or <paramref name="methodName">methodName</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No method whose name is <paramref name="methodName">methodName</paramref>, whose type parameters match <paramref name="typeArguments">typeArguments</paramref>, and whose parameter types match <paramref name="arguments">arguments</paramref> is found in <paramref name="type">type</paramref> or its base types.   -or-   More than one method whose name is <paramref name="methodName">methodName</paramref>, whose type parameters match <paramref name="typeArguments">typeArguments</paramref>, and whose parameter types match <paramref name="arguments">arguments</paramref> is found in <paramref name="type">type</paramref> or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that represents a call to a static method that takes three arguments.</summary>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the third argument.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call"></see> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"></see> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="method">method</paramref> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that represents a call to a method by calling the appropriate factory method.</summary>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression"></see> whose <see cref="P:System.Linq.Expressions.Expression.Type"></see> property value will be searched for a specific method.</param>
      <param name="methodName">The name of the method.</param>
      <param name="typeArguments">An array of <see cref="T:System.Type"></see> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"></see> objects that represents the arguments to the method.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call"></see>, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"></see> property equal to <paramref name="instance">instance</paramref>, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> set to the <see cref="T:System.Reflection.MethodInfo"></see> that represents the specified instance method, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments"></see> set to the specified arguments.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="instance">instance</paramref> or <paramref name="methodName">methodName</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No method whose name is <paramref name="methodName">methodName</paramref>, whose type parameters match <paramref name="typeArguments">typeArguments</paramref>, and whose parameter types match <paramref name="arguments">arguments</paramref> is found in <paramref name="instance">instance</paramref>.Type or its base types.   -or-   More than one method whose name is <paramref name="methodName">methodName</paramref>, whose type parameters match <paramref name="typeArguments">typeArguments</paramref>, and whose parameter types match <paramref name="arguments">arguments</paramref> is found in <paramref name="instance">instance</paramref>.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that represents a call to a method that takes two arguments.</summary>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression"></see> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo"></see> that represents the target method.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the second argument.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call"></see> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"></see> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that represents a call to a static method that takes four arguments.</summary>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the third argument.</param>
      <param name="arg3">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the fourth argument.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call"></see> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"></see> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="method">method</paramref> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that represents a call to a method that takes arguments.</summary>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression"></see> that specifies the instance for an instance method call (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call"></see> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"></see>, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see>, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="method">method</paramref> is null.   -or-  <paramref name="instance">instance</paramref> is null and <paramref name="method">method</paramref> represents an instance method.   -or-  <paramref name="arguments">arguments</paramref> is not null and one or more of its elements is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="instance">instance</paramref>.Type is not assignable to the declaring type of the method represented by <paramref name="method">method</paramref>.   -or-   The number of elements in <paramref name="arguments">arguments</paramref> does not equal the number of parameters for the method represented by <paramref name="method">method</paramref>.   -or-   One or more of the elements of <paramref name="arguments">arguments</paramref> is not assignable to the corresponding parameter for the method represented by <paramref name="method">method</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that represents a call to a method that takes arguments.</summary>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"></see> property equal to (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.Expression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call"></see> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"></see>, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see>, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="method">method</paramref> is null.   -or-  <paramref name="instance">instance</paramref> is null and <paramref name="method">method</paramref> represents an instance method.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="instance">instance</paramref>.Type is not assignable to the declaring type of the method represented by <paramref name="method">method</paramref>.   -or-   The number of elements in <paramref name="arguments">arguments</paramref> does not equal the number of parameters for the method represented by <paramref name="method">method</paramref>.   -or-   One or more of the elements of <paramref name="arguments">arguments</paramref> is not assignable to the corresponding parameter for the method represented by <paramref name="method">method</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that represents a call to a static (Shared in Visual Basic) method that has arguments.</summary>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> that represents a static (Shared in Visual Basic) method to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call"></see> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="method">method</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in <paramref name="arguments">arguments</paramref> does not equal the number of parameters for the method represented by <paramref name="method">method</paramref>.   -or-   One or more of the elements of <paramref name="arguments">arguments</paramref> is not assignable to the corresponding parameter for the method represented by <paramref name="method">method</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that represents a call to a static (Shared in Visual Basic) method that takes one argument.</summary>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the first argument.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call"></see> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"></see> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="method">method</paramref> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that represents a call to a static (Shared in Visual Basic) method.</summary>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo"></see> that represents the target method.</param>
      <param name="arguments">A collection of <see cref="T:System.Linq.Expressions.Expression"></see> that represents the call arguments.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call"></see> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"></see> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that represents a call to a method that takes no arguments.</summary>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression"></see> that specifies the instance for an instance method call (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call"></see> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"></see> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="method">method</paramref> is null.   -or-  <paramref name="instance">instance</paramref> is null and <paramref name="method">method</paramref> represents an instance method.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="instance">instance</paramref>.Type is not assignable to the declaring type of the method represented by <paramref name="method">method</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that represents a call to a static method that takes two arguments.</summary>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the second argument.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call"></see> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"></see> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="method">method</paramref> is null.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.</summary>
      <returns>True if the node can be reduced, otherwise false.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock"></see> representing a catch statement with a reference to the caught <see cref="T:System.Exception"></see> object for use in the handler body.</summary>
      <param name="variable">A <see cref="T:System.Linq.Expressions.ParameterExpression"></see> representing a reference to the <see cref="T:System.Exception"></see> object caught by this handler.</param>
      <param name="body">The body of the catch statement.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock"></see> representing a catch statement.</summary>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type"></see> of <see cref="T:System.Exception"></see> this <see cref="T:System.Linq.Expressions.CatchBlock"></see> will handle.</param>
      <param name="body">The body of the catch statement.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock"></see> representing a catch statement with an <see cref="T:System.Exception"></see> filter and a reference to the caught <see cref="T:System.Exception"></see> object.</summary>
      <param name="variable">A <see cref="T:System.Linq.Expressions.ParameterExpression"></see> representing a reference to the <see cref="T:System.Exception"></see> object caught by this handler.</param>
      <param name="body">The body of the catch statement.</param>
      <param name="filter">The body of the <see cref="T:System.Exception"></see> filter.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock"></see> representing a catch statement with an <see cref="T:System.Exception"></see> filter but no reference to the caught <see cref="T:System.Exception"></see> object.</summary>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type"></see> of <see cref="T:System.Exception"></see> this <see cref="T:System.Linq.Expressions.CatchBlock"></see> will handle.</param>
      <param name="body">The body of the catch statement.</param>
      <param name="filter">The body of the <see cref="T:System.Exception"></see> filter.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression"></see> for clearing a sequence point.</summary>
      <param name="document">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo"></see> that represents the source file.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression"></see> for clearning a sequence point.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a coalescing operation, given a conversion function.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type are not convertible to each other.   -or-  <paramref name="conversion">conversion</paramref> is not null and <paramref name="conversion">conversion</paramref>.Type is a delegate type that does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of <paramref name="left">left</paramref> does not represent a reference type or a nullable value type.   -or-   The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of <paramref name="left">left</paramref> represents a type that is not assignable to the parameter type of the delegate type <paramref name="conversion">conversion</paramref>.Type.   -or-   The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of <paramref name="right">right</paramref> is not equal to the return type of the delegate type <paramref name="conversion">conversion</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a coalescing operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of <paramref name="left">left</paramref> does not represent a reference type or a nullable value type.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type are not convertible to each other.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression"></see> that represents a conditional statement.</summary>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test"></see> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue"></see> property equal to.</param>
      <param name="ifFalse">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional"></see> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test"></see>, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue"></see>, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="test">test</paramref> or <paramref name="ifTrue">ifTrue</paramref> or <paramref name="ifFalse">ifFalse</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="test">test</paramref>.Type is not <see cref="T:System.Boolean"></see>.   -or-  <paramref name="ifTrue">ifTrue</paramref>.Type is not equal to <paramref name="ifFalse">ifFalse</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression"></see> that represents a conditional statement.</summary>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test"></see> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue"></see> property equal to.</param>
      <param name="ifFalse">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse"></see> property equal to.</param>
      <param name="type">A <see cref="P:System.Linq.Expressions.Expression.Type"></see> to set the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional"></see> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test"></see>, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue"></see>, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConstantExpression"></see> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value"></see> property set to the specified value.</summary>
      <param name="value">An <see cref="T:System.Object"></see> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ConstantExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant"></see> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value"></see> property set to the specified value.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConstantExpression"></see> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value"></see> and <see cref="P:System.Linq.Expressions.Expression.Type"></see> properties set to the specified values.</summary>
      <param name="value">An <see cref="T:System.Object"></see> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value"></see> property equal to.</param>
      <param name="type">A <see cref="T:System.Type"></see> to set the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ConstantExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant"></see> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value"></see> and <see cref="P:System.Linq.Expressions.Expression.Type"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> is not null and <paramref name="type">type</paramref> is not assignable from the dynamic type of <paramref name="value">value</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression"></see> representing a continue statement.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget"></see> that the <see cref="T:System.Linq.Expressions.GotoExpression"></see> will jump to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression"></see> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind"></see> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target"></see> property set to <paramref name="target">target</paramref>, and a null value to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression"></see> representing a continue statement with the specified type.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget"></see> that the <see cref="T:System.Linq.Expressions.GotoExpression"></see> will jump to.</param>
      <param name="type">An <see cref="T:System.Type"></see> to set the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression"></see> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind"></see> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target"></see> property set to <paramref name="target">target</paramref>, the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property set to <paramref name="type">type</paramref>, and a null value to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents a type conversion operation.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property equal to.</param>
      <param name="type">A <see cref="T:System.Type"></see> to set the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert"></see> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> and <see cref="P:System.Linq.Expressions.Expression.Type"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> or <paramref name="type">type</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression">expression</paramref>.Type and <paramref name="type">type</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents a conversion operation for which the implementing method is specified.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property equal to.</param>
      <param name="type">A <see cref="T:System.Type"></see> to set the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert"></see> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see>, <see cref="P:System.Linq.Expressions.Expression.Type"></see>, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> or <paramref name="type">type</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression">expression</paramref>.Type and <paramref name="type">type</paramref>.   -or-  <paramref name="expression">expression</paramref>.Type is not assignable to the argument type of the method represented by <paramref name="method">method</paramref>.   -or-   The return type of the method represented by <paramref name="method">method</paramref> is not assignable to <paramref name="type">type</paramref>.   -or-  <paramref name="expression">expression</paramref>.Type or <paramref name="type">type</paramref> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method">method</paramref>.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method that matches the <paramref name="method">method</paramref> description was found.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents a conversion operation that throws an exception if the target type is overflowed.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property equal to.</param>
      <param name="type">A <see cref="T:System.Type"></see> to set the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked"></see> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> and <see cref="P:System.Linq.Expressions.Expression.Type"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> or <paramref name="type">type</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression">expression</paramref>.Type and <paramref name="type">type</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property equal to.</param>
      <param name="type">A <see cref="T:System.Type"></see> to set the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked"></see> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see>, <see cref="P:System.Linq.Expressions.Expression.Type"></see>, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> or <paramref name="type">type</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression">expression</paramref>.Type and <paramref name="type">type</paramref>.   -or-  <paramref name="expression">expression</paramref>.Type is not assignable to the argument type of the method represented by <paramref name="method">method</paramref>.   -or-   The return type of the method represented by <paramref name="method">method</paramref> is not assignable to <paramref name="type">type</paramref>.   -or-  <paramref name="expression">expression</paramref>.Type or <paramref name="type">type</paramref> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method">method</paramref>.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method that matches the <paramref name="method">method</paramref> description was found.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression"></see> with the specified span.</summary>
      <param name="document">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo"></see> that represents the source file.</param>
      <param name="startLine">The start line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression"></see>. Must be greater than 0.</param>
      <param name="startColumn">The start column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression"></see>. Must be greater than 0.</param>
      <param name="endLine">The end line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression"></see>. Must be greater or equal than the start line.</param>
      <param name="endColumn">The end column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression"></see>. If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the decrementing of the expression by 1.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to decrement.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the decremented expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the decrementing of the expression by 1.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to decrement.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> that represents the implementing method.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the decremented expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DefaultExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property set to the specified type.</summary>
      <param name="type">A <see cref="T:System.Type"></see> to set the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DefaultExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default"></see> and the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property set to the specified type.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an arithmetic division operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The division operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an arithmetic division operation. The implementing method can be specified.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the division operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a division assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a division assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a division assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see>.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <param name="arg3">The fourth argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see>.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see>.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see>.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see>.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see>.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.ElementInit"></see>, given an <see cref="T:System.Collections.Generic.IEnumerable`1"></see> as the second argument.</summary>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod"></see> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.Expression"></see> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments"></see> property equal to.</param>
      <returns>An <see cref="T:System.Linq.Expressions.ElementInit"></see> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod"></see> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="addMethod">addMethod</paramref> or <paramref name="arguments">arguments</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The method that <paramref name="addMethod">addMethod</paramref> represents is not named &quot;Add&quot; (case insensitive).   -or-   The method that <paramref name="addMethod">addMethod</paramref> represents is not an instance method.   -or-  <paramref name="arguments">arguments</paramref> does not contain the same number of elements as the number of parameters for the method that <paramref name="addMethod">addMethod</paramref> represents.   -or-   The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of one or more elements of <paramref name="arguments">arguments</paramref> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod">addMethod</paramref> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.ElementInit"></see>, given an array of values as the second argument.</summary>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod"></see> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"></see> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments"></see> property equal to.</param>
      <returns>An <see cref="T:System.Linq.Expressions.ElementInit"></see> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod"></see> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="addMethod">addMethod</paramref> or <paramref name="arguments">arguments</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The method that addMethod represents is not named &quot;Add&quot; (case insensitive).   -or-   The method that addMethod represents is not an instance method.   -or-   arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.   -or-   The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of one or more elements of <paramref name="arguments">arguments</paramref> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod">addMethod</paramref> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>Creates an empty expression that has <see cref="T:System.Void"></see> type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DefaultExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default"></see> and the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property set to <see cref="T:System.Void"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an equality comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The equality operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an equality comparison. The implementing method can be specified.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the equality operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise XOR operation, using op_ExclusiveOr for user-defined types. The implementing method can be specified.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the XOR operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise XOR operation, using op_ExclusiveOr for user-defined types.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The XOR operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise XOR assignment operation, using op_ExclusiveOr for user-defined types.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise XOR assignment operation, using op_ExclusiveOr for user-defined types.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise XOR assignment operation, using op_ExclusiveOr for user-defined types.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression"></see> that represents accessing a field.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression"></see> property equal to. For static (Shared in Visual Basic), expression must be null.</param>
      <param name="field">The <see cref="T:System.Reflection.FieldInfo"></see> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess"></see> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression"></see> and <see cref="P:System.Linq.Expressions.MemberExpression.Member"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="field">field</paramref> is null.   -or-   The field represented by <paramref name="field">field</paramref> is not static (Shared in Visual Basic) and <paramref name="expression">expression</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="expression">expression</paramref>.Type is not assignable to the declaring type of the field represented by <paramref name="field">field</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression"></see> that represents accessing a field given the name of the field.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> whose <see cref="P:System.Linq.Expressions.Expression.Type"></see> contains a field named fieldName. This can be null for static fields.</param>
      <param name="fieldName">The name of a field to be accessed.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess"></see>, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression"></see> property set to <paramref name="expression">expression</paramref>, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member"></see> property set to the <see cref="T:System.Reflection.FieldInfo"></see> that represents the field denoted by <paramref name="fieldName">fieldName</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> or <paramref name="fieldName">fieldName</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">No field named <paramref name="fieldName">fieldName</paramref> is defined in <paramref name="expression">expression</paramref>.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression"></see> that represents accessing a field.</summary>
      <param name="expression">The containing object of the field. This can be null for static fields.</param>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type"></see> that contains the field.</param>
      <param name="fieldName">The field to be accessed.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.MemberExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>Creates a <see cref="T:System.Type"></see> object that represents a generic System.Action delegate type that has specific type arguments.</summary>
      <param name="typeArgs">An array of up to sixteen <see cref="T:System.Type"></see> objects that specify the type arguments for the System.Action delegate type.</param>
      <returns>The type of a System.Action delegate that has the specified type arguments.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="typeArgs">typeArgs</paramref> contains more than sixteen elements.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="typeArgs">typeArgs</paramref> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>Gets a <see cref="P:System.Linq.Expressions.Expression.Type"></see> object that represents a generic System.Func or System.Action delegate type that has specific type arguments.</summary>
      <param name="typeArgs">The type arguments of the delegate.</param>
      <returns>The delegate type.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>Creates a <see cref="P:System.Linq.Expressions.Expression.Type"></see> object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</summary>
      <param name="typeArgs">An array of one to seventeen <see cref="T:System.Type"></see> objects that specify the type arguments for the System.Func delegate type.</param>
      <returns>The type of a System.Func delegate that has the specified type arguments.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="typeArgs">typeArgs</paramref> contains fewer than one or more than seventeen elements.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="typeArgs">typeArgs</paramref> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression"></see> representing a &quot;go to&quot; statement with the specified type. The value passed to the label upon jumping can be specified.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget"></see> that the <see cref="T:System.Linq.Expressions.GotoExpression"></see> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type"></see> to set the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression"></see> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind"></see> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target"></see> property set to <paramref name="target">target</paramref>, the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property set to <paramref name="type">type</paramref>, and <paramref name="value">value</paramref> to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression"></see> representing a &quot;go to&quot; statement with the specified type.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget"></see> that the <see cref="T:System.Linq.Expressions.GotoExpression"></see> will jump to.</param>
      <param name="type">An <see cref="T:System.Type"></see> to set the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression"></see> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind"></see> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target"></see> property set to the specified value, the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property set to <paramref name="type">type</paramref>, and a null value to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression"></see> representing a &quot;go to&quot; statement.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget"></see> that the <see cref="T:System.Linq.Expressions.GotoExpression"></see> will jump to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression"></see> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind"></see> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target"></see> property set to the specified value, and a null value to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression"></see> representing a &quot;go to&quot; statement. The value passed to the label upon jumping can be specified.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget"></see> that the <see cref="T:System.Linq.Expressions.GotoExpression"></see> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression"></see> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind"></see> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target"></see> property set to <paramref name="target">target</paramref>, and <paramref name="value">value</paramref> to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a &quot;greater than&quot; numeric comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The &quot;greater than&quot; operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a &quot;greater than&quot; numeric comparison. The implementing method can be specified.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the &quot;greater than&quot; operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a &quot;greater than or equal&quot; numeric comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The &quot;greater than or equal&quot; operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a &quot;greater than or equal&quot; numeric comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the &quot;greater than or equal&quot; operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression"></see> that represents a conditional block with an if statement.</summary>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test"></see> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional"></see> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test"></see>, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue"></see>, properties set to the specified values. The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse"></see> property is set to default expression and the type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression"></see> returned by this method is <see cref="T:System.Void"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression"></see> that represents a conditional block with if and else statements.</summary>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test"></see> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue"></see> property equal to.</param>
      <param name="ifFalse">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional"></see> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test"></see>, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue"></see>, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse"></see> properties set to the specified values. The type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression"></see> returned by this method is <see cref="T:System.Void"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the incrementing of the expression by 1.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to increment.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> that represents the implementing method.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the incremented expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the incrementing of the expression value by 1.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to increment.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the incremented expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.InvocationExpression"></see> that applies a delegate or lambda expression to a list of argument expressions.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the delegate or lambda expression to be applied.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"></see> objects that represent the arguments that the delegate or lambda expression is applied to.</param>
      <returns>An <see cref="T:System.Linq.Expressions.InvocationExpression"></see> that applies the specified delegate or lambda expression to the provided arguments.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="expression">expression</paramref>.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1"></see>.   -or-   The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of an element of <paramref name="arguments">arguments</paramref> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression">expression</paramref>.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="arguments">arguments</paramref> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression">expression</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.InvocationExpression"></see> that applies a delegate or lambda expression to a list of argument expressions.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the delegate or lambda expression to be applied to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.Expression"></see> objects that represent the arguments that the delegate or lambda expression is applied to.</param>
      <returns>An <see cref="T:System.Linq.Expressions.InvocationExpression"></see> that applies the specified delegate or lambda expression to the provided arguments.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="expression">expression</paramref>.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1"></see>.   -or-   The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of an element of <paramref name="arguments">arguments</paramref> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression">expression</paramref>.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="arguments">arguments</paramref> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression">expression</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>Returns whether the expression evaluates to false.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to evaluate.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Returns whether the expression evaluates to false.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to evaluate.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> that represents the implementing method.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>Returns whether the expression evaluates to true.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to evaluate.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Returns whether the expression evaluates to true.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to evaluate.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> that represents the implementing method.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget"></see> representing a label with void type and no name.</summary>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelExpression"></see> representing a label without a default value.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget"></see> which this <see cref="T:System.Linq.Expressions.LabelExpression"></see> will be associated with.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LabelExpression"></see> without a default value.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget"></see> representing a label with void type and the given name.</summary>
      <param name="name">The name of the label.</param>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget"></see> representing a label with the given type.</summary>
      <param name="type">The type of value that is passed when jumping to the label.</param>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelExpression"></see> representing a label with the given default value.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget"></see> which this <see cref="T:System.Linq.Expressions.LabelExpression"></see> will be associated with.</param>
      <param name="defaultValue">The value of this <see cref="T:System.Linq.Expressions.LabelExpression"></see> when the label is reached through regular control flow.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LabelExpression"></see> with the given default value.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget"></see> representing a label with the given type and name.</summary>
      <param name="type">The type of value that is passed when jumping to the label.</param>
      <param name="name">The name of the label.</param>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type"></see> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> property equal to.</param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="tailCall">A <see cref="T:System.Boolean"></see> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType"></see> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type"></see> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> property equal to.</param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType"></see> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type"></see> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean"></see> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType"></see> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> property equal to.</param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="tailCall">A <see cref="T:System.Boolean"></see> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType"></see> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression"></see> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.</summary>
      <param name="delegateType">A <see cref="T:System.Type"></see> that represents a delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> property equal to.</param>
      <param name="parameters">An array of <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> collection.</param>
      <returns>An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda"></see> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="delegateType">delegateType</paramref> or <paramref name="body">body</paramref> is null.   -or-   One or more elements in <paramref name="parameters">parameters</paramref> are null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="delegateType">delegateType</paramref> does not represent a delegate type.   -or-  <paramref name="body">body</paramref>.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType">delegateType</paramref>.   -or-  <paramref name="parameters">parameters</paramref> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType">delegateType</paramref>.   -or-   The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of an element of <paramref name="parameters">parameters</paramref> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType">delegateType</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type"></see> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean"></see> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType"></see> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> property equal to.</param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType"></see> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean"></see> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType"></see> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean"></see> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType"></see> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression"></see> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.</summary>
      <param name="delegateType">A <see cref="T:System.Type"></see> that represents a delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> property equal to.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> collection.</param>
      <returns>An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda"></see> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="delegateType">delegateType</paramref> or <paramref name="body">body</paramref> is null.   -or-   One or more elements in <paramref name="parameters">parameters</paramref> are null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="delegateType">delegateType</paramref> does not represent a delegate type.   -or-  <paramref name="body">body</paramref>.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType">delegateType</paramref>.   -or-  <paramref name="parameters">parameters</paramref> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType">delegateType</paramref>.   -or-   The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of an element of <paramref name="parameters">parameters</paramref> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType">delegateType</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression"></see> by first constructing a delegate type.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> property equal to.</param>
      <param name="parameters">An array of <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda"></see> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="body">body</paramref> is null.   -or-   One or more elements of <paramref name="parameters">parameters</paramref> are null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="parameters">parameters</paramref> contains more than sixteen elements.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> property equal to.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType"></see> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1"></see> where the delegate type is known at compile time.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> property equal to.</param>
      <param name="name">The name of the lambda. Used for generating debugging information.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> collection.</param>
      <typeparam name="TDelegate">The delegate type.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda"></see> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1"></see> where the delegate type is known at compile time.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean"></see> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> collection.</param>
      <typeparam name="TDelegate">The delegate type.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda"></see> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1"></see> where the delegate type is known at compile time.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> property equal to.</param>
      <param name="name">The name of the lambda. Used for generating debugging info.</param>
      <param name="tailCall">A <see cref="T:System.Boolean"></see> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> collection.</param>
      <typeparam name="TDelegate">The delegate type.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1"></see> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda"></see> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1"></see> where the delegate type is known at compile time.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> property equal to.</param>
      <param name="parameters">An array of <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> collection.</param>
      <typeparam name="TDelegate">A delegate type.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda"></see> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="body">body</paramref> is null.   -or-   One or more elements in <paramref name="parameters">parameters</paramref> are null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="TDelegate">TDelegate</paramref> is not a delegate type.   -or-  <paramref name="body">body</paramref>.Type represents a type that is not assignable to the return type of <paramref name="TDelegate">TDelegate</paramref>.   -or-  <paramref name="parameters">parameters</paramref> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate">TDelegate</paramref>.   -or-   The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of an element of <paramref name="parameters">parameters</paramref> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate">TDelegate</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1"></see> where the delegate type is known at compile time.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> property equal to.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> collection.</param>
      <typeparam name="TDelegate">A delegate type.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda"></see> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="body">body</paramref> is null.   -or-   One or more elements in <paramref name="parameters">parameters</paramref> are null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="TDelegate">TDelegate</paramref> is not a delegate type.   -or-  <paramref name="body">body</paramref>.Type represents a type that is not assignable to the return type of <paramref name="TDelegate">TDelegate</paramref>.   -or-  <paramref name="parameters">parameters</paramref> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate">TDelegate</paramref>.   -or-   The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of an element of <paramref name="parameters">parameters</paramref> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate">TDelegate</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1"></see> where the delegate type is known at compile time.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean"></see> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> collection.</param>
      <typeparam name="TDelegate">The delegate type.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1"></see> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda"></see> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"></see> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise left-shift operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The left-shift operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise left-shift operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the left-shift operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise left-shift assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise left-shift assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise left-shift assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a &quot;less than&quot; numeric comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The &quot;less than&quot; operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a &quot;less than&quot; numeric comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the &quot;less than&quot; operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a &quot; less than or equal&quot; numeric comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The &quot;less than or equal&quot; operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a &quot;less than or equal&quot; numeric comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the &quot;less than or equal&quot; operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding"></see> object based on a specified property accessor method.</summary>
      <param name="propertyAccessor">A <see cref="T:System.Reflection.MethodInfo"></see> that represents a property accessor method.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.ElementInit"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding"></see> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType"></see> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding"></see>, the <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> property set to the <see cref="T:System.Reflection.MemberInfo"></see> that represents the property accessed in <paramref name="propertyAccessor">propertyAccessor</paramref>, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers"></see> populated with the elements of <paramref name="initializers">initializers</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="propertyAccessor">propertyAccessor</paramref> is null.   -or-   One or more elements of <paramref name="initializers">initializers</paramref> are null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="propertyAccessor">propertyAccessor</paramref> does not represent a property accessor method.   -or-   The <see cref="P:System.Reflection.PropertyInfo.PropertyType"></see> of the property that the method represented by <paramref name="propertyAccessor">propertyAccessor</paramref> accesses does not implement <see cref="T:System.Collections.IEnumerable"></see>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding"></see> based on a specified property accessor method.</summary>
      <param name="propertyAccessor">A <see cref="T:System.Reflection.MethodInfo"></see> that represents a property accessor method.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.ElementInit"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding"></see> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType"></see> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding"></see>, the <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> property set to the <see cref="T:System.Reflection.MemberInfo"></see> that represents the property accessed in <paramref name="propertyAccessor">propertyAccessor</paramref>, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers"></see> populated with the elements of <paramref name="initializers">initializers</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="propertyAccessor">propertyAccessor</paramref> is null.   -or-   One or more elements of <paramref name="initializers">initializers</paramref> are null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="propertyAccessor">propertyAccessor</paramref> does not represent a property accessor method.   -or-   The <see cref="P:System.Reflection.PropertyInfo.PropertyType"></see> of the property that the method represented by <paramref name="propertyAccessor">propertyAccessor</paramref> accesses does not implement <see cref="T:System.Collections.IEnumerable"></see>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding"></see> where the member is a field or property.</summary>
      <param name="member">A <see cref="T:System.Reflection.MemberInfo"></see> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> property equal to.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.ElementInit"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding"></see> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType"></see> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding"></see> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="member">member</paramref> is null.   -or-   One or more elements of <paramref name="initializers">initializers</paramref> are null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="member">member</paramref> does not represent a field or property.   -or-   The <see cref="P:System.Reflection.FieldInfo.FieldType"></see> or <see cref="P:System.Reflection.PropertyInfo.PropertyType"></see> of the field or property that <paramref name="member">member</paramref> represents does not implement <see cref="T:System.Collections.IEnumerable"></see>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding"></see> where the member is a field or property.</summary>
      <param name="member">A <see cref="T:System.Reflection.MemberInfo"></see> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> property equal to.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.ElementInit"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding"></see> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType"></see> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding"></see> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="member">member</paramref> is null.   -or-   One or more elements of <paramref name="initializers">initializers</paramref> are null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="member">member</paramref> does not represent a field or property.   -or-   The <see cref="P:System.Reflection.FieldInfo.FieldType"></see> or <see cref="P:System.Reflection.PropertyInfo.PropertyType"></see> of the field or property that <paramref name="member">member</paramref> represents does not implement <see cref="T:System.Collections.IEnumerable"></see>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression"></see> that uses specified <see cref="T:System.Linq.Expressions.ElementInit"></see> objects to initialize a collection.</summary>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression"></see> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression"></see> property equal to.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.ElementInit"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit"></see> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression"></see> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="newExpression">newExpression</paramref> or <paramref name="initializers">initializers</paramref> is null.   -or-   One or more elements of <paramref name="initializers">initializers</paramref> are null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="newExpression">newExpression</paramref>.Type does not implement <see cref="T:System.Collections.IEnumerable"></see>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression"></see> that uses a method named &quot;Add&quot; to add elements to a collection.</summary>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression"></see> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression"></see> property equal to.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.Expression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit"></see> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression"></see> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="newExpression">newExpression</paramref> or <paramref name="initializers">initializers</paramref> is null.   -or-   One or more elements of <paramref name="initializers">initializers</paramref> are null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="newExpression">newExpression</paramref>.Type does not implement <see cref="T:System.Collections.IEnumerable"></see>.</exception>
      <exception cref="T:System.InvalidOperationException">There is no instance method named &quot;Add&quot; (case insensitive) declared in <paramref name="newExpression">newExpression</paramref>.Type or its base type.   -or-   The add method on <paramref name="newExpression">newExpression</paramref>.Type or its base type does not take exactly one argument.   -or-   The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of the first element of <paramref name="initializers">initializers</paramref> is not assignable to the argument type of the add method on <paramref name="newExpression">newExpression</paramref>.Type or its base type.   -or-   More than one argument-compatible method named &quot;Add&quot; (case-insensitive) exists on <paramref name="newExpression">newExpression</paramref>.Type and/or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression"></see> that uses specified <see cref="T:System.Linq.Expressions.ElementInit"></see> objects to initialize a collection.</summary>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression"></see> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression"></see> property equal to.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.ElementInit"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit"></see> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression"></see> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="newExpression">newExpression</paramref> or <paramref name="initializers">initializers</paramref> is null.   -or-   One or more elements of <paramref name="initializers">initializers</paramref> are null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="newExpression">newExpression</paramref>.Type does not implement <see cref="T:System.Collections.IEnumerable"></see>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression"></see> that uses a method named &quot;Add&quot; to add elements to a collection.</summary>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression"></see> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression"></see> property equal to.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.Expression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit"></see> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression"></see> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="newExpression">newExpression</paramref> or <paramref name="initializers">initializers</paramref> is null.   -or-   One or more elements of <paramref name="initializers">initializers</paramref> are null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="newExpression">newExpression</paramref>.Type does not implement <see cref="T:System.Collections.IEnumerable"></see>.</exception>
      <exception cref="T:System.InvalidOperationException">There is no instance method named &quot;Add&quot; (case insensitive) declared in <paramref name="newExpression">newExpression</paramref>.Type or its base type.   -or-   The add method on <paramref name="newExpression">newExpression</paramref>.Type or its base type does not take exactly one argument.   -or-   The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of the first element of <paramref name="initializers">initializers</paramref> is not assignable to the argument type of the add method on <paramref name="newExpression">newExpression</paramref>.Type or its base type.   -or-   More than one argument-compatible method named &quot;Add&quot; (case-insensitive) exists on <paramref name="newExpression">newExpression</paramref>.Type and/or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression"></see> that uses a specified method to add elements to a collection.</summary>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression"></see> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression"></see> property equal to.</param>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo"></see> that represents an instance method named &quot;Add&quot; (case insensitive), that adds an element to a collection.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.Expression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit"></see> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression"></see> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="newExpression">newExpression</paramref> or <paramref name="initializers">initializers</paramref> is null.   -or-   One or more elements of <paramref name="initializers">initializers</paramref> are null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="newExpression">newExpression</paramref>.Type does not implement <see cref="T:System.Collections.IEnumerable"></see>.   -or-  <paramref name="addMethod">addMethod</paramref> is not null and it does not represent an instance method named &quot;Add&quot; (case insensitive) that takes exactly one argument.   -or-  <paramref name="addMethod">addMethod</paramref> is not null and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of one or more elements of <paramref name="initializers">initializers</paramref> is not assignable to the argument type of the method that <paramref name="addMethod">addMethod</paramref> represents.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="addMethod">addMethod</paramref> is null and no instance method named &quot;Add&quot; that takes one type-compatible argument exists on <paramref name="newExpression">newExpression</paramref>.Type or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression"></see> that uses a specified method to add elements to a collection.</summary>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression"></see> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression"></see> property equal to.</param>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo"></see> that represents an instance method that takes one argument, that adds an element to a collection.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.Expression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit"></see> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression"></see> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="newExpression">newExpression</paramref> or <paramref name="initializers">initializers</paramref> is null.   -or-   One or more elements of <paramref name="initializers">initializers</paramref> are null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="newExpression">newExpression</paramref>.Type does not implement <see cref="T:System.Collections.IEnumerable"></see>.   -or-  <paramref name="addMethod">addMethod</paramref> is not null and it does not represent an instance method named &quot;Add&quot; (case insensitive) that takes exactly one argument.   -or-  <paramref name="addMethod">addMethod</paramref> is not null and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of one or more elements of <paramref name="initializers">initializers</paramref> is not assignable to the argument type of the method that <paramref name="addMethod">addMethod</paramref> represents.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="addMethod">addMethod</paramref> is null and no instance method named &quot;Add&quot; that takes one type-compatible argument exists on <paramref name="newExpression">newExpression</paramref>.Type or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LoopExpression"></see> with the given body.</summary>
      <param name="body">The body of the loop.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.LoopExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LoopExpression"></see> with the given body and break target.</summary>
      <param name="body">The body of the loop.</param>
      <param name="break">The break target used by the loop body.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.LoopExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LoopExpression"></see> with the given body.</summary>
      <param name="body">The body of the loop.</param>
      <param name="break">The break target used by the loop body.</param>
      <param name="continue">The continue target used by the loop body.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.LoopExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see>, given the left and right operands, by calling an appropriate factory method.</summary>
      <param name="binaryType">The <see cref="T:System.Linq.Expressions.ExpressionType"></see> that specifies the type of binary operation.</param>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the left operand.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the right operand.</param>
      <returns>The <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that results from calling the appropriate factory method.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="binaryType">binaryType</paramref> does not correspond to a binary expression node.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see>, given the left operand, right operand and implementing method, by calling the appropriate factory method.</summary>
      <param name="binaryType">The <see cref="T:System.Linq.Expressions.ExpressionType"></see> that specifies the type of binary operation.</param>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the left operand.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the right operand.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> that specifies the implementing method.</param>
      <returns>The <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that results from calling the appropriate factory method.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="binaryType">binaryType</paramref> does not correspond to a binary expression node.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see>, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.</summary>
      <param name="binaryType">The <see cref="T:System.Linq.Expressions.ExpressionType"></see> that specifies the type of binary operation.</param>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the left operand.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the right operand.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> that specifies the implementing method.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> that represents a type conversion function. This parameter is used only if binaryType is <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce"></see> or compound assignment..</param>
      <returns>The <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that results from calling the appropriate factory method.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="binaryType">binaryType</paramref> does not correspond to a binary expression node.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock"></see> representing a catch statement with the specified elements.</summary>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type"></see> of <see cref="T:System.Exception"></see> this <see cref="T:System.Linq.Expressions.CatchBlock"></see> will handle.</param>
      <param name="variable">A <see cref="T:System.Linq.Expressions.ParameterExpression"></see> representing a reference to the <see cref="T:System.Exception"></see> object caught by this handler.</param>
      <param name="body">The body of the catch statement.</param>
      <param name="filter">The body of the <see cref="T:System.Exception"></see> filter.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see> and four arguments.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite"></see>.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <param name="arg3">The fourth argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType"></see>, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see>, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see> and two arguments.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite"></see>.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType"></see>, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see>, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see> and three arguments.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite"></see>.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType"></see>, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see>, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see> and one argument.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite"></see>.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType"></see>, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see>, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see>.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite"></see>.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType"></see>, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see>, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"></see>.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite"></see>.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression"></see> that has <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic"></see> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType"></see>, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder"></see>, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments"></see> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression"></see> representing a jump of the specified <see cref="T:System.Linq.Expressions.GotoExpressionKind"></see>. The value passed to the label upon jumping can also be specified.</summary>
      <param name="kind">The <see cref="T:System.Linq.Expressions.GotoExpressionKind"></see> of the <see cref="T:System.Linq.Expressions.GotoExpression"></see>.</param>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget"></see> that the <see cref="T:System.Linq.Expressions.GotoExpression"></see> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type"></see> to set the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression"></see> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind"></see> equal to <paramref name="kind">kind</paramref>, the <see cref="P:System.Linq.Expressions.GotoExpression.Target"></see> property set to <paramref name="target">target</paramref>, the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property set to <paramref name="type">type</paramref>, and <paramref name="value">value</paramref> to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression"></see> that represents accessing an indexed property in an object.</summary>
      <param name="instance">The object to which the property belongs. It should be null if the property is static (shared in Visual Basic).</param>
      <param name="indexer">An <see cref="T:System.Linq.Expressions.Expression"></see> representing the property to index.</param>
      <param name="arguments">An IEnumerable (IEnumerable (Of Expression) in Visual Basic) that contains the arguments that will be used to index the property.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression"></see> that represents accessing either a field or a property.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the object that the member belongs to. This can be null for static members.</param>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo"></see> that describes the field or property to be accessed.</param>
      <returns>The <see cref="T:System.Linq.Expressions.MemberExpression"></see> that results from calling the appropriate factory method.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="member">member</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="member">member</paramref> does not represent a field or property.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression"></see> representing a try block with the specified elements.</summary>
      <param name="type">The result type of the try expression. If null, bodh and all handlers must have identical type.</param>
      <param name="body">The body of the try block.</param>
      <param name="finally">The body of the finally block. Pass null if the try block has no finally block associated with it.</param>
      <param name="fault">The body of the fault block. Pass null if the try block has no fault block associated with it.</param>
      <param name="handlers">A collection of <see cref="T:System.Linq.Expressions.CatchBlock"></see>s representing the catch statements to be associated with the try block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see>, given an operand, by calling the appropriate factory method.</summary>
      <param name="unaryType">The <see cref="T:System.Linq.Expressions.ExpressionType"></see> that specifies the type of unary operation.</param>
      <param name="operand">An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the operand.</param>
      <param name="type">The <see cref="T:System.Type"></see> that specifies the type to be converted to (pass null if not applicable).</param>
      <returns>The <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that results from calling the appropriate factory method.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="operand">operand</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="unaryType">unaryType</paramref> does not correspond to a unary expression node.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see>, given an operand and implementing method, by calling the appropriate factory method.</summary>
      <param name="unaryType">The <see cref="T:System.Linq.Expressions.ExpressionType"></see> that specifies the type of unary operation.</param>
      <param name="operand">An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the operand.</param>
      <param name="type">The <see cref="T:System.Type"></see> that specifies the type to be converted to (pass null if not applicable).</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo"></see> that represents the implementing method.</param>
      <returns>The <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that results from calling the appropriate factory method.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="operand">operand</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="unaryType">unaryType</paramref> does not correspond to a unary expression node.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding"></see> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</summary>
      <param name="propertyAccessor">The <see cref="T:System.Reflection.MethodInfo"></see> that represents a property accessor method.</param>
      <param name="bindings">An array of <see cref="T:System.Linq.Expressions.MemberBinding"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding"></see> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType"></see> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding"></see>, the <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> property set to the <see cref="T:System.Reflection.PropertyInfo"></see> that represents the property accessed in <paramref name="propertyAccessor">propertyAccessor</paramref>, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="propertyAccessor">propertyAccessor</paramref> or <paramref name="bindings">bindings</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="propertyAccessor">propertyAccessor</paramref> does not represent a property accessor method.   -or-   The <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> property of an element of <paramref name="bindings">bindings</paramref> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor">propertyAccessor</paramref> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding"></see> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</summary>
      <param name="propertyAccessor">The <see cref="T:System.Reflection.MethodInfo"></see> that represents a property accessor method.</param>
      <param name="bindings">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.MemberBinding"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding"></see> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType"></see> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding"></see>, the <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> property set to the <see cref="T:System.Reflection.PropertyInfo"></see> that represents the property accessed in <paramref name="propertyAccessor">propertyAccessor</paramref>, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="propertyAccessor">propertyAccessor</paramref> or <paramref name="bindings">bindings</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="propertyAccessor">propertyAccessor</paramref> does not represent a property accessor method.   -or-   The <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> property of an element of <paramref name="bindings">bindings</paramref> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor">propertyAccessor</paramref> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding"></see> that represents the recursive initialization of members of a field or property.</summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo"></see> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> property equal to.</param>
      <param name="bindings">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.MemberBinding"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding"></see> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType"></see> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding"></see> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="member">member</paramref> or <paramref name="bindings">bindings</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="member">member</paramref> does not represent a field or property.   -or-   The <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> property of an element of <paramref name="bindings">bindings</paramref> does not represent a member of the type of the field or property that <paramref name="member">member</paramref> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding"></see> that represents the recursive initialization of members of a field or property.</summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo"></see> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> property equal to.</param>
      <param name="bindings">An array of <see cref="T:System.Linq.Expressions.MemberBinding"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding"></see> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType"></see> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding"></see> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="member">member</paramref> or <paramref name="bindings">bindings</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="member">member</paramref> does not represent a field or property.   -or-   The <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> property of an element of <paramref name="bindings">bindings</paramref> does not represent a member of the type of the field or property that <paramref name="member">member</paramref> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Represents an expression that creates a new object and initializes a property of the object.</summary>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression"></see> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression"></see> property equal to.</param>
      <param name="bindings">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.MemberBinding"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberInitExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit"></see> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression"></see> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="newExpression">newExpression</paramref> or <paramref name="bindings">bindings</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> property of an element of <paramref name="bindings">bindings</paramref> does not represent a member of the type that <paramref name="newExpression">newExpression</paramref>.Type represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberInitExpression"></see>.</summary>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression"></see> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression"></see> property equal to.</param>
      <param name="bindings">An array of <see cref="T:System.Linq.Expressions.MemberBinding"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberInitExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit"></see> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression"></see> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="newExpression">newExpression</paramref> or <paramref name="bindings">bindings</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.MemberBinding.Member"></see> property of an element of <paramref name="bindings">bindings</paramref> does not represent a member of the type that <paramref name="newExpression">newExpression</paramref>.Type represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an arithmetic remainder operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The modulus operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an arithmetic remainder operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the modulus operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a remainder assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a remainder assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a remainder assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an arithmetic multiplication operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the multiplication operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an arithmetic multiplication operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The multiplication operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a multiplication assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a multiplication assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a multiplication assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a multiplication assignment operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a multiplication assignment operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a multiplication assignment operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an arithmetic multiplication operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The multiplication operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an arithmetic multiplication operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the multiplication operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents an arithmetic negation operation.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate"></see> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the unary minus operator is not defined for <paramref name="expression">expression</paramref>.Type.   -or-  <paramref name="expression">expression</paramref>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method">method</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents an arithmetic negation operation.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate"></see> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The unary minus operator is not defined for <paramref name="expression">expression</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents an arithmetic negation operation that has overflow checking.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked"></see> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The unary minus operator is not defined for <paramref name="expression">expression</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked"></see> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the unary minus operator is not defined for <paramref name="expression">expression</paramref>.Type.   -or-  <paramref name="expression">expression</paramref>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method">method</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression"></see> that represents calling the specified constructor that takes no arguments.</summary>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo"></see> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New"></see> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor"></see> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="constructor">constructor</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The constructor that <paramref name="constructor">constructor</paramref> represents has at least one parameter.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression"></see> that represents calling the parameterless constructor of the specified type.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that has a constructor that takes no arguments.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New"></see> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor"></see> property set to the <see cref="T:System.Reflection.ConstructorInfo"></see> that represents the constructor without parameters for the specified type.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The type that <paramref name="type">type</paramref> represents does not have a constructor without parameters.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression"></see> that represents calling the specified constructor with the specified arguments.</summary>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo"></see> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor"></see> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.Expression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New"></see> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor"></see> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="constructor">constructor</paramref> is null.   -or-   An element of <paramref name="arguments">arguments</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="arguments">arguments</paramref> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor">constructor</paramref> represents.   -or-   The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of an element of <paramref name="arguments">arguments</paramref> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor">constructor</paramref> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression"></see> that represents calling the specified constructor with the specified arguments.</summary>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo"></see> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor"></see> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New"></see> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor"></see> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="constructor">constructor</paramref> is null.   -or-   An element of <paramref name="arguments">arguments</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="arguments">arguments</paramref> does match the number of parameters for the constructor that <paramref name="constructor">constructor</paramref> represents.   -or-   The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of an element of <paramref name="arguments">arguments</paramref> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor">constructor</paramref> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression"></see> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.</summary>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo"></see> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor"></see> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.Expression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments"></see> collection.</param>
      <param name="members">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Reflection.MemberInfo"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New"></see> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor"></see>, <see cref="P:System.Linq.Expressions.NewExpression.Arguments"></see> and <see cref="P:System.Linq.Expressions.NewExpression.Members"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="constructor">constructor</paramref> is null.   -or-   An element of <paramref name="arguments">arguments</paramref> is null.   -or-   An element of <paramref name="members">members</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="arguments">arguments</paramref> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor">constructor</paramref> represents.   -or-   The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of an element of <paramref name="arguments">arguments</paramref> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor">constructor</paramref> represents.   -or-   The <paramref name="members">members</paramref> parameter does not have the same number of elements as <paramref name="arguments">arguments</paramref>.   -or-   An element of <paramref name="arguments">arguments</paramref> has a <see cref="P:System.Linq.Expressions.Expression.Type"></see> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members">members</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression"></see> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.</summary>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo"></see> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor"></see> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.Expression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments"></see> collection.</param>
      <param name="members">An array of <see cref="T:System.Reflection.MemberInfo"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New"></see> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor"></see>, <see cref="P:System.Linq.Expressions.NewExpression.Arguments"></see> and <see cref="P:System.Linq.Expressions.NewExpression.Members"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="constructor">constructor</paramref> is null.   -or-   An element of <paramref name="arguments">arguments</paramref> is null.   -or-   An element of <paramref name="members">members</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="arguments">arguments</paramref> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor">constructor</paramref> represents.   -or-   The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of an element of <paramref name="arguments">arguments</paramref> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor">constructor</paramref> represents.   -or-   The <paramref name="members">members</paramref> parameter does not have the same number of elements as <paramref name="arguments">arguments</paramref>.   -or-   An element of <paramref name="arguments">arguments</paramref> has a <see cref="P:System.Linq.Expressions.Expression.Type"></see> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members">members</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression"></see> that represents creating an array that has a specified rank.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the element type of the array.</param>
      <param name="bounds">An array of <see cref="T:System.Linq.Expressions.Expression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds"></see> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions"></see> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> or <paramref name="bounds">bounds</paramref> is null.   -or-   An element of <paramref name="bounds">bounds</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of an element of <paramref name="bounds">bounds</paramref> does not represent an integral type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression"></see> that represents creating an array that has a specified rank.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the element type of the array.</param>
      <param name="bounds">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.Expression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds"></see> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions"></see> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> or <paramref name="bounds">bounds</paramref> is null.   -or-   An element of <paramref name="bounds">bounds</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of an element of <paramref name="bounds">bounds</paramref> does not represent an integral type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression"></see> that represents creating a one-dimensional array and initializing it from a list of elements.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the element type of the array.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains <see cref="T:System.Linq.Expressions.Expression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit"></see> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions"></see> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> or <paramref name="initializers">initializers</paramref> is null.   -or-   An element of <paramref name="initializers">initializers</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of an element of <paramref name="initializers">initializers</paramref> represents a type that is not assignable to the type that <paramref name="type">type</paramref> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression"></see> that represents creating a one-dimensional array and initializing it from a list of elements.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the element type of the array.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.Expression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions"></see> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit"></see> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions"></see> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> or <paramref name="initializers">initializers</paramref> is null.   -or-   An element of <paramref name="initializers">initializers</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type"></see> property of an element of <paramref name="initializers">initializers</paramref> represents a type that is not assignable to the type <paramref name="type">type</paramref>.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>Gets the node type of this <see cref="T:System.Linq.Expressions.Expression"></see>.</summary>
      <returns>One of the <see cref="T:System.Linq.Expressions.ExpressionType"></see> values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents a bitwise complement operation.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not"></see> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The unary not operator is not defined for <paramref name="expression">expression</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents a bitwise complement operation. The implementing method can be specified.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not"></see> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the unary not operator is not defined for <paramref name="expression">expression</paramref>.Type.   -or-  <paramref name="expression">expression</paramref>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method">method</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an inequality comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The inequality operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an inequality comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the inequality operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>Returns the expression representing the ones complement.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see>.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Returns the expression representing the ones complement.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see>.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> that represents the implementing method.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise OR operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise OR operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise OR operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the bitwise OR operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise OR assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise OR assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise OR assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a conditional OR operation that evaluates the second operand only if the first operand evaluates to false.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise OR operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.   -or-  <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a conditional OR operation that evaluates the second operand only if the first operand evaluates to false.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the bitwise OR operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.   -or-  <paramref name="method">method</paramref> is null and <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression"></see> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <param name="type">The type of the parameter or variable.</param>
      <param name="name">The name of the parameter or variable, used for debugging or printing purpose only.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Parameter"></see> and the <see cref="P:System.Linq.Expressions.Expression.Type"></see> and <see cref="P:System.Linq.Expressions.ParameterExpression.Name"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression"></see> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <param name="type">The type of the parameter or variable.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression"></see> node with the specified name and type.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> that represents the implementing method.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the resultant expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to apply the operations on.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the resultant expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to apply the operations on.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the resultant expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> that represents the implementing method.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the resultant expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents raising a number to a power.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The exponentiation operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.   -or-  <paramref name="left">left</paramref>.Type and/or <paramref name="right">right</paramref>.Type are not <see cref="T:System.Double"></see>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents raising a number to a power.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the exponentiation operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.   -or-  <paramref name="method">method</paramref> is null and <paramref name="left">left</paramref>.Type and/or <paramref name="right">right</paramref>.Type are not <see cref="T:System.Double"></see>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents raising an expression to a power and assigning the result back to the expression.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents raising an expression to a power and assigning the result back to the expression.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents raising an expression to a power and assigning the result back to the expression.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that decrements the expression by 1 and assigns the result back to the expression.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to apply the operations on.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the resultant expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that decrements the expression by 1 and assigns the result back to the expression.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> that represents the implementing method.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the resultant expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that increments the expression by 1 and assigns the result back to the expression.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to apply the operations on.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the resultant expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that increments the expression by 1 and assigns the result back to the expression.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> that represents the implementing method.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the resultant expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression"></see> representing the access to an indexed property.</summary>
      <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param>
      <param name="propertyName">The name of the indexer.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"></see> objects that are used to index the property.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression"></see> representing the access to an indexed property.</summary>
      <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param>
      <param name="indexer">The <see cref="T:System.Reflection.PropertyInfo"></see> that represents the property to index.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression"></see> objects that are used to index the property.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression"></see> representing the access to an indexed property.</summary>
      <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param>
      <param name="indexer">The <see cref="T:System.Reflection.PropertyInfo"></see> that represents the property to index.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Linq.Expressions.Expression"></see> objects that are used to index the property.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression"></see> accessing a property.</summary>
      <param name="expression">The containing object of the property. This can be null for static properties.</param>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type"></see> that contains the property.</param>
      <param name="propertyName">The property to be accessed.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.MemberExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression"></see> that represents accessing a property.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression"></see> property equal to. This can be null for static properties.</param>
      <param name="property">The <see cref="T:System.Reflection.PropertyInfo"></see> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess"></see> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression"></see> and <see cref="P:System.Linq.Expressions.MemberExpression.Member"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="property">property</paramref> is null.   -or-   The property that <paramref name="property">property</paramref> represents is not static (Shared in Visual Basic) and <paramref name="expression">expression</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="expression">expression</paramref>.Type is not assignable to the declaring type of the property that <paramref name="property">property</paramref> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression"></see> that represents accessing a property by using a property accessor method.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression"></see> property equal to. This can be null for static properties.</param>
      <param name="propertyAccessor">The <see cref="T:System.Reflection.MethodInfo"></see> that represents a property accessor method.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess"></see>, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression"></see> property set to <paramref name="expression">expression</paramref> and the <see cref="P:System.Linq.Expressions.MemberExpression.Member"></see> property set to the <see cref="T:System.Reflection.PropertyInfo"></see> that represents the property accessed in <paramref name="propertyAccessor">propertyAccessor</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="propertyAccessor">propertyAccessor</paramref> is null.   -or-   The method that <paramref name="propertyAccessor">propertyAccessor</paramref> represents is not static (Shared in Visual Basic) and <paramref name="expression">expression</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="expression">expression</paramref>.Type is not assignable to the declaring type of the method represented by <paramref name="propertyAccessor">propertyAccessor</paramref>.   -or-   The method that <paramref name="propertyAccessor">propertyAccessor</paramref> represents is not a property accessor method.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression"></see> that represents accessing a property.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> whose <see cref="P:System.Linq.Expressions.Expression.Type"></see> contains a property named propertyName. This can be null for static properties.</param>
      <param name="propertyName">The name of a property to be accessed.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess"></see>, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression"></see> property set to <paramref name="expression">expression</paramref>, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member"></see> property set to the <see cref="T:System.Reflection.PropertyInfo"></see> that represents the property denoted by <paramref name="propertyName">propertyName</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> or <paramref name="propertyName">propertyName</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">No property named <paramref name="propertyName">propertyName</paramref> is defined in <paramref name="expression">expression</paramref>.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression"></see> that represents accessing a property or field.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> whose <see cref="P:System.Linq.Expressions.Expression.Type"></see> contains a property or field named propertyOrFieldName. This can be null for static members.</param>
      <param name="propertyOrFieldName">The name of a property or field to be accessed.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess"></see>, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression"></see> property set to <paramref name="expression">expression</paramref>, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member"></see> property set to the <see cref="T:System.Reflection.PropertyInfo"></see> or <see cref="T:System.Reflection.FieldInfo"></see> that represents the property or field denoted by <paramref name="propertyOrFieldName">propertyOrFieldName</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> or <paramref name="propertyOrFieldName">propertyOrFieldName</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">No property or field named <paramref name="propertyOrFieldName">propertyOrFieldName</paramref> is defined in <paramref name="expression">expression</paramref>.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents an expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression"></see>.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Quote"></see> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a reference equality comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a reference inequality comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents a rethrowing of an exception with a given type.</summary>
      <param name="type">The new <see cref="T:System.Type"></see> of the expression.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents a rethrowing of an exception.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents a rethrowing of an exception.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents a rethrowing of an exception.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression"></see> representing a return statement.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget"></see> that the <see cref="T:System.Linq.Expressions.GotoExpression"></see> will jump to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression"></see> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind"></see> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target"></see> property set to <paramref name="target">target</paramref>, and a null value to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression"></see> representing a return statement. The value passed to the label upon jumping can be specified.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget"></see> that the <see cref="T:System.Linq.Expressions.GotoExpression"></see> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression"></see> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind"></see> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target"></see> property set to <paramref name="target">target</paramref>, and <paramref name="value">value</paramref> to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression"></see> representing a return statement with the specified type.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget"></see> that the <see cref="T:System.Linq.Expressions.GotoExpression"></see> will jump to.</param>
      <param name="type">An <see cref="T:System.Type"></see> to set the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression"></see> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind"></see> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target"></see> property set to <paramref name="target">target</paramref>, the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property set to <paramref name="type">type</paramref>, and a null value to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression"></see> representing a return statement with the specified type. The value passed to the label upon jumping can be specified.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget"></see> that the <see cref="T:System.Linq.Expressions.GotoExpression"></see> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type"></see> to set the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression"></see> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind"></see> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target"></see> property set to <paramref name="target">target</paramref>, the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property set to <paramref name="type">type</paramref>, and <paramref name="value">value</paramref> to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise right-shift operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The right-shift operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise right-shift operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the right-shift operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise right-shift assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise right-shift assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a bitwise right-shift assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression"></see>.</summary>
      <param name="variables">An array of <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables"></see> collection.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables"></see> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables"></see> property set to the specified value.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression"></see>.</summary>
      <param name="variables">A collection of <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables"></see> collection.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables"></see> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables"></see> property set to the specified value.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an arithmetic subtraction operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The subtraction operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an arithmetic subtraction operation that does not have overflow checking.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the subtraction operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a subtraction assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a subtraction assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a subtraction assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a subtraction assignment operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a subtraction assignment operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents a subtraction assignment operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an arithmetic subtraction operation that has overflow checking.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see>, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the subtraction operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that represents an arithmetic subtraction operation that has overflow checking.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked"></see> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"></see> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="left">left</paramref> or <paramref name="right">right</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The subtraction operator is not defined for <paramref name="left">left</paramref>.Type and <paramref name="right">right</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression"></see> that represents a switch statement that has a default case..</summary>
      <param name="type">The result type of the switch.</param>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if switchValue does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression"></see> that represents a switch statement without a default case.</summary>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="cases">The set of cases for this switch expression.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression"></see> that represents a switch statement that has a default case.</summary>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if switchValue does not match any of the cases.</param>
      <param name="cases">The set of cases for this switch expression.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression"></see> that represents a switch statement that has a default case.</summary>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if switchValue does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression"></see> that represents a switch statement that has a default case.</summary>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if switchValue does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression"></see> that represents a switch statement that has a default case.</summary>
      <param name="type">The result type of the switch.</param>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if switchValue does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchCase"></see> for use in a <see cref="T:System.Linq.Expressions.SwitchExpression"></see>.</summary>
      <param name="body">The body of the case.</param>
      <param name="testValues">The test values of the case.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchCase"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchCase"></see> object to be used in a <see cref="T:System.Linq.Expressions.SwitchExpression"></see> object.</summary>
      <param name="body">The body of the case.</param>
      <param name="testValues">The test values of the case.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchCase"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo"></see>.</summary>
      <param name="fileName">A <see cref="T:System.String"></see> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName"></see> equal to.</param>
      <param name="language">A <see cref="T:System.Guid"></see> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language"></see> equal to.</param>
      <param name="languageVendor">A <see cref="T:System.Guid"></see> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor"></see> equal to.</param>
      <param name="documentType">A <see cref="T:System.Guid"></see> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType"></see> equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo"></see> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName"></see> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language"></see> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor"></see> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType"></see> properties set to the specified value.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo"></see>.</summary>
      <param name="fileName">A <see cref="T:System.String"></see> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName"></see> equal to.</param>
      <param name="language">A <see cref="T:System.Guid"></see> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language"></see> equal to.</param>
      <param name="languageVendor">A <see cref="T:System.Guid"></see> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor"></see> equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo"></see> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName"></see> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language"></see> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor"></see> properties set to the specified value.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo"></see>.</summary>
      <param name="fileName">A <see cref="T:System.String"></see> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName"></see> equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo"></see> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName"></see> property set to the specified value.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo"></see>.</summary>
      <param name="fileName">A <see cref="T:System.String"></see> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName"></see> equal to.</param>
      <param name="language">A <see cref="T:System.Guid"></see> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language"></see> equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo"></see> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName"></see> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language"></see> properties set to the specified value.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents a throwing of an exception.</summary>
      <param name="value">An <see cref="T:System.Linq.Expressions.Expression"></see>.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the exception.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents a throwing of an exception with a given type.</summary>
      <param name="value">An <see cref="T:System.Linq.Expressions.Expression"></see>.</param>
      <param name="type">The new <see cref="T:System.Type"></see> of the expression.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents the exception.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"></see>.</summary>
      <returns>A textual representation of the <see cref="T:System.Linq.Expressions.Expression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression"></see> representing a try block with any number of catch statements and neither a fault nor finally block.</summary>
      <param name="body">The body of the try block.</param>
      <param name="handlers">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock"></see> expressions representing the catch statements to be associated with the try block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression"></see> representing a try block with any number of catch statements and a finally block.</summary>
      <param name="body">The body of the try block.</param>
      <param name="finally">The body of the finally block.</param>
      <param name="handlers">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock"></see> expressions representing the catch statements to be associated with the try block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression"></see> representing a try block with a fault block and no catch statements.</summary>
      <param name="body">The body of the try block.</param>
      <param name="fault">The body of the fault block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression"></see> representing a try block with a finally block and no catch statements.</summary>
      <param name="body">The body of the try block.</param>
      <param name="finally">The body of the finally block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>Creates a <see cref="P:System.Linq.Expressions.Expression.Type"></see> object that represents a generic System.Action delegate type that has specific type arguments.</summary>
      <param name="typeArgs">An array of Type objects that specify the type arguments for the System.Action delegate type.</param>
      <param name="actionType">When this method returns, contains the generic System.Action delegate type that has specific type arguments. Contains null if there is no generic System.Action delegate that matches the typeArgs.This parameter is passed uninitialized.</param>
      <returns>true if generic System.Action delegate type was created for specific <paramref name="typeArgs">typeArgs</paramref>; false otherwise.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>Creates a <see cref="P:System.Linq.Expressions.Expression.Type"></see> object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</summary>
      <param name="typeArgs">An array of Type objects that specify the type arguments for the System.Func delegate type.</param>
      <param name="funcType">When this method returns, contains the generic System.Func delegate type that has specific type arguments. Contains null if there is no generic System.Func delegate that matches the typeArgs.This parameter is passed uninitialized.</param>
      <returns>true if generic System.Func delegate type was created for specific <paramref name="typeArgs">typeArgs</paramref>; false otherwise.</returns>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="T:System.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents an explicit reference or boxing conversion where null is supplied if the conversion fails.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property equal to.</param>
      <param name="type">A <see cref="T:System.Type"></see> to set the <see cref="P:System.Linq.Expressions.Expression.Type"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs"></see> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> and <see cref="P:System.Linq.Expressions.Expression.Type"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> or <paramref name="type">type</paramref> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression"></see> that compares run-time type identity.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="T:System.Linq.Expressions.Expression"></see> property equal to.</param>
      <param name="type">A <see cref="P:System.Linq.Expressions.Expression.Type"></see> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.TypeBinaryExpression"></see> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property is equal to <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)"></see> and for which the <see cref="T:System.Linq.Expressions.Expression"></see> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand"></see> properties are set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression"></see>.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression"></see> property equal to.</param>
      <param name="type">A <see cref="P:System.Linq.Expressions.Expression.Type"></see> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.TypeBinaryExpression"></see> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property is equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs"></see> and for which the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression"></see> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand"></see> properties are set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> or <paramref name="type">type</paramref> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents a unary plus operation.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus"></see> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method"></see> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="method">method</paramref> is null and the unary plus operator is not defined for <paramref name="expression">expression</paramref>.Type.   -or-  <paramref name="expression">expression</paramref>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method">method</paramref>.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents a unary plus operation.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus"></see> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="expression">expression</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The unary plus operator is not defined for <paramref name="expression">expression</paramref>.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"></see> that represents an explicit unboxing.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> to unbox.</param>
      <param name="type">The new <see cref="T:System.Type"></see> of the expression.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression"></see> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <param name="type">The type of the parameter or variable.</param>
      <param name="name">The name of the parameter or variable. This name is used for debugging or printing purpose only.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression"></see> node with the specified name and type.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression"></see> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <param name="type">The type of the parameter or variable.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression"></see> node with the specified name and type</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.</summary>
      <param name="visitor">An instance of <see cref="T:System.Func`2"></see>.</param>
      <returns>The expression being visited, or an expression which should replace it in the tree.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>Describes the node types for the nodes of an expression tree.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>An addition operation, such as a + b, without overflow checking, for numeric operands.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>An addition compound assignment operation, such as (a += b), without overflow checking, for numeric operands.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>An addition compound assignment operation, such as (a += b), with overflow checking, for numeric operands.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>An addition operation, such as (a + b), with overflow checking, for numeric operands.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>A bitwise or logical AND operation, such as (a &amp; b) in C# and (a And b) in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>A conditional AND operation that evaluates the second operand only if the first operand evaluates to true. It corresponds to (a &amp;&amp; b) in C# and (a AndAlso b) in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>A bitwise or logical AND compound assignment operation, such as (a &amp;= b) in C#.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>An indexing operation in a one-dimensional array, such as array[index] in C# or array(index) in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>An operation that obtains the length of a one-dimensional array, such as array.Length.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>An assignment operation, such as (a = b).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>A block of expressions.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>A method call, such as in the obj.sampleMethod() expression.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>A node that represents a null coalescing operation, such as (a ?? b) in C# or If(a, b) in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>A conditional operation, such as a &gt; b ? a : b in C# or If(a &gt; b, a, b) in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>A constant value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>A cast or conversion operation, such as (SampleType)obj in C#or CType(obj, SampleType) in Visual Basic. For a numeric conversion, if the converted value is too large for the destination type, no exception is thrown.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>A cast or conversion operation, such as (SampleType)obj in C#or CType(obj, SampleType) in Visual Basic. For a numeric conversion, if the converted value does not fit the destination type, an exception is thrown.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>Debugging information.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>A unary decrement operation, such as (a - 1) in C# and Visual Basic. The object a should not be modified in place.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>A default value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>A division operation, such as (a / b), for numeric operands.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>An division compound assignment operation, such as (a /= b), for numeric operands.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>A dynamic operation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>A node that represents an equality comparison, such as (a == b) in C# or (a = b) in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>A bitwise or logical XOR operation, such as (a ^ b) in C# or (a Xor b) in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>A bitwise or logical XOR compound assignment operation, such as (a ^= b) in C#.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>An extension expression.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>A &quot;go to&quot; expression, such as goto Label in C# or GoTo Label in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>A &quot;greater than&quot; comparison, such as (a &gt; b).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>A &quot;greater than or equal to&quot; comparison, such as (a &gt;= b).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>A unary increment operation, such as (a + 1) in C# and Visual Basic. The object a should not be modified in place.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>An index operation or an operation that accesses a property that takes arguments.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>An operation that invokes a delegate or lambda expression, such as sampleDelegate.Invoke().</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>A false condition value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>A true condition value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>A label.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>A lambda expression, such as a =&gt; a + a in C# or Function(a) a + a in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>A bitwise left-shift operation, such as (a &lt;&lt; b).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>A bitwise left-shift compound assignment, such as (a &lt;&lt;= b).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>A &quot;less than&quot; comparison, such as (a &lt; b).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>A &quot;less than or equal to&quot; comparison, such as (a &lt;= b).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>An operation that creates a new <see cref="T:System.Collections.IEnumerable"></see> object and initializes it from a list of elements, such as new List(){ a, b, c } in C# or Dim sampleList = { a, b, c } in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>A loop, such as for or while.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>An operation that reads from a field or property, such as obj.SampleProperty.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>An operation that creates a new object and initializes one or more of its members, such as new Point { X = 1, Y = 2 } in C# or New Point With {.X = 1, .Y = 2} in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>An arithmetic remainder operation, such as (a % b) in C# or (a Mod b) in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>An arithmetic remainder compound assignment operation, such as (a %= b) in C#.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>A multiplication operation, such as (a * b), without overflow checking, for numeric operands.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>A multiplication compound assignment operation, such as (a *= b), without overflow checking, for numeric operands.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>A multiplication compound assignment operation, such as (a *= b), that has overflow checking, for numeric operands.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>An multiplication operation, such as (a * b), that has overflow checking, for numeric operands.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>An arithmetic negation operation, such as (-a). The object a should not be modified in place.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>An arithmetic negation operation, such as (-a), that has overflow checking. The object a should not be modified in place.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>An operation that calls a constructor to create a new object, such as new SampleType().</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>An operation that creates a new array, in which the bounds for each dimension are specified, such as new SampleType[dim1, dim2] in C# or New SampleType(dim1, dim2) in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>An operation that creates a new one-dimensional array and initializes it from a list of elements, such as new SampleType[]{a, b, c} in C# or New SampleType(){a, b, c} in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>A bitwise complement or logical negation operation. In C#, it is equivalent to (~a) for integral types and to (!a) for Boolean values. In Visual Basic, it is equivalent to (Not a). The object a should not be modified in place.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>An inequality comparison, such as (a != b) in C# or (a &lt;&gt; b) in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>A ones complement operation, such as (~a) in C#.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>A bitwise or logical OR operation, such as (a | b) in C# or (a Or b) in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>A bitwise or logical OR compound assignment, such as (a |= b) in C#.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>A short-circuiting conditional OR operation, such as (a || b) in C# or (a OrElse b) in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>A reference to a parameter or variable that is defined in the context of the expression. For more information, see <see cref="T:System.Linq.Expressions.ParameterExpression"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>A unary postfix decrement, such as (a--). The object a should be modified in place.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>A unary postfix increment, such as (a++). The object a should be modified in place.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>A mathematical operation that raises a number to a power, such as (a ^ b) in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>A compound assignment operation that raises a number to a power, such as (a ^= b) in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>A unary prefix decrement, such as (--a). The object a should be modified in place.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>A unary prefix increment, such as (++a). The object a should be modified in place.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>An expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression"></see>. A <see cref="F:System.Linq.Expressions.ExpressionType.Quote"></see> node can contain references to parameters that are defined in the context of the expression it represents.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>A bitwise right-shift operation, such as (a &gt;&gt; b).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>A bitwise right-shift compound assignment operation, such as (a &gt;&gt;= b).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>A list of run-time variables. For more information, see <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>A subtraction operation, such as (a - b), without overflow checking, for numeric operands.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>A subtraction compound assignment operation, such as (a -= b), without overflow checking, for numeric operands.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>A subtraction compound assignment operation, such as (a -= b), that has overflow checking, for numeric operands.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>An arithmetic subtraction operation, such as (a - b), that has overflow checking, for numeric operands.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>A switch operation, such as switch in C# or Select Case in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>An operation that throws an exception, such as throw new Exception().</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>A try-catch expression.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>An explicit reference or boxing conversion in which null is supplied if the conversion fails, such as (obj as SampleType) in C# or TryCast(obj, SampleType) in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>An exact type test.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>A type test, such as obj is SampleType in C# or TypeOf obj is SampleType in Visual Basic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>A unary plus operation, such as (+a). The result of a predefined unary plus operation is the value of the operand, but user-defined implementations might have unusual results.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>An unbox value type operation, such as unbox and unbox.any instructions in MSIL.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>Represents a visitor or rewriter for expression trees.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Linq.Expressions.ExpressionVisitor"></see>.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>Dispatches the list of expressions to one of the more specialized visit methods in this class.</summary>
      <param name="nodes">The expressions to visit.</param>
      <returns>The modified expression list, if any one of the elements were modified; otherwise, returns the original expression list.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>Dispatches the expression to one of the more specialized visit methods in this class.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>Visits all nodes in the collection using a specified element visitor.</summary>
      <param name="nodes">The nodes to visit.</param>
      <param name="elementVisitor">A delegate that visits a single element, optionally replacing it with a new element.</param>
      <typeparam name="T">The type of the nodes.</typeparam>
      <returns>The modified node list, if any of the elements were modified; otherwise, returns the original node list.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>Visits all expressions in the collection, casting the results back to the original expression type.</summary>
      <param name="nodes">The expressions to visit.</param>
      <param name="callerName">The name of the calling method; used to report to report a better error message.</param>
      <typeparam name="T">The type of the expressions.</typeparam>
      <returns>The modified expression collection, if any expression was modified; otherwise, returns the original expression collection.</returns>
      <exception cref="T:System.InvalidOperationException">The visit method for one of the expressions returned a different type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>Visits an expression, casting the result back to the original expression type.</summary>
      <param name="node">The expression to visit.</param>
      <param name="callerName">The name of the calling method; used to report to report a better error message.</param>
      <typeparam name="T">The type of the expression.</typeparam>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <exception cref="T:System.InvalidOperationException">The visit method for this node returned a different type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.BinaryExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.BlockExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.CatchBlock"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.ConditionalExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.ConstantExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.DebugInfoExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.DefaultExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.DynamicExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.ElementInit"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>Visits the children of the extension expression.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.GotoExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.IndexExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.InvocationExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.LabelExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.LabelTarget"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.Expression`1"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <typeparam name="T">The type of the delegate.</typeparam>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.ListInitExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.LoopExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberAssignment"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberBinding"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberInitExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberListBinding"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberMemberBinding"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MethodCallExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.NewExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.NewArrayExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.ParameterExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.SwitchExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.SwitchCase"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.TryExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.TypeBinaryExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.UnaryExpression"></see>.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>Represents an unconditional jump. This includes return statements, break and continue statements, and other jumps.</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>The kind of the &quot;go to&quot; expression. Serves information purposes only.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.GotoExpressionKind"></see> object representing the kind of the &quot;go to&quot; expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression"></see>.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>The target label where this node jumps to.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget"></see> object representing the target label for this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.GotoExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="target">The <see cref="P:System.Linq.Expressions.GotoExpression.Target"></see> property of the result.</param>
      <param name="value">The <see cref="P:System.Linq.Expressions.GotoExpression.Value"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>The value passed to the target, or null if the target is of type System.Void.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression"></see> object representing the value passed to the target or null.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>Specifies what kind of jump this <see cref="T:System.Linq.Expressions.GotoExpression"></see> represents.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression"></see> that represents a break statement.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression"></see> that represents a continue statement.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression"></see> that represents a jump to some location.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression"></see> that represents a return statement.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Linq.Expressions.IArgumentProvider">
      <summary><p sourcefile="System.Linq.Expressions.yml" sourcestartlinenumber="1" sourceendlinenumber="7"><p sourcefile="System.Linq.Expressions.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and InexExpression).  You should not use this API.  It is only public due to DLL refactoring and exists only for internal performance optimizations.  </p>
<p sourcefile="System.Linq.Expressions.yml" sourcestartlinenumber="3" sourceendlinenumber="3"> This enables two optimizations which reduce the size of expression trees.  The first enables the tree nodes to hold onto an IList<t> instead of a ReadOnlyCollection.  IList<t> saves the cost of allocating the ReadOnlyCollection for each node.  The second enables creating specialized subclasses that hold onto a specific number of arguments (for example, Block2, Block3, Block4).  Therefore, these nodes avoid allocating both a ReadOnlyCollection and an array for storing their elements, saving 32 bytes per node.  <p>
<p sourcefile="System.Linq.Expressions.yml" sourcestartlinenumber="5" sourceendlinenumber="5"> The expression tree nodes continue to expose the original LINQ properties of ReadOnlyCollections.  The nodes do this by re-using a field for storing both the array or an element that would normally be stored in the array.  </p>
<p sourcefile="System.Linq.Expressions.yml" sourcestartlinenumber="7" sourceendlinenumber="7"> For the array case, the collection is typed to IList<t> instead of ReadOnlyCollection<t>.  When the node is initially constructed it is an array.  When the compiler accesses the members it uses this interface.  Accessing array elements promotes the array to a ReadOnlyCollection.  <p>
<p sourcefile="System.Linq.Expressions.yml" sourcestartlinenumber="9" sourceendlinenumber="9"> For the object case we store the first argument in a field typed to object.  When the node is initially constructed, the field holds the Expression.  The compiler accesses arguments through this interface, and the accessor for the first argument uses Expression.ReturnObject to return the object that handles the Expression or ReadOnlyCollection case.  When the user accesses the ReadOnlyCollection, then the object field is updated to hold directly onto the ReadOnlyCollection.  </p>
<p sourcefile="System.Linq.Expressions.yml" sourcestartlinenumber="11" sourceendlinenumber="11"> It is important that the Expressions consistently return the same ReadOnlyCollection.  Otherwise, the re-writer tree walker will break.  It is a breaking change from LINQ v1 to return different ReadOnlyCollections form the same Expression node.  Currently users can rely on object identity to tell if the node has changed.  Storing the ReadOnlyCollection in an overloaded field both reduces memory usage and maintains compatibility for the public API.</p>
</t></t></t></t></p>
</summary>
    </member>
    <member name="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
      <summary>Returns the number of arguments to the expression tree node.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <returns>The number of arguments to the expression tree node as <see cref="T:System.Int32"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
      <summary>Returns the argument at index, throwing if index is out of bounds.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <param name="index">The index of the argument.</param>
      <returns>The argument at index, throwing if index is out of bounds as <see cref="T:System.Linq.Expressions.Expression"></see>.</returns>
    </member>
    <member name="T:System.Linq.Expressions.IDynamicExpression">
      <summary>Provides an internal interface for accessing the arguments of DynamicExpression tree nodes as well as CallSite and Rewriting functionality.  You should not use this API.  It is only public due to DLL refactoring and exists only for internal performance optimizations.</summary>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.CreateCallSite">
      <summary>Optionally creates the CallSite and returns the CallSite for the DynamicExpression’s polymorphic inline cache.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <returns>The CallSite for the DynamicExpression’s polymorphic inline cache.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IDynamicExpression.DelegateType">
      <summary>Gets the delegate type used by the CallSite, which is the type of the rules used in the dynamic expression’s polymorhphic inline cache.</summary>
      <returns>The delegate type used by the CallSite.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])">
      <summary>Rewrites this node replacing the dynamic expression’s arguments with the provided values.  The number of args needs to match the number of the current expression.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.  This helper method allows re-writing of nodes to be independent of the specific implementation class deriving from DynamicExpression that is being used at the call site.</summary>
      <param name="args">The arguments used to replace this node.</param>
      <returns>The rewritten node, but if no changes were made, then returns the same node.</returns>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>Represents indexing a property or array.</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>Gets the arguments that will be used to index the property or array.</summary>
      <returns>The read-only collection containing the arguments that will be used to index the property or array.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>Gets the <see cref="T:System.Reflection.PropertyInfo"></see> for the property if the expression represents an indexed property, returns null otherwise.</summary>
      <returns>The <see cref="T:System.Reflection.PropertyInfo"></see> for the property if the expression represents an indexed property, otherwise null.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression"></see>.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>An object to index.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression"></see> representing the object to index.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.IndexExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="object">The <see cref="P:System.Linq.Expressions.IndexExpression.Object"></see> property of the result.</param>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.IndexExpression.Arguments"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <returns>Returns <see cref="T:System.Int32"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <param name="index">The index of the argument.</param>
      <returns>Returns <see cref="T:System.Linq.Expressions.Expression"></see>.</returns>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>Represents an expression that applies a delegate or lambda expression to a list of argument expressions.</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>Gets the arguments that the delegate or lambda expression is applied to.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"></see> of <see cref="T:System.Linq.Expressions.Expression"></see> objects which represent the arguments that the delegate is applied to.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>Gets the delegate or lambda expression to be applied.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the delegate to be applied.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension"></see> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="P:System.Linq.Expressions.InvocationExpression.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.InvocationExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="expression">The <see cref="P:System.Linq.Expressions.InvocationExpression.Expression"></see> property of the result.</param>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <returns>The number of arguments to the expression tree node as <see cref="T:System.Int32"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <param name="index">The index of the argument.</param>
      <returns>The argument at index, throwing if index is out of bounds, as <see cref="T:System.Linq.Expressions.Expression"></see>.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>Represents a label, which can be put in any <see cref="T:System.Linq.Expressions.Expression"></see> context. If it is jumped to, it will get the value provided by the corresponding <see cref="T:System.Linq.Expressions.GotoExpression"></see>. Otherwise, it receives the value in <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue"></see>. If the <see cref="T:System.Type"></see> equals System.Void, no value should be provided.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>The value of the <see cref="T:System.Linq.Expressions.LabelExpression"></see> when the label is reached through regular control flow (for example, is not jumped to).</summary>
      <returns>The Expression object representing the value of the <see cref="T:System.Linq.Expressions.LabelExpression"></see>.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression"></see>.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>The <see cref="T:System.Linq.Expressions.LabelTarget"></see> which this label is associated with.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget"></see> which this label is associated with.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.LabelExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="target">The <see cref="P:System.Linq.Expressions.LabelExpression.Target"></see> property of the result.</param>
      <param name="defaultValue">The <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue"></see> property of the result</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>Used to represent the target of a <see cref="T:System.Linq.Expressions.GotoExpression"></see>.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>Gets the name of the label.</summary>
      <returns>The name of the label.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.</summary>
      <returns>A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>The type of value that is passed when jumping to the label (or <see cref="T:System.Void"></see> if no value should be passed).</summary>
      <returns>The <see cref="T:System.Type"></see> object representing the type of the value that is passed when jumping to the label or <see cref="T:System.Void"></see> if no value should be passed</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>Describes a lambda expression. This captures a block of code that is similar to a .NET method body.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>Gets the body of the lambda expression.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the body of the lambda expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>Produces a delegate that represents the lambda expression.</summary>
      <returns>A <see cref="T:System.Delegate"></see> that contains the compiled version of the lambda expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)">
      <param name="preferInterpretation"></param>
      <returns></returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Produces a delegate that represents the lambda expression.</summary>
      <param name="debugInfoGenerator">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</param>
      <returns>A delegate containing the compiled version of the lambda.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>Gets the name of the lambda expression.</summary>
      <returns>The name of the lambda expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression"></see>.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>Gets the parameters of the lambda expression.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"></see> of <see cref="T:System.Linq.Expressions.ParameterExpression"></see> objects that represent the parameters of the lambda expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>Gets the return type of the lambda expression.</summary>
      <returns>The <see cref="T:System.Type"></see> object representing the type of the lambda expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>Gets the value that indicates if the lambda expression will be compiled with the tail call optimization.</summary>
      <returns>True if the lambda expression will be compiled with the tail call optimization, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.LambdaExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>Represents a constructor call that has a collection initializer.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>True if the node can be reduced, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>Gets the element initializers that are used to initialize a collection.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"></see> of <see cref="T:System.Linq.Expressions.ElementInit"></see> objects which represent the elements that are used to initialize the collection.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>Gets the expression that contains a call to the constructor of a collection type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression"></see> that represents the call to the constructor of a collection type.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression"></see>.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> that represents this expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>Reduces the binary expression node to a simpler expression.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ListInitExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="newExpression">The <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression"></see> property of the result.</param>
      <param name="initializers">The <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>Represents an infinite loop. It can be exited with &quot;break&quot;.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression"></see> that is the body of the loop.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression"></see> that is the body of the loop.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>Gets the <see cref="T:System.Linq.Expressions.LabelTarget"></see> that is used by the loop body as a break statement target.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget"></see> that is used by the loop body as a break statement target.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>Gets the <see cref="T:System.Linq.Expressions.LabelTarget"></see> that is used by the loop body as a continue statement target.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget"></see> that is used by the loop body as a continue statement target.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension"></see> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.LoopExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="breakLabel">The <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel"></see> property of the result.</param>
      <param name="continueLabel">The <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel"></see> property of the result.</param>
      <param name="body">The <see cref="P:System.Linq.Expressions.LoopExpression.Body"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>Represents assignment operation for a field or property of an object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>Gets the expression to assign to the field or property.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression"></see> that represents the value to assign to the field or property.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="expression">The <see cref="P:System.Linq.Expressions.MemberAssignment.Expression"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>Provides the base class from which the classes that represent bindings that are used to initialize members of a newly created object derive.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.Expressions.MemberBinding"></see> class.</summary>
      <param name="type">The <see cref="T:System.Linq.Expressions.MemberBindingType"></see> that discriminates the type of binding that is represented.</param>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo"></see> that represents a field or property to be initialized.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>Gets the type of binding that is represented.</summary>
      <returns>One of the <see cref="T:System.Linq.Expressions.MemberBindingType"></see> values.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>Gets the field or property to be initialized.</summary>
      <returns>The <see cref="T:System.Reflection.MemberInfo"></see> that represents the field or property to be initialized.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>Returns a textual representation of the <see cref="T:System.Linq.Expressions.MemberBinding"></see>.</summary>
      <returns>A textual representation of the <see cref="T:System.Linq.Expressions.MemberBinding"></see>.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>Describes the binding types that are used in <see cref="T:System.Linq.Expressions.MemberInitExpression"></see> objects.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>A binding that represents initializing a member with the value of an expression.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>A binding that represents initializing a member of type <see cref="T:System.Collections.IList"></see> or <see cref="T:System.Collections.Generic.ICollection`1"></see> from a list of elements.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>A binding that represents recursively initializing members of a member.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>Represents accessing a field or property.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)"></see>.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>Gets the containing object of the field or property.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the containing object of the field or property.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>Gets the field or property to be accessed.</summary>
      <returns>The <see cref="T:System.Reflection.MemberInfo"></see> that represents the field or property to be accessed.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>Returns the node type of this <see cref="P:System.Linq.Expressions.MemberExpression.Expression"></see>.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> that represents this expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="expression">The <see cref="P:System.Linq.Expressions.MemberExpression.Expression"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>Represents calling a constructor and initializing one or more members of the new object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>Gets the bindings that describe how to initialize the members of the newly created object.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"></see> of <see cref="T:System.Linq.Expressions.MemberBinding"></see> objects which describe how to initialize the members.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>True if the node can be reduced, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>Gets the expression that represents the constructor call.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression"></see> that represents the constructor call.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension"></see> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>Reduces the <see cref="T:System.Linq.Expressions.MemberInitExpression"></see> to a simpler expression.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.MemberInitExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="newExpression">The <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression"></see> property of the result.</param>
      <param name="bindings">The <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>Represents initializing the elements of a collection member of a newly created object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>Gets the element initializers for initializing a collection member of a newly created object.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"></see> of <see cref="T:System.Linq.Expressions.ElementInit"></see> objects to initialize a collection member with.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="initializers">The <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>Represents initializing members of a member of a newly created object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>Gets the bindings that describe how to initialize the members of a member.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"></see> of <see cref="T:System.Linq.Expressions.MemberBinding"></see> objects that describe how to initialize the members of the member.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="bindings">The <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>Represents a call to either static or an instance method.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)"></see>.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>Gets a collection of expressions that represent arguments of the called method.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"></see> of <see cref="T:System.Linq.Expressions.Expression"></see> objects which represent the arguments to the called method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>Gets the <see cref="T:System.Reflection.MethodInfo"></see> for the method to be called.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo"></see> that represents the called method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression"></see>.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression"></see> that represents the instance for instance method calls or null for static method calls.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the receiving object of the method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.MethodCallExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="object">The <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"></see> property of the result.</param>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <returns>The number of arguments to the expression tree node as  <see cref="T:System.Int32"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <param name="index">The index of the argument.</param>
      <returns>Returns <see cref="T:System.Linq.Expressions.Expression"></see>.</returns>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>Represents creating a new array and possibly initializing the elements of the new array.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)"></see>.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>Gets the bounds of the array if the value of the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property is <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds"></see>, or the values to initialize the elements of the new array if the value of the <see cref="P:System.Linq.Expressions.Expression.NodeType"></see> property is <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit"></see>.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"></see> of <see cref="T:System.Linq.Expressions.Expression"></see> objects which represent either the bounds of the array or the initialization values.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.NewArrayExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="expressions">The <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>Represents a constructor call.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)"></see>.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>Gets the arguments to the constructor.</summary>
      <returns>A collection of <see cref="T:System.Linq.Expressions.Expression"></see> objects that represent the arguments to the constructor.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>Gets the called constructor.</summary>
      <returns>The <see cref="T:System.Reflection.ConstructorInfo"></see> that represents the called constructor.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>Gets the members that can retrieve the values of the fields that were initialized with constructor arguments.</summary>
      <returns>A collection of <see cref="T:System.Reflection.MemberInfo"></see> objects that represent the members that can retrieve the values of the fields that were initialized with constructor arguments.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression"></see>.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.NewExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.NewExpression.Arguments"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Gets the number of arguments to the expression tree node.</summary>
      <returns>The number of arguments to the expression tree node.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Returns the argument at index, throwing if index is out of bounds.</summary>
      <param name="index">The index of the argument.</param>
      <returns>The argument at index, throwing if index is out of bounds.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>Represents a named parameter expression.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression"></see> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)"></see>.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>Indicates that this ParameterExpression is to be treated as a ByRef parameter.</summary>
      <returns>True if this ParameterExpression is a ByRef parameter, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>Gets the name of the parameter or variable.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the name of the parameter.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression"></see>.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ParameterExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>An expression that provides runtime read/write permission for variables.</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension"></see> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="variables">The <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>The variables or parameters to which to provide runtime access.</summary>
      <returns>The read-only collection containing parameters that will be provided the runtime access.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>Represents one case of a <see cref="T:System.Linq.Expressions.SwitchExpression"></see>.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>Gets the body of this case.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression"></see> object that represents the body of the case block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>Gets the values of this case. This case is selected for execution when the <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue"></see> matches any of these values.</summary>
      <returns>The read-only collection of the values for this case block.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.</summary>
      <returns>A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="testValues">The <see cref="P:System.Linq.Expressions.SwitchCase.TestValues"></see> property of the result.</param>
      <param name="body">The <see cref="P:System.Linq.Expressions.SwitchCase.Body"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>Represents a control expression that handles multiple selections by passing control to <see cref="T:System.Linq.Expressions.SwitchCase"></see>.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>Gets the collection of <see cref="T:System.Linq.Expressions.SwitchCase"></see> objects for the switch.</summary>
      <returns>The collection of <see cref="T:System.Linq.Expressions.SwitchCase"></see> objects.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>Gets the equality comparison method, if any.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo"></see> object representing the equality comparison method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>Gets the test for the switch.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression"></see> object representing the test for the switch.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension"></see> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>Gets the test for the switch.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression"></see> object representing the test for the switch.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.SwitchExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="switchValue">The <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue"></see> property of the result.</param>
      <param name="cases">The <see cref="P:System.Linq.Expressions.SwitchExpression.Cases"></see> property of the result.</param>
      <param name="defaultBody">The <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>Stores information necessary to emit debugging symbol information for a source file, in particular the file name and unique language identifier.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>Returns the document type's unique identifier, if any. Defaults to the GUID for a text file.</summary>
      <returns>The document type's unique identifier.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>The source file name.</summary>
      <returns>The string representing the source file name.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>Returns the language's unique identifier, if any.</summary>
      <returns>The language's unique identifier</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>Returns the language vendor's unique identifier, if any.</summary>
      <returns>The language vendor's unique identifier.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>Represents a try/catch/finally/fault block.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression"></see> representing the body of the try block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression"></see> representing the body of the try block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression"></see> representing the fault block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression"></see> representing the fault block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression"></see> representing the finally block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression"></see> representing the finally block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>Gets the collection of <see cref="T:System.Linq.Expressions.CatchBlock"></see> expressions associated with the try block.</summary>
      <returns>The collection of <see cref="T:System.Linq.Expressions.CatchBlock"></see> expressions associated with the try block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression"></see>.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.TryExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="body">The <see cref="P:System.Linq.Expressions.TryExpression.Body"></see> property of the result.</param>
      <param name="handlers">The <see cref="P:System.Linq.Expressions.TryExpression.Handlers"></see> property of the result.</param>
      <param name="finally">The <see cref="P:System.Linq.Expressions.TryExpression.Finally"></see> property of the result.</param>
      <param name="fault">The <see cref="P:System.Linq.Expressions.TryExpression.Fault"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>Represents an operation between an expression and a type.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>Gets the expression operand of a type test operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the expression operand of a type test operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension"></see> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>Gets the type operand of a type test operation.</summary>
      <returns>A <see cref="T:System.Type"></see> that represents the type operand of a type test operation.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="expression">The <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>Represents an expression that has a unary operator.</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>True if a node can be reduced, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator.</summary>
      <returns>true if the node represents a lifted call; otherwise, false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.</summary>
      <returns>true if the operator's return type is lifted to a nullable type; otherwise, false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>Gets the implementing method for the unary operation.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo"></see> that represents the implementing method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression"></see>.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType"></see> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>Gets the operand of the unary operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the operand of the unary operation.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>Reduces the expression node to a simpler expression.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"></see> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.UnaryExpression.Type"></see> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="operand">The <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"></see> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
  </members>
</doc></span>