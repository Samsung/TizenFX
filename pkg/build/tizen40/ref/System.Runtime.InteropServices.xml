<?xml version="1.0" encoding="utf-8"?><span>
<doc>
  <assembly>
    <name>System.Runtime.InteropServices</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute">
      <summary>Specifies the method to call when you register an assembly for use from COM; this enables the execution of user-written code during the registration process.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComRegisterFunctionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute"></see> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary>Identifies a list of interfaces that are exposed as COM event sources for the attributed class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute"></see> class with the name of the event source interface.</summary>
      <param name="sourceInterfaces">A null-delimited list of fully qualified event source interface names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute"></see> class with the type to use as a source interface.</summary>
      <param name="sourceInterface">The <see cref="T:System.Type"></see> of the source interface.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute"></see> class with the types to use as source interfaces.</summary>
      <param name="sourceInterface1">The <see cref="T:System.Type"></see> of the default source interface.</param>
      <param name="sourceInterface2">The <see cref="T:System.Type"></see> of a source interface.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary>Initializes a new instance of the ComSourceInterfacesAttribute class with the types to use as source interfaces.</summary>
      <param name="sourceInterface1">The <see cref="T:System.Type"></see> of the default source interface.</param>
      <param name="sourceInterface2">The <see cref="T:System.Type"></see> of a source interface.</param>
      <param name="sourceInterface3">The <see cref="T:System.Type"></see> of a source interface.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute"></see> class with the types to use as source interfaces.</summary>
      <param name="sourceInterface1">The <see cref="T:System.Type"></see> of the default source interface.</param>
      <param name="sourceInterface2">The <see cref="T:System.Type"></see> of a source interface.</param>
      <param name="sourceInterface3">The <see cref="T:System.Type"></see> of a source interface.</param>
      <param name="sourceInterface4">The <see cref="T:System.Type"></see> of a source interface.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary>Gets the fully qualified name of the event source interface.</summary>
      <returns>The fully qualified name of the event source interface.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ADVF">
      <summary>Specifies the requested behavior when setting up an advise sink or a caching connection with an object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_DATAONSTOP">
      <summary>For data advisory connections, assures accessibility to data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_NODATA">
      <summary>For data advisory connections (<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)"></see> or <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)"></see>), this flag requests the data object not to send data when it calls <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_ONLYONCE">
      <summary>Requests that the object make only one change notification or cache update before deleting the connection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_PRIMEFIRST">
      <summary>Requests that the object not wait for the data or view to change before making an initial call to <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see> (for data or view advisory connections) or updating the cache (for cache connections).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN">
      <summary>This value is used by DLL object applications and object handlers that perform the drawing of their objects.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_NOHANDLER">
      <summary>Synonym for <see cref="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN"></see>, which is used more often.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_ONSAVE">
      <summary>For cache connections, this flag updates the cached representation only when the object containing the cache is saved.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BINDPTR">
      <summary>Contains a pointer to a bound-to <see cref="T:System.Runtime.InteropServices.FUNCDESC"></see> structure, <see cref="T:System.Runtime.InteropServices.VARDESC"></see> structure, or an ITypeComp interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpfuncdesc">
      <summary>Represents a pointer to a <see cref="T:System.Runtime.InteropServices.FUNCDESC"></see> structure.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lptcomp">
      <summary>Represents a pointer to an <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeComp"></see> interface.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpvardesc">
      <summary>Represents a pointer to a <see cref="T:System.Runtime.InteropServices.VARDESC"></see> structure.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BIND_OPTS">
      <summary>Stores the parameters that are used during a moniker binding operation.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.cbStruct">
      <summary>Specifies the size, in bytes, of the BIND_OPTS structure.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.dwTickCountDeadline">
      <summary>Indicates the amount of time (clock time in milliseconds, as returned by the GetTickCount function) that the caller specified to complete the binding operation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfFlags">
      <summary>Controls aspects of moniker binding operations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfMode">
      <summary>Represents flags that should be used when opening the file that contains the object identified by the moniker.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CALLCONV">
      <summary>Identifies the calling convention used by a method described in a <see cref="https://msdn.microsoft.com/library/85fd7121-3eed-4a83-9ba2-caa81fa1e048">METHODDATA</see> structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_CDECL">
      <summary>Indicates that the C declaration (CDECL) calling convention is used for a method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MACPASCAL">
      <summary>Indicates that the Macintosh Pascal (MACPASCAL) calling convention is used for a method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MAX">
      <summary>Indicates the end of the <see cref="T:System.Runtime.InteropServices.ComTypes.CALLCONV"></see> enumeration.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWCDECL">
      <summary>Indicates that the Macintosh Programmers' Workbench (MPW) CDECL calling convention is used for a method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWPASCAL">
      <summary>Indicates that the Macintosh Programmers' Workbench (MPW) PASCAL calling convention is used for a method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MSCPASCAL">
      <summary>Indicates that the MSC Pascal (MSCPASCAL) calling convention is used for a method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_PASCAL">
      <summary>Indicates that the Pascal calling convention is used for a method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_RESERVED">
      <summary>This value is reserved for future use.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_STDCALL">
      <summary>Indicates that the standard calling convention (STDCALL) is used for a method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_SYSCALL">
      <summary>Indicates that the standard SYSCALL calling convention is used for a method.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CONNECTDATA">
      <summary>Describes a connection that exists to a given connection point.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.dwCookie">
      <summary>Represents a connection token that is returned from a call to <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.pUnk">
      <summary>Represents a pointer to the IUnknown interface on a connected advisory sink. The caller must call IUnknown::Release on this pointer when the CONNECTDATA structure is no longer needed.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DATADIR">
      <summary>Specifies the direction of the data flow in the <paramref name="dwDirection">dwDirection</paramref> parameter of the <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)"></see> method. This determines the formats that the resulting enumerator can enumerate.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_GET">
      <summary>Requests that <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)"></see> supply an enumerator for the formats that can be specified in <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_SET">
      <summary>Requests that <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)"></see> supply an enumerator for the formats that can be specified in <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)"></see>.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DESCKIND">
      <summary>Identifies the type description being bound to.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_FUNCDESC">
      <summary>Indicates that a <see cref="T:System.Runtime.InteropServices.FUNCDESC"></see> structure was returned.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary>Indicates that an IMPLICITAPPOBJ was returned.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_MAX">
      <summary>Indicates an end-of-enumeration marker.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_NONE">
      <summary>Indicates that no match was found.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_TYPECOMP">
      <summary>Indicates that a TYPECOMP was returned.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_VARDESC">
      <summary>Indicates that a VARDESC was returned.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DISPPARAMS">
      <summary>Contains the arguments passed to a method or property by IDispatch::Invoke.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cArgs">
      <summary>Represents the count of arguments.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cNamedArgs">
      <summary>Represents the count of named arguments</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgdispidNamedArgs">
      <summary>Represents the dispatch IDs of named arguments.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgvarg">
      <summary>Represents a reference to the array of arguments.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DVASPECT">
      <summary>Specifies the desired data or view aspect of the object when drawing or getting data.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT">
      <summary>A representation of an object that lets that object be displayed as an embedded object inside a container. This value is typically specified for compound document objects. The presentation can be provided for the screen or printer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_DOCPRINT">
      <summary>A representation of an object on the screen as though it were printed to a printer using the Print command from the File menu. The described data may represent a sequence of pages.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_ICON">
      <summary>An iconic representation of an object.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_THUMBNAIL">
      <summary>A thumbnail representation of an object that lets that object be displayed in a browsing tool. The thumbnail is approximately a 120 by 120 pixel, 16-color (recommended), device-independent bitmap potentially wrapped in a metafile.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION">
      <summary>Contains information about an element.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.idldesc">
      <summary>Contains information for remoting the element.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.paramdesc">
      <summary>Contains information about the parameter.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC">
      <summary>Contains the type description and process transfer information for a variable, function, or a function parameter.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.desc">
      <summary>Contains information about an element.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.tdesc">
      <summary>Identifies the type of the element.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.EXCEPINFO">
      <summary>Describes the exceptions that occur during IDispatch::Invoke.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrDescription">
      <summary>Describes the error intended for the customer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrHelpFile">
      <summary>Contains the fully-qualified drive, path, and file name of a Help file that contains more information about the error.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrSource">
      <summary>Indicates the name of the source of the exception. Typically, this is an application name.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.dwHelpContext">
      <summary>Indicates the Help context ID of the topic within the Help file.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pfnDeferredFillIn">
      <summary>Represents a pointer to a function that takes an <see cref="T:System.Runtime.InteropServices.EXCEPINFO"></see> structure as an argument and returns an HRESULT value. If deferred fill-in is not desired, this field is set to null.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pvReserved">
      <summary>This field is reserved; it must be set to null.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.scode">
      <summary>A return value describing the error.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wCode">
      <summary>Represents an error code identifying the error.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wReserved">
      <summary>This field is reserved; it must be set to 0.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FILETIME">
      <summary>Represents the number of 100-nanosecond intervals since January 1, 1601. This structure is a 64-bit value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwHighDateTime">
      <summary>Specifies the high 32 bits of the FILETIME.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwLowDateTime">
      <summary>Specifies the low 32 bits of the FILETIME.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FORMATETC">
      <summary>Represents a generalized Clipboard format.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.cfFormat">
      <summary>Specifies the particular clipboard format of interest.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect">
      <summary>Specifies one of the <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT"></see> enumeration constants that indicates how much detail should be contained in the rendering.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex">
      <summary>Specifies part of the aspect when the data must be split across page boundaries.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.ptd">
      <summary>Specifies a pointer to a DVTARGETDEVICE structure containing information about the target device that the data is being composed for.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed">
      <summary>Specifies one of the <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED"></see> enumeration constants, which indicates the type of storage medium used to transfer the object's data.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCDESC">
      <summary>Defines a function description.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.callconv">
      <summary>Specifies the calling convention of a function.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParams">
      <summary>Counts the total number of parameters.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParamsOpt">
      <summary>Counts the optional parameters.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cScodes">
      <summary>Counts the permitted return values.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.elemdescFunc">
      <summary>Contains the return type of the function.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.funckind">
      <summary>Specifies whether the function is virtual, static, or dispatch-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.invkind">
      <summary>Specifies the type of a property function.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgelemdescParam">
      <summary>Indicates the size of <see cref="F:System.Runtime.InteropServices.FUNCDESC.cParams"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgscode">
      <summary>Stores the count of errors a function can return on a 16-bit system.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.memid">
      <summary>Identifies the function member ID.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.oVft">
      <summary>Specifies the offset in the VTBL for <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.wFuncFlags">
      <summary>Indicates the <see cref="T:System.Runtime.InteropServices.FUNCFLAGS"></see> of a function.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCFLAGS">
      <summary>Identifies the constants that define the properties of a function.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary>The function that supports data binding.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary>The function that best represents the object. Only one function in a type can have this attribute.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary>Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type of &quot;abc&quot;. If such a member is found, and is flagged as an accessor function for an element of the default collection, a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary>The function that is displayed to the user as bindable. <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE"></see> must also be set.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary>The function should not be displayed to the user, although it exists and is bindable.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary>Mapped as individual bindable properties.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary>The property appears in an object browser, but not in a properties browser.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary>Tags the interface as having default behaviors.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary>When set, any call to a method that sets the property results first in a call to IPropertyNotifySink::OnRequestEdit. The implementation of OnRequestEdit determines if the call is allowed to set the property.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary>The function should not be accessible from macro languages. This flag is intended for system-level functions or functions that type browsers should not display.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary>The function returns an object that is a source of events.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary>The type information member is the default member for display in the user interface.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary>The function supports GetLastError. If an error occurs during the function, the caller can call GetLastError to retrieve the error code.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCKIND">
      <summary>Defines how to access a function.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_DISPATCH">
      <summary>The function can be accessed only through IDispatch.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_NONVIRTUAL">
      <summary>The function is accessed by static address and takes an implicit this pointer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary>The function is accessed through the virtual function table (VTBL), and takes an implicit this pointer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_STATIC">
      <summary>The function is accessed by static address and does not take an implicit this pointer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_VIRTUAL">
      <summary>The function is accessed in the same way as <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL"></see>, except the function has an implementation.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IAdviseSink">
      <summary>Provides a managed definition of the IAdviseSink interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnClose">
      <summary>Notifies all registered advisory sinks that the object has changed from the running state to the loaded state.  This method is called by a server.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Notifies all data objects currently registered advisory sinks that data in the object has changed.</summary>
      <param name="format">A <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see>, passed by reference, which describes the format, target device, rendering, and storage information of the calling data object.</param>
      <param name="stgmedium">A <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see>, passed by reference, which defines the storage medium (global memory, disk file, storage object, stream object, Graphics Device Interface (GDI) object, or undefined) and ownership of that medium for the calling data object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Notifies all registered advisory sinks that the object has been renamed. This method is called by a server.</summary>
      <param name="moniker">A pointer to the IMoniker interface on the new full moniker of the object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnSave">
      <summary>Notifies all registered advisory sinks that the object has been saved. This method is called by a server.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnViewChange(System.Int32,System.Int32)">
      <summary>Notifies an object's registered advisory sinks that its view has changed. This method is called by a server.</summary>
      <param name="aspect">The aspect, or view, of the object. Contains a value taken from the <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT"></see> enumeration.</param>
      <param name="index">The portion of the view that has changed. Currently, only -1 is valid.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IBindCtx">
      <summary>Provides the managed definition of the IBindCtx interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>Enumerates the strings that are the keys of the internally maintained table of contextual object parameters.</summary>
      <param name="ppenum">When this method returns, contains a reference to the object parameter enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>Returns the current binding options stored in the current bind context.</summary>
      <param name="pbindopts">A pointer to the structure to receive the binding options.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetObjectParam(System.String,System.Object@)">
      <summary>Looks up the given key in the internally maintained table of contextual object parameters and returns the corresponding object, if one exists.</summary>
      <param name="pszKey">The name of the object to search for.</param>
      <param name="ppunk">When this method returns, contains the object interface pointer. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetRunningObjectTable(System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)">
      <summary>Returns access to the Running Object Table (ROT) relevant to this binding process.</summary>
      <param name="pprot">When this method returns, contains a reference to the Running Object Table (ROT). This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)">
      <summary>Registers the passed object as one of the objects that has been bound during a moniker operation and that should be released when the operation is complete.</summary>
      <param name="punk">The object to register for release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectParam(System.String,System.Object)">
      <summary>Registers the specified object pointer under the specified name in the internally maintained table of object pointers.</summary>
      <param name="pszKey">The name to register punk with.</param>
      <param name="punk">The object to register.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.ReleaseBoundObjects">
      <summary>Releases all the objects currently registered with the bind context by using the <see cref="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)"></see> method.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectBound(System.Object)">
      <summary>Removes the object from the set of registered objects that need to be released.</summary>
      <param name="punk">The object to unregister for release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectParam(System.String)">
      <summary>Revokes the registration of the object currently found under the specified key in the internally maintained table of contextual object parameters, if that key is currently registered.</summary>
      <param name="pszKey">The key to unregister.</param>
      <returns>An S_OK``HRESULT value if the specified key was successfully removed from the table; otherwise, an S_FALSE``HRESULT value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.SetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>Stores a block of parameters in the bind context. These parameters will apply to later UCOMIMoniker operations that use this bind context.</summary>
      <param name="pbindopts">The structure containing the binding options to set.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPoint">
      <summary>Provides the managed definition of the IConnectionPoint interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)">
      <summary>Establishes an advisory connection between the connection point and the caller's sink object.</summary>
      <param name="pUnkSink">A reference to the sink to receive calls for the outgoing interface managed by this connection point.</param>
      <param name="pdwCookie">When this method returns, contains the connection cookie. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.EnumConnections(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>Creates an enumerator object for iteration through the connections that exist to this connection point.</summary>
      <param name="ppEnum">When this method returns, contains the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionInterface(System.Guid@)">
      <summary>Returns the IID of the outgoing interface managed by this connection point.</summary>
      <param name="pIID">When this parameter returns, contains the IID of the outgoing interface managed by this connection point. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionPointContainer(System.Runtime.InteropServices.ComTypes.IConnectionPointContainer@)">
      <summary>Retrieves the IConnectionPointContainer interface pointer to the connectable object that conceptually owns this connection point.</summary>
      <param name="ppCPC">When this parameter returns, contains the connectable object's IConnectionPointContainer interface. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Unadvise(System.Int32)">
      <summary>Terminates an advisory connection previously established through the <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)"></see> method.</summary>
      <param name="dwCookie">The connection cookie previously returned from the <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)"></see> method.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer">
      <summary>Provides the managed definition of the IConnectionPointContainer interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.EnumConnectionPoints(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>Creates an enumerator of all the connection points supported in the connectable object, one connection point per IID.</summary>
      <param name="ppEnum">When this method returns, contains the interface pointer of the enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.FindConnectionPoint(System.Guid@,System.Runtime.InteropServices.ComTypes.IConnectionPoint@)">
      <summary>Asks the connectable object if it has a connection point for a particular IID, and if so, returns the IConnectionPoint interface pointer to that connection point.</summary>
      <param name="riid">A reference to the outgoing interface IID whose connection point is being requested.</param>
      <param name="ppCP">When this method returns, contains the connection point that manages the outgoing interface riid. This parameter is passed uninitialized.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDataObject">
      <summary>Provides the managed definition of the IDataObject interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary>Creates a connection between a data object and an advisory sink. This method is called by an object that supports an advisory sink and enables the advisory sink to be notified of changes in the object's data.</summary>
      <param name="pFormatetc">A <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure, passed by reference, that defines the format, target device, aspect, and medium that will be used for future notifications.</param>
      <param name="advf">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF"></see> values that specifies a group of flags for controlling the advisory connection.</param>
      <param name="adviseSink">A pointer to the <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink"></see> interface on the advisory sink that will receive the change notification.</param>
      <param name="connection">When this method returns, contains a pointer to a DWORD token that identifies this connection. You can use this token later to delete the advisory connection by passing it to <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)"></see>. If this value is zero, the connection was not established. This parameter is passed uninitialized.</param>
      <returns><p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="1" sourceendlinenumber="2"><p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="1" sourceendlinenumber="1">This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  </p>
 <table><thead><tr><th> Value  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="4" sourceendlinenumber="4"> </th><th> Description  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="6" sourceendlinenumber="6"> </th></tr></thead><tbody><tr><td> S_OK  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="8" sourceendlinenumber="8"> </td><td> The advisory connection was created.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="10" sourceendlinenumber="10"> </td></tr><tr><td> E_NOTIMPL  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="12" sourceendlinenumber="12"> </td><td> This method is not implemented on the data object.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="14" sourceendlinenumber="14"> </td></tr><tr><td> DV_E_LINDEX  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="16" sourceendlinenumber="16"> </td><td> There is an invalid value for <xref href="System.Runtime.InteropServices.ComTypes.FORMATETC.lindex"></xref>; currently, only -1 is supported.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="18" sourceendlinenumber="18"> </td></tr><tr><td> DV_E_FORMATETC  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="20" sourceendlinenumber="20"> </td><td> There is an invalid value for the <code data-dev-comment-type="paramref">pFormatetc</code> parameter.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="22" sourceendlinenumber="22"> </td></tr><tr><td> OLE_E_ADVISENOTSUPPORTED  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="24" sourceendlinenumber="24"> </td><td> The data object does not support change notification.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="26" sourceendlinenumber="26"> </td></tr></tbody></table></p>
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)">
      <summary>Destroys a notification connection that had been previously established.</summary>
      <param name="connection">A DWORD token that specifies the connection to remove. Use the value returned by <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)"></see> when the connection was originally established.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>Creates an object that can be used to enumerate the current advisory connections.</summary>
      <param name="enumAdvise">When this method returns, contains an <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA"></see> that receives the interface pointer to the new enumerator object. If the implementation sets enumAdvise to null, there are no connections to advisory sinks at this time. This parameter is passed uninitialized.</param>
      <returns><p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="1" sourceendlinenumber="2"><p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="1" sourceendlinenumber="1">This method supports the standard return value E_OUTOFMEMORY, as well as the following:  </p>
 <table><thead><tr><th> Value  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="4" sourceendlinenumber="4"> </th><th> Description  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="6" sourceendlinenumber="6"> </th></tr></thead><tbody><tr><td> S_OK  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="8" sourceendlinenumber="8"> </td><td> The enumerator object is successfully instantiated or there are no connections.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="10" sourceendlinenumber="10"> </td></tr><tr><td> OLE_E_ADVISENOTSUPPORTED  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="12" sourceendlinenumber="12"> </td><td> This object does not support advisory notifications.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="14" sourceendlinenumber="14"> </td></tr></tbody></table></p>
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary>Creates an object for enumerating the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structures for a data object. These structures are used in calls to <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see> or <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)"></see>.</summary>
      <param name="direction">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR"></see> values that specifies the direction of the data.</param>
      <returns><p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="1" sourceendlinenumber="2"><p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="1" sourceendlinenumber="1">This method supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following:  </p>
 <table><thead><tr><th> Value  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="4" sourceendlinenumber="4"> </th><th> Description  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="6" sourceendlinenumber="6"> </th></tr></thead><tbody><tr><td> S_OK  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="8" sourceendlinenumber="8"> </td><td> The enumerator object was successfully created.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="10" sourceendlinenumber="10"> </td></tr><tr><td> E_NOTIMPL  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="12" sourceendlinenumber="12"> </td><td> The direction specified by the <code data-dev-comment-type="paramref">direction</code> parameter is not supported.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="14" sourceendlinenumber="14"> </td></tr><tr><td> OLE_S_USEREG  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="16" sourceendlinenumber="16"> </td><td> Requests that OLE enumerate the formats from the registry.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="18" sourceendlinenumber="18"> </td></tr></tbody></table></p>
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>Provides a standard <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure that is logically equivalent to a more complex structure. Use this method to determine whether two different <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structures would return the same data, removing the need for duplicate rendering.</summary>
      <param name="formatIn">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure, passed by reference, that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call such as <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see>. The <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED"></see> member is not significant in this case and should be ignored.</param>
      <param name="formatOut">When this method returns, contains a pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure that contains the most general information possible for a specific rendering, making it canonically equivalent to formatetIn. The caller must allocate this structure and the <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)"></see> method must fill in the data. To retrieve data in a subsequent call such as <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see>, the caller uses the supplied value of formatOut, unless the value supplied is null. This value is null if the method returns DATA_S_SAMEFORMATETC. The <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED"></see> member is not significant in this case and should be ignored. This parameter is passed uninitialized.</param>
      <returns><p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="1" sourceendlinenumber="2"><p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="1" sourceendlinenumber="1">This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  </p>
 <table><thead><tr><th> Value  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="4" sourceendlinenumber="4"> </th><th> Description  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="6" sourceendlinenumber="6"> </th></tr></thead><tbody><tr><td> S_OK  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="8" sourceendlinenumber="8"> </td><td> The returned <xref href="System.Runtime.InteropServices.ComTypes.FORMATETC"></xref> structure is different from the one that was passed.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="10" sourceendlinenumber="10"> </td></tr><tr><td> DATA_S_SAMEFORMATETC  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="12" sourceendlinenumber="12"> </td><td> The <xref href="System.Runtime.InteropServices.ComTypes.FORMATETC"></xref> structures are the same and <code>null</code> is returned in the <code data-dev-comment-type="paramref">formatOut</code> parameter.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="14" sourceendlinenumber="14"> </td></tr><tr><td> DV_E_LINDEX  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="16" sourceendlinenumber="16"> </td><td> There is an invalid value for <xref href="System.Runtime.InteropServices.ComTypes.FORMATETC.lindex"></xref>; currently, only -1 is supported.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="18" sourceendlinenumber="18"> </td></tr><tr><td> DV_E_FORMATETC  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="20" sourceendlinenumber="20"> </td><td> There is an invalid value for the <code data-dev-comment-type="paramref">pFormatetc</code> parameter.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="22" sourceendlinenumber="22"> </td></tr><tr><td> OLE_E_NOTRUNNING  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="24" sourceendlinenumber="24"> </td><td> The application is not running.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="26" sourceendlinenumber="26"> </td></tr></tbody></table></p>
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Obtains data from a source data object. The <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see> method, which is called by a data consumer, renders the data described in the specified <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure and transfers it through the specified <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see> structure. The caller then assumes responsibility for releasing the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see> structure.</summary>
      <param name="format">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure, passed by reference, that defines the format, medium, and target device to use when passing the data. It is possible to specify more than one medium by using the Boolean OR operator, allowing the method to choose the best medium among those specified.</param>
      <param name="medium">When this method returns, contains a pointer to the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see> structure that indicates the storage medium containing the returned data through its <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed"></see> member, and the responsibility for releasing the medium through the value of its <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> member. If <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> is null, the receiver of the medium is responsible for releasing it; otherwise, <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> points to the IUnknown interface on the appropriate object so its Release method can be called. The medium must be allocated and filled in by <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see>. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Obtains data from a source data object. This method, which is called by a data consumer, differs from the <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see> method in that the caller must allocate and free the specified storage medium.</summary>
      <param name="format">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure, passed by reference, that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED"></see>, and only the following <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED"></see> values are valid: <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE"></see>, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM"></see>, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL"></see>, or <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE"></see>.</param>
      <param name="medium">A <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see>, passed by reference, that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see>. The caller must also free the medium. The implementation of this method must always supply a value of null for the <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> member of the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see> structure that this parameter points to.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>Determines whether the data object is capable of rendering the data described in the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure. Objects attempting a paste or drop operation can call this method before calling <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see> to get an indication of whether the operation may be successful.</summary>
      <param name="format">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure, passed by reference, that defines the format, medium, and target device to use for the query.</param>
      <returns><p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="1" sourceendlinenumber="2"><p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="1" sourceendlinenumber="1">This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  </p>
 <table><thead><tr><th> Value  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="4" sourceendlinenumber="4"> </th><th> Description  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="6" sourceendlinenumber="6"> </th></tr></thead><tbody><tr><td> S_OK  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="8" sourceendlinenumber="8"> </td><td> A subsequent call to <xref href="System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></xref> would probably be successful.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="10" sourceendlinenumber="10"> </td></tr><tr><td> DV_E_LINDEX  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="12" sourceendlinenumber="12"> </td><td> An invalid value for <xref href="System.Runtime.InteropServices.ComTypes.FORMATETC.lindex"></xref>; currently, only -1 is supported.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="14" sourceendlinenumber="14"> </td></tr><tr><td> DV_E_FORMATETC  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="16" sourceendlinenumber="16"> </td><td> An invalid value for the <code data-dev-comment-type="paramref">pFormatetc</code> parameter.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="18" sourceendlinenumber="18"> </td></tr><tr><td> DV_E_TYMED  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="20" sourceendlinenumber="20"> </td><td> An invalid <xref href="System.Runtime.InteropServices.ComTypes.FORMATETC.tymed"></xref> value.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="22" sourceendlinenumber="22"> </td></tr><tr><td> DV_E_DVASPECT  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="24" sourceendlinenumber="24"> </td><td> An invalid <xref href="System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect"></xref> value.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="26" sourceendlinenumber="26"> </td></tr><tr><td> OLE_E_NOTRUNNING  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="28" sourceendlinenumber="28"> </td><td> The application is not running.  <p>
<p sourcefile="System.Runtime.InteropServices.yml" sourcestartlinenumber="30" sourceendlinenumber="30"> </td></tr></tbody></table></p>
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary>Transfers data to the object that implements this method. This method is called by an object that contains a data source.</summary>
      <param name="formatIn">A <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium.</param>
      <param name="medium">A <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see> structure, passed by reference, that defines the storage medium in which the data is being passed.</param>
      <param name="release">true to specify that the data object called, which implements <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)"></see>, owns the storage medium after the call returns. This means that the data object must free the medium after it has been used by calling the ReleaseStgMedium function. false to specify that the caller retains ownership of the storage medium, and the data object called uses the storage medium for the duration of the call only.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLDESC">
      <summary>Contains information needed for transferring a structure element, parameter, or function return value between processes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.dwReserved">
      <summary>Reserved; set to null.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.wIDLFlags">
      <summary>Indicates an <see cref="T:System.Runtime.InteropServices.IDLFLAG"></see> value describing the type.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLFLAG">
      <summary>Describes how to transfer a structure element, parameter, or function return value between processes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FIN">
      <summary>The parameter passes information from the caller to the callee.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FLCID">
      <summary>The parameter is the local identifier of a client application.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FOUT">
      <summary>The parameter returns information from the callee to the caller.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FRETVAL">
      <summary>The parameter is the return value of the member.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_NONE">
      <summary>Does not specify whether the parameter passes or receives information.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints">
      <summary>Manages the definition of the IEnumConnectionPoints interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>Creates a new enumerator that contains the same enumeration state as the current one.</summary>
      <param name="ppenum">When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IConnectionPoint[],System.IntPtr)">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of IConnectionPoint references to return in rgelt.</param>
      <param name="rgelt">When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this method returns, contains a reference to the actual number of connections enumerated in rgelt.</param>
      <returns>S_OK if the <paramref name="pceltFetched">pceltFetched</paramref> parameter equals the <paramref name="celt">celt</paramref> parameter; otherwise, S_FALSE.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>S_OK if the number of elements skipped equals the <paramref name="celt">celt</paramref> parameter; otherwise, S_FALSE.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnections">
      <summary>Manages the definition of the IEnumConnections interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>Creates a new enumerator that contains the same enumeration state as the current one.</summary>
      <param name="ppenum">When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Next(System.Int32,System.Runtime.InteropServices.ComTypes.CONNECTDATA[],System.IntPtr)">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of <see cref="T:System.Runtime.InteropServices.CONNECTDATA"></see> structures to return in rgelt.</param>
      <param name="rgelt">When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this method returns, contains a reference to the actual number of connections enumerated in rgelt.</param>
      <returns>S_OK if the <paramref name="pceltFetched">pceltFetched</paramref> parameter equals the <paramref name="celt">celt</paramref> parameter; otherwise, S_FALSE.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>S_OK if the number of elements skipped equals the <paramref name="celt">celt</paramref> parameter; otherwise, S_FALSE.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC">
      <summary>Provides the managed definition of the IEnumFORMATETC interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
      <summary>Creates a new enumerator that contains the same enumeration state as the current enumerator.</summary>
      <param name="newEnum">When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> references to return in rgelt.</param>
      <param name="rgelt">When this method returns, contains a reference to the enumerated <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> references. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this method returns, contains a reference to the actual number of references enumerated in rgelt. This parameter is passed uninitialized.</param>
      <returns>S_OK if the <paramref name="pceltFetched">pceltFetched</paramref> parameter equals the <paramref name="celt">celt</paramref> parameter; otherwise, S_FALSE.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>An HRESULT with the value S_OK.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>S_OK if the number of elements skipped equals the <paramref name="celt">celt</paramref> parameter; otherwise, S_FALSE.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumMoniker">
      <summary>Manages the definition of the IEnumMoniker interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Clone(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>Creates a new enumerator that contains the same enumeration state as the current one.</summary>
      <param name="ppenum">When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker[],System.IntPtr)">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of monikers to return in rgelt.</param>
      <param name="rgelt">When this method returns, contains a reference to the enumerated monikers. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this method returns, contains a reference to the actual number of monikers enumerated in rgelt.</param>
      <returns>S_OK if the <paramref name="pceltFetched">pceltFetched</paramref> parameter equals the <paramref name="celt">celt</paramref> parameter; otherwise, S_FALSE.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>S_OK if the number of elements skipped equals the <paramref name="celt">celt</paramref> parameter; otherwise, S_FALSE.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA">
      <summary>Provides the managed definition of the IEnumSTATDATA interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Clone(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>Creates a new enumerator that contains the same enumeration state as the current enumerator.</summary>
      <param name="newEnum">When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATDATA[],System.Int32[])">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA"></see> references to return in rgelt.</param>
      <param name="rgelt">When this method returns, contains a reference to the enumerated <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA"></see> references. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this parameter returns, contains a reference to the actual number of references enumerated in rgelt. This parameter is passed uninitialized.</param>
      <returns>S_OK if the <paramref name="pceltFetched">pceltFetched</paramref> parameter equals the <paramref name="celt">celt</paramref> parameter; otherwise, S_FALSE.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>An HRESULT with the value S_OK.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>S_OK if the number of elements skipped equals the <paramref name="celt">celt</paramref> parameter; otherwise, S_FALSE.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumString">
      <summary>Manages the definition of the IEnumString interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Clone(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>Creates a new enumerator that contains the same enumeration state as the current one.</summary>
      <param name="ppenum">When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Next(System.Int32,System.String[],System.IntPtr)">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of strings to return in rgelt.</param>
      <param name="rgelt">When this method returns, contains a reference to the enumerated strings. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this method returns, contains a reference to the actual number of strings enumerated in rgelt.</param>
      <returns>S_OK if the <paramref name="pceltFetched">pceltFetched</paramref> parameter equals the <paramref name="celt">celt</paramref> parameter; otherwise, S_FALSE.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>S_OK if the number of elements skipped equals the <paramref name="celt">celt</paramref> parameter; otherwise, S_FALSE.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT">
      <summary>Manages the definition of the IEnumVARIANT interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone">
      <summary>Creates a new enumerator that contains the same enumeration state as the current one.</summary>
      <returns>An <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT"></see> reference to the newly created enumerator.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to return in rgelt.</param>
      <param name="rgVar">When this method returns, contains a reference to the enumerated elements. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this method returns, contains a reference to the actual number of elements enumerated in rgelt.</param>
      <returns>S_OK if the <paramref name="pceltFetched">pceltFetched</paramref> parameter equals the <paramref name="celt">celt</paramref> parameter; otherwise, S_FALSE.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>An HRESULT with the value S_OK.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>S_OK if the number of elements skipped equals <paramref name="celt">celt</paramref> parameter; otherwise, S_FALSE.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMoniker">
      <summary>Provides the managed definition of the IMoniker interface, with COM functionality from IPersist and IPersistStream.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>Uses the moniker to bind to the object that it identifies.</summary>
      <param name="pbc">A reference to the IBindCtx interface on the bind context object used in this binding operation.</param>
      <param name="pmkToLeft">A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.</param>
      <param name="riidResult">The interface identifier (IID) of the interface that the client intends to use to communicate with the object that the moniker identifies.</param>
      <param name="ppvResult">When this method returns, contains a reference to the interface requested by riidResult. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>Retrieves an interface pointer to the storage that contains the object identified by the moniker.</summary>
      <param name="pbc">A reference to the IBindCtx interface on the bind context object used during this binding operation.</param>
      <param name="pmkToLeft">A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.</param>
      <param name="riid">The interface identifier (IID) of the storage interface requested.</param>
      <param name="ppvObj">When this method returns, contains a reference to the interface requested by riid. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Creates a new moniker based on the common prefix that this moniker shares with another moniker.</summary>
      <param name="pmkOther">A reference to the IMoniker interface on another moniker to compare with the current moniker for a common prefix.</param>
      <param name="ppmkPrefix">When this method returns, contains the moniker that is the common prefix of the current moniker and pmkOther. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Boolean,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Combines the current moniker with another moniker, creating a new composite moniker.</summary>
      <param name="pmkRight">A reference to the IMoniker interface on a moniker to append to the end of the current moniker.</param>
      <param name="fOnlyIfNotGeneric">true to indicate that the caller requires a nongeneric composition. The operation proceeds only if pmkRight is a moniker class that the current moniker can combine with in some way other than forming a generic composite. false to indicate that the method can create a generic composite if necessary.</param>
      <param name="ppmkComposite">When this method returns, contains a reference to the resulting composite moniker. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Enum(System.Boolean,System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>Supplies a pointer to an enumerator that can enumerate the components of a composite moniker.</summary>
      <param name="fForward">true to enumerate the monikers from left to right. false to enumerate from right to left.</param>
      <param name="ppenumMoniker">When this method returns, contains a reference to the enumerator object for the moniker. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetClassID(System.Guid@)">
      <summary>Retrieves the class identifier (CLSID) of an object.</summary>
      <param name="pClassID">When this method returns, contains the CLSID. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String@)">
      <summary>Gets the display name, which is a user-readable representation of the current moniker.</summary>
      <param name="pbc">A reference to the bind context to use in this operation.</param>
      <param name="pmkToLeft">A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.</param>
      <param name="ppszDisplayName">When this method returns, contains the display name string. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetSizeMax(System.Int64@)">
      <summary>Returns the size, in bytes, of the stream needed to save the object.</summary>
      <param name="pcbSize">When this method returns, contains a long value indicating the size, in bytes, of the stream needed to save this object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>Provides a number representing the time that the object identified by the current moniker was last changed.</summary>
      <param name="pbc">A reference to the bind context to use in this binding operation.</param>
      <param name="pmkToLeft">A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.</param>
      <param name="pFileTime">When this method returns, contains the time of the last change. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Hash(System.Int32@)">
      <summary>Calculates a 32-bit integer using the internal state of the moniker.</summary>
      <param name="pdwHash">When this method returns, contains the hash value for this moniker. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Inverse(System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Provides a moniker that, when composed to the right of the current moniker or one of similar structure, composes to nothing.</summary>
      <param name="ppmk">When this method returns, contains a moniker that is the inverse of the current moniker. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsDirty">
      <summary>Checks the object for changes since it was last saved.</summary>
      <returns>An S_OK``HRESULT value if the object has changed; otherwise, an S_FALSE``HRESULT value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Compares the current moniker with a specified moniker and indicates whether they are identical.</summary>
      <param name="pmkOtherMoniker">A reference to the moniker to use for comparison.</param>
      <returns>An S_OK``HRESULT value if the monikers are identical; otherwise, an S_FALSE``HRESULT value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Determines whether the object that is identified by the current moniker is currently loaded and running.</summary>
      <param name="pbc">A reference to the bind context to use in this binding operation.</param>
      <param name="pmkToLeft">A reference to the moniker to the left of the current moniker if the current moniker is part of a composite.</param>
      <param name="pmkNewlyRunning">A reference to the moniker most recently added to the Running Object Table (ROT).</param>
      <returns>An S_OK``HRESULT value if the moniker is running; an S_FALSE``HRESULT value if the moniker is not running; or an E_UNEXPECTED``HRESULT value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsSystemMoniker(System.Int32@)">
      <summary>Indicates whether this moniker is of one of the system-supplied moniker classes.</summary>
      <param name="pdwMksys">When this method returns, contains a pointer to an integer that is one of the values from the MKSYS enumeration, and refers to one of the COM moniker classes. This parameter is passed uninitialized.</param>
      <returns>An S_OK``HRESULT value if the moniker is a system moniker; otherwise, an S_FALSE``HRESULT value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Load(System.Runtime.InteropServices.ComTypes.IStream)">
      <summary>Initializes an object from the stream where it was previously saved.</summary>
      <param name="pStm">The stream that the object is loaded from.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Reads as many characters of the specified display name as the <see cref="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)"></see> understands and builds a moniker corresponding to the portion read.</summary>
      <param name="pbc">A reference to the bind context to use in this binding operation.</param>
      <param name="pmkToLeft">A reference to the moniker that has been built from the display name up to this point.</param>
      <param name="pszDisplayName">A reference to the string containing the remaining display name to parse.</param>
      <param name="pchEaten">When this method returns, contains the number of characters that were consumed in parsing pszDisplayName. This parameter is passed uninitialized.</param>
      <param name="ppmkOut">When this method returns, contains a reference to the moniker that was built from pszDisplayName. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Returns a reduced moniker, which is another moniker that refers to the same object as the current moniker but can be bound with equal or greater efficiency.</summary>
      <param name="pbc">A reference to the IBindCtx interface on the bind context to use in this binding operation.</param>
      <param name="dwReduceHowFar">A value that specifies how far the current moniker should be reduced.</param>
      <param name="ppmkToLeft">A reference to the moniker to the left of the current moniker.</param>
      <param name="ppmkReduced">When this method returns, contains a reference to the reduced form of the current moniker, which can be null if an error occurs or if the current moniker is reduced to nothing. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Supplies a moniker that, when appended to the current moniker (or one with a similar structure), yields the specified moniker.</summary>
      <param name="pmkOther">A reference to the moniker to which a relative path should be taken.</param>
      <param name="ppmkRelPath">When this method returns, contains a reference to the relative moniker. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
      <summary>Saves an object to the specified stream.</summary>
      <param name="pStm">The stream to which the object is saved.</param>
      <param name="fClearDirty">true to clear the modified flag after the save is complete; otherwise false</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS">
      <summary>Defines the attributes of an implemented or inherited interface of a type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary>The interface or dispinterface represents the default for the source or sink.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary>Sinks receive events through the virtual function table (VTBL).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary>The member should not be displayed or programmable by users.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary>This member of a coclass is called rather than implemented.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND">
      <summary>Specifies how to invoke a function by IDispatch::Invoke.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_FUNC">
      <summary>The member is called using a normal function invocation syntax.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary>The function is invoked using a normal property access syntax.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary>The function is invoked using a property value assignment syntax.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary>The function is invoked using a property reference assignment syntax.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IPersistFile">
      <summary>Provides the managed definition of the IPersistFile interface, with functionality from IPersist.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetClassID(System.Guid@)">
      <summary>Retrieves the class identifier (CLSID) of an object.</summary>
      <param name="pClassID">When this method returns, contains a reference to the CLSID. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetCurFile(System.String@)">
      <summary>Retrieves either the absolute path to the current working file of the object or, if there is no current working file, the default file name prompt of the object.</summary>
      <param name="ppszFileName">When this method returns, contains the address of a pointer to a zero-terminated string containing the path for the current file, or the default file name prompt (such as *.txt). This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.IsDirty">
      <summary>Checks an object for changes since it was last saved to its current file.</summary>
      <returns>S_OK if the file has changed since it was last saved; S_FALSE if the file has not changed since it was last saved.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Load(System.String,System.Int32)">
      <summary>Opens the specified file and initializes an object from the file contents.</summary>
      <param name="pszFileName">A zero-terminated string containing the absolute path of the file to open.</param>
      <param name="dwMode">A combination of values from the STGM enumeration to indicate the access mode in which to open pszFileName.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Save(System.String,System.Boolean)">
      <summary>Saves a copy of the object into the specified file.</summary>
      <param name="pszFileName">A zero-terminated string containing the absolute path of the file to which the object is saved.</param>
      <param name="fRemember">true to used the pszFileName parameter as the current working file; otherwise false.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.SaveCompleted(System.String)">
      <summary>Notifies the object that it can write to its file.</summary>
      <param name="pszFileName">The absolute path of the file where the object was previously saved.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IRunningObjectTable">
      <summary>Provides the managed definition of the IRunningObjectTable interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.EnumRunning(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>Enumerates the objects currently registered as running.</summary>
      <param name="ppenumMoniker">When this method returns, contains the new enumerator for the Running Object Table (ROT). This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetObject(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object@)">
      <summary>Returns the registered object if the supplied object name is registered as running.</summary>
      <param name="pmkObjectName">A reference to the moniker to search for in the Running Object Table (ROT).</param>
      <param name="ppunkObject">When this method returns, contains the requested running object. This parameter is passed uninitialized.</param>
      <returns>An HRESULT value that indicates the success or failure of the operation.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>Searches for this moniker in the Running Object Table (ROT) and reports the recorded time of change, if present.</summary>
      <param name="pmkObjectName">A reference to the moniker to search for in the Running Object Table (ROT).</param>
      <param name="pfiletime">When this object returns, contains the objects last change time. This parameter is passed uninitialized.</param>
      <returns>An HRESULT value that indicates the success or failure of the operation.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Determines whether the specified moniker is currently registered in the Running Object Table (ROT).</summary>
      <param name="pmkObjectName">A reference to the moniker to search for in the Running Object Table (ROT).</param>
      <returns>An HRESULT value that indicates the success or failure of the operation.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>Notes the time that a particular object changed so IMoniker::GetTimeOfLastChange can report an appropriate change time.</summary>
      <param name="dwRegister">The Running Object Table (ROT) entry of the changed object.</param>
      <param name="pfiletime">A reference to the object's last change time.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Registers that the supplied object has entered the running state.</summary>
      <param name="grfFlags">Specifies whether the Running Object Table's (ROT) reference to punkObject is weak or strong, and controls access to the object through its entry in the ROT.</param>
      <param name="punkObject">A reference to the object being registered as running.</param>
      <param name="pmkObjectName">A reference to the moniker that identifies punkObject.</param>
      <returns>A value that can be used to identify this ROT entry in subsequent calls to <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)"></see> or <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)"></see>.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)">
      <summary>Unregisters the specified object from the Running Object Table (ROT).</summary>
      <param name="dwRegister">The Running Object Table (ROT) entry to revoke.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IStream">
      <summary>Provides the managed definition of the IStream interface, with ISequentialStream functionality.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
      <summary>Creates a new stream object with its own seek pointer that references the same bytes as the original stream.</summary>
      <param name="ppstm">When this method returns, contains the new stream object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)">
      <summary>Ensures that any changes made to a stream object that is open in transacted mode are reflected in the parent storage.</summary>
      <param name="grfCommitFlags">A value that controls how the changes for the stream object are committed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
      <summary>Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.</summary>
      <param name="pstm">A reference to the destination stream.</param>
      <param name="cb">The number of bytes to copy from the source stream.</param>
      <param name="pcbRead">On successful return, contains the actual number of bytes read from the source.</param>
      <param name="pcbWritten">On successful return, contains the actual number of bytes written to the destination.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>Restricts access to a specified range of bytes in the stream.</summary>
      <param name="libOffset">The byte offset for the beginning of the range.</param>
      <param name="cb">The length of the range, in bytes, to restrict.</param>
      <param name="dwLockType">The requested restrictions on accessing the range.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Read(System.Byte[],System.Int32,System.IntPtr)">
      <summary>Reads a specified number of bytes from the stream object into memory starting at the current seek pointer.</summary>
      <param name="pv">When this method returns, contains the data read from the stream. This parameter is passed uninitialized.</param>
      <param name="cb">The number of bytes to read from the stream object.</param>
      <param name="pcbRead">A pointer to a ULONG variable that receives the actual number of bytes read from the stream object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Revert">
      <summary>Discards all changes that have been made to a transacted stream since the last <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)"></see> call.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)">
      <summary>Changes the seek pointer to a new location relative to the beginning of the stream, to the end of the stream, or to the current seek pointer.</summary>
      <param name="dlibMove">The displacement to add to dwOrigin.</param>
      <param name="dwOrigin">The origin of the seek. The origin can be the beginning of the file, the current seek pointer, or the end of the file.</param>
      <param name="plibNewPosition">On successful return, contains the offset of the seek pointer from the beginning of the stream.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.SetSize(System.Int64)">
      <summary>Changes the size of the stream object.</summary>
      <param name="libNewSize">The new size of the stream as a number of bytes.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
      <summary>Retrieves the <see cref="T:System.Runtime.InteropServices.STATSTG"></see> structure for this stream.</summary>
      <param name="pstatstg">When this method returns, contains a STATSTG structure that describes this stream object. This parameter is passed uninitialized.</param>
      <param name="grfStatFlag">Members in the STATSTG structure that this method does not return, thus saving some memory allocation operations.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>Removes the access restriction on a range of bytes previously restricted with the <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)"></see> method.</summary>
      <param name="libOffset">The byte offset for the beginning of the range.</param>
      <param name="cb">The length, in bytes, of the range to restrict.</param>
      <param name="dwLockType">The access restrictions previously placed on the range.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Write(System.Byte[],System.Int32,System.IntPtr)">
      <summary>Writes a specified number of bytes into the stream object starting at the current seek pointer.</summary>
      <param name="pv">The buffer to write this stream to.</param>
      <param name="cb">The number of bytes to write to the stream.</param>
      <param name="pcbWritten">On successful return, contains the actual number of bytes written to the stream object. If the caller sets this pointer to <see cref="F:System.IntPtr.Zero"></see>, this method does not provide the actual number of bytes written.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeComp">
      <summary>Provides the managed definition of the ITypeComp interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.Bind(System.String,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.DESCKIND@,System.Runtime.InteropServices.ComTypes.BINDPTR@)">
      <summary>Maps a name to a member of a type, or binds global variables and functions contained in a type library.</summary>
      <param name="szName">The name to bind.</param>
      <param name="lHashVal">A hash value for szName computed by LHashValOfNameSys.</param>
      <param name="wFlags">A flags word containing one or more of the invoke flags defined in the INVOKEKIND enumeration.</param>
      <param name="ppTInfo">When this method returns, contains a reference to the type description that contains the item to which it is bound, if a FUNCDESC or VARDESC was returned. This parameter is passed uninitialized.</param>
      <param name="pDescKind">When this method returns, contains a reference to a DESCKIND enumerator that indicates whether the name bound-to is a VARDESC, FUNCDESC, or TYPECOMP. This parameter is passed uninitialized.</param>
      <param name="pBindPtr">When this method returns, contains a reference to the bound-to VARDESC, FUNCDESC, or ITypeComp interface. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.BindType(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Binds to the type descriptions contained within a type library.</summary>
      <param name="szName">The name to bind.</param>
      <param name="lHashVal">A hash value for szName determined by LHashValOfNameSys.</param>
      <param name="ppTInfo">When this method returns, contains a reference to an ITypeInfo of the type to which szName was bound. This parameter is passed uninitialized.</param>
      <param name="ppTComp">When this method returns, contains a reference to an ITypeComp variable. This parameter is passed uninitialized.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo">
      <summary>Provides the managed definition of the Component Automation <see cref="http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680">ITypeInfo</see> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>Retrieves the addresses of static functions or variables, such as those defined in a DLL.</summary>
      <param name="memid">The member ID of the static member's address to retrieve.</param>
      <param name="invKind">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND"></see> values that specifies whether the member is a property, and if so, what kind.</param>
      <param name="ppv">When this method returns, contains a reference to the static member. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>Creates a new instance of a type that describes a component class (coclass).</summary>
      <param name="pUnkOuter">The object that acts as the controlling IUnknown.</param>
      <param name="riid">The IID of the interface that the caller uses to communicate with the resulting object.</param>
      <param name="ppvObj">When this method returns, contains a reference to the created object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>Retrieves the type library that contains this type description and its index within that type library.</summary>
      <param name="ppTLB">When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.</param>
      <param name="pIndex">When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Retrieves a description or specification of an entry point for a function in a DLL.</summary>
      <param name="memid">The ID of the member function whose DLL entry description is to be returned.</param>
      <param name="invKind">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND"></see> values that specifies the kind of member identified by memid.</param>
      <param name="pBstrDllName">If not null, the function sets pBstrDllName to a BSTR that contains the name of the DLL.</param>
      <param name="pBstrName">If not null, the function sets lpbstrName to a BSTR that contains the name of the entry point.</param>
      <param name="pwOrdinal">If not null, and the function is defined by an ordinal, then lpwOrdinal is set to point to the ordinal.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.</summary>
      <param name="index">The ID of the member whose documentation is to be returned.</param>
      <param name="strName">When this method returns, contains the name of the item method. This parameter is passed uninitialized.</param>
      <param name="strDocString">When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.</param>
      <param name="dwHelpContext">When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.</param>
      <param name="strHelpFile">When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>Retrieves the <see cref="T:System.Runtime.InteropServices.FUNCDESC"></see> structure that contains information about a specified function.</summary>
      <param name="index">The index of the function description to return.</param>
      <param name="ppFuncDesc">When this method returns, contains a reference to a FUNCDESC structure that describes the specified function. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>Maps between member names and member IDs, and parameter names and parameter IDs.</summary>
      <param name="rgszNames">An array of names to map.</param>
      <param name="cNames">The count of names to map.</param>
      <param name="pMemId">When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>Retrieves the <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS"></see> value for one implemented interface or base interface in a type description.</summary>
      <param name="index">The index of the implemented interface or base interface.</param>
      <param name="pImplTypeFlags">When this method returns, contains a reference to the IMPLTYPEFLAGS enumeration. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetMops(System.Int32,System.String@)">
      <summary>Retrieves marshaling information.</summary>
      <param name="memid">The member ID that indicates which marshaling information is needed.</param>
      <param name="pBstrMops">When this method returns, contains a reference to the opcode string used in marshaling the fields of the structure described by the referenced type description, or returns null if there is no information to return. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.</summary>
      <param name="memid">The ID of the member whose name (or names) is to be returned.</param>
      <param name="rgBstrNames">When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.</param>
      <param name="cMaxNames">The length of the rgBstrNames array.</param>
      <param name="pcNames">When this method returns, contains the number of names in the rgBstrNames array. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Retrieves the referenced type descriptions if a type description references other type descriptions.</summary>
      <param name="hRef">A handle to the referenced type description to return.</param>
      <param name="ppTI">When this method returns, contains the referenced type description. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>Retrieves the type description of the implemented interface types if a type description describes a COM class.</summary>
      <param name="index">The index of the implemented type whose handle is returned.</param>
      <param name="href">When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)">
      <summary>Retrieves a <see cref="T:System.Runtime.InteropServices.TYPEATTR"></see> structure that contains the attributes of the type description.</summary>
      <param name="ppTypeAttr">When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Retrieves the ITypeComp interface for the type description, which enables a client compiler to bind to the type description's members.</summary>
      <param name="ppTComp">When this method returns, contains a reference to the ITypeComp interface of the containing type library. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>Retrieves a VARDESC structure that describes the specified variable.</summary>
      <param name="index">The index of the variable description to return.</param>
      <param name="ppVarDesc">When this method returns, contains a reference to the VARDESC structure that describes the specified variable. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>Invokes a method, or accesses a property of an object, that implements the interface described by the type description.</summary>
      <param name="pvInstance">A reference to the interface described by this type description.</param>
      <param name="memid">A value that identifies the interface member.</param>
      <param name="wFlags">Flags that describe the context of the invoke call.</param>
      <param name="pDispParams">A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.</param>
      <param name="pVarResult">A reference to the location at which the result is to be stored. If wFlags specifies DISPATCH_PROPERTYPUT or DISPATCH_PROPERTYPUTREF, pVarResult is ignored. Set to null if no result is desired.</param>
      <param name="pExcepInfo">A pointer to an exception information structure, which is filled in only if DISP_E_EXCEPTION is returned.</param>
      <param name="puArgErr">If Invoke returns DISP_E_TYPEMISMATCH, puArgErr indicates the index within rgvarg of the argument with the incorrect type. If more than one argument returns an error, puArgErr indicates only the first argument with an error. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseFuncDesc(System.IntPtr)">
      <summary>Releases a <see cref="T:System.Runtime.InteropServices.FUNCDESC"></see> structure previously returned by the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)"></see> method.</summary>
      <param name="pFuncDesc">A reference to the FUNCDESC structure to release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseTypeAttr(System.IntPtr)">
      <summary>Releases a <see cref="T:System.Runtime.InteropServices.TYPEATTR"></see> structure previously returned by the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)"></see> method.</summary>
      <param name="pTypeAttr">A reference to the TYPEATTR structure to release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseVarDesc(System.IntPtr)">
      <summary>Releases a VARDESC structure previously returned by the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)"></see> method.</summary>
      <param name="pVarDesc">A reference to the VARDESC structure to release.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo2">
      <summary>Provides the managed definition of the ITypeInfo2 interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>Retrieves the addresses of static functions or variables, such as those defined in a DLL.</summary>
      <param name="memid">The member ID of the static member's address to retrieve.</param>
      <param name="invKind">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND"></see> values that specifies whether the member is a property, and if so, what kind.</param>
      <param name="ppv">When this method returns, contains a reference to the static member. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>Creates a new instance of a type that describes a component class (coclass).</summary>
      <param name="pUnkOuter">An object that acts as the controlling IUnknown.</param>
      <param name="riid">The IID of the interface that the caller uses to communicate with the resulting object.</param>
      <param name="ppvObj">When this method returns, contains a reference to the created object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllCustData(System.IntPtr)">
      <summary>Gets all custom data items for the library.</summary>
      <param name="pCustData">A pointer to CUSTDATA, which holds all custom data items.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllFuncCustData(System.Int32,System.IntPtr)">
      <summary>Gets all custom data from the specified function.</summary>
      <param name="index">The index of the function to get the custom data for.</param>
      <param name="pCustData">A pointer to CUSTDATA, which holds all custom data items.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllImplTypeCustData(System.Int32,System.IntPtr)">
      <summary>Gets all custom data for the specified implementation type.</summary>
      <param name="index">The index of the implementation type for the custom data.</param>
      <param name="pCustData">A pointer to CUSTDATA which holds all custom data items.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllParamCustData(System.Int32,System.Int32,System.IntPtr)">
      <summary>Gets all of the custom data for the specified function parameter.</summary>
      <param name="indexFunc">The index of the function to get the custom data for.</param>
      <param name="indexParam">The index of the parameter of this function to get the custom data for.</param>
      <param name="pCustData">A pointer to CUSTDATA, which holds all custom data items.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllVarCustData(System.Int32,System.IntPtr)">
      <summary>Gets the variable for the custom data.</summary>
      <param name="index">The index of the variable to get the custom data for.</param>
      <param name="pCustData">A pointer to CUSTDATA, which holds all custom data items.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>Retrieves the type library that contains this type description and its index within that type library.</summary>
      <param name="ppTLB">When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.</param>
      <param name="pIndex">When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetCustData(System.Guid@,System.Object@)">
      <summary>Gets the custom data.</summary>
      <param name="guid">The GUID used to identify the data.</param>
      <param name="pVarVal">When this method returns, contains an Object that specifies where to put the retrieved data. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Retrieves a description or specification of an entry point for a function in a DLL.</summary>
      <param name="memid">The ID of the member function whose DLL entry description is to be returned.</param>
      <param name="invKind">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND"></see> values that specifies the kind of member identified by memid.</param>
      <param name="pBstrDllName">If not null, the function sets pBstrDllName to a BSTR that contains the name of the DLL.</param>
      <param name="pBstrName">If not null, the function sets lpbstrName to a BSTR that contains the name of the entry point.</param>
      <param name="pwOrdinal">If not null, and the function is defined by an ordinal, then lpwOrdinal is set to point to the ordinal.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.</summary>
      <param name="index">The ID of the member whose documentation is to be returned.</param>
      <param name="strName">When this method returns, contains the name of the item method. This parameter is passed uninitialized.</param>
      <param name="strDocString">When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.</param>
      <param name="dwHelpContext">When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.</param>
      <param name="strHelpFile">When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>Retrieves the documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.</summary>
      <param name="memid">The member identifier for the type description.</param>
      <param name="pbstrHelpString">When this method returns, contains a BSTR that contains the name of the specified item. If the caller does not need the item name, pbstrHelpString can be null. This parameter is passed uninitialized.</param>
      <param name="pdwHelpStringContext">When this method returns, contains the Help localization context. If the caller does not need the Help context, pdwHelpStringContext can be null. This parameter is passed uninitialized.</param>
      <param name="pbstrHelpStringDll">When this method returns, contains a BSTR that contains the fully qualified name of the file containing the DLL used for the Help file. If the caller does not need the file name, pbstrHelpStringDll can be null. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>Gets the custom data from the specified function.</summary>
      <param name="index">The index of the function to get the custom data for.</param>
      <param name="guid">The GUID used to identify the data.</param>
      <param name="pVarVal">When this method returns, contains an Object that specified where to put the data. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>Retrieves the <see cref="T:System.Runtime.InteropServices.FUNCDESC"></see> structure that contains information about a specified function.</summary>
      <param name="index">The index of the function description to return.</param>
      <param name="ppFuncDesc">When this method returns, contains a reference to a FUNCDESC structure that describes the specified function. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncIndexOfMemId(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.Int32@)">
      <summary>Binds to a specific member based on a known DISPID, where the member name is not known (for example, when binding to a default member).</summary>
      <param name="memid">The member identifier.</param>
      <param name="invKind">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND"></see> values that specifies the kind of member identified by memid.</param>
      <param name="pFuncIndex">When this method returns, contains an index into the function. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>Maps between member names and member IDs, and parameter names and parameter IDs.</summary>
      <param name="rgszNames">An array of names to map.</param>
      <param name="cNames">The count of names to map.</param>
      <param name="pMemId">When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>Gets the implementation type of the custom data.</summary>
      <param name="index">The index of the implementation type for the custom data.</param>
      <param name="guid">The GUID used to identify the data.</param>
      <param name="pVarVal">When this method returns, contains an Object that specifies where to put the retrieved data. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>Retrieves the <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS"></see> value for one implemented interface or base interface in a type description.</summary>
      <param name="index">The index of the implemented interface or base interface.</param>
      <param name="pImplTypeFlags">When this method returns, contains a reference to the IMPLTYPEFLAGS enumeration. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetMops(System.Int32,System.String@)">
      <summary>Retrieves marshaling information.</summary>
      <param name="memid">The member ID that indicates which marshaling information is needed.</param>
      <param name="pBstrMops">When this method returns, contains a reference to the opcode string used in marshaling the fields of the structure described by the referenced type description, or returns null if there is no information to return. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.</summary>
      <param name="memid">The ID of the member whose name (or names) is to be returned.</param>
      <param name="rgBstrNames">When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.</param>
      <param name="cMaxNames">The length of the rgBstrNames array.</param>
      <param name="pcNames">When this method returns, contains the number of names in the rgBstrNames array. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetParamCustData(System.Int32,System.Int32,System.Guid@,System.Object@)">
      <summary>Gets the specified custom data parameter.</summary>
      <param name="indexFunc">The index of the function to get the custom data for.</param>
      <param name="indexParam">The index of the parameter of this function to get the custom data for.</param>
      <param name="guid">The GUID used to identify the data.</param>
      <param name="pVarVal">When this method returns, contains an Object that specifies where to put the retrieved data. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Retrieves the referenced type descriptions, if a type description references other type descriptions.</summary>
      <param name="hRef">A handle to the referenced type description to return.</param>
      <param name="ppTI">When this method returns, contains the referenced type description. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>Retrieves the type description of the implemented interface types, if a type description describes a COM class.</summary>
      <param name="index">The index of the implemented type whose handle is returned.</param>
      <param name="href">When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeAttr(System.IntPtr@)">
      <summary>Retrieves a <see cref="T:System.Runtime.InteropServices.TYPEATTR"></see> structure that contains the attributes of the type description.</summary>
      <param name="ppTypeAttr">When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Retrieves the ITypeComp interface for the type description, which enables a client compiler to bind to the type description's members.</summary>
      <param name="ppTComp">When this method returns, contains a reference to the ITypeComp of the containing type library. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeFlags(System.Int32@)">
      <summary>Returns the type flags without any allocations. This method returns a DWORD type flag, which expands the type flags without growing the TYPEATTR (type attribute).</summary>
      <param name="pTypeFlags">When this method returns, contains a DWORD reference to a TYPEFLAG. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeKind(System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>Returns the TYPEKIND enumeration quickly, without doing any allocations.</summary>
      <param name="pTypeKind">When this method returns, contains a reference to a TYPEKIND enumeration. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>Gets the variable for the custom data.</summary>
      <param name="index">The index of the variable to get the custom data for.</param>
      <param name="guid">The GUID used to identify the data.</param>
      <param name="pVarVal">When this method returns, contains an Object that specifies where to put the retrieved data. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>Retrieves a VARDESC structure that describes the specified variable.</summary>
      <param name="index">The index of the variable description to return.</param>
      <param name="ppVarDesc">When this method returns, contains a reference to the VARDESC structure that describes the specified variable. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarIndexOfMemId(System.Int32,System.Int32@)">
      <summary>Binds to a specific member based on a known DISPID, where the member name is not known (for example, when binding to a default member).</summary>
      <param name="memid">The member identifier.</param>
      <param name="pVarIndex">When this method returns, contains an index of memid. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>Invokes a method, or accesses a property of an object, that implements the interface described by the type description.</summary>
      <param name="pvInstance">A reference to the interface described by this type description.</param>
      <param name="memid">Identifier of the interface member.</param>
      <param name="wFlags">Flags describing the context of the invoke call.</param>
      <param name="pDispParams">A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.</param>
      <param name="pVarResult">A reference to the location at which the result is to be stored. If wFlags specifies DISPATCH_PROPERTYPUT or DISPATCH_PROPERTYPUTREF, pVarResult is ignored. Set to null if no result is desired.</param>
      <param name="pExcepInfo">A pointer to an exception information structure, which is filled in only if DISP_E_EXCEPTION is returned.</param>
      <param name="puArgErr">If Invoke returns DISP_E_TYPEMISMATCH, puArgErr indicates the index of the argument with incorrect type. If more than one argument returns an error, puArgErr indicates only the first argument with an error.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseFuncDesc(System.IntPtr)">
      <summary>Releases a <see cref="T:System.Runtime.InteropServices.FUNCDESC"></see> structure previously returned by the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)"></see> method.</summary>
      <param name="pFuncDesc">A reference to the FUNCDESC structure to release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseTypeAttr(System.IntPtr)">
      <summary>Releases a <see cref="T:System.Runtime.InteropServices.TYPEATTR"></see> structure previously returned by the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)"></see> method.</summary>
      <param name="pTypeAttr">A reference to the TYPEATTR structure to release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseVarDesc(System.IntPtr)">
      <summary>Releases a VARDESC structure previously returned by the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)"></see> method.</summary>
      <param name="pVarDesc">A reference to the VARDESC structure to release.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib">
      <summary>Provides the managed definition of the ITypeLib interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>Finds occurrences of a type description in a type library.</summary>
      <param name="szNameBuf">The name to search for. This is an in/out parameter.</param>
      <param name="lHashVal">A hash value to speed up the search, computed by the LHashValOfNameSys function. If lHashVal is 0, a value is computed.</param>
      <param name="ppTInfo">When this method returns, contains an array of pointers to the type descriptions that contain the name specified in szNameBuf. This parameter is passed uninitialized.</param>
      <param name="rgMemId">An array of the MEMBERID 's of the found items; rgMemId [i] is the MEMBERID that indexes into the type description specified by ppTInfo [i]. Cannot be null.</param>
      <param name="pcFound">On entry, indicates how many instances to look for. For example, pcFound = 1 can be called to find the first occurrence. The search stops when one instance is found.   On exit, indicates the number of instances that were found. If the in and out values of pcFound are identical, there might be more type descriptions that contain the name.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.</summary>
      <param name="index">The index of the type description whose documentation is to be returned.</param>
      <param name="strName">When this method returns, contains a string that represents the name of the specified item. This parameter is passed uninitialized.</param>
      <param name="strDocString">When this method returns, contains a string that represents the documentation string for the specified item. This parameter is passed uninitialized.</param>
      <param name="dwHelpContext">When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.</param>
      <param name="strHelpFile">When this method returns, contains a string that represents the fully qualified name of the Help file. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)">
      <summary>Retrieves the structure that contains the library's attributes.</summary>
      <param name="ppTLibAttr">When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Enables a client compiler to bind to a library's types, variables, constants, and global functions.</summary>
      <param name="ppTComp">When this method returns, contains an instance of a ITypeComp instance for this ITypeLib. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Retrieves the specified type description in the library.</summary>
      <param name="index">The index of the ITypeInfo interface to return.</param>
      <param name="ppTI">When this method returns, contains an ITypeInfo describing the type referenced by index. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoCount">
      <summary>Returns the number of type descriptions in the type library.</summary>
      <returns>The number of type descriptions in the type library.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Retrieves the type description that corresponds to the specified GUID.</summary>
      <param name="guid">The IID of the interface or CLSID of the class whose type info is requested.</param>
      <param name="ppTInfo">When this method returns, contains the requested ITypeInfo interface. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>Retrieves the type of a type description.</summary>
      <param name="index">The index of the type description within the type library.</param>
      <param name="pTKind">When this method returns, contains a reference to the TYPEKIND enumeration for the type description. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.IsName(System.String,System.Int32)">
      <summary>Indicates whether a passed-in string contains the name of a type or member described in the library.</summary>
      <param name="szNameBuf">The string to test. This is an in/out parameter.</param>
      <param name="lHashVal">The hash value of szNameBuf.</param>
      <returns>true if <paramref name="szNameBuf">szNameBuf</paramref> was found in the type library; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary>Releases the <see cref="T:System.Runtime.InteropServices.TYPELIBATTR"></see> structure originally obtained from the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)"></see> method.</summary>
      <param name="pTLibAttr">The TLIBATTR structure to release.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib2">
      <summary>Provides a managed definition of the ITypeLib2 interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>Finds occurrences of a type description in a type library.</summary>
      <param name="szNameBuf">The name to search for.</param>
      <param name="lHashVal">A hash value to speed up the search, computed by the LHashValOfNameSys function. If lHashVal is 0, a value is computed.</param>
      <param name="ppTInfo">When this method returns, contains an array of pointers to the type descriptions that contain the name specified in szNameBuf. This parameter is passed uninitialized.</param>
      <param name="rgMemId">When this method returns, contains an array of the MEMBERIDs of the found items; rgMemId [i] is the MEMBERID that indexes into the type description specified by ppTInfo [i]. This parameter cannot be null. This parameter is passed uninitialized.</param>
      <param name="pcFound">On entry, a value, passed by reference, that indicates how many instances to look for. For example, pcFound = 1 can be called to find the first occurrence. The search stops when one instance is found.   On exit, indicates the number of instances that were found. If the in and out values of pcFound are identical, there might be more type descriptions that contain the name.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetAllCustData(System.IntPtr)">
      <summary>Gets all custom data items for the library.</summary>
      <param name="pCustData">A pointer to CUSTDATA, which holds all custom data items.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetCustData(System.Guid@,System.Object@)">
      <summary>Gets the custom data.</summary>
      <param name="guid">A <see cref="T:System.Guid"></see> , passed by reference, that is used to identify the data.</param>
      <param name="pVarVal">When this method returns, contains an object that specifies where to put the retrieved data. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.</summary>
      <param name="index">An index of the type description whose documentation is to be returned.</param>
      <param name="strName">When this method returns, contains a string that specifies the name of the specified item. This parameter is passed uninitialized.</param>
      <param name="strDocString">When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.</param>
      <param name="dwHelpContext">When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.</param>
      <param name="strHelpFile">When this method returns, contains a string that specifies the fully qualified name of the Help file. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>Retrieves the library's documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.</summary>
      <param name="index">An index of the type description whose documentation is to be returned; if index is -1, the documentation for the library is returned.</param>
      <param name="pbstrHelpString">When this method returns, contains a BSTR that specifies the name of the specified item. If the caller does not need the item name, pbstrHelpString can be null. This parameter is passed uninitialized.</param>
      <param name="pdwHelpStringContext">When this method returns, contains the Help localization context. If the caller does not need the Help context, pdwHelpStringContext can be null. This parameter is passed uninitialized.</param>
      <param name="pbstrHelpStringDll">When this method returns, contains a BSTR that specifies the fully qualified name of the file containing the DLL used for Help file. If the caller does not need the file name, pbstrHelpStringDll can be null. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibAttr(System.IntPtr@)">
      <summary>Retrieves the structure that contains the library's attributes.</summary>
      <param name="ppTLibAttr">When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibStatistics(System.IntPtr,System.Int32@)">
      <summary>Returns statistics about a type library that are required for efficient sizing of hash tables.</summary>
      <param name="pcUniqueNames">A pointer to a count of unique names. If the caller does not need this information, set to null.</param>
      <param name="pcchUniqueNames">When this method returns, contains a pointer to a change in the count of unique names. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Enables a client compiler to bind to a library's types, variables, constants, and global functions.</summary>
      <param name="ppTComp">When this method returns, contains an ITypeComp instance for this ITypeLib. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Retrieves the specified type description in the library.</summary>
      <param name="index">An index of the ITypeInfo interface to return.</param>
      <param name="ppTI">When this method returns, contains an ITypeInfo describing the type referenced by index. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoCount">
      <summary>Returns the number of type descriptions in the type library.</summary>
      <returns>The number of type descriptions in the type library.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Retrieves the type description that corresponds to the specified GUID.</summary>
      <param name="guid">The <see cref="T:System.Guid"></see>, passed by reference, that represents the IID of the CLSID interface of the class whose type info is requested.</param>
      <param name="ppTInfo">When this method returns, contains the requested ITypeInfo interface. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>Retrieves the type of a type description.</summary>
      <param name="index">The index of the type description within the type library.</param>
      <param name="pTKind">When this method returns, contains a reference to the TYPEKIND enumeration for the type description. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.IsName(System.String,System.Int32)">
      <summary>Indicates whether a passed-in string contains the name of a type or member described in the library.</summary>
      <param name="szNameBuf">The string to test.</param>
      <param name="lHashVal">The hash value of szNameBuf.</param>
      <returns>true if <paramref name="szNameBuf">szNameBuf</paramref> was found in the type library; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.ReleaseTLibAttr(System.IntPtr)">
      <summary>Releases the <see cref="T:System.Runtime.InteropServices.TYPELIBATTR"></see> structure originally obtained from the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)"></see> method.</summary>
      <param name="pTLibAttr">The TLIBATTR structure to release.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.LIBFLAGS">
      <summary>Defines flags that apply to type libraries.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary>The type library describes controls and should not be displayed in type browsers intended for nonvisual objects.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary>The type library exists in a persisted form on disk.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary>The type library should not be displayed to users, although its use is not restricted. The type library should be used by controls. Hosts should create a new type library that wraps the control with extended properties.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary>The type library is restricted, and should not be displayed to users.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMDESC">
      <summary>Contains information about how to transfer a structure element, parameter, or function return value between processes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.lpVarValue">
      <summary>Represents a pointer to a value that is being passed between processes.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.wParamFlags">
      <summary>Represents bitmask values that describe the structure element, parameter, or return value.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMFLAG">
      <summary>Describes how to transfer a structure element, parameter, or function return value between processes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
      <summary>The parameter has custom data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASDEFAULT">
      <summary>The parameter has default behaviors defined.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FIN">
      <summary>The parameter passes information from the caller to the callee.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FLCID">
      <summary>The parameter is the local identifier of a client application.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOPT">
      <summary>The parameter is optional.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOUT">
      <summary>The parameter returns information from the callee to the caller.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FRETVAL">
      <summary>The parameter is the return value of the member.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_NONE">
      <summary>Does not specify whether the parameter passes or receives information.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATDATA">
      <summary>Provides the managed definition of the STATDATA structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advf">
      <summary>Represents the <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF"></see> enumeration value that determines when the advisory sink is notified of changes in the data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advSink">
      <summary>Represents the <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink"></see> interface that will receive change notifications.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.connection">
      <summary>Represents the token that uniquely identifies the advisory connection. This token is returned by the method that sets up the advisory connection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.formatetc">
      <summary>Represents the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure for the data of interest to the advise sink. The advise sink receives notification of changes to the data specified by this <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATSTG">
      <summary>Contains statistical information about an open storage, stream, or byte-array object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.atime">
      <summary>Specifies the last access time for this storage, stream, or byte array.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.cbSize">
      <summary>Specifies the size, in bytes, of the stream or byte array.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.clsid">
      <summary>Indicates the class identifier for the storage object.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.ctime">
      <summary>Indicates the creation time for this storage, stream, or byte array.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfLocksSupported">
      <summary>Indicates the types of region locking supported by the stream or byte array.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfMode">
      <summary>Indicates the access mode that was specified when the object was opened.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfStateBits">
      <summary>Indicates the current state bits of the storage object (the value most recently set by the IStorage::SetStateBits method).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.mtime">
      <summary>Indicates the last modification time for this storage, stream, or byte array.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.pwcsName">
      <summary>Represents a pointer to a null-terminated string containing the name of the object described by this structure.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.reserved">
      <summary>Reserved for future use.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.type">
      <summary>Indicates the type of storage object, which is one of the values from the STGTY enumeration.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM">
      <summary>Provides the managed definition of the STGMEDIUM structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease">
      <summary>Represents a pointer to an interface instance that allows the sending process to control the way the storage is released when the receiving process calls the ReleaseStgMedium function. If <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> is null, ReleaseStgMedium uses default procedures to release the storage; otherwise, ReleaseStgMedium uses the specified IUnknown interface.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed">
      <summary>Specifies the type of storage medium. The marshaling and unmarshaling routines use this value to determine which union member was used. This value must be one of the elements of the <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED"></see> enumeration.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.unionmember">
      <summary>Represents a handle, string, or interface pointer that the receiving process can use to access the data being transferred.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.SYSKIND">
      <summary>Identifies the target operating system platform.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_MAC">
      <summary>The target operating system for the type library is Apple Macintosh. By default, all data fields are aligned on even-byte boundaries.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN16">
      <summary>The target operating system for the type library is 16-bit Windows systems. By default, data fields are packed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN32">
      <summary>The target operating system for the type library is 32-bit Windows systems. By default, data fields are naturally aligned (for example, 2-byte integers are aligned on even-byte boundaries; 4-byte integers are aligned on quad-word boundaries, and so on).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN64">
      <summary>The target operating system for the type library is 64-bit Windows systems.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYMED">
      <summary>Provides the managed definition of the TYMED structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ENHMF">
      <summary>The storage medium is an enhanced metafile. If the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> member is null, the destination process should use DeleteEnhMetaFile to delete the bitmap.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE">
      <summary>The storage medium is a disk file identified by a path. If the STGMEDIUM<see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> member is null, the destination process should use OpenFile to delete the file.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_GDI">
      <summary>The storage medium is a Graphics Device Interface (GDI) component (HBITMAP). If the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> member is null, the destination process should use DeleteObject to delete the bitmap.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL">
      <summary>The storage medium is a global memory handle (HGLOBAL). Allocate the global handle with the GMEM_SHARE flag. If the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> member is null, the destination process should use GlobalFree to release the memory.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE">
      <summary>The storage medium is a storage component identified by an IStorage pointer. The data is in the streams and storages contained by this IStorage instance. If the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> member is not null, the destination process should use IStorage::Release to release the storage component.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM">
      <summary>The storage medium is a stream object identified by an IStream pointer. Use ISequentialStream::Read to read the data. If the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> member is not null, the destination process should use IStream::Release to release the stream component.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_MFPICT">
      <summary>The storage medium is a metafile (HMETAFILE). Use the Windows or WIN32 functions to access the metafile's data. If the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> member is null, the destination process should use DeleteMetaFile to delete the bitmap.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_NULL">
      <summary>No data is being passed.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEATTR">
      <summary>Contains attributes of a UCOMITypeInfo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbAlignment">
      <summary>Specifies the byte alignment for an instance of this type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeInstance">
      <summary>The size of an instance of this type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeVft">
      <summary>The size of this type's virtual method table (VTBL).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cFuncs">
      <summary>Indicates the number of functions on the interface this structure describes.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cImplTypes">
      <summary>Indicates the number of implemented interfaces on the interface this structure describes.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cVars">
      <summary>Indicates the number of variables and data fields on the interface described by this structure.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.dwReserved">
      <summary>Reserved for future use.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.guid">
      <summary>The GUID of the type information.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.idldescType">
      <summary>IDL attributes of the described type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lcid">
      <summary>Locale of member names and documentation strings.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lpstrSchema">
      <summary>Reserved for future use.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.MEMBER_ID_NIL">
      <summary>A constant used with the <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidConstructor"></see> and <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidDestructor"></see> fields.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidConstructor">
      <summary>ID of constructor, or <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL"></see> if none.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidDestructor">
      <summary>ID of destructor, or <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL"></see> if none.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.tdescAlias">
      <summary>If <see cref="F:System.Runtime.InteropServices.TYPEATTR.typekind"></see> == <see cref="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS"></see>, specifies the type for which this type is an alias.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.typekind">
      <summary>A <see cref="T:System.Runtime.InteropServices.TYPEKIND"></see> value describing the type this information describes.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMajorVerNum">
      <summary>Major version number.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMinorVerNum">
      <summary>Minor version number.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wTypeFlags">
      <summary>A <see cref="T:System.Runtime.InteropServices.TYPEFLAGS"></see> value describing this information.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEDESC">
      <summary>Describes the type of a variable, return type of a function, or the type of a function parameter.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.lpValue">
      <summary>If the variable is VT_SAFEARRAY or VT_PTR, the lpValue field contains a pointer to a TYPEDESC that specifies the element type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.vt">
      <summary>Indicates the variant type for the item described by this TYPEDESC.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEFLAGS">
      <summary>Defines the properties and attributes of a type description.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAGGREGATABLE">
      <summary>The class supports aggregation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAPPOBJECT">
      <summary>A type description that describes an Application object.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCANCREATE">
      <summary>Instances of the type can be created by ITypeInfo::CreateInstance.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCONTROL">
      <summary>The type is a control from which other types will be derived and should not be displayed to users.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDISPATCHABLE">
      <summary>Indicates that the interface derives from IDispatch, either directly or indirectly. This flag is computed; there is no Object Description Language for the flag.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDUAL">
      <summary>The interface supplies both IDispatch and VTBL binding.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FHIDDEN">
      <summary>The type should not be displayed to browsers.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FLICENSED">
      <summary>The type is licensed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE">
      <summary>The interface cannot add members at run time.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FOLEAUTOMATION">
      <summary>The types used in the interface are fully compatible with Automation, including VTBL binding support. Setting dual on an interface sets both this flag and the  <see cref="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL"></see>. This flag is not allowed on dispinterfaces.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPREDECLID">
      <summary>The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPROXY">
      <summary>Indicates that the interface will be using a proxy/stub dynamic link library. This flag specifies that the type library proxy should not be unregistered when the type library is unregistered.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREPLACEABLE">
      <summary>The object supports IConnectionPointWithDefault, and has default behaviors.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FRESTRICTED">
      <summary>Should not be accessible from macro languages. This flag is intended for system-level types or types that type browsers should not display.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREVERSEBIND">
      <summary>Indicates base interfaces should be checked for name resolution before checking children, which is the reverse of the default behavior.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEKIND">
      <summary>Specifies various types of data and functions.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ALIAS">
      <summary>A type that is an alias for another type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_COCLASS">
      <summary>A set of implemented components interfaces.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_DISPATCH">
      <summary>A set of methods and properties that are accessible through IDispatch::Invoke. By default, dual interfaces return TKIND_DISPATCH.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ENUM">
      <summary>A set of enumerators.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_INTERFACE">
      <summary>A type that has virtual functions, all of which are pure.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MAX">
      <summary>End-of-enumeration marker.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MODULE">
      <summary>A module that can have only static functions and data (for example, a DLL).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_RECORD">
      <summary>A structure with no methods.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_UNION">
      <summary>A union of all members that have an offset of zero.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPELIBATTR">
      <summary>Identifies a particular type library and provides localization support for member names.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.guid">
      <summary>Represents a globally unique library ID of a type library.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.lcid">
      <summary>Represents a locale ID of a type library.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.syskind">
      <summary>Represents the target hardware platform of a type library.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wLibFlags">
      <summary>Represents library flags.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMajorVerNum">
      <summary>Represents the major version number of a type library.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMinorVerNum">
      <summary>Represents the minor version number of a type library.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION">
      <summary>Contains information about a variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.lpvarValue">
      <summary>Describes a symbolic constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.oInst">
      <summary>Indicates the offset of this variable within the instance.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC">
      <summary>Describes a variable, constant, or data member.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.desc">
      <summary>Contains information about a variable.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.elemdescVar">
      <summary>Contains the variable type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.lpstrSchema">
      <summary>This field is reserved for future use.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.memid">
      <summary>Indicates the member ID of a variable.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.varkind">
      <summary>Defines how to marshal a variable.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.wVarFlags">
      <summary>Defines the properties of a variable.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARFLAGS">
      <summary>Identifies the constants that define the properties of a variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FBINDABLE">
      <summary>The variable supports data binding.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTBIND">
      <summary>The variable is the single property that best represents the object. Only one variable in type information can have this attribute.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
      <summary>Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type of &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDISPLAYBIND">
      <summary>The variable is displayed to the user as bindable. <see cref="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE"></see> must also be set.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FHIDDEN">
      <summary>The variable should not be displayed to the user in a browser, although it exists and is bindable.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FIMMEDIATEBIND">
      <summary>The variable is mapped as individual bindable properties.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FNONBROWSABLE">
      <summary>The variable appears in an object browser, but not in a properties browser.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREADONLY">
      <summary>Assignment to the variable should not be allowed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREPLACEABLE">
      <summary>Tags the interface as having default behaviors.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREQUESTEDIT">
      <summary>When set, any attempt to directly change the property results in a call to IPropertyNotifySink::OnRequestEdit. The implementation of OnRequestEdit determines if the change is accepted.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FRESTRICTED">
      <summary>The variable should not be accessible from macro languages. This flag is intended for system-level variables or variables that you do not want type browsers to display.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FSOURCE">
      <summary>The variable returns an object that is a source of events.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FUIDEFAULT">
      <summary>The variable is the default display in the user interface.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARKIND">
      <summary>Defines the kind of variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_CONST">
      <summary>The VARDESC structure describes a symbolic constant. There is no memory associated with it.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_DISPATCH">
      <summary>The variable can be accessed only through IDispatch::Invoke.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_PERINSTANCE">
      <summary>The variable is a field or member of the type. It exists at a fixed offset within each instance of the type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_STATIC">
      <summary>There is only one instance of the variable.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
      <summary>Specifies the method to call when you unregister an assembly for use from COM; this allows for the execution of user-written code during the unregistration process.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComUnregisterFunctionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute"></see> class.</summary>
    </member>
    <member name="T:System.Security.SecureString">
      <summary>Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.SecureString.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecureString"></see> class.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while protecting or unprotecting the value of this instance.</exception>
      <exception cref="T:System.NotSupportedException">This operation is not supported on this platform.</exception>
    </member>
    <member name="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecureString"></see> class from a subarray of <see cref="T:System.Char"></see> objects.   This constructor is not CLS-compliant. The CLS-compliant alternative is <see cref="M:System.Security.SecureString.#ctor"></see>.</summary>
      <param name="value">A pointer to an array of <see cref="T:System.Char"></see> objects.</param>
      <param name="length">The number of elements of value to include in the new instance.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length">length</paramref> is less than zero or greater than 65,536.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while protecting or unprotecting the value of this secure string.</exception>
      <exception cref="T:System.NotSupportedException">This operation is not supported on this platform.</exception>
    </member>
    <member name="M:System.Security.SecureString.AppendChar(System.Char)">
      <summary>Appends a character to the end of the current secure string.</summary>
      <param name="c">A character to append to this secure string.</param>
      <exception cref="T:System.ObjectDisposedException">This secure string has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">This secure string is read-only.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Performing this operation would make the length of this secure string greater than 65,536 characters.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while protecting or unprotecting the value of this secure string.</exception>
    </member>
    <member name="M:System.Security.SecureString.Clear">
      <summary>Deletes the value of the current secure string.</summary>
      <exception cref="T:System.ObjectDisposedException">This secure string has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">This secure string is read-only.</exception>
    </member>
    <member name="M:System.Security.SecureString.Copy">
      <summary>Creates a copy of the current secure string.</summary>
      <returns>A duplicate of this secure string.</returns>
      <exception cref="T:System.ObjectDisposedException">This secure string has already been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while protecting or unprotecting the value of this secure string.</exception>
    </member>
    <member name="M:System.Security.SecureString.Dispose">
      <summary>Releases all resources used by the current <see cref="T:System.Security.SecureString"></see> object.</summary>
    </member>
    <member name="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
      <summary>Inserts a character in this secure string at the specified index position.</summary>
      <param name="index">The index position where parameter c is inserted.</param>
      <param name="c">The character to insert.</param>
      <exception cref="T:System.ObjectDisposedException">This secure string has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">This secure string is read-only.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero, or greater than the length of this secure string.   -or-   Performing this operation would make the length of this secure string greater than 65,536 characters.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while protecting or unprotecting the value of this secure string.</exception>
    </member>
    <member name="M:System.Security.SecureString.IsReadOnly">
      <summary>Indicates whether this secure string is marked read-only.</summary>
      <returns>true if this secure string is marked read-only; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">This secure string has already been disposed.</exception>
    </member>
    <member name="P:System.Security.SecureString.Length">
      <summary>Gets the number of characters in the current secure string.</summary>
      <returns>The number of <see cref="T:System.Char"></see> objects in this secure string.</returns>
      <exception cref="T:System.ObjectDisposedException">This secure string has already been disposed.</exception>
    </member>
    <member name="M:System.Security.SecureString.MakeReadOnly">
      <summary>Makes the text value of this secure string read-only.</summary>
      <exception cref="T:System.ObjectDisposedException">This secure string has already been disposed.</exception>
    </member>
    <member name="M:System.Security.SecureString.RemoveAt(System.Int32)">
      <summary>Removes the character at the specified index position from this secure string.</summary>
      <param name="index">The index position of a character in this secure string.</param>
      <exception cref="T:System.ObjectDisposedException">This secure string has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">This secure string is read-only.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero, or greater than or equal to the length of this secure string.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while protecting or unprotecting the value of this secure string.</exception>
    </member>
    <member name="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
      <summary>Replaces the existing character at the specified index position with another character.</summary>
      <param name="index">The index position of an existing character in this secure string</param>
      <param name="c">A character that replaces the existing character.</param>
      <exception cref="T:System.ObjectDisposedException">This secure string has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">This secure string is read-only.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero, or greater than or equal to the length of this secure string.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while protecting or unprotecting the value of this secure string.</exception>
    </member>
    <member name="T:System.Security.SecureStringMarshal">
      
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <param name="s"></param>
      <returns></returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <param name="s"></param>
      <returns></returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <param name="s"></param>
      <returns></returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <param name="s"></param>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
      <summary>Allows an unmanaged method to call a managed method.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute"></see> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary>Encapsulates an array and an offset within the specified array.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> structure.</summary>
      <param name="array">A managed array.</param>
      <param name="offset">The offset in bytes, of the element to be passed through platform invoke.</param>
      <exception cref="T:System.ArgumentException">The array is larger than 2 gigabytes (GB).</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary>Indicates whether the specified object matches the current <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> object.</summary>
      <param name="obj">Object to compare with this instance.</param>
      <returns>true if the object matches this <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>Indicates whether the specified <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> object matches the current instance.</summary>
      <param name="obj">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> object to compare with this instance.</param>
      <returns>true if the specified <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> object matches the current instance; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary>Returns the managed array referenced by this <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see>.</summary>
      <returns>The managed array this instance references.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary>Returns a hash code for this value type.</summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary>Returns the offset provided when this <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> was constructed.</summary>
      <returns>The offset for this instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>Determines whether two specified <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> objects have the same value.</summary>
      <param name="a">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> object to compare with the b parameter.</param>
      <param name="b">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> object to compare with the a parameter.</param>
      <returns>true if the value of <paramref name="a">a</paramref> is the same as the value of <paramref name="b">b</paramref>; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>Determines whether two specified <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> objects no not have the same value.</summary>
      <param name="a">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> object to compare with the b parameter.</param>
      <param name="b">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> object to compare with the a parameter.</param>
      <returns>true if the value of <paramref name="a">a</paramref> is not the same as the value of <paramref name="b">b</paramref>; otherwise, false.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AutomationProxyAttribute">
      <summary>Specifies whether the type should be marshaled using the Automation marshaler or a custom proxy and stub.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AutomationProxyAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.AutomationProxyAttribute"></see> class.</summary>
      <param name="val">true if the class should be marshaled using the Automation Marshaler; false if a proxy stub marshaler should be used.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.AutomationProxyAttribute.Value">
      <summary>Gets a value indicating the type of marshaler to use.</summary>
      <returns>true if the class should be marshaled using the Automation Marshaler; false if a proxy stub marshaler should be used.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BestFitMappingAttribute">
      <summary>Controls whether Unicode characters are converted to the closest matching ANSI characters.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.BestFitMappingAttribute"></see> class set to the value of the <see cref="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping"></see> property.</summary>
      <param name="BestFitMapping">true to indicate that best-fit mapping is enabled; otherwise, false. The default is true.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping">
      <summary>Gets the best-fit mapping behavior when converting Unicode characters to ANSI characters.</summary>
      <returns>true if best-fit mapping is enabled; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.BestFitMappingAttribute.ThrowOnUnmappableChar">
      <summary>Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI '?' character.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BStrWrapper">
      <summary>Marshals data of type VT_BSTR from managed to unmanaged code. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.BStrWrapper"></see> class with the specified <see cref="T:System.Object"></see> object.</summary>
      <param name="value">The object to wrap and marshal as VT_BSTR.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.BStrWrapper"></see> class with the specified <see cref="T:System.String"></see> object.</summary>
      <param name="value">The object to wrap and marshal as VT_BSTR.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BStrWrapper.WrappedObject">
      <summary>Gets the wrapped <see cref="T:System.String"></see> object to marshal as type VT_BSTR.</summary>
      <returns>The object that is wrapped by <see cref="T:System.Runtime.InteropServices.BStrWrapper"></see>.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary>Specifies the calling convention required to call methods implemented in unmanaged code.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary>The caller cleans the stack. This enables calling functions with varargs, which makes it appropriate to use for methods that accept a variable number of parameters, such as Printf.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary>This calling convention is not supported.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary>The callee cleans the stack. This is the default convention for calling unmanaged functions with platform invoke.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary>The first parameter is the this pointer and is stored in register ECX. Other parameters are pushed on the stack. This calling convention is used to call methods on classes exported from an unmanaged DLL.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary>This member is not actually a calling convention, but instead uses the default platform calling convention. For example, on Windows the default is <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall"></see> and on Windows CE.NET it is <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl"></see>.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary>Indicates the type of class interface to be generated for a class exposed to COM, if an interface is generated at all.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute"></see> class with the specified <see cref="T:System.Runtime.InteropServices.ClassInterfaceType"></see> enumeration value.</summary>
      <param name="classInterfaceType">Describes the type of interface that is generated for a class.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute"></see> class with the specified <see cref="T:System.Runtime.InteropServices.ClassInterfaceType"></see> enumeration member.</summary>
      <param name="classInterfaceType">One of the <see cref="T:System.Runtime.InteropServices.ClassInterfaceType"></see> values that describes the type of interface that is generated for a class.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.ClassInterfaceType"></see> value that describes which type of interface should be generated for the class.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.ClassInterfaceType"></see> value that describes which type of interface should be generated for the class.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary>Identifies the type of class interface that is generated for a class.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary>Indicates that the class only supports late binding for COM clients. A dispinterface for the class is automatically exposed to COM clients on request. The type library produced by <see cref="~/docs/framework/tools/tlbexp-exe-type-library-exporter.md">Tlbexp.exe (Type Library Exporter)</see> does not contain type information for the dispinterface in order to prevent clients from caching the DISPIDs of the interface. The dispinterface does not exhibit the versioning problems described in <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute"></see> because clients can only late-bind to the interface.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary>Indicates that a dual class interface is automatically generated for the class and exposed to COM. Type information is produced for the class interface and published in the type library. Using AutoDual is strongly discouraged because of the versioning limitations described in <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary>Indicates that no class interface is generated for the class. If no interfaces are implemented explicitly, the class can only provide late-bound access through the IDispatch interface. This is the recommended setting for <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute"></see>. Using ClassInterfaceType.None is the only way to expose functionality through interfaces implemented explicitly by the class.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary>Specifies the class identifier of a coclass imported from a type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary>Initializes new instance of the <see cref="T:System.Runtime.InteropServices.CoClassAttribute"></see> with the class identifier of the original coclass.</summary>
      <param name="coClass">A <see cref="T:System.Type"></see> that contains the class identifier of the original coclass.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary>Gets the class identifier of the original coclass.</summary>
      <returns>A <see cref="T:System.Type"></see> containing the class identifier of the original coclass.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAliasNameAttribute">
      <summary>Indicates the COM alias for a parameter or field type.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAliasNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComAliasNameAttribute"></see> class with the alias for the attributed field or parameter.</summary>
      <param name="alias">The alias for the field or parameter as found in the type library when it was imported.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAliasNameAttribute.Value">
      <summary>Gets the alias for the field or parameter as found in the type library when it was imported.</summary>
      <returns>The alias for the field or parameter as found in the type library when it was imported.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary>Permits late-bound registration of an event handler.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo"></see> class by using the specified type and a name of the event on the type.</summary>
      <param name="type">The type of object.</param>
      <param name="eventName">The name of an event on type.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>Attaches an event handler to a COM object.</summary>
      <param name="target">The target object that the event delegate should bind to.</param>
      <param name="handler">The event delegate.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary>Gets the attributes for this event.</summary>
      <returns>The read-only attributes for this event.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary>Gets the class that declares this member.</summary>
      <returns>The <see cref="T:System.Type"></see> object for the class that declares this member.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary>Gets the method that was used to add an event handler delegate to the event source.</summary>
      <param name="nonPublic">true to return non-public methods; otherwise, false.</param>
      <returns>The method that was used to add an event handler delegate to the event source.</returns>
      <exception cref="T:System.MethodAccessException"><paramref name="nonPublic">nonPublic</paramref> is true and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary>When overridden in a derived class, gets an array that contains all the custom attributes that are applied to this member.</summary>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
      <returns>An array that contains all the custom attributes, or an array that has no elements if no attributes were defined.</returns>
      <exception cref="T:System.InvalidOperationException">This member belongs to a type that is loaded into the reflection-only context. See <see cref="~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md">How to: Load Assemblies into the Reflection-Only Context</see>.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>When overridden in a derived class, gets an array that contains all the custom attributes of the specified type that are applied to this member.</summary>
      <param name="attributeType">The attribute type to search for. Only attributes that are assignable to this type can be returned.</param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
      <returns>An array that contains all the custom attributes of the specified type, or an array that has no elements if no attributes were defined.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="attributeType">attributeType</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This member belongs to a type that is loaded into the reflection-only context. See <see cref="~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md">How to: Load Assemblies into the Reflection-Only Context</see></exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary>When overridden in a derived class, returns the method that was called when the event was raised.</summary>
      <param name="nonPublic">true to return non-public methods; otherwise, false.</param>
      <returns>The object that was called when the event was raised.</returns>
      <exception cref="T:System.MethodAccessException"><paramref name="nonPublic">nonPublic</paramref> is true and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary>When overridden in a derived class, retrieves the <see cref="T:System.Reflection.MethodInfo"></see> object for removing a method of the event.</summary>
      <param name="nonPublic">true to return non-public methods; otherwise, false.</param>
      <returns>The method that was used to remove an event handler delegate from the event source.</returns>
      <exception cref="T:System.MethodAccessException"><paramref name="nonPublic">nonPublic</paramref> is true and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether one or more instances of the specified attribute are applied to this member.</summary>
      <param name="attributeType">The attribute type to search for.</param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
      <returns>true if the specified attribute has been applied to this member; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary>Gets the name of the current member.</summary>
      <returns>The name of this member.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary>Gets the class object that was used to initialize this instance.</summary>
      <returns>The <see cref="T:System.Type"></see> object that was used to initialize the current object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>Detaches an event handler from a COM object.</summary>
      <param name="target">The target object that the event delegate is bound to.</param>
      <param name="handler">The event delegate.</param>
      <exception cref="T:System.InvalidOperationException">The event does not have a public remove accessor.</exception>
      <exception cref="T:System.ArgumentException">The handler that was passed in cannot be used.</exception>
      <exception cref="T:System.Reflection.TargetException">  
 In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <see cref="T:System.Exception"></see> instead.  

 The <paramref name="target">target</paramref> parameter is null and the event is not static.   -or-   The <see cref="T:System.Reflection.EventInfo"></see> is not declared on the target.</exception>
      <exception cref="T:System.MethodAccessException">  
 In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.MemberAccessException"></see>, instead.  

 The caller does not have access permission to the member.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute">
      <summary>Indicates to a COM client that all classes in the current version of an assembly are compatible with classes in an earlier version of the assembly.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute"></see> class with the major version, minor version, build, and revision numbers of the assembly.</summary>
      <param name="major">The major version number of the assembly.</param>
      <param name="minor">The minor version number of the assembly.</param>
      <param name="build">The build number of the assembly.</param>
      <param name="revision">The revision number of the assembly.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.BuildNumber">
      <summary>Gets the build number of the assembly.</summary>
      <returns>The build number of the assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MajorVersion">
      <summary>Gets the major version number of the assembly.</summary>
      <returns>The major version number of the assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MinorVersion">
      <summary>Gets the minor version number of the assembly.</summary>
      <returns>The minor version number of the assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.RevisionNumber">
      <summary>Gets the revision number of the assembly.</summary>
      <returns>The revision number of the assembly.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComConversionLossAttribute">
      <summary>Indicates that information was lost about a class or interface when it was imported from a type library to an assembly.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComConversionLossAttribute.#ctor">
      <summary>Initializes a new instance of the ComConversionLossAttribute class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary>Specifies a default interface to expose to COM. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute"></see> class with the specified <see cref="T:System.Type"></see> object as the default interface exposed to COM.</summary>
      <param name="defaultInterface">A <see cref="T:System.Type"></see> value indicating the default interface to expose to COM.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary>Gets the <see cref="T:System.Type"></see> object that specifies the default interface to expose to COM.</summary>
      <returns>The <see cref="T:System.Type"></see> object that specifies the default interface to expose to COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary>Identifies the source interface and the class that implements the methods of the event interface that is generated when a coclass is imported from a COM type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute"></see> class with the source interface and event provider class.</summary>
      <param name="SourceInterface">A <see cref="T:System.Type"></see> that contains the original source interface from the type library. COM uses this interface to call back to the managed class.</param>
      <param name="EventProvider">A <see cref="T:System.Type"></see> that contains the class that implements the methods of the event interface.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary>Gets the class that implements the methods of the event interface.</summary>
      <returns>A <see cref="T:System.Type"></see> that contains the class that implements the methods of the event interface.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary>Gets the original source interface from the type library.</summary>
      <returns>A <see cref="T:System.Type"></see> containing the source interface.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventsHelper">
      <summary>Provides methods that enable .NET Framework delegates that handle events to be added and removed from COM objects.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>Adds a delegate to the invocation list of events originating from a COM object.</summary>
      <param name="rcw">The COM object that triggers the events the caller would like to respond to.</param>
      <param name="iid">The identifier of the source interface used by the COM object to trigger events.</param>
      <param name="dispid">The dispatch identifier of the method on the source interface.</param>
      <param name="d">The delegate to invoke when the COM event is fired.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>Removes a delegate from the invocation list of events originating from a COM object.</summary>
      <param name="rcw">The COM object the delegate is attached to.</param>
      <param name="iid">The identifier of the source interface used by the COM object to trigger events.</param>
      <param name="dispid">The dispatch identifier of the method on the source interface.</param>
      <param name="d">The delegate to remove from the invocation list.</param>
      <returns>The delegate that was removed from the invocation list.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary>The exception that is thrown when an unrecognized HRESULT is returned from a COM method call.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException"></see> class with default values.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException"></see> class with a specified message.</summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException"></see> class from serialization data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object that supplies the contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException"></see> class with a specified message and error code.</summary>
      <param name="message">The message that indicates the reason the exception occurred.</param>
      <param name="errorCode">The error code (HRESULT) value associated with this exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary>Converts the contents of the exception to a string.</summary>
      <returns>A string containing the <see cref="P:System.Exception.HResult"></see>, <see cref="P:System.Exception.Message"></see>, <see cref="P:System.Exception.InnerException"></see>, and <see cref="P:System.Exception.StackTrace"></see> properties of the exception.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary>Indicates that the attributed type was previously defined in COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComImportAttribute"></see>.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary>Identifies how to expose an interface to COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary>Indicates that the interface is exposed to COM as a <see cref="http://msdn.microsoft.com/en-us/1d39d64c-e23a-4249-a167-4369d5bd2b65">dual interface</see>, which enables both early and late binding. <see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual"></see> is the default value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary>Indicates that an interface is exposed to COM as a <see cref="http://msdn.microsoft.com/en-us/e8c18ae5-3d9e-4dff-aa20-b5acc723eacf">dispinterface</see>, which enables late binding only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIInspectable">
      <summary>Indicates that an interface is exposed to COM as a Windows Runtime interface.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary>Indicates that an interface is exposed to COM as an interface that is derived from <see cref="http://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see>, which enables only early binding.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary>Describes the type of a COM member.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary>The member is a normal method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary>The member gets properties.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary>The member sets properties.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Reflection.Missing">
      <summary>Represents a missing <see cref="T:System.Object"></see>. This class cannot be inherited.</summary>
    </member>
    <member name="F:System.Reflection.Missing.Value">
      <summary>Represents the sole instance of the <see cref="T:System.Reflection.Missing"></see> class.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.VariantWrapper">
      <summary>Marshals data of type VT_VARIANT | VT_BYREF from managed to unmanaged code. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.VariantWrapper"></see> class for the specified <see cref="T:System.Object"></see> parameter.</summary>
      <param name="obj">The object to marshal.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
      <summary>Gets the object wrapped by the <see cref="T:System.Runtime.InteropServices.VariantWrapper"></see> object.</summary>
      <returns>The object wrapped by the <see cref="T:System.Runtime.InteropServices.VariantWrapper"></see> object.</returns>
    </member>
    <member name="T:System.DataMisalignedException">
      <summary>The exception that is thrown when a unit of data is read from or written to an address that is not a multiple of the data size. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DataMisalignedException"></see> class.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DataMisalignedException"></see> class using the specified error message.</summary>
      <param name="message">A <see cref="T:System.String"></see> object that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.DataMisalignedException"></see> class using the specified error message and underlying exception.</summary>
      <param name="message">A <see cref="T:System.String"></see> object that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="innerException">The exception that is the cause of the current <see cref="T:System.DataMisalignedException"></see>. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.IUnknownConstantAttribute">
      <summary>Indicates that the default value for the attributed field or parameter is an instance of <see cref="T:System.Runtime.InteropServices.UnknownWrapper"></see>, where the <see cref="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject"></see> is null. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IUnknownConstantAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.IUnknownConstantAttribute"></see> class.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IUnknownConstantAttribute.Value">
      <summary>Gets the IUnknown constant stored in this attribute.</summary>
      <returns>The IUnknown constant stored in this attribute. Only null is allowed for an IUnknown constant value.</returns>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary>The exception that is thrown when a DLL specified in a DLL import cannot be found.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DllNotFoundException"></see> class with default properties.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DllNotFoundException"></see> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DllNotFoundException"></see> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.DllNotFoundException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.CriticalHandle">
      <summary>Represents a wrapper class for handle resources.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.CriticalHandle"></see> class with the specified invalid handle value.</summary>
      <param name="invalidHandleValue">The value of an invalid handle (usually 0 or -1).</param>
      <exception cref="T:System.TypeLoadException">The derived class resides in an assembly without unmanaged code access permission.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Runtime.InteropServices.CriticalHandle"></see>.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Runtime.InteropServices.CriticalHandle"></see> class specifying whether to perform a normal dispose operation.</summary>
      <param name="disposing">true for a normal dispose operation; false to finalize the handle.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Finalize">
      <summary>Frees all resources associated with the handle.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CriticalHandle.handle">
      <summary>Specifies the handle to be wrapped.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsClosed">
      <summary>Gets a value indicating whether the handle is closed.</summary>
      <returns>true if the handle is closed; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsInvalid">
      <summary>When overridden in a derived class, gets a value indicating whether the handle value is invalid.</summary>
      <returns>true if the handle is valid; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle">
      <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
      <returns>true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a <see cref="~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md">releaseHandleFailed</see> Managed Debugging Assistant.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)">
      <summary>Sets the handle to the specified pre-existing handle.</summary>
      <param name="handle">The pre-existing handle to use.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid">
      <summary>Marks a handle as invalid.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary>Wraps objects the marshaler should marshal as a VT_CY.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.CurrencyWrapper"></see> class with the Decimal to be wrapped and marshaled as type VT_CY.</summary>
      <param name="obj">The Decimal to be wrapped and marshaled as VT_CY.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.CurrencyWrapper"></see> class with the object containing the Decimal to be wrapped and marshaled as type VT_CY.</summary>
      <param name="obj">The object containing the Decimal to be wrapped and marshaled as VT_CY.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="obj">obj</paramref> parameter is not a <see cref="T:System.Decimal"></see> type.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary>Gets the wrapped object to be marshaled as type VT_CY.</summary>
      <returns>The wrapped object to be marshaled as type VT_CY.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceMode">
      <summary>Indicates whether the <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)"></see> method's <see cref="http://go.microsoft.com/fwlink/?LinkID=144867">IUnknown::QueryInterface</see> calls can use the <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface"></see> interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Allow">
      <summary><see cref="http://go.microsoft.com/fwlink/?LinkID=144867">IUnknown::QueryInterface</see> method calls can use the <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface"></see> interface. When you use this value, the <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)"></see> method overload functions like the <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)"></see> overload.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Ignore">
      <summary><see cref="http://go.microsoft.com/fwlink/?LinkID=144867">IUnknown::QueryInterface</see> method calls should ignore the <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface"></see> interface.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceResult">
      <summary>Provides return values for the <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)"></see> method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Failed">
      <summary>The interface for a specific interface ID is not available. In this case, the returned interface is null. E_NOINTERFACE is returned to the caller of <see cref="http://go.microsoft.com/fwlink/?LinkId=144867">IUnknown::QueryInterface</see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled">
      <summary>The interface pointer that is returned from the <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)"></see> method can be used as the result of <see cref="http://go.microsoft.com/fwlink/?LinkId=144867">IUnknown::QueryInterface</see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled">
      <summary>The custom QueryInterface was not used. Instead, the default implementation of <see cref="http://go.microsoft.com/fwlink/?LinkId=144867">IUnknown::QueryInterface</see> should be used.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary>Specifies the value of the <see cref="T:System.Runtime.InteropServices.CharSet"></see> enumeration. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute"></see> class with the specified <see cref="T:System.Runtime.InteropServices.CharSet"></see> value.</summary>
      <param name="charSet">One of the <see cref="T:System.Runtime.InteropServices.CharSet"></see> values.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary>Gets the default value of <see cref="T:System.Runtime.InteropServices.CharSet"></see> for any call to <see cref="T:System.Runtime.InteropServices.DllImportAttribute"></see>.</summary>
      <returns>The default value of <see cref="T:System.Runtime.InteropServices.CharSet"></see> for any call to <see cref="T:System.Runtime.InteropServices.DllImportAttribute"></see>.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute">
      <summary>Specifies the paths that are used to search for DLLs that provide functions for platform invokes.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.#ctor(System.Runtime.InteropServices.DllImportSearchPath)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"></see> class, specifying the paths to use when searching for the targets of platform invokes.</summary>
      <param name="paths">A bitwise combination of enumeration values that specify the paths that the LoadLibraryEx function searches during platform invokes.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.Paths">
      <summary>Gets a bitwise combination of enumeration values that specify the paths that the LoadLibraryEx function searches during platform invokes.</summary>
      <returns>A bitwise combination of enumeration values that specify search paths for platform invokes.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultParameterValueAttribute">
      <summary>Sets the default value of a parameter when called from a language that supports default parameters. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultParameterValueAttribute.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DefaultParameterValueAttribute"></see> class with the default value of a parameter.</summary>
      <param name="value">An object that represents the default value of a parameter.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultParameterValueAttribute.Value">
      <summary>Gets the default value of a parameter.</summary>
      <returns>An object that represents the default value of a parameter.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary>Wraps objects the marshaler should marshal as a VT_DISPATCH.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DispatchWrapper"></see> class with the object being wrapped.</summary>
      <param name="obj">The object to be wrapped and converted to <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH"></see>.</param>
      <exception cref="T:System.ArgumentException"><paramref name="obj">obj</paramref> is not a class or an array.   -or-  <paramref name="obj">obj</paramref> does not support IDispatch.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="obj">obj</paramref> parameter was marked with a <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute"></see> attribute that was passed a value of false.   -or-   The <paramref name="obj">obj</paramref> parameter inherits from a type marked with a <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute"></see> attribute that was passed a value of false.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary>Gets the object wrapped by the <see cref="T:System.Runtime.InteropServices.DispatchWrapper"></see>.</summary>
      <returns>The object wrapped by the <see cref="T:System.Runtime.InteropServices.DispatchWrapper"></see>.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary>Specifies the COM dispatch identifier (DISPID) of a method, field, or property.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the DispIdAttribute class with the specified DISPID.</summary>
      <param name="dispId">The DISPID for the member.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary>Gets the DISPID for the member.</summary>
      <returns>The DISPID for the member.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary>Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DllImportAttribute"></see> class with the name of the DLL containing the method to import.</summary>
      <param name="dllName">The name of the DLL that contains the unmanaged method. This can include an assembly display name, if the DLL is included in an assembly.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary>Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary>Indicates the calling convention of an entry point.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary>Indicates how to marshal string parameters to the method and controls name mangling.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary>Indicates the name or ordinal of the DLL entry point to be called.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary>Controls whether the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet"></see> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary>Indicates whether unmanaged methods that have HRESULT or retval return values are directly translated or whether HRESULT or retval return values are automatically converted to exceptions.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary>Indicates whether the callee calls the SetLastError Win32 API function before returning from the attributed method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
      <summary>Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI &quot;?&quot; character.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary>Gets the name of the DLL file that contains the entry point.</summary>
      <returns>The name of the DLL file that contains the entry point.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportSearchPath">
      <summary>Specifies the paths that are used to search for DLLs that provide functions for platform invokes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.ApplicationDirectory">
      <summary>Include the application directory in the DLL search path.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory">
      <summary>When searching for assembly dependencies, include the directory that contains the assembly itself, and search that directory first. This value is used by the .NET Framework, before the paths are passed to the Win32 <see cref="http://go.microsoft.com/fwlink/?LinkId=236091">LoadLibraryEx</see> function.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior">
      <summary>Search the application directory, and then call the Win32 <see cref="http://go.microsoft.com/fwlink/?LinkId=236091">LoadLibraryEx</see> function with the LOAD_WITH_ALTERED_SEARCH_PATH flag. This value is ignored if any other value is specified. Operating systems that do not support the <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"></see> attribute use this value, and ignore other values.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories">
      <summary>Include the application directory, the %WinDir%\System32 directory, and user directories in the DLL search path.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.System32">
      <summary>Include the %WinDir%\System32 directory in the DLL search path.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UseDllDirectoryForDependencies">
      <summary>Search for the dependencies of a DLL in the folder where the DLL is located before searching other folders.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UserDirectories">
      <summary>Include any path that was explicitly added to the process-wide search path by using the Win32 AddDllDirectory function.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary>Wraps objects the marshaler should marshal as a VT_ERROR.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ErrorWrapper"></see> class with the HRESULT that corresponds to the exception supplied.</summary>
      <param name="e">The exception to be converted to an error code.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ErrorWrapper"></see> class with the HRESULT of the error.</summary>
      <param name="errorCode">The HRESULT of the error.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ErrorWrapper"></see> class with an object containing the HRESULT of the error.</summary>
      <param name="errorCode">The object containing the HRESULT of the error.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="errorCode">errorCode</paramref> parameter is not an <see cref="T:System.Int32"></see> type.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary>Gets the error code of the wrapper.</summary>
      <returns>The HRESULT of the error.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandle">
      <summary>Provides a way to access a managed object from unmanaged memory.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
      <summary>Retrieves the address of an object in a <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned"></see> handle.</summary>
      <returns>The address of the pinned object as an <see cref="T:System.IntPtr"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">The handle is any type other than <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned"></see>.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
      <summary>Allocates a <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal"></see> handle for the specified object.</summary>
      <param name="value">The object that uses the <see cref="T:System.Runtime.InteropServices.GCHandle"></see>.</param>
      <returns>A new <see cref="T:System.Runtime.InteropServices.GCHandle"></see> that protects the object from garbage collection. This <see cref="T:System.Runtime.InteropServices.GCHandle"></see> must be released with <see cref="M:System.Runtime.InteropServices.GCHandle.Free"></see> when it is no longer needed.</returns>
      <exception cref="T:System.ArgumentException">An instance with nonprimitive (non-blittable) members cannot be pinned.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
      <summary>Allocates a handle of the specified type for the specified object.</summary>
      <param name="value">The object that uses the <see cref="T:System.Runtime.InteropServices.GCHandle"></see>.</param>
      <param name="type">One of the <see cref="T:System.Runtime.InteropServices.GCHandleType"></see> values, indicating the type of <see cref="T:System.Runtime.InteropServices.GCHandle"></see> to create.</param>
      <returns>A new <see cref="T:System.Runtime.InteropServices.GCHandle"></see> of the specified type. This <see cref="T:System.Runtime.InteropServices.GCHandle"></see> must be released with <see cref="M:System.Runtime.InteropServices.GCHandle.Free"></see> when it is no longer needed.</returns>
      <exception cref="T:System.ArgumentException">An instance with nonprimitive (non-blittable) members cannot be pinned.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Runtime.InteropServices.GCHandle"></see> object is equal to the current <see cref="T:System.Runtime.InteropServices.GCHandle"></see> object.</summary>
      <param name="o">The <see cref="T:System.Runtime.InteropServices.GCHandle"></see> object to compare with the current <see cref="T:System.Runtime.InteropServices.GCHandle"></see> object.</param>
      <returns>true if the specified <see cref="T:System.Runtime.InteropServices.GCHandle"></see> object is equal to the current <see cref="T:System.Runtime.InteropServices.GCHandle"></see> object; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Free">
      <summary>Releases a <see cref="T:System.Runtime.InteropServices.GCHandle"></see>.</summary>
      <exception cref="T:System.InvalidOperationException">The handle was freed or never initialized.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
      <summary>Returns a new <see cref="T:System.Runtime.InteropServices.GCHandle"></see> object created from a handle to a managed object.</summary>
      <param name="value">An <see cref="T:System.IntPtr"></see> handle to a managed object to create a <see cref="T:System.Runtime.InteropServices.GCHandle"></see> object from.</param>
      <returns>A new <see cref="T:System.Runtime.InteropServices.GCHandle"></see> object that corresponds to the value parameter.</returns>
      <exception cref="T:System.InvalidOperationException">The value of the <paramref name="value">value</paramref> parameter is <see cref="F:System.IntPtr.Zero"></see>.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
      <summary>Returns an identifier for the current <see cref="T:System.Runtime.InteropServices.GCHandle"></see> object.</summary>
      <returns>An identifier for the current <see cref="T:System.Runtime.InteropServices.GCHandle"></see> object.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
      <summary>Gets a value indicating whether the handle is allocated.</summary>
      <returns>true if the handle is allocated; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
      <summary>Returns a value indicating whether two <see cref="T:System.Runtime.InteropServices.GCHandle"></see> objects are equal.</summary>
      <param name="a">A <see cref="T:System.Runtime.InteropServices.GCHandle"></see> object to compare with the b parameter.</param>
      <param name="b">A <see cref="T:System.Runtime.InteropServices.GCHandle"></see> object to compare with the a parameter.</param>
      <returns>true if the <paramref name="a">a</paramref> and <paramref name="b">b</paramref> parameters are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr to System.Runtime.InteropServices.GCHandle)">
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle to System.IntPtr)">
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
      <summary>Returns a value indicating whether two <see cref="T:System.Runtime.InteropServices.GCHandle"></see> objects are not equal.</summary>
      <param name="a">A <see cref="T:System.Runtime.InteropServices.GCHandle"></see> object to compare with the b parameter.</param>
      <param name="b">A <see cref="T:System.Runtime.InteropServices.GCHandle"></see> object to compare with the a parameter.</param>
      <returns>true if the <paramref name="a">a</paramref> and <paramref name="b">b</paramref> parameters are not equal; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.Target">
      <summary>Gets or sets the object this handle represents.</summary>
      <returns>The object this handle represents.</returns>
      <exception cref="T:System.InvalidOperationException">The handle was freed, or never initialized.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
      <summary>Returns the internal integer representation of a <see cref="T:System.Runtime.InteropServices.GCHandle"></see> object.</summary>
      <param name="value">A <see cref="T:System.Runtime.InteropServices.GCHandle"></see> object to retrieve an internal integer representation from.</param>
      <returns>An <see cref="T:System.IntPtr"></see> object that represents a <see cref="T:System.Runtime.InteropServices.GCHandle"></see> object.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandleType">
      <summary>Represents the types of handles the <see cref="T:System.Runtime.InteropServices.GCHandle"></see> class can allocate.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Normal">
      <summary>This handle type represents an opaque handle, meaning you cannot resolve the address of the pinned object through the handle. You can use this type to track an object and prevent its collection by the garbage collector. This enumeration member is useful when an unmanaged client holds the only reference, which is undetectable from the garbage collector, to a managed object.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Pinned">
      <summary>This handle type is similar to <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal"></see>, but allows the address of the pinned object to be taken. This prevents the garbage collector from moving the object and hence undermines the efficiency of the garbage collector. Use the <see cref="M:System.Runtime.InteropServices.GCHandle.Free"></see> method to free the allocated handle as soon as possible.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Weak">
      <summary>This handle type is used to track an object, but allow it to be collected. When an object is collected, the contents of the <see cref="T:System.Runtime.InteropServices.GCHandle"></see> are zeroed. Weak references are zeroed before the finalizer runs, so even if the finalizer resurrects the object, the Weak reference is still zeroed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.WeakTrackResurrection">
      <summary>This handle type is similar to <see cref="F:System.Runtime.InteropServices.GCHandleType.Weak"></see>, but the handle is not zeroed if the object is resurrected during finalization.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary>Supplies an explicit <see cref="T:System.Guid"></see> when an automatic GUID is undesirable.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.GuidAttribute"></see> class with the specified GUID.</summary>
      <param name="guid">The <see cref="T:System.Guid"></see> to be assigned.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary>Gets the <see cref="T:System.Guid"></see> of the class.</summary>
      <returns>The <see cref="T:System.Guid"></see> of the class.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleCollector">
      <summary>Tracks outstanding handles and forces a garbage collection when the specified threshold is reached.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.HandleCollector"></see> class using a name and a threshold at which to begin handle collection.</summary>
      <param name="name">A name for the collector. This parameter allows you to name collectors that track handle types separately.</param>
      <param name="initialThreshold">A value that specifies the point at which collections should begin.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="initialThreshold">initialThreshold</paramref> parameter is less than 0.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.HandleCollector"></see> class using a name, a threshold at which to begin handle collection, and a threshold at which handle collection must occur.</summary>
      <param name="name">A name for the collector.  This parameter allows you to name collectors that track handle types separately.</param>
      <param name="initialThreshold">A value that specifies the point at which collections should begin.</param>
      <param name="maximumThreshold">A value that specifies the point at which collections must occur. This should be set to the maximum number of available handles.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="initialThreshold">initialThreshold</paramref> parameter is less than 0.   -or-   The <paramref name="maximumThreshold">maximumThreshold</paramref> parameter is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="maximumThreshold">maximumThreshold</paramref> parameter is less than the <paramref name="initialThreshold">initialThreshold</paramref> parameter.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Add">
      <summary>Increments the current handle count.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Runtime.InteropServices.HandleCollector.Count"></see> property is less than 0.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Count">
      <summary>Gets the number of handles collected.</summary>
      <returns>The number of handles collected.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.InitialThreshold">
      <summary>Gets a value that specifies the point at which collections should begin.</summary>
      <returns>A value that specifies the point at which collections should begin.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold">
      <summary>Gets a value that specifies the point at which collections must occur.</summary>
      <returns>A value that specifies the point at which collections must occur.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Name">
      <summary>Gets the name of a <see cref="T:System.Runtime.InteropServices.HandleCollector"></see> object.</summary>
      <returns>This <see cref="P:System.Runtime.InteropServices.HandleCollector.Name"></see> property allows you to name collectors that track handle types separately.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Remove">
      <summary>Decrements the current handle count.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Runtime.InteropServices.HandleCollector.Count"></see> property is less than 0.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleRef">
      <summary>Wraps a managed object holding a handle to a resource that is passed to unmanaged code using platform invoke.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.HandleRef"></see> class with the object to wrap and a handle to the resource used by unmanaged code.</summary>
      <param name="wrapper">A managed object that should not be finalized until the platform invoke call returns.</param>
      <param name="handle">An <see cref="T:System.IntPtr"></see> that indicates a handle to a resource.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Handle">
      <summary>Gets the handle to a resource.</summary>
      <returns>The handle to a resource.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef to System.IntPtr)">
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
      <summary>Returns the internal integer representation of a <see cref="T:System.Runtime.InteropServices.HandleRef"></see> object.</summary>
      <param name="value">A <see cref="T:System.Runtime.InteropServices.HandleRef"></see> object to retrieve an internal integer representation from.</param>
      <returns>An <see cref="T:System.IntPtr"></see> object that represents a <see cref="T:System.Runtime.InteropServices.HandleRef"></see> object.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Wrapper">
      <summary>Gets the object holding the handle to a resource.</summary>
      <returns>The object holding the handle to a resource.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary>Provides a way for clients to access the actual object, rather than the adapter object handed out by a custom marshaler.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary>Provides access to the underlying object wrapped by a custom marshaler.</summary>
      <returns>The object contained by the adapter object.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomFactory">
      <summary>Enables users to write activation code for managed objects that extend <see cref="T:System.MarshalByRefObject"></see>.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomFactory.CreateInstance(System.Type)">
      <summary>Creates a new instance of the specified type.</summary>
      <param name="serverType">The type to activate.</param>
      <returns>A <see cref="T:System.MarshalByRefObject"></see> associated with the specified type.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomMarshaler">
      <summary>Provides custom wrappers for handling method calls.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)">
      <summary>Performs necessary cleanup of the managed data when it is no longer needed.</summary>
      <param name="ManagedObj">The managed object to be destroyed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)">
      <summary>Performs necessary cleanup of the unmanaged data when it is no longer needed.</summary>
      <param name="pNativeData">A pointer to the unmanaged data to be destroyed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize">
      <summary>Returns the size of the native data to be marshaled.</summary>
      <returns>The size, in bytes, of the native data.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)">
      <summary>Converts the managed data to unmanaged data.</summary>
      <param name="ManagedObj">The managed object to be converted.</param>
      <returns>A pointer to the COM view of the managed object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
      <summary>Converts the unmanaged data to managed data.</summary>
      <param name="pNativeData">A pointer to the unmanaged data to be wrapped.</param>
      <returns>An object that represents the managed view of the COM data.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomQueryInterface">
      <summary>Enables developers to provide a custom, managed implementation of the <see cref="http://go.microsoft.com/fwlink/?LinkID=144867">IUnknown::QueryInterface(REFIID riid, void **ppvObject)</see> method.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)">
      <summary>Returns an interface according to a specified interface ID.</summary>
      <param name="iid">The GUID of the requested interface.</param>
      <param name="ppv">A reference to the requested interface, when this method returns.</param>
      <returns>One of the enumeration values that indicates whether a custom implementation of <see cref="http://go.microsoft.com/fwlink/?LinkID=144867">IUnknown::QueryInterface</see> was used.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute">
      <summary>Indicates that the types defined within an assembly were originally defined in a type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute"></see> class with the name of the original type library file.</summary>
      <param name="tlbFile">The location of the original type library file.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.Value">
      <summary>Gets the name of the original type library file.</summary>
      <returns>The name of the original type library file.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InAttribute">
      <summary>Indicates that data should be marshaled from the caller to the callee, but not back to the caller.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InAttribute"></see> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary>Indicates whether a managed interface is dual, dispatch-only, or IUnknown -only when exposed to COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute"></see> class with the specified <see cref="T:System.Runtime.InteropServices.ComInterfaceType"></see> enumeration member.</summary>
      <param name="interfaceType">Describes how the interface should be exposed to COM clients.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute"></see> class with the specified <see cref="T:System.Runtime.InteropServices.ComInterfaceType"></see> enumeration member.</summary>
      <param name="interfaceType">One of the <see cref="T:System.Runtime.InteropServices.ComInterfaceType"></see> values that describes how the interface should be exposed to COM clients.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.ComInterfaceType"></see> value that describes how the interface should be exposed to COM.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.ComInterfaceType"></see> value that describes how the interface should be exposed to COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary>The exception thrown when an invalid COM object is used.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary>Initializes an instance of the InvalidComObjectException with default properties.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary>Initializes an instance of the InvalidComObjectException with a message.</summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the COMException class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InvalidComObjectException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary>The exception thrown by the marshaler when it encounters an argument of a variant type that can not be marshaled to managed code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary>Initializes a new instance of the InvalidOleVariantTypeException class with default values.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary>Initializes a new instance of the InvalidOleVariantTypeException class with a specified message.</summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the InvalidOleVariantTypeException class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.LCIDConversionAttribute">
      <summary>Indicates that a method's unmanaged signature expects a locale identifier (LCID) parameter.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.LCIDConversionAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the LCIDConversionAttribute class with the position of the LCID in the unmanaged signature.</summary>
      <param name="lcid">Indicates the position of the LCID argument in the unmanaged signature, where 0 is the first argument.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.LCIDConversionAttribute.Value">
      <summary>Gets the position of the LCID argument in the unmanaged signature.</summary>
      <returns>The position of the LCID argument in the unmanaged signature, where 0 is the first argument.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute">
      <summary>Provides support for user customization of interop stubs in managed-to-COM interop scenarios.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute"></see> class with the specified class type and method name.</summary>
      <param name="classType">The class that contains the required stub method.</param>
      <param name="methodName">The name of the stub method.</param>
      <exception cref="T:System.ArgumentException"><paramref name="methodName">methodName</paramref> cannot be found.   -or-   The method is not static or non-generic.   -or-   The method's parameter list does not match the expected parameter list for the stub.</exception>
      <exception cref="T:System.MethodAccessException">The interface that contains the managed interop method has no access to the stub method, because the stub method has private or protected accessibility, or because of a security issue.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType">
      <summary>Gets the class that contains the required stub method.</summary>
      <returns>The class that contains the customized interop stub.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName">
      <summary>Gets the name of the stub method.</summary>
      <returns>The name of a customized interop stub.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary>Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary>Increments the reference count on the specified interface.</summary>
      <param name="pUnk">The interface reference count to increment.</param>
      <returns>The new value of the reference count on the <paramref name="pUnk">pUnk</paramref> parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary>Allocates a block of memory of specified size from the COM task memory allocator.</summary>
      <param name="cb">The size of the block of memory to be allocated.</param>
      <returns>An integer representing the address of the block of memory allocated. This memory must be released with <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)"></see>.</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary>Allocates memory from the unmanaged memory of the process by using the specified number of bytes.</summary>
      <param name="cb">The required number of bytes in memory.</param>
      <returns>A pointer to the newly allocated memory. This memory must be released using the <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)"></see> method.</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary>Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.</summary>
      <param name="cb">The required number of bytes in memory.</param>
      <returns>A pointer to the newly allocated memory. This memory must be released using the <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)"></see> method.</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup">
      <summary>Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.</summary>
      <returns>true if there are any RCWs available for cleanup; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)">
      <summary>Gets an interface pointer identified by the specified moniker.</summary>
      <param name="monikerName">The moniker corresponding to the desired interface pointer.</param>
      <returns>An object containing a reference to the interface pointer identified by the <paramref name="monikerName">monikerName</paramref> parameter. A moniker is a name, and in this case, the moniker is defined by an interface.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">An unrecognized HRESULT was returned by the unmanaged BindToMoniker method.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
      <summary>Changes the strength of an object's <see cref="~/docs/framework/interop/com-callable-wrapper.md">COM Callable Wrapper</see> (CCW) handle.</summary>
      <param name="otp">The object whose CCW holds a reference counted handle. The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.</param>
      <param name="fIsWeak">true to change the strength of the handle on the otp parameter to weak, regardless of its reference count; false to reset the handle strength on otp to be reference counted.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext">
      <summary>Notifies the runtime to clean up all <see cref="~/docs/framework/interop/runtime-callable-wrapper.md">Runtime Callable Wrappers</see> (RCWs) allocated in the current context.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> and <paramref name="length">length</paramref> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="source">source</paramref>, <paramref name="startIndex">startIndex</paramref>, <paramref name="destination">destination</paramref>, or <paramref name="length">length</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed <see cref="T:System.IntPtr"></see> array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="source">source</paramref>, <paramref name="destination">destination</paramref>, <paramref name="startIndex">startIndex</paramref>, or <paramref name="length">length</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="source">source</paramref>, <paramref name="destination">destination</paramref>, <paramref name="startIndex">startIndex</paramref>, or <paramref name="length">length</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="source">source</paramref>, <paramref name="destination">destination</paramref>, <paramref name="startIndex">startIndex</paramref>, or <paramref name="length">length</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="source">source</paramref>, <paramref name="destination">destination</paramref>, <paramref name="startIndex">startIndex</paramref>, or <paramref name="length">length</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="source">source</paramref>, <paramref name="destination">destination</paramref>, <paramref name="startIndex">startIndex</paramref>, or <paramref name="length">length</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="source">source</paramref>, <paramref name="destination">destination</paramref>, <paramref name="startIndex">startIndex</paramref>, or <paramref name="length">length</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed <see cref="T:System.IntPtr"></see> array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="source">source</paramref>, <paramref name="destination">destination</paramref>, <paramref name="startIndex">startIndex</paramref>, or <paramref name="length">length</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="source">source</paramref>, <paramref name="destination">destination</paramref>, <paramref name="startIndex">startIndex</paramref>, or <paramref name="length">length</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> and <paramref name="length">length</paramref> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="source">source</paramref>, <paramref name="startIndex">startIndex</paramref>, <paramref name="destination">destination</paramref>, or <paramref name="length">length</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> and <paramref name="length">length</paramref> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="startIndex">startIndex</paramref> or <paramref name="length">length</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> and <paramref name="length">length</paramref> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="source">source</paramref>, <paramref name="startIndex">startIndex</paramref>, <paramref name="destination">destination</paramref>, or <paramref name="length">length</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed character array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="source">source</paramref>, <paramref name="destination">destination</paramref>, <paramref name="startIndex">startIndex</paramref>, or <paramref name="length">length</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> and <paramref name="length">length</paramref> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="source">source</paramref>, <paramref name="startIndex">startIndex</paramref>, <paramref name="destination">destination</paramref>, or <paramref name="length">length</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> and <paramref name="length">length</paramref> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="startIndex">startIndex</paramref>, <paramref name="destination">destination</paramref>, or <paramref name="length">length</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> and <paramref name="length">length</paramref> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="source">source</paramref>, <paramref name="startIndex">startIndex</paramref>, <paramref name="destination">destination</paramref>, or <paramref name="length">length</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)">
      <summary>Aggregates a managed object with the specified COM object.</summary>
      <param name="pOuter">The outer IUnknown pointer.</param>
      <param name="o">An object to aggregate.</param>
      <returns>The inner IUnknown pointer of the managed object.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="o">o</paramref> is a Windows Runtime object.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]   Aggregates a managed object of the specified type with the specified COM object.</summary>
      <param name="pOuter">The outer <see cref="http://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> pointer.</param>
      <param name="o">The managed object to aggregate.</param>
      <typeparam name="T">The type of the managed object to aggregate.</typeparam>
      <returns>The inner <see cref="http://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> pointer of the managed object.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="o">o</paramref> is a Windows Runtime object.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary>Wraps the specified COM object in an object of the specified type.</summary>
      <param name="o">The object to be wrapped.</param>
      <param name="t">The type of wrapper to create.</param>
      <returns>The newly wrapped object that is an instance of the desired type.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="t">t</paramref> must derive from __ComObject.   -or-  <paramref name="t">t</paramref> is a Windows Runtime type.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="t">t</paramref> parameter is null.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="o">o</paramref> cannot be converted to the destination type because it does not support all required interfaces.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]   Wraps the specified COM object in an object of the specified type.</summary>
      <param name="o">The object to be wrapped.</param>
      <typeparam name="T">The type of object to wrap.</typeparam>
      <typeparam name="TWrapper">The type of object to return.</typeparam>
      <returns>The newly wrapped object.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="T">T</paramref> must derive from __ComObject.   -or-  <paramref name="T">T</paramref> is a Windows Runtime type.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="o">o</paramref> cannot be converted to the <paramref name="TWrapper">TWrapper</paramref> because it does not support all required interfaces.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary>Frees all substructures that the specified unmanaged memory block points to.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <param name="structuretype">Type of a formatted class. This provides the layout information necessary to delete the buffer in the ptr parameter.</param>
      <exception cref="T:System.ArgumentException"><paramref name="structureType">structureType</paramref> has an automatic layout. Use sequential or explicit instead.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]   Frees all substructures of a specified type that the specified unmanaged memory block points to.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <typeparam name="T">The type of the formatted structure. This provides the layout information necessary to delete the buffer in the ptr parameter.</typeparam>
      <exception cref="T:System.ArgumentException"><paramref name="T">T</paramref> has an automatic layout. Use sequential or explicit instead.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary>Releases all references to a <see cref="~/docs/framework/interop/runtime-callable-wrapper.md">Runtime Callable Wrapper</see> (RCW) by setting its reference count to 0.</summary>
      <param name="o">The RCW to be released.</param>
      <returns>The new value of the reference count of the RCW associated with the <paramref name="o">o</paramref> parameter, which is 0 (zero) if the release is successful.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="o">o</paramref> is not a valid COM object.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="o">o</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary>Frees a BSTR using the COM <see cref="http://go.microsoft.com/fwlink/?LinkID=148633">SysFreeString</see> function.</summary>
      <param name="ptr">The address of the BSTR to be freed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary>Frees a block of memory allocated by the unmanaged COM task memory allocator.</summary>
      <param name="ptr">The address of the memory to be freed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary>Frees memory previously allocated from the unmanaged memory of the process.</summary>
      <param name="hglobal">The handle returned by the original matching call to <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)"></see>.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)">
      <summary>Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).</summary>
      <param name="type">The type to generate a GUID for.</param>
      <returns>An identifier for the specified type.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)">
      <summary>Returns a programmatic identifier (ProgID) for the specified type.</summary>
      <param name="type">The type to get a ProgID for.</param>
      <returns>The ProgID of the specified type.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="type">type</paramref> parameter is not a class that can be create by COM. The class must be public, have a public default constructor, and be COM visible.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="type">type</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary>Returns a pointer to an <see cref="http://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.</summary>
      <param name="o">The object that provides the interface.</param>
      <param name="T">The type of interface that is requested.</param>
      <returns>The interface pointer that represents the specified interface for the object.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="T">T</paramref> parameter is not an interface.   -or-   The type is not visible to COM.   -or-   The <paramref name="T">T</paramref> parameter is a generic type.</exception>
      <exception cref="T:System.InvalidCastException">The <paramref name="o">o</paramref> parameter does not support the requested interface.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="o">o</paramref> parameter is null.   -or-   The <paramref name="T">T</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
      <summary>Returns a pointer to an <see cref="http://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.</summary>
      <param name="o">The object that provides the interface.</param>
      <param name="T">The type of interface that is requested.</param>
      <param name="mode">One of the enumeration values that indicates whether to apply an IUnknown::QueryInterface customization that is supplied by an <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface"></see>.</param>
      <returns>The interface pointer that represents the interface for the object.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="T">T</paramref> parameter is not an interface.   -or-   The type is not visible to COM.   -or-   The <paramref name="T">T</paramref> parameter is a generic type.</exception>
      <exception cref="T:System.InvalidCastException">The object <paramref name="o">o</paramref> does not support the requested interface.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="o">o</paramref> parameter is null.   -or-   The <paramref name="T">T</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]   Returns a pointer to an <see cref="http://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> interface that represents the specified interface on an object of the specified type. Custom query interface access is enabled by default.</summary>
      <param name="o">The object that provides the interface.</param>
      <typeparam name="T">The type of o.</typeparam>
      <typeparam name="TInterface">The type of interface to return.</typeparam>
      <returns>The interface pointer that represents the <paramref name="TInterface">TInterface</paramref> interface.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="TInterface">TInterface</paramref> parameter is not an interface.   -or-   The type is not visible to COM.   -or-   The <paramref name="T">T</paramref> parameter is an open generic type.</exception>
      <exception cref="T:System.InvalidCastException">The <paramref name="o">o</paramref> parameter does not support the <paramref name="TInterface">TInterface</paramref> interface.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="o">o</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)">
      <summary>Retrieves data that is referenced by the specified key from the specified COM object.</summary>
      <param name="obj">The COM object that contains the data that you want.</param>
      <param name="key">The key in the internal hash table of obj to retrieve the data from.</param>
      <returns>The data represented by the <paramref name="key">key</paramref> parameter in the internal hash table of the <paramref name="obj">obj</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="obj">obj</paramref> is null.   -or-  <paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="obj">obj</paramref> is not a COM object.   -or-  <paramref name="obj">obj</paramref> is a Windows Runtime object.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary>Converts an unmanaged function pointer to a delegate.</summary>
      <param name="ptr">The unmanaged function pointer to be converted.</param>
      <param name="t">The type of the delegate to be returned.</param>
      <returns>A delegate instance that can be cast to the appropriate delegate type.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="t">t</paramref> parameter is not a delegate or is generic.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="ptr">ptr</paramref> parameter is null.   -or-   The <paramref name="t">t</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]   Converts an unmanaged function pointer to a delegate of a specified type.</summary>
      <param name="ptr">The unmanaged function pointer to convert.</param>
      <typeparam name="TDelegate">The type of the delegate to return.</typeparam>
      <returns>A instance of the specified delegate type.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="TDelegate">TDelegate</paramref> generic parameter is not a delegate, or it is an open generic type.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="ptr">ptr</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary>Retrieves a code that identifies the type of the exception that occurred.</summary>
      <returns>The type of the exception.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary>Converts the specified HRESULT error code to a corresponding <see cref="T:System.Exception"></see> object.</summary>
      <param name="errorCode">The HRESULT to be converted.</param>
      <returns>An object that represents the converted HRESULT.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary>Converts the specified HRESULT error code to a corresponding <see cref="T:System.Exception"></see> object, with additional error information passed in an <see cref="http://msdn.microsoft.com/en-us/4dda6909-2d9a-4727-ae0c-b5f90dcfa447">IErrorInfo</see> interface for the exception object.</summary>
      <param name="errorCode">The HRESULT to be converted.</param>
      <param name="errorInfo">A pointer to the IErrorInfo interface that provides more information about the error. You can specify IntPtr(0) to use the current IErrorInfo interface, or IntPtr(-1) to ignore the current IErrorInfo interface and construct the exception just from the error code.</param>
      <returns>An object that represents the converted HRESULT and information obtained from <paramref name="errorInfo">errorInfo</paramref>.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary>Converts a delegate into a function pointer that is callable from unmanaged code.</summary>
      <param name="d">The delegate to be passed to unmanaged code.</param>
      <returns>A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="d">d</paramref> parameter is a generic type.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="d">d</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]   Converts a delegate of a specified type to a function pointer that is callable from unmanaged code.</summary>
      <param name="d">The delegate to be passed to unmanaged code.</param>
      <typeparam name="TDelegate">The type of delegate to convert.</typeparam>
      <returns>A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="d">d</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)">
      <summary>Returns the instance handle (HINSTANCE) for the specified module.</summary>
      <param name="m">The module whose HINSTANCE is desired.</param>
      <returns>The HINSTANCE for <paramref name="m">m</paramref>; or -1 if the module does not have an HINSTANCE.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="m">m</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary>Converts the specified exception to an HRESULT.</summary>
      <param name="e">The exception to convert to an HRESULT.</param>
      <returns>The HRESULT mapped to the supplied exception.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary>Returns the HRESULT corresponding to the last error incurred by Win32 code executed using <see cref="T:System.Runtime.InteropServices.Marshal"></see>.</summary>
      <returns>The HRESULT corresponding to the last Win32 error code.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)">
      <summary>Returns an <see cref="http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5">IDispatch</see> interface from a managed object.</summary>
      <param name="o">The object whose IDispatch interface is requested.</param>
      <returns>The IDispatch pointer for the <paramref name="o">o</paramref> parameter.</returns>
      <exception cref="T:System.InvalidCastException"><paramref name="o">o</paramref> does not support the requested interface.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary>Returns an <see cref="http://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> interface from a managed object.</summary>
      <param name="o">The object whose IUnknown interface is requested.</param>
      <returns>The IUnknown pointer for the <paramref name="o">o</paramref> parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary>Returns the error code returned by the last unmanaged function that was called using platform invoke that has the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError"></see> flag set.</summary>
      <returns>The last error code set by a call to the Win32 <see cref="http://go.microsoft.com/fwlink/?LinkId=148656">SetLastError</see> function.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary>Converts an object to a COM VARIANT.</summary>
      <param name="obj">The object for which to get a COM VARIANT.</param>
      <param name="pDstNativeVariant">A pointer to receive the VARIANT that corresponds to the obj parameter.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="obj">obj</paramref> parameter is a generic type.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]   Converts an object of a specified type to a COM VARIANT.</summary>
      <param name="obj">The object for which to get a COM VARIANT.</param>
      <param name="pDstNativeVariant">A pointer to receive the VARIANT that corresponds to the obj parameter.</param>
      <typeparam name="T">The type of the object to convert.</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary>Returns an instance of a type that represents a COM object by a pointer to its <see cref="http://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> interface.</summary>
      <param name="pUnk">A pointer to the IUnknown interface.</param>
      <returns>An object that represents the specified unmanaged COM object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary>Converts a COM VARIANT to an object.</summary>
      <param name="pSrcNativeVariant">A pointer to a COM VARIANT.</param>
      <returns>An object that corresponds to the <paramref name="pSrcNativeVariant">pSrcNativeVariant</paramref> parameter.</returns>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException"><paramref name="pSrcNativeVariant">pSrcNativeVariant</paramref> is not a valid VARIANT type.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="pSrcNativeVariant">pSrcNativeVariant</paramref> has an unsupported type.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]   Converts a COM VARIANT to an object of a specified type.</summary>
      <param name="pSrcNativeVariant">A pointer to a COM VARIANT.</param>
      <typeparam name="T">The type to which to convert the COM VARIANT.</typeparam>
      <returns>An object of the specified type that corresponds to the <paramref name="pSrcNativeVariant">pSrcNativeVariant</paramref> parameter.</returns>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException"><paramref name="pSrcNativeVariant">pSrcNativeVariant</paramref> is not a valid VARIANT type.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="pSrcNativeVariant">pSrcNativeVariant</paramref> has an unsupported type.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
      <summary>Converts an array of COM <see cref="http://go.microsoft.com/fwlink/?LinkId=148670">VARIANTs</see> to an array of objects.</summary>
      <param name="aSrcNativeVariant">A pointer to the first element of an array of COM VARIANTs.</param>
      <param name="cVars">The count of COM VARIANTs in aSrcNativeVariant.</param>
      <returns>An object array that corresponds to <paramref name="aSrcNativeVariant">aSrcNativeVariant</paramref>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="cVars">cVars</paramref> is a negative number.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]   Converts an array of COM VARIANTs to an array of a specified type.</summary>
      <param name="aSrcNativeVariant">A pointer to the first element of an array of COM VARIANTs.</param>
      <param name="cVars">The count of COM VARIANTs in aSrcNativeVariant.</param>
      <typeparam name="T">The type of the array to return.</typeparam>
      <returns>An array of <paramref name="T">T</paramref> objects that corresponds to <paramref name="aSrcNativeVariant">aSrcNativeVariant</paramref>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="cVars">cVars</paramref> is a negative number.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)">
      <summary>Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.</summary>
      <param name="t">A type that represents an interface.</param>
      <returns>The first VTBL slot that contains user-defined methods. The first slot is 3 if the interface is based on <see cref="http://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see>, and 7 if the interface is based on <see cref="http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5">IDispatch</see>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="t">t</paramref> is not visible from COM.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)">
      <summary>Returns a managed object of a specified type that represents a COM object.</summary>
      <param name="pUnk">A pointer to the IUnknown interface of the unmanaged object.</param>
      <param name="t">The type of the requested managed class.</param>
      <returns>An instance of the class corresponding to the <see cref="T:System.Type"></see> object that represents the requested unmanaged COM object.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="t">t</paramref> is not attributed with <see cref="T:System.Runtime.InteropServices.ComImportAttribute"></see>.   -or-  <paramref name="t">t</paramref> is a Windows Runtime type.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)">
      <summary>Returns the type associated with the specified class identifier (CLSID).</summary>
      <param name="clsid">The CLSID of the type to return.</param>
      <returns>System.__ComObject regardless of whether the CLSID is valid.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
      <summary>Retrieves the name of the type represented by an <see cref="http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680">ITypeInfo</see> object.</summary>
      <param name="typeInfo">An object that represents an ITypeInfo pointer.</param>
      <returns>The name of the type that the <paramref name="typeInfo">typeInfo</paramref> parameter points to.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeInfo">typeInfo</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
      <summary>Creates a unique <see cref="~/docs/framework/interop/runtime-callable-wrapper.md">Runtime Callable Wrapper</see> (RCW) object for a given <see cref="http://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> interface.</summary>
      <param name="unknown">A managed pointer to an IUnknown interface.</param>
      <returns>A unique RCW for the specified IUnknown interface.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary>Indicates whether a specified object represents a COM object.</summary>
      <param name="o">The object to check.</param>
      <returns>true if the <paramref name="o">o</paramref> parameter is a COM type; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="o">o</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)">
      <summary>Returns the field offset of the unmanaged form of the managed class.</summary>
      <param name="t">A value type or formatted reference type that specifies the managed class. You must apply the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute"></see> to the class.</param>
      <param name="fieldName">The field within the t parameter.</param>
      <returns>The offset, in bytes, for the <paramref name="fieldName">fieldName</paramref> parameter within the specified class that is declared by platform invoke.</returns>
      <exception cref="T:System.ArgumentException">The class cannot be exported as a structure or the field is nonpublic. Beginning with the .NET Framework version 2.0, the field may be private.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="t">t</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]   Returns the field offset of the unmanaged form of a specified managed class.</summary>
      <param name="fieldName">The name of the field in the T type.</param>
      <typeparam name="T">A managed value type or formatted reference type. You must apply the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute"></see> attribute to the class.</typeparam>
      <returns>The offset, in bytes, for the <paramref name="fieldName">fieldName</paramref> parameter within the specified class that is declared by platform invoke.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary>Executes one-time method setup tasks without calling the method.</summary>
      <param name="m">The method to be checked.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="m">m</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="m">m</paramref> parameter is not a <see cref="T:System.Reflection.MethodInfo"></see> object.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary>Performs a pre-link check for all methods on a class.</summary>
      <param name="c">The class whose methods are to be checked.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="c">c</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary>Copies all characters up to the first null character from an unmanaged ANSI string to a managed <see cref="T:System.String"></see>, and widens each ANSI character to Unicode.</summary>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <returns>A managed string that holds a copy of the unmanaged ANSI string. If <paramref name="ptr">ptr</paramref> is null, the method returns a null string.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary>Allocates a managed <see cref="T:System.String"></see>, copies a specified number of characters from an unmanaged ANSI string into it, and widens each ANSI character to Unicode.</summary>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <param name="len">The byte count of the input string to copy.</param>
      <returns>A managed string that holds a copy of the native ANSI string if the value of the <paramref name="ptr">ptr</paramref> parameter is not null; otherwise, this method returns null.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="len">len</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)">
      <summary>Allocates a managed <see cref="T:System.String"></see> and copies all characters up to the first null character from a string stored in unmanaged memory into it.</summary>
      <param name="ptr">For Unicode platforms, the address of the first Unicode character.   -or-   For ANSI plaforms, the address of the first ANSI character.</param>
      <returns>A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr">ptr</paramref> parameter is not null; otherwise, this method returns null.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)">
      <summary>Allocates a managed <see cref="T:System.String"></see> and copies the specified number of characters from a string stored in unmanaged memory into it.</summary>
      <param name="ptr">For Unicode platforms, the address of the first Unicode character.   -or-   For ANSI plaforms, the address of the first ANSI character.</param>
      <param name="len">The number of characters to copy.</param>
      <returns>A managed string that holds a copy of the native string if the value of the <paramref name="ptr">ptr</paramref> parameter is not null; otherwise, this method returns null.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="len">len</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)">
      <summary>Allocates a managed <see cref="T:System.String"></see> and copies a <see cref="https://msdn.microsoft.com/library/ms221069(v=vs.85).aspx">binary string (BSTR)</see> stored in unmanaged memory into it.</summary>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <returns>A managed string that holds a copy of the unmanaged string.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="ptr">ptr</paramref> equals <see cref="F:System.IntPtr.Zero"></see>.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary>Allocates a managed <see cref="T:System.String"></see> and copies all characters up to the first null character from an unmanaged Unicode string into it.</summary>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <returns>A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr">ptr</paramref> parameter is not null; otherwise, this method returns null.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary>Allocates a managed <see cref="T:System.String"></see> and copies a specified number of characters from an unmanaged Unicode string into it.</summary>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <param name="len">The number of Unicode characters to copy.</param>
      <returns>A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr">ptr</paramref> parameter is not null; otherwise, this method returns null.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)">
      <param name="ptr"></param>
      <returns></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)">
      <param name="ptr"></param>
      <param name="byteLen"></param>
      <returns></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary>Marshals data from an unmanaged block of memory to a managed object.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <param name="structure">The object to which the data is to be copied. This must be an instance of a formatted class.</param>
      <exception cref="T:System.ArgumentException">Structure layout is not sequential or explicit.   -or-   Structure is a boxed value type.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary>Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <param name="structureType">The type of object to be created. This object must represent a formatted class or a structure.</param>
      <returns>A managed object containing the data pointed to by the <paramref name="ptr">ptr</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="structureType">structureType</paramref> parameter layout is not sequential or explicit.   -or-   The <paramref name="structureType">structureType</paramref> parameter is a generic type.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="structureType">structureType</paramref> is null.</exception>
      <exception cref="T:System.MissingMethodException">The class specified by <paramref name="structureType">structureType</paramref> does not have an accessible default constructor.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]   Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <typeparam name="T">The type of the object to which the data is to be copied. This must be a formatted class or a structure.</typeparam>
      <returns>A managed object that contains the data that the <paramref name="ptr">ptr</paramref> parameter points to.</returns>
      <exception cref="T:System.ArgumentException">The layout of <paramref name="T">T</paramref> is not sequential or explicit.</exception>
      <exception cref="T:System.MissingMethodException">The class specified by <paramref name="T">T</paramref> does not have an accessible default constructor.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]   Marshals data from an unmanaged block of memory to a managed object of the specified type.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <param name="structure">The object to which the data is to be copied.</param>
      <typeparam name="T">The type of structure. This must be a formatted class.</typeparam>
      <exception cref="T:System.ArgumentException">Structure layout is not sequential or explicit.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary>Requests a pointer to a specified interface from a COM object.</summary>
      <param name="pUnk">The interface to be queried.</param>
      <param name="iid">The interface identifier (IID) of the requested interface.</param>
      <param name="ppv">When this method returns, contains a reference to the returned interface.</param>
      <returns>An HRESULT that indicates the success or failure of the call.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary>Reads a single byte at a given offset (or index) from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before reading.</param>
      <returns>The byte read from unmanaged memory at the given offset.</returns>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)">
      <summary>Reads a single byte at a given offset (or index) from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before reading.</param>
      <returns>The byte read from unmanaged memory at the given offset.</returns>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="ptr">ptr</paramref> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary>Reads a single byte from unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <returns>The byte read from unmanaged memory.</returns>
      <exception cref="T:System.AccessViolationException"><paramref name="ptr">ptr</paramref> is not a recognized format.   -or-  <paramref name="ptr">ptr</paramref> is null.   -or-  <paramref name="ptr">ptr</paramref> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary>Reads a 16-bit signed integer from unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <returns>The 16-bit signed integer read from unmanaged memory.</returns>
      <exception cref="T:System.AccessViolationException"><paramref name="ptr">ptr</paramref> is not a recognized format.   -or-  <paramref name="ptr">ptr</paramref> is null.   -or-  <paramref name="ptr">ptr</paramref> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary>Reads a 16-bit signed integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before reading.</param>
      <returns>The 16-bit signed integer read from unmanaged memory at the given offset.</returns>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)">
      <summary>Reads a 16-bit signed integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before reading.</param>
      <returns>The 16-bit signed integer read from unmanaged memory at the given offset.</returns>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="ptr">ptr</paramref> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary>Reads a 32-bit signed integer from unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <returns>The 32-bit signed integer read from unmanaged memory.</returns>
      <exception cref="T:System.AccessViolationException"><paramref name="ptr">ptr</paramref> is not a recognized format.   -or-  <paramref name="ptr">ptr</paramref> is null.   -or-  <paramref name="ptr">ptr</paramref> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary>Reads a 32-bit signed integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before reading.</param>
      <returns>The 32-bit signed integer read from unmanaged memory.</returns>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)">
      <summary>Reads a 32-bit signed integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before reading.</param>
      <returns>The 32-bit signed integer read from unmanaged memory at the given offset.</returns>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="ptr">ptr</paramref> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary>Reads a 64-bit signed integer from unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <returns>The 64-bit signed integer read from unmanaged memory.</returns>
      <exception cref="T:System.AccessViolationException"><paramref name="ptr">ptr</paramref> is not a recognized format.   -or-  <paramref name="ptr">ptr</paramref> is null.   -or-  <paramref name="ptr">ptr</paramref> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary>Reads a 64-bit signed integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before reading.</param>
      <returns>The 64-bit signed integer read from unmanaged memory at the given offset.</returns>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)">
      <summary>Reads a 64-bit signed integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before reading.</param>
      <returns>The 64-bit signed integer read from unmanaged memory at the given offset.</returns>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="ptr">ptr</paramref> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary>Reads a processor native sized integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before reading.</param>
      <returns>The integer read from unmanaged memory at the given offset.</returns>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)">
      <summary>Reads a processor native sized integer from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before reading.</param>
      <returns>The integer read from unmanaged memory at the given offset.</returns>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="ptr">ptr</paramref> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary>Reads a processor native-sized integer from unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <returns>The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.</returns>
      <exception cref="T:System.AccessViolationException"><paramref name="ptr">ptr</paramref> is not a recognized format.   -or-  <paramref name="ptr">ptr</paramref> is null.   -or-  <paramref name="ptr">ptr</paramref> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
      <summary>Resizes a block of memory previously allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)"></see>.</summary>
      <param name="pv">A pointer to memory allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)"></see>.</param>
      <param name="cb">The new size of the allocated block.</param>
      <returns>An integer representing the address of the reallocated block of memory. This memory must be released with <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)"></see>.</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
      <summary>Resizes a block of memory previously allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)"></see>.</summary>
      <param name="pv">A pointer to memory allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)"></see>.</param>
      <param name="cb">The new size of the allocated block. This is not a pointer; it is the byte count you are requesting, cast to type <see cref="T:System.IntPtr"></see>. If you pass a pointer, it is treated as a size.</param>
      <returns>A pointer to the reallocated memory. This memory must be released using <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)"></see>.</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary>Decrements the reference count on the specified interface.</summary>
      <param name="pUnk">The interface to release.</param>
      <returns>The new value of the reference count on the interface specified by the <paramref name="pUnk">pUnk</paramref> parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary>Decrements the reference count of the <see cref="~/docs/framework/interop/runtime-callable-wrapper.md">Runtime Callable Wrapper</see> (RCW) associated with the specified COM object.</summary>
      <param name="o">The COM object to release.</param>
      <returns>The new value of the reference count of the RCW associated with <paramref name="o">o</paramref>. This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="o">o</paramref> is not a valid COM object.</exception>
      <exception cref="T:System.NullReferenceException"><paramref name="o">o</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)">
      <summary>Allocates an unmanaged <see cref="https://msdn.microsoft.com/library/ms221069(v=vs.85).aspx">binary string (BSTR)</see> and copies the contents of a managed <see cref="T:System.Security.SecureString"></see> object into it.</summary>
      <param name="s">The managed object to copy.</param>
      <returns>The address, in unmanaged memory, where the <paramref name="s">s</paramref> parameter was copied to, or 0 if a null object was supplied.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s">s</paramref> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The current computer is not running Windows 2000 Service Pack 3 or later.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString"></see> object to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <param name="s">The managed object to copy.</param>
      <returns>The address, in unmanaged memory, where the <paramref name="s">s</paramref> parameter was copied to, or 0 if a null object was supplied.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s">s</paramref> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The current computer is not running Windows 2000 Service Pack 3 or later.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString"></see> object to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <param name="s">The managed object to copy.</param>
      <returns>The address, in unmanaged memory, where the <paramref name="s">s</paramref> parameter was copied to, or 0 if a null object was supplied.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s">s</paramref> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The current computer is not running Windows 2000 Service Pack 3 or later.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString"></see> into unmanaged memory, converting into ANSI format as it copies.</summary>
      <param name="s">The managed object to copy.</param>
      <returns>The address, in unmanaged memory, to where the <paramref name="s">s</paramref> parameter was copied, or 0 if a null object was supplied.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s">s</paramref> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The current computer is not running Windows 2000 Service Pack 3 or later.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString"></see> object into unmanaged memory.</summary>
      <param name="s">The managed object to copy.</param>
      <returns>The address, in unmanaged memory, where <paramref name="s">s</paramref> was copied, or 0 if <paramref name="s">s</paramref> is a <see cref="T:System.Security.SecureString"></see> object whose length is 0.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s">s</paramref> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The current computer is not running Windows 2000 Service Pack 3 or later.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)">
      <summary>Sets data referenced by the specified key in the specified COM object.</summary>
      <param name="obj">The COM object in which to store the data.</param>
      <param name="key">The key in the internal hash table of the COM object in which to store the data.</param>
      <param name="data">The data to set.</param>
      <returns>true if the data was set successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="obj">obj</paramref> is null.   -or-  <paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="obj">obj</paramref> is not a COM object.   -or-  <paramref name="obj">obj</paramref> is a Windows Runtime object.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary>Returns the unmanaged size of an object in bytes.</summary>
      <param name="structure">The object whose size is to be returned.</param>
      <returns>The size of the specified object in unmanaged code.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="structure">structure</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary>Returns the size of an unmanaged type in bytes.</summary>
      <param name="t">The type whose size is to be returned.</param>
      <returns>The size of the specified type in unmanaged code.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="t">t</paramref> parameter is a generic type.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="t">t</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]   Returns the size of an unmanaged type in bytes.</summary>
      <typeparam name="T">The type whose size is to be returned.</typeparam>
      <returns>The size, in bytes, of the type that is specified by the <paramref name="T">T</paramref> generic type parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]   Returns the unmanaged size of an object of a specified type in bytes.</summary>
      <param name="structure">The object whose size is to be returned.</param>
      <typeparam name="T">The type of the structure parameter.</typeparam>
      <returns>The size, in bytes, of the specified object in unmanaged code.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="structure">structure</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)">
      <summary>Allocates a <see cref="https://msdn.microsoft.com/library/ms221069.aspx">BSTR</see> and copies the contents of a managed <see cref="T:System.String"></see> into it.</summary>
      <param name="s">The managed string to be copied.</param>
      <returns>An unmanaged pointer to the BSTR, or 0 if <paramref name="s">s</paramref> is null.</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length for <paramref name="s">s</paramref> is out of range.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String"></see> to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <param name="s">A managed string to be copied.</param>
      <returns>An integer representing a pointer to the block of memory allocated for the string, or 0 if <paramref name="s">s</paramref> is null.</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="s">s</paramref> parameter exceeds the maximum length allowed by the operating system.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String"></see> to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <param name="s">A managed string to be copied.</param>
      <returns>The allocated memory block, or 0 if <paramref name="s">s</paramref> is null.</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length for <paramref name="s">s</paramref> is out of range.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String"></see> to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <param name="s">A managed string to be copied.</param>
      <returns>An integer representing a pointer to the block of memory allocated for the string, or 0 if s is null.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="s">s</paramref> parameter exceeds the maximum length allowed by the operating system.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)">
      <param name="s"></param>
      <returns></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String"></see> into unmanaged memory, converting into ANSI format as it copies.</summary>
      <param name="s">A managed string to be copied.</param>
      <returns>The address, in unmanaged memory, to where <paramref name="s">s</paramref> was copied, or 0 if <paramref name="s">s</paramref> is null.</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="s">s</paramref> parameter exceeds the maximum length allowed by the operating system.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String"></see> into unmanaged memory, converting into ANSI format if required.</summary>
      <param name="s">A managed string to be copied.</param>
      <returns>The address, in unmanaged memory, to where the string was copied, or 0 if <paramref name="s">s</paramref> is null.</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String"></see> into unmanaged memory.</summary>
      <param name="s">A managed string to be copied.</param>
      <returns>The address, in unmanaged memory, to where the <paramref name="s">s</paramref> was copied, or 0 if <paramref name="s">s</paramref> is null.</returns>
      <exception cref="T:System.OutOfMemoryException">The method could not allocate enough native heap memory.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="s">s</paramref> parameter exceeds the maximum length allowed by the operating system.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary>Marshals data from a managed object to an unmanaged block of memory.</summary>
      <param name="structure">A managed object that holds the data to be marshaled. This object must be a structure or an instance of a formatted class.</param>
      <param name="ptr">A pointer to an unmanaged block of memory, which must be allocated before this method is called.</param>
      <param name="fDeleteOld">true to call the <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)"></see> method on the ptr parameter before this method copies the data. The block must contain valid data. Note that passing false when the memory block already contains data can lead to a memory leak.</param>
      <exception cref="T:System.ArgumentException"><paramref name="structure">structure</paramref> is a reference type that is not a formatted class.   -or-  <paramref name="structure">structure</paramref> is a generic type.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]   Marshals data from a managed object of a specified type to an unmanaged block of memory.</summary>
      <param name="structure">A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.</param>
      <param name="ptr">A pointer to an unmanaged block of memory, which must be allocated before this method is called.</param>
      <param name="fDeleteOld">true to call the <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)"></see> method on the ptr parameter before this method copies the data. The block must contain valid data. Note that passing false when the memory block already contains data can lead to a memory leak.</param>
      <typeparam name="T">The type of the managed object.</typeparam>
      <exception cref="T:System.ArgumentException"><paramref name="structure">structure</paramref> is a reference type that is not a formatted class.</exception>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary>Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize">
      <summary>Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary>Throws an exception with a specific failure HRESULT value.</summary>
      <param name="errorCode">The HRESULT corresponding to the desired exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary>Throws an exception with a specific failure HRESULT, based on the specified <see cref="https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx">IErrorInfo</see> interface.</summary>
      <param name="errorCode">The HRESULT corresponding to the desired exception.</param>
      <param name="errorInfo">A pointer to the <see cref="https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx">IErrorInfo</see> interface that provides more information about the error. You can specify IntPtr(0) to use the current <see cref="https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx">IErrorInfo</see> interface, or IntPtr(-1) to ignore the current <see cref="https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx">IErrorInfo</see> interface and construct the exception just from the error code.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary>Gets the address of the element at the specified index inside the specified array.</summary>
      <param name="arr">The array that contains the desired element.</param>
      <param name="index">The index in the arr parameter of the desired element.</param>
      <returns>The address of <paramref name="index">index</paramref> inside <paramref name="arr">arr</paramref>.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]   Gets the address of the element at the specified index in an array of a specified type.</summary>
      <param name="arr">The array that contains the desired element.</param>
      <param name="index">The index of the desired element in the arr array.</param>
      <typeparam name="T">The type of the array.</typeparam>
      <returns>The address of <paramref name="index">index</paramref> in <paramref name="arr">arr</paramref>.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
      <summary>Writes a single byte value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="ptr">ptr</paramref> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary>Writes a single byte value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary>Writes a single byte value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException"><paramref name="ptr">ptr</paramref> is not a recognized format.   -or-  <paramref name="ptr">ptr</paramref> is null.   -or-  <paramref name="ptr">ptr</paramref> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)">
      <summary>Writes a character as a 16-bit integer value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException"><paramref name="ptr">ptr</paramref> is not a recognized format.   -or-  <paramref name="ptr">ptr</paramref> is null.   -or-  <paramref name="ptr">ptr</paramref> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary>Writes a 16-bit integer value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException"><paramref name="ptr">ptr</paramref> is not a recognized format.   -or-  <paramref name="ptr">ptr</paramref> is null.   -or-  <paramref name="ptr">ptr</paramref> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
      <summary>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in the native heap to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary>Writes a 16-bit signed integer value into unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
      <summary>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="ptr">ptr</paramref> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
      <summary>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="ptr">ptr</paramref> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary>Writes a 32-bit signed integer value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException"><paramref name="ptr">ptr</paramref> is not a recognized format.   -or-  <paramref name="ptr">ptr</paramref> is null.   -or-  <paramref name="ptr">ptr</paramref> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary>Writes a 32-bit signed integer value into unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
      <summary>Writes a 32-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="ptr">ptr</paramref> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
      <summary>Writes a 64-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="ptr">ptr</paramref> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary>Writes a 64-bit signed integer value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException"><paramref name="ptr">ptr</paramref> is not a recognized format.   -or-  <paramref name="ptr">ptr</paramref> is null.   -or-  <paramref name="ptr">ptr</paramref> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary>Writes a 64-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary>Writes a processor native sized integer value into unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException"><paramref name="ptr">ptr</paramref> is not a recognized format.   -or-  <paramref name="ptr">ptr</paramref> is null.   -or-  <paramref name="ptr">ptr</paramref> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
      <summary>Writes a processor native-sized integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
      <summary>Writes a processor native sized integer value to unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the ptr parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr">ptr</paramref>) plus offset byte (<paramref name="ofs">ofs</paramref>) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="ptr">ptr</paramref> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset"></see> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)">
      <summary>Frees a <see cref="https://msdn.microsoft.com/library/ms221069.aspx">BSTR</see> pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)"></see> method.</summary>
      <param name="s">The address of the BSTR to free.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
      <summary>Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)"></see> method.</summary>
      <param name="s">The address of the unmanaged string to free.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
      <summary>Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)"></see> method.</summary>
      <param name="s">The address of the unmanaged string to free.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)">
      <param name="s"></param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
      <summary>Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)"></see> method.</summary>
      <param name="s">The address of the unmanaged string to free.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
      <summary>Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)"></see> method.</summary>
      <param name="s">The address of the unmanaged string to free.</param>
    </member>
    <member name="T:System.IO.UnmanagedMemoryAccessor">
      <summary>Provides random access to unmanaged blocks of memory from managed code.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryAccessor"></see> class.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryAccessor"></see> class with a specified buffer, offset, and capacity.</summary>
      <param name="buffer">The buffer to contain the accessor.</param>
      <param name="offset">The byte at which to start the accessor.</param>
      <param name="capacity">The size, in bytes, of memory to allocate.</param>
      <exception cref="T:System.ArgumentException"><paramref name="offset">offset</paramref> plus <paramref name="capacity">capacity</paramref> is greater than <paramref name="buffer">buffer</paramref>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> or <paramref name="capacity">capacity</paramref> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="offset">offset</paramref> plus <paramref name="capacity">capacity</paramref> would wrap around the high end of the address space.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryAccessor"></see> class with a specified buffer, offset, capacity, and access right.</summary>
      <param name="buffer">The buffer to contain the accessor.</param>
      <param name="offset">The byte at which to start the accessor.</param>
      <param name="capacity">The size, in bytes, of memory to allocate.</param>
      <param name="access">The type of access allowed to the memory. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite"></see>.</param>
      <exception cref="T:System.ArgumentException"><paramref name="offset">offset</paramref> plus <paramref name="capacity">capacity</paramref> is greater than <paramref name="buffer">buffer</paramref>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> or <paramref name="capacity">capacity</paramref> is less than zero.   -or-  <paramref name="access">access</paramref> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess"></see> enumeration value.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="offset">offset</paramref> plus <paramref name="capacity">capacity</paramref> would wrap around the high end of the address space.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanRead">
      <summary>Determines whether the accessor is readable.</summary>
      <returns>true if the accessor is readable; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanWrite">
      <summary>Determines whether the accessory is writable.</summary>
      <returns>true if the accessor is writable; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.Capacity">
      <summary>Gets the capacity of the accessor.</summary>
      <returns>The capacity of the accessor.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.UnmanagedMemoryAccessor"></see>.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.UnmanagedMemoryAccessor"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Sets the initial values for the accessor.</summary>
      <param name="buffer">The buffer to contain the accessor.</param>
      <param name="offset">The byte at which to start the accessor.</param>
      <param name="capacity">The size, in bytes, of memory to allocate.</param>
      <param name="access">The type of access allowed to the memory. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite"></see>.</param>
      <exception cref="T:System.ArgumentException"><paramref name="offset">offset</paramref> plus <paramref name="capacity">capacity</paramref> is greater than <paramref name="buffer">buffer</paramref>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> or <paramref name="capacity">capacity</paramref> is less than zero.   -or-  <paramref name="access">access</paramref> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess"></see> enumeration value.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="offset">offset</paramref> plus <paramref name="capacity">capacity</paramref> would wrap around the high end of the address space.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.IsOpen">
      <summary>Determines whether the accessor is currently open by a process.</summary>
      <returns>true if the accessor is open; otherwise, false.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)">
      <summary>Reads a structure of type <paramref name="T">T</paramref> from the accessor into a provided reference.</summary>
      <param name="position">The position in the accessor at which to begin reading.</param>
      <param name="structure">The structure to contain the read data.</param>
      <typeparam name="T">The type of structure.</typeparam>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to read in a structure of type <paramref name="T">T</paramref>.   -or-  T is a value type that contains one or more reference types.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary>Reads structures of type <paramref name="T">T</paramref> from the accessor into an array of type <paramref name="T">T</paramref>.</summary>
      <param name="position">The number of bytes in the accessor at which to begin reading.</param>
      <param name="array">The array to contain the structures read from the accessor.</param>
      <param name="offset">The index in array in which to place the first copied structure.</param>
      <param name="count">The number of structures of type T to read from the accessor.</param>
      <typeparam name="T">The type of structure.</typeparam>
      <returns>The number of structures read into <paramref name="array">array</paramref>. This value can be less than <paramref name="count">count</paramref> if there are fewer structures available, or zero if the end of the accessor is reached.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is not large enough to contain <paramref name="count">count</paramref> of structures (starting from <paramref name="position">position</paramref>).</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)">
      <summary>Reads a Boolean value from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <returns>true or false.</returns>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)">
      <summary>Reads a byte value from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <returns>The value that was read.</returns>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)">
      <summary>Reads a character from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <returns>The value that was read.</returns>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)">
      <summary>Reads a decimal value from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <returns>The value that was read.</returns>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to read a value.   -or-   The decimal to read is invalid.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)">
      <summary>Reads a double-precision floating-point value from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <returns>The value that was read.</returns>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)">
      <summary>Reads a 16-bit integer from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <returns>The value that was read.</returns>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)">
      <summary>Reads a 32-bit integer from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <returns>The value that was read.</returns>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)">
      <summary>Reads a 64-bit integer from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <returns>The value that was read.</returns>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)">
      <summary>Reads an 8-bit signed integer from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <returns>The value that was read.</returns>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)">
      <summary>Reads a single-precision floating-point value from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <returns>The value that was read.</returns>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)">
      <summary>Reads an unsigned 16-bit integer from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <returns>The value that was read.</returns>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)">
      <summary>Reads an unsigned 32-bit integer from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <returns>The value that was read.</returns>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)">
      <summary>Reads an unsigned 64-bit integer from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <returns>The value that was read.</returns>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)">
      <summary>Writes an unsigned 64-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)">
      <summary>Writes an unsigned 32-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)">
      <summary>Writes an unsigned 16-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)">
      <summary>Writes a Single into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)">
      <summary>Writes an 8-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)">
      <summary>Writes a 64-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after position to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)">
      <summary>Writes a Double value into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)">
      <summary>Writes a 16-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)">
      <summary>Writes a decimal value into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to write a value.   -or-   The decimal is invalid.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)">
      <summary>Writes a character into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)">
      <summary>Writes a byte value into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)">
      <summary>Writes a Boolean value into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)">
      <summary>Writes a 32-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position">position</paramref> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)">
      <summary>Writes a structure into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="structure">The structure to write.</param>
      <typeparam name="T">The type of structure.</typeparam>
      <exception cref="T:System.ArgumentException">There are not enough bytes in the accessor after <paramref name="position">position</paramref> to write a structure of type <paramref name="T">T</paramref>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary>Writes structures from an array of type <paramref name="T">T</paramref> into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="array">The array to write into the accessor.</param>
      <param name="offset">The index in array to start writing from.</param>
      <param name="count">The number of structures in array to write.</param>
      <typeparam name="T">The type of structure.</typeparam>
      <exception cref="T:System.ArgumentException">There are not enough bytes in the accessor after <paramref name="position">position</paramref> to write the number of structures specified by <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position">position</paramref> is less than zero or greater than the capacity of the accessor.   -or-  <paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="T:System.IO.UnmanagedMemoryStream">
      <summary>Provides access to unmanaged blocks of memory from managed code.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryStream"></see> class.</summary>
      <exception cref="T:System.Security.SecurityException">The user does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryStream"></see> class using the specified location and memory length.</summary>
      <param name="pointer">A pointer to an unmanaged memory location.</param>
      <param name="length">The length of the memory to use.</param>
      <exception cref="T:System.Security.SecurityException">The user does not have the required permission.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="pointer">pointer</paramref> value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="length">length</paramref> value is less than zero.   - or -   The <paramref name="length">length</paramref> is large enough to cause an overflow.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryStream"></see> class in a safe buffer with a specified offset and length.</summary>
      <param name="buffer">The buffer to contain the unmanaged memory stream.</param>
      <param name="offset">The byte position in the buffer at which to start the unmanaged memory stream.</param>
      <param name="length">The length of the unmanaged memory stream.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryStream"></see> class using the specified location, memory length, total amount of memory, and file access values.</summary>
      <param name="pointer">A pointer to an unmanaged memory location.</param>
      <param name="length">The length of the memory to use.</param>
      <param name="capacity">The total amount of memory assigned to the stream.</param>
      <param name="access">One of the <see cref="T:System.IO.FileAccess"></see> values.</param>
      <exception cref="T:System.Security.SecurityException">The user does not have the required permission.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="pointer">pointer</paramref> value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="length">length</paramref> value is less than zero.   - or -   The <paramref name="capacity">capacity</paramref> value is less than zero.   - or -   The <paramref name="length">length</paramref> value is greater than the <paramref name="capacity">capacity</paramref> value.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryStream"></see> class in a safe buffer with a specified offset, length, and file access.</summary>
      <param name="buffer">The buffer to contain the unmanaged memory stream.</param>
      <param name="offset">The byte position in the buffer at which to start the unmanaged memory stream.</param>
      <param name="length">The length of the unmanaged memory stream.</param>
      <param name="access">The mode of file access to the unmanaged memory stream.</param>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanRead">
      <summary>Gets a value indicating whether a stream supports reading.</summary>
      <returns>false if the object was created by a constructor with an <paramref name="access">access</paramref> parameter that did not include reading the stream and if the stream is closed; otherwise, true.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanSeek">
      <summary>Gets a value indicating whether a stream supports seeking.</summary>
      <returns>false if the stream is closed; otherwise, true.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanWrite">
      <summary>Gets a value indicating whether a stream supports writing.</summary>
      <returns>false if the object was created by a constructor with an <paramref name="access">access</paramref> parameter value that supports writing or was created by a constructor that had no parameters, or if the stream is closed; otherwise, true.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Capacity">
      <summary>Gets the stream length (size) or the total amount of memory assigned to a stream (capacity).</summary>
      <returns>The size or capacity of the stream.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.UnmanagedMemoryStream"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Flush">
      <summary>Overrides the <see cref="M:System.IO.Stream.Flush"></see> method so that no action is performed.</summary>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>Overrides the <see cref="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)"></see> method so that the operation is cancelled if specified, but no other action is performed.   Available starting in .NET Framework 4.6</summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"></see>.</param>
      <returns>A task that represents the asynchronous flush operation.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryStream"></see> class in a safe buffer with a specified offset, length, and file access.</summary>
      <param name="buffer">The buffer to contain the unmanaged memory stream.</param>
      <param name="offset">The byte position in the buffer at which to start the unmanaged memory stream.</param>
      <param name="length">The length of the unmanaged memory stream.</param>
      <param name="access">The mode of file access to the unmanaged memory stream.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryStream"></see> class by using a pointer to an unmanaged memory location.</summary>
      <param name="pointer">A pointer to an unmanaged memory location.</param>
      <param name="length">The length of the memory to use.</param>
      <param name="capacity">The total amount of memory assigned to the stream.</param>
      <param name="access">One of the <see cref="T:System.IO.FileAccess"></see> values.</param>
      <exception cref="T:System.Security.SecurityException">The user does not have the required permission.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="pointer">pointer</paramref> value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="length">length</paramref> value is less than zero.   - or -   The <paramref name="capacity">capacity</paramref> value is less than zero.   - or -   The <paramref name="length">length</paramref> value is large enough to cause an overflow.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Length">
      <summary>Gets the length of the data in a stream.</summary>
      <returns>The length of the data in the stream.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Position">
      <summary>Gets or sets the current position in a stream.</summary>
      <returns>The current position in the stream.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The position is set to a value that is less than zero, or the position is larger than <see cref="F:System.Int32.MaxValue"></see> or results in overflow when added to the current pointer.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.PositionPointer">
      <summary>Gets or sets a byte pointer to a stream based on the current position in the stream.</summary>
      <returns>A byte pointer.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The current position is larger than the capacity of the stream.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The position is being set is not a valid position in the current stream.</exception>
      <exception cref="T:System.IO.IOException">The pointer is being set to a lower value than the starting position of the stream.</exception>
      <exception cref="T:System.NotSupportedException">The stream was initialized for use with a <see cref="T:System.Runtime.InteropServices.SafeBuffer"></see>. The <see cref="P:System.IO.UnmanagedMemoryStream.PositionPointer"></see> property is valid only for streams that are initialized with a <see cref="T:System.Byte"></see> pointer.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the specified number of bytes into the specified array.</summary>
      <param name="buffer">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. This parameter is passed uninitialized.</param>
      <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
      <param name="count">The maximum number of bytes to read from the current stream.</param>
      <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.NotSupportedException">The underlying memory does not support reading.   - or -   The <see cref="P:System.IO.UnmanagedMemoryStream.CanRead"></see> property is set to false.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer">buffer</paramref> parameter is set to null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset">offset</paramref> parameter is less than zero.   - or -   The <paramref name="count">count</paramref> parameter is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The length of the buffer array minus the <paramref name="offset">offset</paramref> parameter is less than the <paramref name="count">count</paramref> parameter.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Asynchronously reads the specified number of bytes into the specified array.   Available starting in .NET Framework 4.6</summary>
      <param name="buffer">The buffer to write the data into.</param>
      <param name="offset">The byte offset in buffer at which to begin writing data from the stream.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"></see>.</param>
      <returns>A task that represents the asynchronous read operation. The value of the <paramref name="TResult">TResult</paramref> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadByte">
      <summary>Reads a byte from a stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</summary>
      <returns>The unsigned byte cast to an <see cref="T:System.Int32"></see> object, or -1 if at the end of the stream.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.NotSupportedException">The underlying memory does not support reading.   - or -   The current position is at the end of the stream.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the current position of the current stream to the given value.</summary>
      <param name="offset">The point relative to origin to begin seeking from.</param>
      <param name="loc">Specifies the beginning, the end, or the current position as a reference point for origin, using a value of type <see cref="T:System.IO.SeekOrigin"></see>.</param>
      <returns>The new position in the stream.</returns>
      <exception cref="T:System.IO.IOException">An attempt was made to seek before the beginning of the stream.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset">offset</paramref> value is larger than the maximum size of the stream.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="loc">loc</paramref> is invalid.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
      <summary>Sets the length of a stream to a specified value.</summary>
      <param name="value">The length of the stream.</param>
      <exception cref="T:System.IO.IOException">An I/O error has occurred.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.NotSupportedException">The underlying memory does not support writing.   - or -   An attempt is made to write to the stream and the <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite"></see> property is false.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="value">value</paramref> exceeds the capacity of the stream.   - or -   The specified <paramref name="value">value</paramref> is negative.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a block of bytes to the current stream using data from a buffer.</summary>
      <param name="buffer">The byte array from which to copy bytes to the current stream.</param>
      <param name="offset">The offset in the buffer at which to begin copying bytes to the current stream.</param>
      <param name="count">The number of bytes to write to the current stream.</param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.NotSupportedException">The underlying memory does not support writing.   - or -   An attempt is made to write to the stream and the <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite"></see> property is false.   - or -   The <paramref name="count">count</paramref> value is greater than the capacity of the stream.   - or -   The position is at the end of the stream capacity.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">One of the specified parameters is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="offset">offset</paramref> parameter minus the length of the <paramref name="buffer">buffer</paramref> parameter is less than the <paramref name="count">count</paramref> parameter.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer">buffer</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.   Available starting in .NET Framework 4.6</summary>
      <param name="buffer">The buffer to write data from.</param>
      <param name="offset">The zero-based byte offset in buffer from which to begin copying bytes to the stream.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"></see>.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
      <summary>Writes a byte to the current position in the file stream.</summary>
      <param name="value">A byte value written to the stream.</param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.NotSupportedException">The underlying memory does not support writing.   - or -   An attempt is made to write to the stream and the <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite"></see> property is false.   - or -   The current position is at the end of the capacity of the stream.</exception>
      <exception cref="T:System.IO.IOException">The supplied <paramref name="value">value</paramref> causes the stream exceed its maximum capacity.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary>Indicates how to marshal the data between managed and unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute"></see> class with the specified <see cref="T:System.Runtime.InteropServices.UnmanagedType"></see> value.</summary>
      <param name="unmanagedType">The value the data is to be marshaled as.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute"></see> class with the specified <see cref="T:System.Runtime.InteropServices.UnmanagedType"></see> enumeration member.</summary>
      <param name="unmanagedType">The value the data is to be marshaled as.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary>Specifies the element type of the unmanaged <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray"></see> or <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex">
      <summary>Specifies the parameter index of the unmanaged iid_is attribute used by COM.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary>Provides additional information to a custom marshaler.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary>Specifies the fully qualified name of a custom marshaler.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary>Implements <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType"></see> as a type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType">
      <summary>Indicates the element type of the <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType">
      <summary>Indicates the user-defined element type of the <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary>Indicates the number of elements in the fixed-length array or the number of characters (not bytes) in a string to import.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary>Indicates the zero-based parameter that contains the count of array elements, similar to size_is in COM.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.UnmanagedType"></see> value the data is to be marshaled as.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.UnmanagedType"></see> value the data is to be marshaled as.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary>The exception that is thrown by the marshaler when it encounters a <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute"></see> it does not support.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor">
      <summary>Initializes a new instance of the MarshalDirectiveException class with default properties.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)">
      <summary>Initializes a new instance of the MarshalDirectiveException class with a specified error message.</summary>
      <param name="message">The error message that specifies the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the MarshalDirectiveException class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.MarshalDirectiveException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary>Indicates that a parameter is optional.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary>Initializes a new instance of the OptionalAttribute class with default values.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary>Indicates that the HRESULT or retval signature transformation that takes place during COM interop calls should be suppressed.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute"></see> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute">
      <summary>Indicates that the attributed assembly is a primary interop assembly.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute"></see> class with the major and minor version numbers of the type library for which this assembly is the primary interop assembly.</summary>
      <param name="major">The major version of the type library for which this assembly is the primary interop assembly.</param>
      <param name="minor">The minor version of the type library for which this assembly is the primary interop assembly.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MajorVersion">
      <summary>Gets the major version number of the type library for which this assembly is the primary interop assembly.</summary>
      <returns>The major version number of the type library for which this assembly is the primary interop assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MinorVersion">
      <summary>Gets the minor version number of the type library for which this assembly is the primary interop assembly.</summary>
      <returns>The minor version number of the type library for which this assembly is the primary interop assembly.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ProgIdAttribute">
      <summary>Allows the user to specify the ProgID of a class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ProgIdAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the ProgIdAttribute with the specified ProgID.</summary>
      <param name="progId">The ProgID to be assigned to the class.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ProgIdAttribute.Value">
      <summary>Gets the ProgID of the class.</summary>
      <returns>The ProgID of the class.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.RuntimeEnvironment">
      <summary>Provides a collection of static methods that return information about the common language runtime environment.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.FromGlobalAccessCache(System.Reflection.Assembly)">
      <summary>Tests whether the specified assembly is loaded in the global assembly cache.</summary>
      <param name="a">The assembly to test.</param>
      <returns>true if the assembly is loaded in the global assembly cache; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory">
      <summary>Returns the directory where the common language runtime is installed.</summary>
      <returns>A string that contains the path to the directory where the common language runtime is installed.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(System.Guid,System.Guid)">
      <summary>Returns the specified interface on the specified class.</summary>
      <param name="clsid">The identifier for the desired class.</param>
      <param name="riid">The identifier for the desired interface.</param>
      <returns>An unmanaged pointer to the requested interface.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException"><see cref="http://go.microsoft.com/fwlink/?LinkId=144867">IUnknown::QueryInterface</see> failure.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject(System.Guid,System.Guid)">
      <summary>Returns an instance of a type that represents a COM object by a pointer to its IUnknown interface.</summary>
      <param name="clsid">The identifier for the desired class.</param>
      <param name="riid">The identifier for the desired interface.</param>
      <returns>An object that represents the specified unmanaged COM object.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException"><see cref="http://go.microsoft.com/fwlink/?LinkId=144867">IUnknown::QueryInterface</see> failure.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion">
      <summary>Gets the version number of the common language runtime that is running the current process.</summary>
      <returns>A string containing the version number of the common language runtime.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.RuntimeEnvironment.SystemConfigurationFile">
      <summary>Gets the path to the system configuration file.</summary>
      <returns>The path to the system configuration file.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayRankMismatchException">
      <summary>The exception thrown when the rank of an incoming SAFEARRAY does not match the rank specified in the managed signature.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor">
      <summary>Initializes a new instance of the SafeArrayTypeMismatchException class with default values.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the SafeArrayRankMismatchException class with the specified message.</summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the SafeArrayTypeMismatchException class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeArrayRankMismatchException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException">
      <summary>The exception thrown when the type of the incoming SAFEARRAY does not match the type specified in the managed signature.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor">
      <summary>Initializes a new instance of the SafeArrayTypeMismatchException class with default values.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the SafeArrayTypeMismatchException class with the specified message.</summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the SafeArrayTypeMismatchException class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeBuffer">
      <summary>Provides a controlled memory buffer that can be used for reading and writing. Attempts to access memory outside the controlled buffer (underruns and overruns) raise exceptions.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.Runtime.InteropServices.SafeBuffer"></see> class, and specifies whether the buffer handle is to be reliably released.</summary>
      <param name="ownsHandle">true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended).</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
      <summary>Obtains a pointer from a <see cref="T:System.Runtime.InteropServices.SafeBuffer"></see> object for a block of memory.</summary>
      <param name="pointer">A byte pointer, passed by reference, to receive the pointer from within the <see cref="T:System.Runtime.InteropServices.SafeBuffer"></see> object. You must set this pointer to null before you call this method.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize"></see> method has not been called.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeBuffer.ByteLength">
      <summary>Gets the size of the buffer, in bytes.</summary>
      <returns>The number of bytes in the memory buffer.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize"></see> method has not been called.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
      <summary>Defines the allocation size of the memory region in bytes. You must call this method before you use the <see cref="T:System.Runtime.InteropServices.SafeBuffer"></see> instance.</summary>
      <param name="numBytes">The number of bytes in the buffer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="numBytes">numBytes</paramref> is less than zero.   -or-  <paramref name="numBytes">numBytes</paramref> is greater than the available address space.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
      <summary>Specifies the allocation size of the memory buffer by using the specified number of elements and element size. You must call this method before you use the <see cref="T:System.Runtime.InteropServices.SafeBuffer"></see> instance.</summary>
      <param name="numElements">The number of elements in the buffer.</param>
      <param name="sizeOfEachElement">The size of each element in the buffer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="numElements">numElements</paramref> is less than zero.   -or-  <paramref name="sizeOfEachElement">sizeOfEachElement</paramref> is less than zero.   -or-  <paramref name="numElements">numElements</paramref> multiplied by <paramref name="sizeOfEachElement">sizeOfEachElement</paramref> is greater than the available address space.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
      <summary>Defines the allocation size of the memory region by specifying the number of value types. You must call this method before you use the <see cref="T:System.Runtime.InteropServices.SafeBuffer"></see> instance.</summary>
      <param name="numElements">The number of elements of the value type to allocate memory for.</param>
      <typeparam name="T">The value type to allocate memory for.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="numElements">numElements</paramref> is less than zero.   -or-  <paramref name="numElements">numElements</paramref> multiplied by the size of each element is greater than the available address space.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeBuffer.IsInvalid">
      <returns></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
      <summary>Reads a value type from memory at the specified offset.</summary>
      <param name="byteOffset">The location from which to read the value type. You may have to consider alignment issues.</param>
      <typeparam name="T">The value type to read.</typeparam>
      <returns>The value type that was read from memory.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize"></see> method has not been called.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>Reads the specified number of value types from memory starting at the offset, and writes them into an array starting at the index.</summary>
      <param name="byteOffset">The location from which to start reading.</param>
      <param name="array">The output array to write to.</param>
      <param name="index">The location in the output array to begin writing to.</param>
      <param name="count">The number of value types to read from the input array and to write to the output array.</param>
      <typeparam name="T">The value type to read.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.   -or-  <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The length of the array minus the index is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize"></see> method has not been called.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer">
      <summary>Releases a pointer that was obtained by the <see cref="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)"></see> method.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize"></see> method has not been called.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
      <summary>Writes a value type to memory at the given location.</summary>
      <param name="byteOffset">The location at which to start writing. You may have to consider alignment issues.</param>
      <param name="value">The value to write.</param>
      <typeparam name="T">The value type to write.</typeparam>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize"></see> method has not been called.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>Writes the specified number of value types to a memory location by reading bytes starting from the specified location in the input array.</summary>
      <param name="byteOffset">The location in memory to write to.</param>
      <param name="array">The input array.</param>
      <param name="index">The offset in the array to start reading from.</param>
      <param name="count">The number of value types to write.</param>
      <typeparam name="T">The value type to write.</typeparam>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The length of the input array minus <paramref name="index">index</paramref> is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize"></see> method has not been called.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeHandle">
      <summary>Represents a wrapper class for operating system handles. This class must be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeHandle"></see> class with the specified invalid handle value.</summary>
      <param name="invalidHandleValue">The value of an invalid handle (usually 0 or -1).  Your implementation of <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid"></see> should return true for this value.</param>
      <param name="ownsHandle">true to reliably let <see cref="T:System.Runtime.InteropServices.SafeHandle"></see> release the handle during the finalization phase; otherwise, false (not recommended).</param>
      <exception cref="T:System.TypeLoadException">The derived class resides in an assembly without unmanaged code access permission.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
      <summary>Manually increments the reference counter on <see cref="T:System.Runtime.InteropServices.SafeHandle"></see> instances.</summary>
      <param name="success">true if the reference counter was successfully incremented; otherwise, false.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
      <summary>Returns the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle"></see> field.</summary>
      <returns>An IntPtr representing the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle"></see> field. If the handle has been marked invalid with <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid"></see>, this method still returns the original handle value, which can be a stale value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
      <summary>Manually decrements the reference counter on a <see cref="T:System.Runtime.InteropServices.SafeHandle"></see> instance.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle"></see> class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle"></see> class specifying whether to perform a normal dispose operation.</summary>
      <param name="disposing">true for a normal dispose operation; false to finalize the handle.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Finalize">
      <summary>Frees all resources associated with the handle.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.SafeHandle.handle">
      <summary>Specifies the handle to be wrapped.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
      <summary>Gets a value indicating whether the handle is closed.</summary>
      <returns>true if the handle is closed; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
      <summary>When overridden in a derived class, gets a value indicating whether the handle value is invalid.</summary>
      <returns>true if the handle value is invalid; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
      <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
      <returns>true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a <see cref="~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md">releaseHandleFailed</see> Managed Debugging Assistant.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
      <summary>Sets the handle to the specified pre-existing handle.</summary>
      <param name="handle">The pre-existing handle to use.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
      <summary>Marks a handle as no longer used.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary>Represents structured exception handling (SEH) errors.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException"></see> class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException"></see> class with a specified message.</summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException"></see> class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.CanResume">
      <summary>Indicates whether the exception can be recovered from, and whether the code can continue from the point at which the exception was thrown.</summary>
      <returns>Always false, because resumable exceptions are not implemented.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
      <summary>Provides support for type equivalence.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute"></see> class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute"></see> class with the specified scope and identifier.</summary>
      <param name="scope">The first type equivalence string.</param>
      <param name="identifier">The second type equivalence string.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier">
      <summary>Gets the value of the <paramref name="identifier">identifier</paramref> parameter that was passed to the <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)"></see> constructor.</summary>
      <returns>The value of the constructor's <paramref name="identifier">identifier</paramref> parameter.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope">
      <summary>Gets the value of the <paramref name="scope">scope</paramref> parameter that was passed to the <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)"></see> constructor.</summary>
      <returns>The value of the constructor's <paramref name="scope">scope</paramref> parameter.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncAttribute">
      <summary>Contains the <see cref="T:System.Runtime.InteropServices.FUNCFLAGS"></see> that were originally imported for this method from the COM type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the TypeLibFuncAttribute class with the specified <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags"></see> value.</summary>
      <param name="flags">The <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags"></see> value for the attributed method as found in the type library it was imported from.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Runtime.InteropServices.TypeLibFuncFlags)">
      <summary>Initializes a new instance of the TypeLibFuncAttribute class with the specified <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags"></see> value.</summary>
      <param name="flags">The <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags"></see> value for the attributed method as found in the type library it was imported from.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibFuncAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags"></see> value for this method.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags"></see> value for this method.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncFlags">
      <summary>Describes the original settings of the FUNCFLAGS in the COM type library from where this method was imported.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable">
      <summary>The function that supports data binding.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultBind">
      <summary>The function that best represents the object. Only one function in a type information can have this attribute.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultCollelem">
      <summary>Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDisplayBind">
      <summary>The function that is displayed to the user as bindable. <see cref="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable"></see> must also be set.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FHidden">
      <summary>The function should not be displayed to the user, although it exists and is bindable.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FImmediateBind">
      <summary>The function is mapped as individual bindable properties.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FNonBrowsable">
      <summary>The property appears in an object browser, but not in a properties browser.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FReplaceable">
      <summary>Tags the interface as having default behaviors.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRequestEdit">
      <summary>When set, any call to a method that sets the property results first in a call to IPropertyNotifySink::OnRequestEdit.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRestricted">
      <summary>This flag is intended for system-level functions or functions that type browsers should not display.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FSource">
      <summary>The function returns an object that is a source of events.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUiDefault">
      <summary>The type information member is the default member for display in the user interface.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUsesGetLastError">
      <summary>The function supports GetLastError.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibImportClassAttribute">
      <summary>Specifies which <see cref="T:System.Type"></see> exclusively uses an interface. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibImportClassAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.TypeLibImportClassAttribute"></see> class specifying the <see cref="T:System.Type"></see> that exclusively uses an interface.</summary>
      <param name="importClass">The <see cref="T:System.Type"></see> object that exclusively uses an interface.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibImportClassAttribute.Value">
      <summary>Gets the name of a <see cref="T:System.Type"></see> object that exclusively uses an interface.</summary>
      <returns>The name of a <see cref="T:System.Type"></see> object that exclusively uses an interface.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeAttribute">
      <summary>Contains the <see cref="T:System.Runtime.InteropServices.TYPEFLAGS"></see> that were originally imported for this type from the COM type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the TypeLibTypeAttribute class with the specified <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags"></see> value.</summary>
      <param name="flags">The <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags"></see> value for the attributed type as found in the type library it was imported from.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Runtime.InteropServices.TypeLibTypeFlags)">
      <summary>Initializes a new instance of the TypeLibTypeAttribute class with the specified <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags"></see> value.</summary>
      <param name="flags">The <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags"></see> value for the attributed type as found in the type library it was imported from.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibTypeAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags"></see> value for this type.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags"></see> value for this type.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeFlags">
      <summary>Describes the original settings of the <see cref="T:System.Runtime.InteropServices.TYPEFLAGS"></see> in the COM type library from which the type was imported.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAggregatable">
      <summary>The class supports aggregation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAppObject">
      <summary>A type description that describes an Application object.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FCanCreate">
      <summary>Instances of the type can be created by ITypeInfo::CreateInstance.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FControl">
      <summary>The type is a control from which other types will be derived, and should not be displayed to users.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDispatchable">
      <summary>Indicates that the interface derives from IDispatch, either directly or indirectly.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDual">
      <summary>The interface supplies both IDispatch and V-table binding.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FHidden">
      <summary>The type should not be displayed to browsers.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FLicensed">
      <summary>The type is licensed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FNonExtensible">
      <summary>The interface cannot add members at run time.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FOleAutomation">
      <summary>The types used in the interface are fully compatible with Automation, including vtable binding support.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FPreDeclId">
      <summary>The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReplaceable">
      <summary>The object supports IConnectionPointWithDefault, and has default behaviors.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FRestricted">
      <summary>This flag is intended for system-level types or types that type browsers should not display.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReverseBind">
      <summary>Indicates base interfaces should be checked for name resolution before checking child interfaces. This is the reverse of the default behavior.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarAttribute">
      <summary>Contains the <see cref="T:System.Runtime.InteropServices.VARFLAGS"></see> that were originally imported for this field from the COM type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute"></see> class with the specified <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags"></see> value.</summary>
      <param name="flags">The <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags"></see> value for the attributed field as found in the type library it was imported from.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Runtime.InteropServices.TypeLibVarFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute"></see> class with the specified <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags"></see> value.</summary>
      <param name="flags">The <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags"></see> value for the attributed field as found in the type library it was imported from.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVarAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags"></see> value for this field.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags"></see> value for this field.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarFlags">
      <summary>Describes the original settings of the <see cref="T:System.Runtime.InteropServices.VARFLAGS"></see> in the COM type library from which the variable was imported.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable">
      <summary>The variable supports data binding.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultBind">
      <summary>The variable is the single property that best represents the object. Only one variable in a type info can have this value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultCollelem">
      <summary>Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDisplayBind">
      <summary>The variable is displayed as bindable. <see cref="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable"></see> must also be set.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FHidden">
      <summary>The variable should not be displayed in a browser, though it exists and is bindable.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FImmediateBind">
      <summary>The variable is mapped as individual bindable properties.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FNonBrowsable">
      <summary>The variable appears in an object browser, but not in a properties browser.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReadOnly">
      <summary>Assignment to the variable should not be allowed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReplaceable">
      <summary>Tags the interface as having default behaviors.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRequestEdit">
      <summary>Indicates that the property supports the COM OnRequestEdit notification.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRestricted">
      <summary>This flag is intended for system-level functions or functions that type browsers should not display.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FSource">
      <summary>The variable returns an object that is a source of events.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FUiDefault">
      <summary>The default display in the user interface.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVersionAttribute">
      <summary>Specifies the version number of an exported type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVersionAttribute.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.TypeLibVersionAttribute"></see> class with the major and minor version numbers of the type library.</summary>
      <param name="major">The major version number of the type library.</param>
      <param name="minor">The minor version number of the type library.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MajorVersion">
      <summary>Gets the major version number of the type library.</summary>
      <returns>The major version number of the type library.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MinorVersion">
      <summary>Gets the minor version number of the type library.</summary>
      <returns>The minor version number of the type library.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnknownWrapper">
      <summary>Wraps objects the marshaler should marshal as a VT_UNKNOWN.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnknownWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.UnknownWrapper"></see> class with the object to be wrapped.</summary>
      <param name="obj">The object being wrapped.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject">
      <summary>Gets the object contained by this wrapper.</summary>
      <returns>The wrapped object.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
      <summary>Controls the marshaling behavior of a delegate signature passed as an unmanaged function pointer to or from unmanaged code. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute"></see> class with the specified calling convention.</summary>
      <param name="callingConvention">The specified calling convention.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.BestFitMapping">
      <summary>Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
      <summary>Gets the value of the calling convention.</summary>
      <returns>The value of the calling convention specified by the <see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)"></see> constructor.</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CharSet">
      <summary>Indicates how to marshal string parameters to the method, and controls name mangling.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.SetLastError">
      <summary>Indicates whether the callee calls the SetLastError Win32 API function before returning from the attributed method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.ThrowOnUnmappableChar">
      <summary>Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI &quot;?&quot; character.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
      <summary>Identifies how to marshal parameters or fields to unmanaged code.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
      <summary>An ANSI character string that is a length-prefixed single byte. You can use this member on the <see cref="T:System.String"></see> data type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
      <summary>A dynamic type that determines the type of an object at run time and marshals the object as that type. This member is valid for platform invoke methods only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
      <summary>A 4-byte Boolean value (true != 0, false = 0). This is the Win32 BOOL type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
      <summary>A Unicode character string that is a length-prefixed double byte. You can use this member, which is the default string in COM, on the <see cref="T:System.String"></see> data type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
      <summary>When the <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value"></see> property is set to ByValArray, the <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst"></see> field must be set to indicate the number of elements in the array. The <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType"></see> field can optionally contain the <see cref="T:System.Runtime.InteropServices.UnmanagedType"></see> of the array elements when it is necessary to differentiate among string types. You can use this <see cref="T:System.Runtime.InteropServices.UnmanagedType"></see> only on an array that whose elements appear as fields in a structure.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
      <summary>Used for in-line, fixed-length character arrays that appear within a structure. The character type used with <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr"></see> is determined by the <see cref="T:System.Runtime.InteropServices.CharSet"></see> argument of the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute"></see> attribute applied to the containing structure. Always use the <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst"></see> field to indicate the size of the array.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
      <summary>A currency type. Used on a <see cref="T:System.Decimal"></see> to marshal the decimal value as a COM currency type instead of as a Decimal.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
      <summary>Specifies the custom marshaler class when used with the <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType"></see> or <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef"></see> field. The <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie"></see> field can be used to pass additional information to the custom marshaler. You can use this member on any reference type. This member is valid for parameters and return values only. It cannot be used on fields.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
      <summary>A native type that is associated with an <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4"></see> or an <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4"></see> and that causes the parameter to be exported as an HRESULT in the exported type library.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
      <summary>An integer that can be used as a C-style function pointer. You can use this member on a <see cref="T:System.Delegate"></see> data type or on a type that inherits from a <see cref="T:System.Delegate"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.HString">
      <summary>A Windows Runtime string. You can use this member on the <see cref="T:System.String"></see> data type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
      <summary>A 1-byte signed integer. You can use this member to transform a Boolean value into a 1-byte, C-style bool (true = 1, false = 0).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
      <summary>A 2-byte signed integer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
      <summary>A 4-byte signed integer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
      <summary>An 8-byte signed integer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
      <summary>A COM IDispatch pointer (Object in Microsoft Visual Basic 6.0).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IInspectable">
      <summary>A Windows Runtime interface pointer. You can use this member on the <see cref="T:System.Object"></see> data type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
      <summary>A COM interface pointer. The <see cref="T:System.Guid"></see> of the interface is obtained from the class metadata. Use this member to specify the exact interface type or the default interface type if you apply it to a class. This member produces the same behavior as <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown"></see> when you apply it to the <see cref="T:System.Object"></see> data type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
      <summary>A COM IUnknown pointer. You can use this member on the <see cref="T:System.Object"></see> data type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
      <summary>A pointer to the first element of a C-style array. When marshaling from managed to unmanaged code, the length of the array is determined by the length of the managed array. When marshaling from unmanaged to managed code, the length of the array is determined from the <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst"></see> and <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex"></see> fields, optionally followed by the unmanaged type of the elements within the array when it is necessary to differentiate among string types.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
      <summary>A single byte, null-terminated ANSI character string. You can use this member on the <see cref="T:System.String"></see> and <see cref="T:System.Text.StringBuilder"></see> data types.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
      <summary>A pointer to a C-style structure that you use to marshal managed formatted classes. This member is valid for platform invoke methods only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
      <summary>A platform-dependent character string: ANSI on Windows 98, and Unicode on Windows NT and Windows XP. This value is supported only for platform invoke and not for COM interop, because exporting a string of type LPTStr is not supported.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPUTF8Str">
      <summary>A pointer to a UTF-8 encoded string.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
      <summary>A 2-byte, null-terminated Unicode character string.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
      <summary>A 4-byte floating-point number.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
      <summary>An 8-byte floating-point number.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
      <summary>A SafeArray, which is a self-describing array that carries the type, rank, and bounds of the associated array data. You can use this member with the <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType"></see> field to override the default element type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
      <summary>A VARIANT, which is used to marshal managed formatted classes and value types.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
      <summary>A platform-dependent, signed integer: 4 bytes on 32-bit Windows, 8 bytes on 64-bit Windows.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
      <summary>A platform-dependent, unsigned integer: 4 bytes on 32-bit Windows, 8 bytes on 64-bit Windows.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
      <summary>A length-prefixed, platform-dependent char string: ANSI on Windows 98, Unicode on Windows NT. You rarely use this BSTR-like member.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
      <summary>A 1-byte unsigned integer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
      <summary>A 2-byte unsigned integer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
      <summary>A 4-byte unsigned integer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
      <summary>An 8-byte unsigned integer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
      <summary>A 2-byte, OLE-defined VARIANT_BOOL type (true = -1, false = 0).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
      <summary>A value that enables Visual Basic to change a string in unmanaged code and have the results reflected in managed code. This value is only supported for platform invoke.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.VarEnum">
      <summary>Indicates how to marshal the array elements when an array is marshaled from managed to unmanaged code as a <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray"></see>.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ARRAY">
      <summary>Indicates a SAFEARRAY pointer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB">
      <summary>Indicates length prefixed bytes.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB_OBJECT">
      <summary>Indicates that a blob contains an object.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BOOL">
      <summary>Indicates a Boolean value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BSTR">
      <summary>Indicates a BSTR string.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BYREF">
      <summary>Indicates that a value is a reference.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CARRAY">
      <summary>Indicates a C style array.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CF">
      <summary>Indicates the clipboard format.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CLSID">
      <summary>Indicates a class ID.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CY">
      <summary>Indicates a currency value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DATE">
      <summary>Indicates a DATE value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DECIMAL">
      <summary>Indicates a decimal value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH">
      <summary>Indicates an IDispatch pointer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_EMPTY">
      <summary>Indicates that a value was not specified.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ERROR">
      <summary>Indicates an SCODE.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_FILETIME">
      <summary>Indicates a FILETIME value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_HRESULT">
      <summary>Indicates an HRESULT.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I1">
      <summary>Indicates a char value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I2">
      <summary>Indicates a short integer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I4">
      <summary>Indicates a long integer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I8">
      <summary>Indicates a 64-bit integer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_INT">
      <summary>Indicates an integer value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPSTR">
      <summary>Indicates a null-terminated string.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPWSTR">
      <summary>Indicates a wide string terminated by null.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_NULL">
      <summary>Indicates a null value, similar to a null value in SQL.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_PTR">
      <summary>Indicates a pointer type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R4">
      <summary>Indicates a float value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R8">
      <summary>Indicates a double value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_RECORD">
      <summary>Indicates a user defined type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_SAFEARRAY">
      <summary>Indicates a SAFEARRAY. Not valid in a VARIANT.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORAGE">
      <summary>Indicates that the name of a storage follows.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORED_OBJECT">
      <summary>Indicates that a storage contains an object.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAM">
      <summary>Indicates that the name of a stream follows.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAMED_OBJECT">
      <summary>Indicates that a stream contains an object.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI1">
      <summary>Indicates a byte.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI2">
      <summary>Indicates an unsigned``short.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI4">
      <summary>Indicates an unsigned``long.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI8">
      <summary>Indicates an 64-bit unsigned integer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UINT">
      <summary>Indicates an unsigned integer value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UNKNOWN">
      <summary>Indicates an IUnknown pointer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_USERDEFINED">
      <summary>Indicates a user defined type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VARIANT">
      <summary>Indicates a VARIANT far pointer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VECTOR">
      <summary>Indicates a simple, counted array.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VOID">
      <summary>Indicates a C style void.</summary>
      <returns></returns>
    </member>
  </members>
</doc></span>