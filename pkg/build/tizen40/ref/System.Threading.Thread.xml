<?xml version="1.0" encoding="utf-8"?><span>
<doc>
  <assembly>
    <name>System.Threading.Thread</name>
  </assembly>
  <members>
    <member name="T:System.Threading.ApartmentState">
      <summary>Specifies the apartment state of a <see cref="T:System.Threading.Thread"></see>.</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.MTA">
      <summary>The <see cref="T:System.Threading.Thread"></see> will create and enter a multithreaded apartment.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.ApartmentState.STA">
      <summary>The <see cref="T:System.Threading.Thread"></see> will create and enter a single-threaded apartment.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.ApartmentState.Unknown">
      <summary>The <see cref="P:System.Threading.Thread.ApartmentState"></see> property has not been set.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Threading.CompressedStack">
      <summary>Provides methods for setting and capturing the compressed stack on the current thread. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Threading.CompressedStack.Capture">
      <summary>Captures the compressed stack from the current thread.</summary>
      <returns>A <see cref="T:System.Threading.CompressedStack"></see> object.</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.CreateCopy">
      <summary>Creates a copy of the current compressed stack.</summary>
      <returns>A <see cref="T:System.Threading.CompressedStack"></see> object representing the current compressed stack.</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.GetCompressedStack">
      <summary>Gets the compressed stack for the current thread.</summary>
      <returns>A <see cref="T:System.Threading.CompressedStack"></see> for the current thread.</returns>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.   -or-   The request for <see cref="T:System.Security.Permissions.StrongNameIdentityPermission"></see> failed.</exception>
    </member>
    <member name="M:System.Threading.CompressedStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object with the logical context information needed to recreate an instance of this execution context.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object to be populated with serialization information.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> structure representing the destination context of the serialization.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="M:System.Threading.CompressedStack.Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)">
      <summary>Runs a method in the specified compressed stack on the current thread.</summary>
      <param name="compressedStack">The <see cref="T:System.Threading.CompressedStack"></see> to set.</param>
      <param name="callback">A <see cref="T:System.Threading.ContextCallback"></see> that represents the method to be run in the specified security context.</param>
      <param name="state">The object to be passed to the callback method.</param>
      <exception cref="T:System.ArgumentException"><paramref name="compressedStack">compressedStack</paramref> is null.</exception>
    </member>
    <member name="T:System.Threading.ParameterizedThreadStart">
      <summary>Represents the method that executes on a <see cref="T:System.Threading.Thread"></see>.</summary>
      <param name="obj">An object that contains data for the thread procedure.</param>
    </member>
    <member name="T:System.LocalDataStoreSlot">
      <summary>Encapsulates a memory slot to store local data. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.LocalDataStoreSlot.Finalize">
      <summary>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.LocalDataStoreSlot"></see> object.</summary>
    </member>
    <member name="T:System.Threading.Thread">
      <summary>Creates and controls a thread, sets its priority, and gets its status.</summary>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Thread"></see> class, specifying a delegate that allows an object to be passed to the thread when the thread is started.</summary>
      <param name="start">A delegate that represents the methods to be invoked when this thread begins executing.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="start">start</paramref> is null.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Thread"></see> class.</summary>
      <param name="start">A <see cref="T:System.Threading.ThreadStart"></see> delegate that represents the methods to be invoked when this thread begins executing.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="start">start</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Thread"></see> class, specifying a delegate that allows an object to be passed to the thread when the thread is started and specifying the maximum stack size for the thread.</summary>
      <param name="start">A <see cref="T:System.Threading.ParameterizedThreadStart"></see> delegate that represents the methods to be invoked when this thread begins executing.</param>
      <param name="maxStackSize">The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.   Important   For partially trusted code, maxStackSize is ignored if it is greater than the default stack size. No exception is thrown.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="start">start</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxStackSize">maxStackSize</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Thread"></see> class, specifying the maximum stack size for the thread.</summary>
      <param name="start">A <see cref="T:System.Threading.ThreadStart"></see> delegate that represents the methods to be invoked when this thread begins executing.</param>
      <param name="maxStackSize">The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.   Important   For partially trusted code, maxStackSize is ignored if it is greater than the default stack size. No exception is thrown.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="start">start</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxStackSize">maxStackSize</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort">
      <summary>Raises a <see cref="T:System.Threading.ThreadAbortException"></see> in the thread on which it is invoked, to begin the process of terminating the thread. Calling this method usually terminates the thread.</summary>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.Threading.ThreadStateException">The thread that is being aborted is currently suspended.</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort(System.Object)">
      <summary>Raises a <see cref="T:System.Threading.ThreadAbortException"></see> in the thread on which it is invoked, to begin the process of terminating the thread while also providing exception information about the thread termination. Calling this method usually terminates the thread.</summary>
      <param name="stateInfo">An object that contains application-specific information, such as state, which can be used by the thread being aborted.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.Threading.ThreadStateException">The thread that is being aborted is currently suspended.</exception>
    </member>
    <member name="M:System.Threading.Thread.AllocateDataSlot">
      <summary>Allocates an unnamed data slot on all the threads. For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute"></see> attribute instead.</summary>
      <returns>The allocated named data slot on all threads.</returns>
    </member>
    <member name="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
      <summary>Allocates a named data slot on all threads. For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute"></see> attribute instead.</summary>
      <param name="name">The name of the data slot to be allocated.</param>
      <returns>The allocated named data slot on all threads.</returns>
      <exception cref="T:System.ArgumentException">A named data slot with the specified name already exists.</exception>
    </member>
    <member name="P:System.Threading.Thread.ApartmentState">
      <summary>Gets or sets the apartment state of this thread.</summary>
      <returns>One of the <see cref="T:System.Threading.ApartmentState"></see> values. The initial value is Unknown.</returns>
      <exception cref="T:System.ArgumentException">An attempt is made to set this property to a state that is not a valid apartment state (a state other than single-threaded apartment (STA) or multithreaded apartment (MTA)).</exception>
    </member>
    <member name="M:System.Threading.Thread.BeginCriticalRegion">
      <summary>Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception might jeopardize other tasks in the application domain.</summary>
    </member>
    <member name="M:System.Threading.Thread.BeginThreadAffinity">
      <summary>Notifies a host that managed code is about to execute instructions that depend on the identity of the current physical operating system thread.</summary>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="P:System.Threading.Thread.CurrentCulture">
      <summary>Gets or sets the culture for the current thread.</summary>
      <returns>An object that represents the culture for the current thread.</returns>
      <exception cref="T:System.ArgumentNullException">The property is set to null.</exception>
    </member>
    <member name="P:System.Threading.Thread.CurrentPrincipal">
      <summary>Gets or sets the thread's current principal (for role-based security).</summary>
      <returns>An <see cref="T:System.Security.Principal.IPrincipal"></see> value representing the security context.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the permission required to set the principal.</exception>
    </member>
    <member name="P:System.Threading.Thread.CurrentThread">
      <summary>Gets the currently running thread.</summary>
      <returns>A <see cref="T:System.Threading.Thread"></see> that is the representation of the currently running thread.</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentUICulture">
      <summary>Gets or sets the current culture used by the Resource Manager to look up culture-specific resources at run time.</summary>
      <returns>An object that represents the current culture.</returns>
      <exception cref="T:System.ArgumentNullException">The property is set to null.</exception>
      <exception cref="T:System.ArgumentException">The property is set to a culture name that cannot be used to locate a resource file. Resource filenames must include only letters, numbers, hyphens or underscores.</exception>
    </member>
    <member name="M:System.Threading.Thread.DisableComObjectEagerCleanup">
      <summary>Turns off automatic cleanup of runtime callable wrappers (RCW) for the current thread.</summary>
    </member>
    <member name="M:System.Threading.Thread.EndCriticalRegion">
      <summary>Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception are limited to the current task.</summary>
    </member>
    <member name="M:System.Threading.Thread.EndThreadAffinity">
      <summary>Notifies a host that managed code has finished executing instructions that depend on the identity of the current physical operating system thread.</summary>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="P:System.Threading.Thread.ExecutionContext">
      <summary>Gets an <see cref="T:System.Threading.ExecutionContext"></see> object that contains information about the various contexts of the current thread.</summary>
      <returns>An <see cref="T:System.Threading.ExecutionContext"></see> object that consolidates context information for the current thread.</returns>
    </member>
    <member name="M:System.Threading.Thread.Finalize">
      <summary>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Threading.Thread"></see> object.</summary>
    </member>
    <member name="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
      <summary>Eliminates the association between a name and a slot, for all threads in the process. For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute"></see> attribute instead.</summary>
      <param name="name">The name of the data slot to be freed.</param>
    </member>
    <member name="M:System.Threading.Thread.GetApartmentState">
      <summary>Returns an <see cref="T:System.Threading.ApartmentState"></see> value indicating the apartment state.</summary>
      <returns>One of the <see cref="T:System.Threading.ApartmentState"></see> values indicating the apartment state of the managed thread. The default is <see cref="F:System.Threading.ApartmentState.Unknown"></see>.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetCompressedStack">
      <summary>Returns a <see cref="T:System.Threading.CompressedStack"></see> object that can be used to capture the stack for the current thread.</summary>
      <returns>None.</returns>
      <exception cref="T:System.InvalidOperationException">In all cases.</exception>
    </member>
    <member name="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
      <summary>Retrieves the value from the specified slot on the current thread, within the current thread's current domain. For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute"></see> attribute instead.</summary>
      <param name="slot">The <see cref="T:System.LocalDataStoreSlot"></see> from which to get the value.</param>
      <returns>The retrieved value.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomain">
      <summary>Returns the current domain in which the current thread is running.</summary>
      <returns>An <see cref="T:System.AppDomain"></see> representing the current application domain of the running thread.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomainID">
      <summary>Returns a unique application domain identifier.</summary>
      <returns>A 32-bit signed integer uniquely identifying the application domain.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetHashCode">
      <summary>Returns a hash code for the current thread.</summary>
      <returns>An integer hash code value.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
      <summary>Looks up a named data slot. For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute"></see> attribute instead.</summary>
      <param name="name">The name of the local data slot.</param>
      <returns>A <see cref="T:System.LocalDataStoreSlot"></see> allocated for this thread.</returns>
    </member>
    <member name="M:System.Threading.Thread.Interrupt">
      <summary>Interrupts a thread that is in the WaitSleepJoin thread state.</summary>
      <exception cref="T:System.Security.SecurityException">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission"></see>.</exception>
    </member>
    <member name="P:System.Threading.Thread.IsAlive">
      <summary>Gets a value indicating the execution status of the current thread.</summary>
      <returns>true if this thread has been started and has not terminated normally or aborted; otherwise, false.</returns>
    </member>
    <member name="P:System.Threading.Thread.IsBackground">
      <summary>Gets or sets a value indicating whether or not a thread is a background thread.</summary>
      <returns>true if this thread is or is to become a background thread; otherwise, false.</returns>
      <exception cref="T:System.Threading.ThreadStateException">The thread is dead.</exception>
    </member>
    <member name="P:System.Threading.Thread.IsThreadPoolThread">
      <summary>Gets a value indicating whether or not a thread belongs to the managed thread pool.</summary>
      <returns>true if this thread belongs to the managed thread pool; otherwise, false.</returns>
    </member>
    <member name="M:System.Threading.Thread.Join">
      <summary>Blocks the calling thread until the thread represented by this instance terminates, while continuing to perform standard COM and SendMessage pumping.</summary>
      <exception cref="T:System.Threading.ThreadStateException">The caller attempted to join a thread that is in the <see cref="F:System.Threading.ThreadState.Unstarted"></see> state.</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">The thread is interrupted while waiting.</exception>
    </member>
    <member name="M:System.Threading.Thread.Join(System.Int32)">
      <summary>Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait for the thread to terminate.</param>
      <returns>true if the thread has terminated; false if the thread has not terminated after the amount of time specified by the <paramref name="millisecondsTimeout">millisecondsTimeout</paramref> parameter has elapsed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="millisecondsTimeout">millisecondsTimeout</paramref> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite"></see> in milliseconds.</exception>
      <exception cref="T:System.Threading.ThreadStateException">The thread has not been started.</exception>
    </member>
    <member name="M:System.Threading.Thread.Join(System.TimeSpan)">
      <summary>Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan"></see> set to the amount of time to wait for the thread to terminate.</param>
      <returns>true if the thread terminated; false if the thread has not terminated after the amount of time specified by the <paramref name="timeout">timeout</paramref> parameter has elapsed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout">timeout</paramref> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite"></see> in milliseconds, or is greater than <see cref="F:System.Int32.MaxValue"></see> milliseconds.</exception>
      <exception cref="T:System.Threading.ThreadStateException">The caller attempted to join a thread that is in the <see cref="F:System.Threading.ThreadState.Unstarted"></see> state.</exception>
    </member>
    <member name="P:System.Threading.Thread.ManagedThreadId">
      <summary>Gets a unique identifier for the current managed thread.</summary>
      <returns>An integer that represents a unique identifier for this managed thread.</returns>
    </member>
    <member name="M:System.Threading.Thread.MemoryBarrier">
      <summary>Synchronizes memory access as follows: The processor executing the current thread cannot reorder instructions in such a way that memory accesses prior to the call to <see cref="M:System.Threading.Thread.MemoryBarrier"></see> execute after memory accesses that follow the call to <see cref="M:System.Threading.Thread.MemoryBarrier"></see>.</summary>
    </member>
    <member name="P:System.Threading.Thread.Name">
      <summary>Gets or sets the name of the thread.</summary>
      <returns>A string containing the name of the thread, or null if no name was set.</returns>
      <exception cref="T:System.InvalidOperationException">A set operation was requested, but the Name property has already been set.</exception>
    </member>
    <member name="P:System.Threading.Thread.Priority">
      <summary>Gets or sets a value indicating the scheduling priority of a thread.</summary>
      <returns>One of the <see cref="T:System.Threading.ThreadPriority"></see> values. The default value is <see cref="F:System.Threading.ThreadPriority.Normal"></see>.</returns>
      <exception cref="T:System.Threading.ThreadStateException">The thread has reached a final state, such as <see cref="F:System.Threading.ThreadState.Aborted"></see>.</exception>
      <exception cref="T:System.ArgumentException">The value specified for a set operation is not a valid <see cref="T:System.Threading.ThreadPriority"></see> value.</exception>
    </member>
    <member name="M:System.Threading.Thread.ResetAbort">
      <summary>Cancels an <see cref="M:System.Threading.Thread.Abort(System.Object)"></see> requested for the current thread.</summary>
      <exception cref="T:System.Threading.ThreadStateException">Abort was not invoked on the current thread.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required security permission for the current thread.</exception>
    </member>
    <member name="M:System.Threading.Thread.Resume">
      <summary>Resumes a thread that has been suspended.</summary>
      <exception cref="T:System.Threading.ThreadStateException">The thread has not been started, is dead, or is not in the suspended state.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission"></see>.</exception>
    </member>
    <member name="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
      <summary>Sets the apartment state of a thread before it is started.</summary>
      <param name="state">The new apartment state.</param>
      <exception cref="T:System.ArgumentException"><paramref name="state">state</paramref> is not a valid apartment state.</exception>
      <exception cref="T:System.Threading.ThreadStateException">The thread has already been started.</exception>
      <exception cref="T:System.InvalidOperationException">The apartment state has already been initialized.</exception>
    </member>
    <member name="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)">
      <summary>Applies a captured <see cref="T:System.Threading.CompressedStack"></see> to the current thread.</summary>
      <param name="stack">The <see cref="T:System.Threading.CompressedStack"></see> object to be applied to the current thread.</param>
      <exception cref="T:System.InvalidOperationException">In all cases.</exception>
    </member>
    <member name="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
      <summary>Sets the data in the specified slot on the currently running thread, for that thread's current domain. For better performance, use fields marked with the <see cref="T:System.ThreadStaticAttribute"></see> attribute instead.</summary>
      <param name="slot">The <see cref="T:System.LocalDataStoreSlot"></see> in which to set the value.</param>
      <param name="data">The value to be set.</param>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.Int32)">
      <summary>Suspends the current thread for the specified number of milliseconds.</summary>
      <param name="millisecondsTimeout">The number of milliseconds for which the thread is suspended. If the value of the millisecondsTimeout argument is zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run. If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The time-out value is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite"></see>.</exception>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.TimeSpan)">
      <summary>Suspends the current thread for the specified amount of time.</summary>
      <param name="timeout">The amount of time for which the thread is suspended. If the value of the millisecondsTimeout argument is <see cref="F:System.TimeSpan.Zero"></see>, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run. If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout">timeout</paramref> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite"></see> in milliseconds, or is greater than <see cref="F:System.Int32.MaxValue"></see> milliseconds.</exception>
    </member>
    <member name="M:System.Threading.Thread.SpinWait(System.Int32)">
      <summary>Causes a thread to wait the number of times defined by the <paramref name="iterations">iterations</paramref> parameter.</summary>
      <param name="iterations">A 32-bit signed integer that defines how long a thread is to wait.</param>
    </member>
    <member name="M:System.Threading.Thread.Start">
      <summary>Causes the operating system to change the state of the current instance to <see cref="F:System.Threading.ThreadState.Running"></see>.</summary>
      <exception cref="T:System.Threading.ThreadStateException">The thread has already been started.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory available to start this thread.</exception>
    </member>
    <member name="M:System.Threading.Thread.Start(System.Object)">
      <summary>Causes the operating system to change the state of the current instance to <see cref="F:System.Threading.ThreadState.Running"></see>, and optionally supplies an object containing data to be used by the method the thread executes.</summary>
      <param name="parameter">An object that contains data to be used by the method the thread executes.</param>
      <exception cref="T:System.Threading.ThreadStateException">The thread has already been started.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory available to start this thread.</exception>
      <exception cref="T:System.InvalidOperationException">This thread was created using a <see cref="T:System.Threading.ThreadStart"></see> delegate instead of a <see cref="T:System.Threading.ParameterizedThreadStart"></see> delegate.</exception>
    </member>
    <member name="M:System.Threading.Thread.Suspend">
      <summary>Either suspends the thread, or if the thread is already suspended, has no effect.</summary>
      <exception cref="T:System.Threading.ThreadStateException">The thread has not been started or is dead.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission"></see>.</exception>
    </member>
    <member name="P:System.Threading.Thread.ThreadState">
      <summary>Gets a value containing the states of the current thread.</summary>
      <returns>One of the <see cref="T:System.Threading.ThreadState"></see> values indicating the state of the current thread. The initial value is Unstarted.</returns>
    </member>
    <member name="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
      <summary>Sets the apartment state of a thread before it is started.</summary>
      <param name="state">The new apartment state.</param>
      <returns>true if the apartment state is set; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="state">state</paramref> is not a valid apartment state.</exception>
      <exception cref="T:System.Threading.ThreadStateException">The thread has already been started.</exception>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.SByte@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <param name="address">The field to be read.</param>
      <returns>The latest value written to the field by any processor.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Single@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <param name="address">The field to be read.</param>
      <returns>The latest value written to the field by any processor.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <param name="address">The field to be read.</param>
      <returns>The latest value written to the field by any processor.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <param name="address">The field to be read.</param>
      <returns>The latest value written to the field by any processor.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <param name="address">The field to be read.</param>
      <returns>The latest value written to the field by any processor.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Object@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <param name="address">The field to be read.</param>
      <returns>The latest value written to the field by any processor.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <param name="address">The field to be read.</param>
      <returns>The latest value written to the field by any processor.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int64@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <param name="address">The field to be read.</param>
      <returns>The latest value written to the field by any processor.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <param name="address">The field to be read.</param>
      <returns>The latest value written to the field by any processor.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int16@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <param name="address">The field to be read.</param>
      <returns>The latest value written to the field by any processor.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Double@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <param name="address">The field to be read.</param>
      <returns>The latest value written to the field by any processor.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Byte@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <param name="address">The field to be read.</param>
      <returns>The latest value written to the field by any processor.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int32@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <param name="address">The field to be read.</param>
      <returns>The latest value written to the field by any processor.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:System.Threading.Thread.Yield">
      <summary>Causes the calling thread to yield execution to another thread that is ready to run on the current processor. The operating system selects the thread to yield to.</summary>
      <returns>true if the operating system switched execution to another thread; otherwise, false.</returns>
    </member>
    <member name="T:System.Threading.ThreadAbortException">
      <summary>The exception that is thrown when a call is made to the <see cref="M:System.Threading.Thread.Abort(System.Object)"></see> method. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Threading.ThreadAbortException.ExceptionState">
      <summary>Gets an object that contains application-specific information related to the thread abort.</summary>
      <returns>An object containing application-specific information.</returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Forms.Application.ThreadException"></see> event.</summary>
    </member>
    <member name="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadExceptionEventArgs"></see> class.</summary>
      <param name="t">The <see cref="T:System.Exception"></see> that occurred.</param>
    </member>
    <member name="P:System.Threading.ThreadExceptionEventArgs.Exception">
      <summary>Gets the <see cref="T:System.Exception"></see> that occurred.</summary>
      <returns>The <see cref="T:System.Exception"></see> that occurred.</returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Forms.Application.ThreadException"></see> event of an <see cref="T:System.Windows.Forms.Application"></see>.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Threading.ThreadExceptionEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.Threading.ThreadInterruptedException">
      <summary>The exception that is thrown when a <see cref="T:System.Threading.Thread"></see> is interrupted while it is in a waiting state.</summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadInterruptedException"></see> class with default properties.</summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadInterruptedException"></see> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadInterruptedException"></see> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadInterruptedException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Threading.ThreadPriority">
      <summary>Specifies the scheduling priority of a <see cref="T:System.Threading.Thread"></see>.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.AboveNormal">
      <summary>The <see cref="T:System.Threading.Thread"></see> can be scheduled after threads with Highest priority and before those with Normal priority.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.ThreadPriority.BelowNormal">
      <summary>The <see cref="T:System.Threading.Thread"></see> can be scheduled after threads with Normal priority and before those with Lowest priority.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.ThreadPriority.Highest">
      <summary>The <see cref="T:System.Threading.Thread"></see> can be scheduled before threads with any other priority.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.ThreadPriority.Lowest">
      <summary>The <see cref="T:System.Threading.Thread"></see> can be scheduled after threads with any other priority.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.ThreadPriority.Normal">
      <summary>The <see cref="T:System.Threading.Thread"></see> can be scheduled after threads with AboveNormal priority and before those with BelowNormal priority. Threads have Normal priority by default.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Threading.ThreadStart">
      <summary>Represents the method that executes on a <see cref="T:System.Threading.Thread"></see>.</summary>
    </member>
    <member name="T:System.Threading.ThreadStartException">
      <summary>The exception that is thrown when a failure occurs in a managed thread after the underlying operating system thread has been started, but before the thread is ready to execute user code.</summary>
    </member>
    <member name="T:System.Threading.ThreadState">
      <summary>Specifies the execution states of a <see cref="T:System.Threading.Thread"></see>.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Aborted">
      <summary>The thread state includes <see cref="F:System.Threading.ThreadState.AbortRequested"></see> and the thread is now dead, but its state has not yet changed to <see cref="F:System.Threading.ThreadState.Stopped"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.ThreadState.AbortRequested">
      <summary>The <see cref="M:System.Threading.Thread.Abort(System.Object)"></see> method has been invoked on the thread, but the thread has not yet received the pending <see cref="T:System.Threading.ThreadAbortException"></see> that will attempt to terminate it.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.ThreadState.Background">
      <summary>The thread is being executed as a background thread, as opposed to a foreground thread. This state is controlled by setting the <see cref="P:System.Threading.Thread.IsBackground"></see> property.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.ThreadState.Running">
      <summary>The thread has been started, it is not blocked, and there is no pending <see cref="T:System.Threading.ThreadAbortException"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.ThreadState.Stopped">
      <summary>The thread has stopped.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.ThreadState.StopRequested">
      <summary>The thread is being requested to stop. This is for internal use only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.ThreadState.Suspended">
      <summary>The thread has been suspended.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.ThreadState.SuspendRequested">
      <summary>The thread is being requested to suspend.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.ThreadState.Unstarted">
      <summary>The <see cref="M:System.Threading.Thread.Start"></see> method has not been invoked on the thread.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.ThreadState.WaitSleepJoin">
      <summary>The thread is blocked. This could be the result of calling <see cref="M:System.Threading.Thread.Sleep(System.Int32)"></see> or <see cref="M:System.Threading.Thread.Join"></see>, of requesting a lock — for example, by calling <see cref="M:System.Threading.Monitor.Enter(System.Object)"></see> or <see cref="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)"></see> — or of waiting on a thread synchronization object such as <see cref="T:System.Threading.ManualResetEvent"></see>.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Threading.ThreadStateException">
      <summary>The exception that is thrown when a <see cref="T:System.Threading.Thread"></see> is in an invalid <see cref="P:System.Threading.Thread.ThreadState"></see> for the method call.</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadStateException"></see> class with default properties.</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadStateException"></see> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadStateException"></see> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadStateException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
  </members>
</doc></span>