#pragma warning disable CS1591
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.ComponentModel;
namespace UIKit {

namespace Input {

/// <summary>Represents a generic event data.
/// Note: Most UIKit Events do not carry UIKit Objects, rather simple data structures. This class is intended to carry more complex event data, such as pointer events.</summary>
/// <since_tizen> 6 </since_tizen>
[UIKit.Input.EventConcrete.NativeMethods]
[UIKit.Wrapper.BindingEntity]
public interface IEvent : 
    UIKit.Wrapper.IWrapper, IDisposable
{
    /// <summary>The time at which an event was generated.
    /// If the event is generated by a server (eg. X.org or Wayland), then the time may be set by the server. Usually this time will be based on the monotonic clock, if available, but this class can not guarantee it.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <returns>Time in milliseconds when the event happened.</returns>
    double GetTimestamp();

    /// <summary>Call this when generating events manually.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <param name="ms">Time in milliseconds when the event happened.</param>
    void SetTimestamp(double ms);

    /// <summary>Input device that originated this event.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <returns>Input device origin</returns>
    UIKit.Input.Device GetDevice();

    /// <summary>Input device that originated this event.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <param name="dev">Input device origin</param>
    void SetDevice(UIKit.Input.Device dev);

    /// <summary>Extra flags for this event, may be changed by the user.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <returns>Input event flags</returns>
    UIKit.Input.Flags GetEventFlags();

    /// <summary>Extra flags for this event, may be changed by the user.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <param name="flags">Input event flags</param>
    void SetEventFlags(UIKit.Input.Flags flags);

    /// <summary><c>true</c> if <see cref="UIKit.Input.IEvent.EventFlags"/> indicates the event is on hold.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <returns><c>true</c> if the event is on hold, <c>false</c> otherwise</returns>
    bool GetProcessed();

    /// <summary><c>true</c> if <see cref="UIKit.Input.IEvent.EventFlags"/> indicates the event is on hold.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <param name="val"><c>true</c> if the event is on hold, <c>false</c> otherwise</param>
    void SetProcessed(bool val);

    /// <summary><c>true</c> if <see cref="UIKit.Input.IEvent.EventFlags"/> indicates the event happened while scrolling.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <returns><c>true</c> if the event happened while scrolling, <c>false</c> otherwise</returns>
    bool GetScrolling();

    /// <summary><c>true</c> if <see cref="UIKit.Input.IEvent.EventFlags"/> indicates the event happened while scrolling.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <param name="val"><c>true</c> if the event happened while scrolling, <c>false</c> otherwise</param>
    void SetScrolling(bool val);

    /// <summary><c>true</c> if the event was fake, not triggered by real hardware.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <returns><c>true</c> if the event was not from real hardware, <c>false</c> otherwise</returns>
    bool GetFake();

    /// <summary>Resets the internal data to 0 or default values.</summary>
    /// <since_tizen> 6 </since_tizen>
    void Reset();

    /// <summary>The time at which an event was generated.
    /// If the event is generated by a server (eg. X.org or Wayland), then the time may be set by the server. Usually this time will be based on the monotonic clock, if available, but this class can not guarantee it.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <value>Time in milliseconds when the event happened.</value>
    double Timestamp {
        get;
        set;
    }

    /// <summary>Input device that originated this event.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <value>Input device origin</value>
    UIKit.Input.Device Device {
        get;
        set;
    }

    /// <summary>Extra flags for this event, may be changed by the user.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <value>Input event flags</value>
    UIKit.Input.Flags EventFlags {
        get;
        set;
    }

    /// <summary><c>true</c> if <see cref="UIKit.Input.IEvent.EventFlags"/> indicates the event is on hold.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <value><c>true</c> if the event is on hold, <c>false</c> otherwise</value>
    bool Processed {
        get;
        set;
    }

    /// <summary><c>true</c> if <see cref="UIKit.Input.IEvent.EventFlags"/> indicates the event happened while scrolling.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <value><c>true</c> if the event happened while scrolling, <c>false</c> otherwise</value>
    bool Scrolling {
        get;
        set;
    }

    /// <summary><c>true</c> if the event was fake, not triggered by real hardware.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <value><c>true</c> if the event was not from real hardware, <c>false</c> otherwise</value>
    bool Fake {
        get;
    }

}

/// <summary>Represents a generic event data.
/// Note: Most UIKit Events do not carry UIKit Objects, rather simple data structures. This class is intended to carry more complex event data, such as pointer events.</summary>
/// <since_tizen> 6 </since_tizen>
public sealed class EventConcrete :
    UIKit.Wrapper.ObjectWrapper
    , IEvent
    
{
    /// <summary>Pointer to the native class description.</summary>
    public override System.IntPtr NativeClass
    {
        get
        {
            if (((object)this).GetType() == typeof(EventConcrete))
            {
                return GetUIKitClassStatic();
            }
            else
            {
                return UIKit.Wrapper.ClassRegister.klassFromType[((object)this).GetType()];
            }
        }
    }

    /// <summary>Subclasses should override this constructor if they are expected to be instantiated from native code.
    /// Do not call this constructor directly.</summary>
    /// <param name="ch">Tag struct storing the native handle of the object being constructed.</param>
    private EventConcrete(ConstructingHandle ch) : base(ch)
    {
    }

    [System.Runtime.InteropServices.DllImport(UIKit.Libs.Evas)] internal static extern System.IntPtr
        efl_input_event_mixin_get();

    /// <summary>Initializes a new instance of the <see cref="IEvent"/> class.
    /// Internal usage: This is used when interacting with C code and should not be used directly.</summary>
    /// <param name="wh">The native pointer to be wrapped.</param>
    private EventConcrete(UIKit.Wrapper.Globals.WrappingHandle wh) : base(wh)
    {
    }

#pragma warning disable CS0628
    /// <summary>The time at which an event was generated.
    /// If the event is generated by a server (eg. X.org or Wayland), then the time may be set by the server. Usually this time will be based on the monotonic clock, if available, but this class can not guarantee it.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <returns>Time in milliseconds when the event happened.</returns>
    public double GetTimestamp() {
        var _ret_var = UIKit.Input.EventConcrete.NativeMethods.efl_input_timestamp_get_ptr.Value.Delegate(this.NativeHandle);
        UIKit.DataTypes.Error.RaiseIfUnhandledException();
        return _ret_var;
    }

    /// <summary>Call this when generating events manually.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <param name="ms">Time in milliseconds when the event happened.</param>
    public void SetTimestamp(double ms) {
        UIKit.Input.EventConcrete.NativeMethods.efl_input_timestamp_set_ptr.Value.Delegate(this.NativeHandle,ms);
        UIKit.DataTypes.Error.RaiseIfUnhandledException();
        
    }

    /// <summary>Input device that originated this event.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <returns>Input device origin</returns>
    public UIKit.Input.Device GetDevice() {
        var _ret_var = UIKit.Input.EventConcrete.NativeMethods.efl_input_device_get_ptr.Value.Delegate(this.NativeHandle);
        UIKit.DataTypes.Error.RaiseIfUnhandledException();
        return _ret_var;
    }

    /// <summary>Input device that originated this event.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <param name="dev">Input device origin</param>
    public void SetDevice(UIKit.Input.Device dev) {
        UIKit.Input.EventConcrete.NativeMethods.efl_input_device_set_ptr.Value.Delegate(this.NativeHandle,dev);
        UIKit.DataTypes.Error.RaiseIfUnhandledException();
        
    }

    /// <summary>Extra flags for this event, may be changed by the user.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <returns>Input event flags</returns>
    public UIKit.Input.Flags GetEventFlags() {
        var _ret_var = UIKit.Input.EventConcrete.NativeMethods.efl_input_event_flags_get_ptr.Value.Delegate(this.NativeHandle);
        UIKit.DataTypes.Error.RaiseIfUnhandledException();
        return _ret_var;
    }

    /// <summary>Extra flags for this event, may be changed by the user.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <param name="flags">Input event flags</param>
    public void SetEventFlags(UIKit.Input.Flags flags) {
        UIKit.Input.EventConcrete.NativeMethods.efl_input_event_flags_set_ptr.Value.Delegate(this.NativeHandle,flags);
        UIKit.DataTypes.Error.RaiseIfUnhandledException();
        
    }

    /// <summary><c>true</c> if <see cref="UIKit.Input.IEvent.EventFlags"/> indicates the event is on hold.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <returns><c>true</c> if the event is on hold, <c>false</c> otherwise</returns>
    public bool GetProcessed() {
        var _ret_var = UIKit.Input.EventConcrete.NativeMethods.efl_input_processed_get_ptr.Value.Delegate(this.NativeHandle);
        UIKit.DataTypes.Error.RaiseIfUnhandledException();
        return _ret_var;
    }

    /// <summary><c>true</c> if <see cref="UIKit.Input.IEvent.EventFlags"/> indicates the event is on hold.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <param name="val"><c>true</c> if the event is on hold, <c>false</c> otherwise</param>
    public void SetProcessed(bool val) {
        UIKit.Input.EventConcrete.NativeMethods.efl_input_processed_set_ptr.Value.Delegate(this.NativeHandle,val);
        UIKit.DataTypes.Error.RaiseIfUnhandledException();
        
    }

    /// <summary><c>true</c> if <see cref="UIKit.Input.IEvent.EventFlags"/> indicates the event happened while scrolling.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <returns><c>true</c> if the event happened while scrolling, <c>false</c> otherwise</returns>
    public bool GetScrolling() {
        var _ret_var = UIKit.Input.EventConcrete.NativeMethods.efl_input_scrolling_get_ptr.Value.Delegate(this.NativeHandle);
        UIKit.DataTypes.Error.RaiseIfUnhandledException();
        return _ret_var;
    }

    /// <summary><c>true</c> if <see cref="UIKit.Input.IEvent.EventFlags"/> indicates the event happened while scrolling.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <param name="val"><c>true</c> if the event happened while scrolling, <c>false</c> otherwise</param>
    public void SetScrolling(bool val) {
        UIKit.Input.EventConcrete.NativeMethods.efl_input_scrolling_set_ptr.Value.Delegate(this.NativeHandle,val);
        UIKit.DataTypes.Error.RaiseIfUnhandledException();
        
    }

    /// <summary><c>true</c> if the event was fake, not triggered by real hardware.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <returns><c>true</c> if the event was not from real hardware, <c>false</c> otherwise</returns>
    public bool GetFake() {
        var _ret_var = UIKit.Input.EventConcrete.NativeMethods.efl_input_fake_get_ptr.Value.Delegate(this.NativeHandle);
        UIKit.DataTypes.Error.RaiseIfUnhandledException();
        return _ret_var;
    }

    /// <summary>Resets the internal data to 0 or default values.</summary>
    /// <since_tizen> 6 </since_tizen>
    public void Reset() {
        UIKit.Input.EventConcrete.NativeMethods.efl_input_reset_ptr.Value.Delegate(this.NativeHandle);
        UIKit.DataTypes.Error.RaiseIfUnhandledException();
        
    }

    /// <summary>The time at which an event was generated.
    /// If the event is generated by a server (eg. X.org or Wayland), then the time may be set by the server. Usually this time will be based on the monotonic clock, if available, but this class can not guarantee it.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <value>Time in milliseconds when the event happened.</value>
    public double Timestamp {
        get { return GetTimestamp(); }
        set { SetTimestamp(value); }
    }

    /// <summary>Input device that originated this event.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <value>Input device origin</value>
    public UIKit.Input.Device Device {
        get { return GetDevice(); }
        set { SetDevice(value); }
    }

    /// <summary>Extra flags for this event, may be changed by the user.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <value>Input event flags</value>
    public UIKit.Input.Flags EventFlags {
        get { return GetEventFlags(); }
        set { SetEventFlags(value); }
    }

    /// <summary><c>true</c> if <see cref="UIKit.Input.IEvent.EventFlags"/> indicates the event is on hold.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <value><c>true</c> if the event is on hold, <c>false</c> otherwise</value>
    public bool Processed {
        get { return GetProcessed(); }
        set { SetProcessed(value); }
    }

    /// <summary><c>true</c> if <see cref="UIKit.Input.IEvent.EventFlags"/> indicates the event happened while scrolling.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <value><c>true</c> if the event happened while scrolling, <c>false</c> otherwise</value>
    public bool Scrolling {
        get { return GetScrolling(); }
        set { SetScrolling(value); }
    }

    /// <summary><c>true</c> if the event was fake, not triggered by real hardware.</summary>
    /// <since_tizen> 6 </since_tizen>
    /// <value><c>true</c> if the event was not from real hardware, <c>false</c> otherwise</value>
    public bool Fake {
        get { return GetFake(); }
    }

#pragma warning restore CS0628
    private static IntPtr GetUIKitClassStatic()
    {
        return UIKit.Input.EventConcrete.efl_input_event_mixin_get();
    }

    /// <summary>Wrapper for native methods and virtual method delegates.
    /// For internal use by generated code only.</summary>
    public new class NativeMethods : UIKit.Wrapper.ObjectWrapper.NativeMethods
    {
        private static UIKit.Wrapper.NativeModule Module = new UIKit.Wrapper.NativeModule(UIKit.Libs.Evas);

        /// <summary>Gets the list of Eo operations to override.</summary>
        /// <returns>The list of Eo operations to be overload.</returns>
        public override System.Collections.Generic.List<UIKit_Op_Description> GetEoOps(System.Type type, bool includeInherited)
        {
            var descs = new System.Collections.Generic.List<UIKit_Op_Description>();
            var methods = UIKit.Wrapper.Globals.GetUserMethods(type);

            if (efl_input_timestamp_get_static_delegate == null)
            {
                efl_input_timestamp_get_static_delegate = new efl_input_timestamp_get_delegate(timestamp_get);
            }

            if (methods.FirstOrDefault(m => m.Name == "GetTimestamp") != null)
            {
                descs.Add(new UIKit_Op_Description() {api_func = UIKit.Wrapper.FunctionInterop.LoadFunctionPointer(Module.Module, "efl_input_timestamp_get"), func = Marshal.GetFunctionPointerForDelegate(efl_input_timestamp_get_static_delegate) });
            }

            if (efl_input_timestamp_set_static_delegate == null)
            {
                efl_input_timestamp_set_static_delegate = new efl_input_timestamp_set_delegate(timestamp_set);
            }

            if (methods.FirstOrDefault(m => m.Name == "SetTimestamp") != null)
            {
                descs.Add(new UIKit_Op_Description() {api_func = UIKit.Wrapper.FunctionInterop.LoadFunctionPointer(Module.Module, "efl_input_timestamp_set"), func = Marshal.GetFunctionPointerForDelegate(efl_input_timestamp_set_static_delegate) });
            }

            if (efl_input_device_get_static_delegate == null)
            {
                efl_input_device_get_static_delegate = new efl_input_device_get_delegate(device_get);
            }

            if (methods.FirstOrDefault(m => m.Name == "GetDevice") != null)
            {
                descs.Add(new UIKit_Op_Description() {api_func = UIKit.Wrapper.FunctionInterop.LoadFunctionPointer(Module.Module, "efl_input_device_get"), func = Marshal.GetFunctionPointerForDelegate(efl_input_device_get_static_delegate) });
            }

            if (efl_input_device_set_static_delegate == null)
            {
                efl_input_device_set_static_delegate = new efl_input_device_set_delegate(device_set);
            }

            if (methods.FirstOrDefault(m => m.Name == "SetDevice") != null)
            {
                descs.Add(new UIKit_Op_Description() {api_func = UIKit.Wrapper.FunctionInterop.LoadFunctionPointer(Module.Module, "efl_input_device_set"), func = Marshal.GetFunctionPointerForDelegate(efl_input_device_set_static_delegate) });
            }

            if (efl_input_event_flags_get_static_delegate == null)
            {
                efl_input_event_flags_get_static_delegate = new efl_input_event_flags_get_delegate(event_flags_get);
            }

            if (methods.FirstOrDefault(m => m.Name == "GetEventFlags") != null)
            {
                descs.Add(new UIKit_Op_Description() {api_func = UIKit.Wrapper.FunctionInterop.LoadFunctionPointer(Module.Module, "efl_input_event_flags_get"), func = Marshal.GetFunctionPointerForDelegate(efl_input_event_flags_get_static_delegate) });
            }

            if (efl_input_event_flags_set_static_delegate == null)
            {
                efl_input_event_flags_set_static_delegate = new efl_input_event_flags_set_delegate(event_flags_set);
            }

            if (methods.FirstOrDefault(m => m.Name == "SetEventFlags") != null)
            {
                descs.Add(new UIKit_Op_Description() {api_func = UIKit.Wrapper.FunctionInterop.LoadFunctionPointer(Module.Module, "efl_input_event_flags_set"), func = Marshal.GetFunctionPointerForDelegate(efl_input_event_flags_set_static_delegate) });
            }

            if (efl_input_processed_get_static_delegate == null)
            {
                efl_input_processed_get_static_delegate = new efl_input_processed_get_delegate(processed_get);
            }

            if (methods.FirstOrDefault(m => m.Name == "GetProcessed") != null)
            {
                descs.Add(new UIKit_Op_Description() {api_func = UIKit.Wrapper.FunctionInterop.LoadFunctionPointer(Module.Module, "efl_input_processed_get"), func = Marshal.GetFunctionPointerForDelegate(efl_input_processed_get_static_delegate) });
            }

            if (efl_input_processed_set_static_delegate == null)
            {
                efl_input_processed_set_static_delegate = new efl_input_processed_set_delegate(processed_set);
            }

            if (methods.FirstOrDefault(m => m.Name == "SetProcessed") != null)
            {
                descs.Add(new UIKit_Op_Description() {api_func = UIKit.Wrapper.FunctionInterop.LoadFunctionPointer(Module.Module, "efl_input_processed_set"), func = Marshal.GetFunctionPointerForDelegate(efl_input_processed_set_static_delegate) });
            }

            if (efl_input_scrolling_get_static_delegate == null)
            {
                efl_input_scrolling_get_static_delegate = new efl_input_scrolling_get_delegate(scrolling_get);
            }

            if (methods.FirstOrDefault(m => m.Name == "GetScrolling") != null)
            {
                descs.Add(new UIKit_Op_Description() {api_func = UIKit.Wrapper.FunctionInterop.LoadFunctionPointer(Module.Module, "efl_input_scrolling_get"), func = Marshal.GetFunctionPointerForDelegate(efl_input_scrolling_get_static_delegate) });
            }

            if (efl_input_scrolling_set_static_delegate == null)
            {
                efl_input_scrolling_set_static_delegate = new efl_input_scrolling_set_delegate(scrolling_set);
            }

            if (methods.FirstOrDefault(m => m.Name == "SetScrolling") != null)
            {
                descs.Add(new UIKit_Op_Description() {api_func = UIKit.Wrapper.FunctionInterop.LoadFunctionPointer(Module.Module, "efl_input_scrolling_set"), func = Marshal.GetFunctionPointerForDelegate(efl_input_scrolling_set_static_delegate) });
            }

            if (efl_input_fake_get_static_delegate == null)
            {
                efl_input_fake_get_static_delegate = new efl_input_fake_get_delegate(fake_get);
            }

            if (methods.FirstOrDefault(m => m.Name == "GetFake") != null)
            {
                descs.Add(new UIKit_Op_Description() {api_func = UIKit.Wrapper.FunctionInterop.LoadFunctionPointer(Module.Module, "efl_input_fake_get"), func = Marshal.GetFunctionPointerForDelegate(efl_input_fake_get_static_delegate) });
            }

            if (efl_input_reset_static_delegate == null)
            {
                efl_input_reset_static_delegate = new efl_input_reset_delegate(reset);
            }

            if (methods.FirstOrDefault(m => m.Name == "Reset") != null)
            {
                descs.Add(new UIKit_Op_Description() {api_func = UIKit.Wrapper.FunctionInterop.LoadFunctionPointer(Module.Module, "efl_input_reset"), func = Marshal.GetFunctionPointerForDelegate(efl_input_reset_static_delegate) });
            }

            if (includeInherited)
            {
                var all_interfaces = type.GetInterfaces();
                foreach (var iface in all_interfaces)
                {
                    var moredescs = ((UIKit.Wrapper.NativeClass)iface.GetCustomAttributes(false)?.FirstOrDefault(attr => attr is UIKit.Wrapper.NativeClass))?.GetEoOps(type, false);
                    if (moredescs != null)
                        descs.AddRange(moredescs);
                }
            }
            return descs;
        }

        /// <summary>Returns the Eo class for the native methods of this class.</summary>
        /// <returns>The native class pointer.</returns>
        public override IntPtr GetUIKitClass()
        {
            return UIKit.Input.EventConcrete.efl_input_event_mixin_get();
        }

        #pragma warning disable CA1707, CS1591, SA1300, SA1600

        
        private delegate double efl_input_timestamp_get_delegate(System.IntPtr obj, System.IntPtr pd);

        
        public delegate double efl_input_timestamp_get_api_delegate(System.IntPtr obj);

        public static UIKit.Wrapper.FunctionWrapper<efl_input_timestamp_get_api_delegate> efl_input_timestamp_get_ptr = new UIKit.Wrapper.FunctionWrapper<efl_input_timestamp_get_api_delegate>(Module, "efl_input_timestamp_get");

        private static double timestamp_get(System.IntPtr obj, System.IntPtr pd)
        {
            UIKit.DataTypes.Log.Debug("function efl_input_timestamp_get was called");
            var ws = UIKit.Wrapper.Globals.GetWrapperSupervisor(obj);
            if (ws != null)
            {
                double _ret_var = default(double);
                try
                {
                    _ret_var = ((IEvent)ws.Target).GetTimestamp();
                }
                catch (Exception e)
                {
                    UIKit.DataTypes.Log.Warning($"Callback error: {e.ToString()}");
                    UIKit.DataTypes.Error.Set(UIKit.DataTypes.Error.UNHANDLED_EXCEPTION);
                }

                return _ret_var;
            }
            else
            {
                return efl_input_timestamp_get_ptr.Value.Delegate(UIKit.Wrapper.Globals.efl_super(obj, UIKit.Wrapper.Globals.efl_class_get(obj)));
            }
        }

        private static efl_input_timestamp_get_delegate efl_input_timestamp_get_static_delegate;

        
        private delegate void efl_input_timestamp_set_delegate(System.IntPtr obj, System.IntPtr pd,  double ms);

        
        public delegate void efl_input_timestamp_set_api_delegate(System.IntPtr obj,  double ms);

        public static UIKit.Wrapper.FunctionWrapper<efl_input_timestamp_set_api_delegate> efl_input_timestamp_set_ptr = new UIKit.Wrapper.FunctionWrapper<efl_input_timestamp_set_api_delegate>(Module, "efl_input_timestamp_set");

        private static void timestamp_set(System.IntPtr obj, System.IntPtr pd, double ms)
        {
            UIKit.DataTypes.Log.Debug("function efl_input_timestamp_set was called");
            var ws = UIKit.Wrapper.Globals.GetWrapperSupervisor(obj);
            if (ws != null)
            {
                
                try
                {
                    ((IEvent)ws.Target).SetTimestamp(ms);
                }
                catch (Exception e)
                {
                    UIKit.DataTypes.Log.Warning($"Callback error: {e.ToString()}");
                    UIKit.DataTypes.Error.Set(UIKit.DataTypes.Error.UNHANDLED_EXCEPTION);
                }

                
            }
            else
            {
                efl_input_timestamp_set_ptr.Value.Delegate(UIKit.Wrapper.Globals.efl_super(obj, UIKit.Wrapper.Globals.efl_class_get(obj)), ms);
            }
        }

        private static efl_input_timestamp_set_delegate efl_input_timestamp_set_static_delegate;

        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(UIKit.Wrapper.MarshalEo<UIKit.Wrapper.NonOwnTag>))]
        private delegate UIKit.Input.Device efl_input_device_get_delegate(System.IntPtr obj, System.IntPtr pd);

        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(UIKit.Wrapper.MarshalEo<UIKit.Wrapper.NonOwnTag>))]
        public delegate UIKit.Input.Device efl_input_device_get_api_delegate(System.IntPtr obj);

        public static UIKit.Wrapper.FunctionWrapper<efl_input_device_get_api_delegate> efl_input_device_get_ptr = new UIKit.Wrapper.FunctionWrapper<efl_input_device_get_api_delegate>(Module, "efl_input_device_get");

        private static UIKit.Input.Device device_get(System.IntPtr obj, System.IntPtr pd)
        {
            UIKit.DataTypes.Log.Debug("function efl_input_device_get was called");
            var ws = UIKit.Wrapper.Globals.GetWrapperSupervisor(obj);
            if (ws != null)
            {
                UIKit.Input.Device _ret_var = default(UIKit.Input.Device);
                try
                {
                    _ret_var = ((IEvent)ws.Target).GetDevice();
                }
                catch (Exception e)
                {
                    UIKit.DataTypes.Log.Warning($"Callback error: {e.ToString()}");
                    UIKit.DataTypes.Error.Set(UIKit.DataTypes.Error.UNHANDLED_EXCEPTION);
                }

                return _ret_var;
            }
            else
            {
                return efl_input_device_get_ptr.Value.Delegate(UIKit.Wrapper.Globals.efl_super(obj, UIKit.Wrapper.Globals.efl_class_get(obj)));
            }
        }

        private static efl_input_device_get_delegate efl_input_device_get_static_delegate;

        
        private delegate void efl_input_device_set_delegate(System.IntPtr obj, System.IntPtr pd, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(UIKit.Wrapper.MarshalEo<UIKit.Wrapper.NonOwnTag>))] UIKit.Input.Device dev);

        
        public delegate void efl_input_device_set_api_delegate(System.IntPtr obj, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(UIKit.Wrapper.MarshalEo<UIKit.Wrapper.NonOwnTag>))] UIKit.Input.Device dev);

        public static UIKit.Wrapper.FunctionWrapper<efl_input_device_set_api_delegate> efl_input_device_set_ptr = new UIKit.Wrapper.FunctionWrapper<efl_input_device_set_api_delegate>(Module, "efl_input_device_set");

        private static void device_set(System.IntPtr obj, System.IntPtr pd, UIKit.Input.Device dev)
        {
            UIKit.DataTypes.Log.Debug("function efl_input_device_set was called");
            var ws = UIKit.Wrapper.Globals.GetWrapperSupervisor(obj);
            if (ws != null)
            {
                
                try
                {
                    ((IEvent)ws.Target).SetDevice(dev);
                }
                catch (Exception e)
                {
                    UIKit.DataTypes.Log.Warning($"Callback error: {e.ToString()}");
                    UIKit.DataTypes.Error.Set(UIKit.DataTypes.Error.UNHANDLED_EXCEPTION);
                }

                
            }
            else
            {
                efl_input_device_set_ptr.Value.Delegate(UIKit.Wrapper.Globals.efl_super(obj, UIKit.Wrapper.Globals.efl_class_get(obj)), dev);
            }
        }

        private static efl_input_device_set_delegate efl_input_device_set_static_delegate;

        
        private delegate UIKit.Input.Flags efl_input_event_flags_get_delegate(System.IntPtr obj, System.IntPtr pd);

        
        public delegate UIKit.Input.Flags efl_input_event_flags_get_api_delegate(System.IntPtr obj);

        public static UIKit.Wrapper.FunctionWrapper<efl_input_event_flags_get_api_delegate> efl_input_event_flags_get_ptr = new UIKit.Wrapper.FunctionWrapper<efl_input_event_flags_get_api_delegate>(Module, "efl_input_event_flags_get");

        private static UIKit.Input.Flags event_flags_get(System.IntPtr obj, System.IntPtr pd)
        {
            UIKit.DataTypes.Log.Debug("function efl_input_event_flags_get was called");
            var ws = UIKit.Wrapper.Globals.GetWrapperSupervisor(obj);
            if (ws != null)
            {
                UIKit.Input.Flags _ret_var = default(UIKit.Input.Flags);
                try
                {
                    _ret_var = ((IEvent)ws.Target).GetEventFlags();
                }
                catch (Exception e)
                {
                    UIKit.DataTypes.Log.Warning($"Callback error: {e.ToString()}");
                    UIKit.DataTypes.Error.Set(UIKit.DataTypes.Error.UNHANDLED_EXCEPTION);
                }

                return _ret_var;
            }
            else
            {
                return efl_input_event_flags_get_ptr.Value.Delegate(UIKit.Wrapper.Globals.efl_super(obj, UIKit.Wrapper.Globals.efl_class_get(obj)));
            }
        }

        private static efl_input_event_flags_get_delegate efl_input_event_flags_get_static_delegate;

        
        private delegate void efl_input_event_flags_set_delegate(System.IntPtr obj, System.IntPtr pd,  UIKit.Input.Flags flags);

        
        public delegate void efl_input_event_flags_set_api_delegate(System.IntPtr obj,  UIKit.Input.Flags flags);

        public static UIKit.Wrapper.FunctionWrapper<efl_input_event_flags_set_api_delegate> efl_input_event_flags_set_ptr = new UIKit.Wrapper.FunctionWrapper<efl_input_event_flags_set_api_delegate>(Module, "efl_input_event_flags_set");

        private static void event_flags_set(System.IntPtr obj, System.IntPtr pd, UIKit.Input.Flags flags)
        {
            UIKit.DataTypes.Log.Debug("function efl_input_event_flags_set was called");
            var ws = UIKit.Wrapper.Globals.GetWrapperSupervisor(obj);
            if (ws != null)
            {
                
                try
                {
                    ((IEvent)ws.Target).SetEventFlags(flags);
                }
                catch (Exception e)
                {
                    UIKit.DataTypes.Log.Warning($"Callback error: {e.ToString()}");
                    UIKit.DataTypes.Error.Set(UIKit.DataTypes.Error.UNHANDLED_EXCEPTION);
                }

                
            }
            else
            {
                efl_input_event_flags_set_ptr.Value.Delegate(UIKit.Wrapper.Globals.efl_super(obj, UIKit.Wrapper.Globals.efl_class_get(obj)), flags);
            }
        }

        private static efl_input_event_flags_set_delegate efl_input_event_flags_set_static_delegate;

        [return: MarshalAs(UnmanagedType.U1)]
        private delegate bool efl_input_processed_get_delegate(System.IntPtr obj, System.IntPtr pd);

        [return: MarshalAs(UnmanagedType.U1)]
        public delegate bool efl_input_processed_get_api_delegate(System.IntPtr obj);

        public static UIKit.Wrapper.FunctionWrapper<efl_input_processed_get_api_delegate> efl_input_processed_get_ptr = new UIKit.Wrapper.FunctionWrapper<efl_input_processed_get_api_delegate>(Module, "efl_input_processed_get");

        private static bool processed_get(System.IntPtr obj, System.IntPtr pd)
        {
            UIKit.DataTypes.Log.Debug("function efl_input_processed_get was called");
            var ws = UIKit.Wrapper.Globals.GetWrapperSupervisor(obj);
            if (ws != null)
            {
                bool _ret_var = default(bool);
                try
                {
                    _ret_var = ((IEvent)ws.Target).GetProcessed();
                }
                catch (Exception e)
                {
                    UIKit.DataTypes.Log.Warning($"Callback error: {e.ToString()}");
                    UIKit.DataTypes.Error.Set(UIKit.DataTypes.Error.UNHANDLED_EXCEPTION);
                }

                return _ret_var;
            }
            else
            {
                return efl_input_processed_get_ptr.Value.Delegate(UIKit.Wrapper.Globals.efl_super(obj, UIKit.Wrapper.Globals.efl_class_get(obj)));
            }
        }

        private static efl_input_processed_get_delegate efl_input_processed_get_static_delegate;

        
        private delegate void efl_input_processed_set_delegate(System.IntPtr obj, System.IntPtr pd, [MarshalAs(UnmanagedType.U1)] bool val);

        
        public delegate void efl_input_processed_set_api_delegate(System.IntPtr obj, [MarshalAs(UnmanagedType.U1)] bool val);

        public static UIKit.Wrapper.FunctionWrapper<efl_input_processed_set_api_delegate> efl_input_processed_set_ptr = new UIKit.Wrapper.FunctionWrapper<efl_input_processed_set_api_delegate>(Module, "efl_input_processed_set");

        private static void processed_set(System.IntPtr obj, System.IntPtr pd, bool val)
        {
            UIKit.DataTypes.Log.Debug("function efl_input_processed_set was called");
            var ws = UIKit.Wrapper.Globals.GetWrapperSupervisor(obj);
            if (ws != null)
            {
                
                try
                {
                    ((IEvent)ws.Target).SetProcessed(val);
                }
                catch (Exception e)
                {
                    UIKit.DataTypes.Log.Warning($"Callback error: {e.ToString()}");
                    UIKit.DataTypes.Error.Set(UIKit.DataTypes.Error.UNHANDLED_EXCEPTION);
                }

                
            }
            else
            {
                efl_input_processed_set_ptr.Value.Delegate(UIKit.Wrapper.Globals.efl_super(obj, UIKit.Wrapper.Globals.efl_class_get(obj)), val);
            }
        }

        private static efl_input_processed_set_delegate efl_input_processed_set_static_delegate;

        [return: MarshalAs(UnmanagedType.U1)]
        private delegate bool efl_input_scrolling_get_delegate(System.IntPtr obj, System.IntPtr pd);

        [return: MarshalAs(UnmanagedType.U1)]
        public delegate bool efl_input_scrolling_get_api_delegate(System.IntPtr obj);

        public static UIKit.Wrapper.FunctionWrapper<efl_input_scrolling_get_api_delegate> efl_input_scrolling_get_ptr = new UIKit.Wrapper.FunctionWrapper<efl_input_scrolling_get_api_delegate>(Module, "efl_input_scrolling_get");

        private static bool scrolling_get(System.IntPtr obj, System.IntPtr pd)
        {
            UIKit.DataTypes.Log.Debug("function efl_input_scrolling_get was called");
            var ws = UIKit.Wrapper.Globals.GetWrapperSupervisor(obj);
            if (ws != null)
            {
                bool _ret_var = default(bool);
                try
                {
                    _ret_var = ((IEvent)ws.Target).GetScrolling();
                }
                catch (Exception e)
                {
                    UIKit.DataTypes.Log.Warning($"Callback error: {e.ToString()}");
                    UIKit.DataTypes.Error.Set(UIKit.DataTypes.Error.UNHANDLED_EXCEPTION);
                }

                return _ret_var;
            }
            else
            {
                return efl_input_scrolling_get_ptr.Value.Delegate(UIKit.Wrapper.Globals.efl_super(obj, UIKit.Wrapper.Globals.efl_class_get(obj)));
            }
        }

        private static efl_input_scrolling_get_delegate efl_input_scrolling_get_static_delegate;

        
        private delegate void efl_input_scrolling_set_delegate(System.IntPtr obj, System.IntPtr pd, [MarshalAs(UnmanagedType.U1)] bool val);

        
        public delegate void efl_input_scrolling_set_api_delegate(System.IntPtr obj, [MarshalAs(UnmanagedType.U1)] bool val);

        public static UIKit.Wrapper.FunctionWrapper<efl_input_scrolling_set_api_delegate> efl_input_scrolling_set_ptr = new UIKit.Wrapper.FunctionWrapper<efl_input_scrolling_set_api_delegate>(Module, "efl_input_scrolling_set");

        private static void scrolling_set(System.IntPtr obj, System.IntPtr pd, bool val)
        {
            UIKit.DataTypes.Log.Debug("function efl_input_scrolling_set was called");
            var ws = UIKit.Wrapper.Globals.GetWrapperSupervisor(obj);
            if (ws != null)
            {
                
                try
                {
                    ((IEvent)ws.Target).SetScrolling(val);
                }
                catch (Exception e)
                {
                    UIKit.DataTypes.Log.Warning($"Callback error: {e.ToString()}");
                    UIKit.DataTypes.Error.Set(UIKit.DataTypes.Error.UNHANDLED_EXCEPTION);
                }

                
            }
            else
            {
                efl_input_scrolling_set_ptr.Value.Delegate(UIKit.Wrapper.Globals.efl_super(obj, UIKit.Wrapper.Globals.efl_class_get(obj)), val);
            }
        }

        private static efl_input_scrolling_set_delegate efl_input_scrolling_set_static_delegate;

        [return: MarshalAs(UnmanagedType.U1)]
        private delegate bool efl_input_fake_get_delegate(System.IntPtr obj, System.IntPtr pd);

        [return: MarshalAs(UnmanagedType.U1)]
        public delegate bool efl_input_fake_get_api_delegate(System.IntPtr obj);

        public static UIKit.Wrapper.FunctionWrapper<efl_input_fake_get_api_delegate> efl_input_fake_get_ptr = new UIKit.Wrapper.FunctionWrapper<efl_input_fake_get_api_delegate>(Module, "efl_input_fake_get");

        private static bool fake_get(System.IntPtr obj, System.IntPtr pd)
        {
            UIKit.DataTypes.Log.Debug("function efl_input_fake_get was called");
            var ws = UIKit.Wrapper.Globals.GetWrapperSupervisor(obj);
            if (ws != null)
            {
                bool _ret_var = default(bool);
                try
                {
                    _ret_var = ((IEvent)ws.Target).GetFake();
                }
                catch (Exception e)
                {
                    UIKit.DataTypes.Log.Warning($"Callback error: {e.ToString()}");
                    UIKit.DataTypes.Error.Set(UIKit.DataTypes.Error.UNHANDLED_EXCEPTION);
                }

                return _ret_var;
            }
            else
            {
                return efl_input_fake_get_ptr.Value.Delegate(UIKit.Wrapper.Globals.efl_super(obj, UIKit.Wrapper.Globals.efl_class_get(obj)));
            }
        }

        private static efl_input_fake_get_delegate efl_input_fake_get_static_delegate;

        
        private delegate void efl_input_reset_delegate(System.IntPtr obj, System.IntPtr pd);

        
        public delegate void efl_input_reset_api_delegate(System.IntPtr obj);

        public static UIKit.Wrapper.FunctionWrapper<efl_input_reset_api_delegate> efl_input_reset_ptr = new UIKit.Wrapper.FunctionWrapper<efl_input_reset_api_delegate>(Module, "efl_input_reset");

        private static void reset(System.IntPtr obj, System.IntPtr pd)
        {
            UIKit.DataTypes.Log.Debug("function efl_input_reset was called");
            var ws = UIKit.Wrapper.Globals.GetWrapperSupervisor(obj);
            if (ws != null)
            {
                
                try
                {
                    ((IEvent)ws.Target).Reset();
                }
                catch (Exception e)
                {
                    UIKit.DataTypes.Log.Warning($"Callback error: {e.ToString()}");
                    UIKit.DataTypes.Error.Set(UIKit.DataTypes.Error.UNHANDLED_EXCEPTION);
                }

                
            }
            else
            {
                efl_input_reset_ptr.Value.Delegate(UIKit.Wrapper.Globals.efl_super(obj, UIKit.Wrapper.Globals.efl_class_get(obj)));
            }
        }

        private static efl_input_reset_delegate efl_input_reset_static_delegate;

        #pragma warning restore CA1707, CS1591, SA1300, SA1600

}
}
}
}

#if EFL_BETA
#pragma warning disable CS1591
public static class UIKit_InputEventConcrete_ExtensionMethods {
}
#pragma warning restore CS1591
#endif
