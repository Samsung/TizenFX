/*
 * Copyright (c) 2019 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;

namespace Tizen.Applications.NotificationEx
{
    public partial class NotificationEx
    {
        /// <summary>
        /// The EventInfo class.
        /// This class is generated by framework and contains detail information about an event.
        /// </summary>
        /// <since_tizen> 7 </since_tizen>
        public class EventInfo
        {
            private const string LogTag = "Tizen.Applications.NotificationEx";
            internal IntPtr NativeHandle { get; set; }

            internal EventInfo(IntPtr ptr)
            {
                IntPtr cloned;
                ErrorCode err = Interop.NotificationEx.EventInfoClone(ptr, out cloned);
                if (err != ErrorCode.None)
                    ErrorFactory.ThrowException(err);
                NativeHandle = cloned;
            }

            /// <summary>
            /// Destructor of the EventInfo class.
            /// </summary>
            /// <since_tizen> 7 </since_tizen>
            ~EventInfo()
            {
                ErrorCode err = Interop.NotificationEx.EventInfoDestroy(NativeHandle);
                if (err != ErrorCode.None)
                    Log.Error(LogTag, "Fail to destroy event info : " + err);
            }

            /// <summary>
            /// An event type
            /// </summary>
            /// <since_tizen> 7 </since_tizen>
            public EventInfoType Type
            {
                get
                {
                    int nativeType;
                    Interop.NotificationEx.EventInfoGetEventType(NativeHandle, out nativeType);
                    return (EventInfoType)nativeType;
                }
            }

            /// <summary>
            /// Owner of the event.
            /// </summary>
            /// <since_tizen> 7 </since_tizen>
            public string Owner
            {
                get
                {
                    string owner = "";
                    Interop.NotificationEx.EventInfoGetOwner(NativeHandle, out owner);
                    return owner;
                }
            }

            /// <summary>
            /// Channel of the event.
            /// </summary>
            /// <since_tizen> 7 </since_tizen>
            public string Channel
            {
                get
                {
                    string channel = "";
                    Interop.NotificationEx.EventInfoGetChannel(NativeHandle, out channel);
                    return channel;
                }
            }

            /// <summary>
            /// Event related notification item ID.
            /// </summary>
            /// <since_tizen> 7 </since_tizen>
            public string ItemId
            {
                get
                {
                    string itemId = "";
                    Interop.NotificationEx.EventInfoGetItemId(NativeHandle, out itemId);
                    return itemId;
                }
            }

            /// <summary>
            /// Event related request ID.
            /// </summary>
            /// <since_tizen> 7 </since_tizen>
            public int RequestId
            {
                get
                {
                    int requestId;
                    Interop.NotificationEx.EventInfoGetRequestId(NativeHandle, out requestId);
                    return requestId;
                }
            }
        }
    }
}
