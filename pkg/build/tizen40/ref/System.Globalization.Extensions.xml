<?xml version="1.0" encoding="utf-8"?><span>
<doc>
  <assembly>
    <name>System.Globalization.Extensions</name>
  </assembly>
  <members>
    <member name="T:System.Globalization.GlobalizationExtensions">
      
    </member>
    <member name="M:System.Globalization.GlobalizationExtensions.GetStringComparer(System.Globalization.CompareInfo,System.Globalization.CompareOptions)">
      <param name="compareInfo"></param>
      <param name="options"></param>
      <returns></returns>
    </member>
    <member name="T:System.Globalization.IdnMapping">
      <summary>Supports the use of non-ASCII characters for Internet domain names. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Globalization.IdnMapping.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.IdnMapping"></see> class.</summary>
    </member>
    <member name="P:System.Globalization.IdnMapping.AllowUnassigned">
      <summary>Gets or sets a value that indicates whether unassigned Unicode code points are used in operations performed by members of the current <see cref="T:System.Globalization.IdnMapping"></see> object.</summary>
      <returns>true if unassigned code points are used in operations; otherwise, false.</returns>
    </member>
    <member name="M:System.Globalization.IdnMapping.Equals(System.Object)">
      <summary>Indicates whether a specified object and the current <see cref="T:System.Globalization.IdnMapping"></see> object are equal.</summary>
      <param name="obj">The object to compare to the current object.</param>
      <returns>true if the object specified by the <paramref name="obj">obj</paramref> parameter is derived from <see cref="T:System.Globalization.IdnMapping"></see> and its <see cref="P:System.Globalization.IdnMapping.AllowUnassigned"></see> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules"></see> properties are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetAscii(System.String)">
      <summary>Encodes a string of domain name labels that consist of Unicode characters to a string of displayable Unicode characters in the US-ASCII character range. The string is formatted according to the IDNA standard.</summary>
      <param name="unicode">The string to convert, which consists of one or more domain name labels delimited with label separators.</param>
      <returns>The equivalent of the string specified by the <paramref name="unicode">unicode</paramref> parameter, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="unicode">unicode</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="unicode">unicode</paramref> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned"></see> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules"></see> properties, and the IDNA standard.</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)">
      <summary>Encodes a substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.</summary>
      <param name="unicode">The string to convert, which consists of one or more domain name labels delimited with label separators.</param>
      <param name="index">A zero-based offset into unicode that specifies the start of the substring to convert. The conversion operation continues to the end of the unicode string.</param>
      <returns>The equivalent of the substring specified by the <paramref name="unicode">unicode</paramref> and <paramref name="index">index</paramref> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="unicode">unicode</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> is greater than the length of <paramref name="unicode">unicode</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="unicode">unicode</paramref> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned"></see> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules"></see> properties, and the IDNA standard.</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)">
      <summary>Encodes the specified number of characters in a  substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.</summary>
      <param name="unicode">The string to convert, which consists of one or more domain name labels delimited with label separators.</param>
      <param name="index">A zero-based offset into unicode that specifies the start of the substring.</param>
      <param name="count">The number of characters to convert in the substring that starts at the position specified by  index in the unicode string.</param>
      <returns>The equivalent of the substring specified by the <paramref name="unicode">unicode</paramref>, <paramref name="index">index</paramref>, and <paramref name="count">count</paramref> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="unicode">unicode</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> is greater than the length of <paramref name="unicode">unicode</paramref>.   -or-  <paramref name="index">index</paramref> is greater than the length of <paramref name="unicode">unicode</paramref> minus <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="unicode">unicode</paramref> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned"></see> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules"></see> properties, and the IDNA standard.</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetHashCode">
      <summary>Returns a hash code for this <see cref="T:System.Globalization.IdnMapping"></see> object.</summary>
      <returns>One of four 32-bit signed constants derived from the properties of an <see cref="T:System.Globalization.IdnMapping"></see> object.  The return value has no special meaning and is not suitable for use in a hash code algorithm.</returns>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetUnicode(System.String)">
      <summary>Decodes a string of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</summary>
      <param name="ascii">The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</param>
      <returns>The Unicode equivalent of the IDNA substring specified by the <paramref name="ascii">ascii</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="ascii">ascii</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="ascii">ascii</paramref> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned"></see> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules"></see> properties, and the IDNA standard.</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)">
      <summary>Decodes a substring of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</summary>
      <param name="ascii">The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</param>
      <param name="index">A zero-based offset into ascii that specifies the start of the substring to decode. The decoding operation continues to the end of the ascii string.</param>
      <returns>The Unicode equivalent of the IDNA substring specified by the <paramref name="ascii">ascii</paramref> and <paramref name="index">index</paramref> parameters.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="ascii">ascii</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> is greater than the length of <paramref name="ascii">ascii</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="ascii">ascii</paramref> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned"></see> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules"></see> properties, and the IDNA standard.</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)">
      <summary>Decodes a substring of a specified length that contains one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</summary>
      <param name="ascii">The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</param>
      <param name="index">A zero-based offset into ascii that specifies the start of the substring.</param>
      <param name="count">The number of characters to convert in the substring that starts at the position specified by index in the ascii string.</param>
      <returns>The Unicode equivalent of the IDNA substring specified by the <paramref name="ascii">ascii</paramref>, <paramref name="index">index</paramref>, and <paramref name="count">count</paramref> parameters.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="ascii">ascii</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> is greater than the length of <paramref name="ascii">ascii</paramref>.   -or-  <paramref name="index">index</paramref> is greater than the length of <paramref name="ascii">ascii</paramref> minus <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="ascii">ascii</paramref> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned"></see> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules"></see> properties, and the IDNA standard.</exception>
    </member>
    <member name="P:System.Globalization.IdnMapping.UseStd3AsciiRules">
      <summary>Gets or sets a value that indicates whether standard or relaxed naming conventions are used in operations performed by members of the current <see cref="T:System.Globalization.IdnMapping"></see> object.</summary>
      <returns>true if standard naming conventions are used in operations; otherwise, false.</returns>
    </member>
    <member name="T:System.StringNormalizationExtensions">
      
    </member>
    <member name="M:System.StringNormalizationExtensions.IsNormalized(System.String)">
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:System.StringNormalizationExtensions.IsNormalized(System.String,System.Text.NormalizationForm)">
      <param name="value"></param>
      <param name="normalizationForm"></param>
      <returns></returns>
    </member>
    <member name="M:System.StringNormalizationExtensions.Normalize(System.String)">
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:System.StringNormalizationExtensions.Normalize(System.String,System.Text.NormalizationForm)">
      <param name="value"></param>
      <param name="normalizationForm"></param>
      <returns></returns>
    </member>
    <member name="T:System.Text.NormalizationForm">
      <summary>Defines the type of normalization to perform.</summary>
    </member>
    <member name="F:System.Text.NormalizationForm.FormC">
      <summary>Indicates that a Unicode string is normalized using full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.NormalizationForm.FormD">
      <summary>Indicates that a Unicode string is normalized using full canonical decomposition.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.NormalizationForm.FormKC">
      <summary>Indicates that a Unicode string is normalized using full compatibility decomposition, followed by the replacement of sequences with their primary composites, if possible.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.NormalizationForm.FormKD">
      <summary>Indicates that a Unicode string is normalized using full compatibility decomposition.</summary>
      <returns></returns>
    </member>
  </members>
</doc></span>