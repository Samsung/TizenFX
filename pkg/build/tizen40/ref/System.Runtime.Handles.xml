<?xml version="1.0" encoding="utf-8"?><span>
<doc>
  <assembly>
    <name>System.Runtime.Handles</name>
  </assembly>
  <members>
    <member name="T:System.IO.HandleInheritability">
      <summary>Specifies whether the underlying handle is inheritable by child processes.</summary>
    </member>
    <member name="F:System.IO.HandleInheritability.Inheritable">
      <summary>Specifies that the handle is inheritable by child processes.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.HandleInheritability.None">
      <summary>Specifies that the handle is not inheritable by child processes.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Threading.WaitHandleExtensions">
      <summary>Provides convenience methods to for working with a safe handle for a wait handle.</summary>
    </member>
    <member name="M:System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)">
      <summary>Gets the safe handle for a native operating system wait handle.</summary>
      <param name="waitHandle">A native operating system handle.</param>
      <returns>The safe wait handle that wraps the native operating system wait handle.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="waitHandle">waitHandle</paramref> is null.</exception>
    </member>
    <member name="M:System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)">
      <summary>Sets a safe handle for a native operating system wait handle.</summary>
      <param name="waitHandle">A wait handle that encapsulates an operating system-specific object that waits for exclusive access to a shared resource.</param>
      <param name="value">The safe handle to wrap the operating system handle.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="waitHandle">waitHandle</paramref> is null.</exception>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeWaitHandle">
      <summary>Represents a wrapper class for a wait handle.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeWaitHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle"></see> class.</summary>
      <param name="existingHandle">An <see cref="T:System.IntPtr"></see> object that represents the pre-existing handle to use.</param>
      <param name="ownsHandle">true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended).</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeWaitHandle.IsInvalid">
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CriticalHandle">
      <summary>Represents a wrapper class for handle resources.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.CriticalHandle"></see> class with the specified invalid handle value.</summary>
      <param name="invalidHandleValue">The value of an invalid handle (usually 0 or -1).</param>
      <exception cref="T:System.TypeLoadException">The derived class resides in an assembly without unmanaged code access permission.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Runtime.InteropServices.CriticalHandle"></see>.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Runtime.InteropServices.CriticalHandle"></see> class specifying whether to perform a normal dispose operation.</summary>
      <param name="disposing">true for a normal dispose operation; false to finalize the handle.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Finalize">
      <summary>Frees all resources associated with the handle.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CriticalHandle.handle">
      <summary>Specifies the handle to be wrapped.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsClosed">
      <summary>Gets a value indicating whether the handle is closed.</summary>
      <returns>true if the handle is closed; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsInvalid">
      <summary>When overridden in a derived class, gets a value indicating whether the handle value is invalid.</summary>
      <returns>true if the handle is valid; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle">
      <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
      <returns>true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a <see cref="~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md">releaseHandleFailed</see> Managed Debugging Assistant.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)">
      <summary>Sets the handle to the specified pre-existing handle.</summary>
      <param name="handle">The pre-existing handle to use.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid">
      <summary>Marks a handle as invalid.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeHandle">
      <summary>Represents a wrapper class for operating system handles. This class must be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeHandle"></see> class with the specified invalid handle value.</summary>
      <param name="invalidHandleValue">The value of an invalid handle (usually 0 or -1).  Your implementation of <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid"></see> should return true for this value.</param>
      <param name="ownsHandle">true to reliably let <see cref="T:System.Runtime.InteropServices.SafeHandle"></see> release the handle during the finalization phase; otherwise, false (not recommended).</param>
      <exception cref="T:System.TypeLoadException">The derived class resides in an assembly without unmanaged code access permission.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
      <summary>Manually increments the reference counter on <see cref="T:System.Runtime.InteropServices.SafeHandle"></see> instances.</summary>
      <param name="success">true if the reference counter was successfully incremented; otherwise, false.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
      <summary>Returns the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle"></see> field.</summary>
      <returns>An IntPtr representing the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle"></see> field. If the handle has been marked invalid with <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid"></see>, this method still returns the original handle value, which can be a stale value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
      <summary>Manually decrements the reference counter on a <see cref="T:System.Runtime.InteropServices.SafeHandle"></see> instance.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle"></see> class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle"></see> class specifying whether to perform a normal dispose operation.</summary>
      <param name="disposing">true for a normal dispose operation; false to finalize the handle.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Finalize">
      <summary>Frees all resources associated with the handle.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.SafeHandle.handle">
      <summary>Specifies the handle to be wrapped.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
      <summary>Gets a value indicating whether the handle is closed.</summary>
      <returns>true if the handle is closed; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
      <summary>When overridden in a derived class, gets a value indicating whether the handle value is invalid.</summary>
      <returns>true if the handle value is invalid; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
      <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
      <returns>true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a <see cref="~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md">releaseHandleFailed</see> Managed Debugging Assistant.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
      <summary>Sets the handle to the specified pre-existing handle.</summary>
      <param name="handle">The pre-existing handle to use.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
      <summary>Marks a handle as no longer used.</summary>
    </member>
  </members>
</doc></span>