<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Intrinsics</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Intrinsics.Arm.AdvSimd">
      <summary>This class provides access to the ARM AdvSIMD hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Abs(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vabsq_s16 (int16x8_t a)</para>
        <para>A32: VABS.S16 Qd, Qm</para>
        <para>A64: ABS Vd.8H, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Abs(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vabsq_s32 (int32x4_t a)</para>
        <para>A32: VABS.S32 Qd, Qm</para>
        <para>A64: ABS Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Abs(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vabsq_s8 (int8x16_t a)</para>
        <para>A32: VABS.S8 Qd, Qm</para>
        <para>A64: ABS Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Abs(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vabsq_f32 (float32x4_t a)</para>
        <para>A32: VABS.F32 Qd, Qm</para>
        <para>A64: FABS Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Abs(System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vabs_s16 (int16x4_t a)</para>
        <para>A32: VABS.S16 Dd, Dm</para>
        <para>A64: ABS Vd.4H, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Abs(System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vabs_s32 (int32x2_t a)</para>
        <para>A32: VABS.S32 Dd, Dm</para>
        <para>A64: ABS Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Abs(System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vabs_s8 (int8x8_t a)</para>
        <para>A32: VABS.S8 Dd, Dm</para>
        <para>A64: ABS Vd.8B, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Abs(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vabs_f32 (float32x2_t a)</para>
        <para>A32: VABS.F32 Dd, Dm</para>
        <para>A64: FABS Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteCompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>uint32x4_t vcagtq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VACGT.F32 Qd, Qn, Qm</para>
        <para>A64: FACGT Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteCompareGreaterThan(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32x2_t vcagt_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VACGT.F32 Dd, Dn, Dm</para>
        <para>A64: FACGT Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteCompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>uint32x4_t vcageq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VACGE.F32 Qd, Qn, Qm</para>
        <para>A64: FACGE Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteCompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32x2_t vcage_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VACGE.F32 Dd, Dn, Dm</para>
        <para>A64: FACGE Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteCompareLessThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>uint32x4_t vcaltq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VACLT.F32 Qd, Qn, Qm</para>
        <para>A64: FACGT Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteCompareLessThan(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32x2_t vcalt_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VACLT.F32 Dd, Dn, Dm</para>
        <para>A64: FACGT Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteCompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>uint32x4_t vcaleq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VACLE.F32 Qd, Qn, Qm</para>
        <para>A64: FACGE Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteCompareLessThanOrEqual(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32x2_t vcale_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VACLE.F32 Dd, Dn, Dm</para>
        <para>A64: FACGE Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifference(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vabdq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VABD.U8 Qd, Qn, Qm</para>
        <para>A64: UABD Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifference(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vabdq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VABD.S16 Qd, Qn, Qm</para>
        <para>A64: SABD Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifference(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vabdq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VABD.S32 Qd, Qn, Qm</para>
        <para>A64: SABD Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifference(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vabdq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VABD.S8 Qd, Qn, Qm</para>
        <para>A64: SABD Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifference(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vabdq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VABD.F32 Qd, Qn, Qm</para>
        <para>A64: FABD Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifference(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vabdq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VABD.U16 Qd, Qn, Qm</para>
        <para>A64: UABD Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifference(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vabdq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VABD.U32 Qd, Qn, Qm</para>
        <para>A64: UABD Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifference(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vabd_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VABD.U8 Dd, Dn, Dm</para>
        <para>A64: UABD Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifference(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vabd_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VABD.S16 Dd, Dn, Dm</para>
        <para>A64: SABD Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifference(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vabd_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VABD.S32 Dd, Dn, Dm</para>
        <para>A64: SABD Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifference(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vabd_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VABD.S8 Dd, Dn, Dm</para>
        <para>A64: SABD Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifference(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vabd_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VABD.F32 Dd, Dn, Dm</para>
        <para>A64: FABD Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifference(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vabd_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VABD.U16 Dd, Dn, Dm</para>
        <para>A64: UABD Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifference(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vabd_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VABD.U32 Dd, Dn, Dm</para>
        <para>A64: UABD Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceAdd(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vabaq_u8 (uint8x16_t a, uint8x16_t b, uint8x16_t c)</para>
        <para>A32: VABA.U8 Qd, Qn, Qm</para>
        <para>A64: UABA Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceAdd(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vabaq_s16 (int16x8_t a, int16x8_t b, int16x8_t c)</para>
        <para>A32: VABA.S16 Qd, Qn, Qm</para>
        <para>A64: SABA Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceAdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vabaq_s32 (int32x4_t a, int32x4_t b, int32x4_t c)</para>
        <para>A32: VABA.S32 Qd, Qn, Qm</para>
        <para>A64: SABA Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceAdd(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vabaq_s8 (int8x16_t a, int8x16_t b, int8x16_t c)</para>
        <para>A32: VABA.S8 Qd, Qn, Qm</para>
        <para>A64: SABA Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceAdd(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vabaq_u16 (uint16x8_t a, uint16x8_t b, uint16x8_t c)</para>
        <para>A32: VABA.U16 Qd, Qn, Qm</para>
        <para>A64: UABA Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceAdd(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vabaq_u32 (uint32x4_t a, uint32x4_t b, uint32x4_t c)</para>
        <para>A32: VABA.U32 Qd, Qn, Qm</para>
        <para>A64: UABA Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceAdd(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vaba_u8 (uint8x8_t a, uint8x8_t b, uint8x8_t c)</para>
        <para>A32: VABA.U8 Dd, Dn, Dm</para>
        <para>A64: UABA Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceAdd(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vaba_s16 (int16x4_t a, int16x4_t b, int16x4_t c)</para>
        <para>A32: VABA.S16 Dd, Dn, Dm</para>
        <para>A64: SABA Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceAdd(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vaba_s32 (int32x2_t a, int32x2_t b, int32x2_t c)</para>
        <para>A32: VABA.S32 Dd, Dn, Dm</para>
        <para>A64: SABA Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceAdd(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vaba_s8 (int8x8_t a, int8x8_t b, int8x8_t c)</para>
        <para>A32: VABA.S8 Dd, Dn, Dm</para>
        <para>A64: SABA Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceAdd(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vaba_u16 (uint16x4_t a, uint16x4_t b, uint16x4_t c)</para>
        <para>A32: VABA.U16 Dd, Dn, Dm</para>
        <para>A64: UABA Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceAdd(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vaba_u32 (uint32x2_t a, uint32x2_t b, uint32x2_t c)</para>
        <para>A32: VABA.U32 Dd, Dn, Dm</para>
        <para>A64: UABA Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningLower(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint16x8_t vabdl_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VABDL.U8 Qd, Dn, Dm</para>
        <para>A64: UABDL Vd.8H, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningLower(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int32x4_t vabdl_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VABDL.S16 Qd, Dn, Dm</para>
        <para>A64: SABDL Vd.4S, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningLower(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int64x2_t vabdl_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VABDL.S32 Qd, Dn, Dm</para>
        <para>A64: SABDL Vd.2D, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningLower(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int16x8_t vabdl_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VABDL.S8 Qd, Dn, Dm</para>
        <para>A64: SABDL Vd.8H, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningLower(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint32x4_t vabdl_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VABDL.U16 Qd, Dn, Dm</para>
        <para>A64: UABDL Vd.4S, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningLower(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint64x2_t vabdl_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VABDL.U32 Qd, Dn, Dm</para>
        <para>A64: UABDL Vd.2D, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int16x8_t vabal_s8 (int16x8_t a, int8x8_t b, int8x8_t c)</para>
        <para>A32: VABAL.S8 Qd, Dn, Dm</para>
        <para>A64: SABAL Vd.8H, Vn.8B, Vm.8B</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int32x4_t vabal_s16 (int32x4_t a, int16x4_t b, int16x4_t c)</para>
        <para>A32: VABAL.S16 Qd, Dn, Dm</para>
        <para>A64: SABAL Vd.4S, Vn.4H, Vm.4H</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int64x2_t vabal_s32 (int64x2_t a, int32x2_t b, int32x2_t c)</para>
        <para>A32: VABAL.S32 Qd, Dn, Dm</para>
        <para>A64: SABAL Vd.2D, Vn.2S, Vm.2S</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint16x8_t vabal_u8 (uint16x8_t a, uint8x8_t b, uint8x8_t c)</para>
        <para>A32: VABAL.U8 Qd, Dn, Dm</para>
        <para>A64: UABAL Vd.8H, Vn.8B, Vm.8B</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint32x4_t vabal_u16 (uint32x4_t a, uint16x4_t b, uint16x4_t c)</para>
        <para>A32: VABAL.U16 Qd, Dn, Dm</para>
        <para>A64: UABAL Vd.4S, Vn.4H, Vm.4H</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint64x2_t vabal_u32 (uint64x2_t a, uint32x2_t b, uint32x2_t c)</para>
        <para>A32: VABAL.U32 Qd, Dn, Dm</para>
        <para>A64: UABAL Vd.2D, Vn.2S, Vm.2S</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningUpper(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint16x8_t vabdl_high_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VABDL.U8 Qd, Dn+1, Dm+1</para>
        <para>A64: UABDL2 Vd.8H, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int32x4_t vabdl_high_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VABDL.S16 Qd, Dn+1, Dm+1</para>
        <para>A64: SABDL2 Vd.4S, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int64x2_t vabdl_high_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VABDL.S32 Qd, Dn+1, Dm+1</para>
        <para>A64: SABDL2 Vd.2D, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningUpper(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int16x8_t vabdl_high_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VABDL.S8 Qd, Dn+1, Dm+1</para>
        <para>A64: SABDL2 Vd.8H, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint32x4_t vabdl_high_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VABDL.U16 Qd, Dn+1, Dm+1</para>
        <para>A64: UABDL2 Vd.4S, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint64x2_t vabdl_high_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VABDL.U32 Qd, Dn+1, Dm+1</para>
        <para>A64: UABDL2 Vd.2D, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int16x8_t vabal_high_s8 (int16x8_t a, int8x16_t b, int8x16_t c)</para>
        <para>A32: VABAL.S8 Qd, Dn+1, Dm+1</para>
        <para>A64: SABAL2 Vd.8H, Vn.16B, Vm.16B</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int32x4_t vabal_high_s16 (int32x4_t a, int16x8_t b, int16x8_t c)</para>
        <para>A32: VABAL.S16 Qd, Dn+1, Dm+1</para>
        <para>A64: SABAL2 Vd.4S, Vn.8H, Vm.8H</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int64x2_t vabal_high_s32 (int64x2_t a, int32x4_t b, int32x4_t c)</para>
        <para>A32: VABAL.S32 Qd, Dn+1, Dm+1</para>
        <para>A64: SABAL2 Vd.2D, Vn.4S, Vm.4S</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint16x8_t vabal_high_u8 (uint16x8_t a, uint8x16_t b, uint8x16_t c)</para>
        <para>A32: VABAL.U8 Qd, Dn+1, Dm+1</para>
        <para>A64: UABAL2 Vd.8H, Vn.16B, Vm.16B</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint32x4_t vabal_high_u16 (uint32x4_t a, uint16x8_t b, uint16x8_t c)</para>
        <para>A32: VABAL.U16 Qd, Dn+1, Dm+1</para>
        <para>A64: UABAL2 Vd.4S, Vn.8H, Vm.8H</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsoluteDifferenceWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint64x2_t vabal_high_u32 (uint64x2_t a, uint32x4_t b, uint32x4_t c)</para>
        <para>A32: VABAL.U32 Qd, Dn+1, Dm+1</para>
        <para>A64: UABAL2 Vd.2D, Vn.4S, Vm.4S</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsSaturate(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vqabsq_s16 (int16x8_t a)</para>
        <para>A32: VQABS.S16 Qd, Qm</para>
        <para>A64: SQABS Vd.8H, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsSaturate(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vqabsq_s32 (int32x4_t a)</para>
        <para>A32: VQABS.S32 Qd, Qm</para>
        <para>A64: SQABS Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsSaturate(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vqabsq_s8 (int8x16_t a)</para>
        <para>A32: VQABS.S8 Qd, Qm</para>
        <para>A64: SQABS Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsSaturate(System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vqabs_s16 (int16x4_t a)</para>
        <para>A32: VQABS.S16 Dd, Dm</para>
        <para>A64: SQABS Vd.4H, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsSaturate(System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vqabs_s32 (int32x2_t a)</para>
        <para>A32: VQABS.S32 Dd, Dm</para>
        <para>A64: SQABS Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsSaturate(System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vqabs_s8 (int8x8_t a)</para>
        <para>A32: VQABS.S8 Dd, Dm</para>
        <para>A64: SQABS Vd.8B, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vabs_f64 (float64x1_t a)</para>
        <para>A32: VABS.F64 Dd, Dm</para>
        <para>A64: FABS Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AbsScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vabss_f32 (float32_t a)</para>
        <para>A32: VABS.F32 Sd, Sm</para>
        <para>A64: FABS Sd, Sn The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Add(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vaddq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VADD.I8 Qd, Qn, Qm</para>
        <para>A64: ADD Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Add(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vaddq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VADD.I16 Qd, Qn, Qm</para>
        <para>A64: ADD Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Add(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vaddq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VADD.I32 Qd, Qn, Qm</para>
        <para>A64: ADD Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Add(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vaddq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A32: VADD.I64 Qd, Qn, Qm</para>
        <para>A64: ADD Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Add(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vaddq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VADD.I8 Qd, Qn, Qm</para>
        <para>A64: ADD Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Add(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vaddq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VADD.F32 Qd, Qn, Qm</para>
        <para>A64: FADD Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Add(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vaddq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VADD.I16 Qd, Qn, Qm</para>
        <para>A64: ADD Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Add(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vaddq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VADD.I32 Qd, Qn, Qm</para>
        <para>A64: ADD Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Add(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vaddq_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A32: VADD.I64 Qd, Qn, Qm</para>
        <para>A64: ADD Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Add(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vadd_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VADD.I8 Dd, Dn, Dm</para>
        <para>A64: ADD Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Add(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vadd_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VADD.I16 Dd, Dn, Dm</para>
        <para>A64: ADD Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Add(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vadd_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VADD.I32 Dd, Dn, Dm</para>
        <para>A64: ADD Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Add(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vadd_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VADD.I8 Dd, Dn, Dm</para>
        <para>A64: ADD Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Add(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vadd_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VADD.F32 Dd, Dn, Dm</para>
        <para>A64: FADD Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Add(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vadd_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VADD.I16 Dd, Dn, Dm</para>
        <para>A64: ADD Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Add(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vadd_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VADD.I32 Dd, Dn, Dm</para>
        <para>A64: ADD Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int8x8_t vaddhn_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VADDHN.I16 Dd, Qn, Qm</para>
        <para>A64: ADDHN Vd.8B, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int16x4_t vaddhn_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VADDHN.I32 Dd, Qn, Qm</para>
        <para>A64: ADDHN Vd.4H, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int32x2_t vaddhn_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A32: VADDHN.I64 Dd, Qn, Qm</para>
        <para>A64: ADDHN Vd.2S, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint8x8_t vaddhn_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VADDHN.I16 Dd, Qn, Qm</para>
        <para>A64: ADDHN Vd.8B, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint16x4_t vaddhn_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VADDHN.I32 Dd, Qn, Qm</para>
        <para>A64: ADDHN Vd.4H, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint32x2_t vaddhn_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A32: VADDHN.I64 Dd, Qn, Qm</para>
        <para>A64: ADDHN Vd.2S, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint8x16_t vaddhn_high_u16 (uint8x8_t r, uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VADDHN.I16 Dd+1, Qn, Qm</para>
        <para>A64: ADDHN2 Vd.16B, Vn.8H, Vm.8H</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int16x8_t vaddhn_high_s32 (int16x4_t r, int32x4_t a, int32x4_t b)</para>
        <para>A32: VADDHN.I32 Dd+1, Qn, Qm</para>
        <para>A64: ADDHN2 Vd.8H, Vn.4S, Vm.4S</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int32x4_t vaddhn_high_s64 (int32x2_t r, int64x2_t a, int64x2_t b)</para>
        <para>A32: VADDHN.I64 Dd+1, Qn, Qm</para>
        <para>A64: ADDHN2 Vd.4S, Vn.2D, Vm.2D</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int8x16_t vaddhn_high_s16 (int8x8_t r, int16x8_t a, int16x8_t b)</para>
        <para>A32: VADDHN.I16 Dd+1, Qn, Qm</para>
        <para>A64: ADDHN2 Vd.16B, Vn.8H, Vm.8H</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint16x8_t vaddhn_high_u32 (uint16x4_t r, uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VADDHN.I32 Dd+1, Qn, Qm</para>
        <para>A64: ADDHN2 Vd.8H, Vn.4S, Vm.4S</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint32x4_t vaddhn_high_u64 (uint32x2_t r, uint64x2_t a, uint64x2_t b)</para>
        <para>A32: VADDHN.I64 Dd+1, Qn, Qm</para>
        <para>A64: ADDHN2 Vd.4S, Vn.2D, Vm.2D</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwise(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vpadd_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VPADD.I8 Dd, Dn, Dm</para>
        <para>A64: ADDP Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwise(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vpadd_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VPADD.I16 Dd, Dn, Dm</para>
        <para>A64: ADDP Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwise(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vpadd_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VPADD.I32 Dd, Dn, Dm</para>
        <para>A64: ADDP Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwise(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vpadd_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VPADD.I8 Dd, Dn, Dm</para>
        <para>A64: ADDP Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwise(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vpadd_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VPADD.F32 Dd, Dn, Dm</para>
        <para>A64: FADDP Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwise(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vpadd_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VPADD.I16 Dd, Dn, Dm</para>
        <para>A64: ADDP Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwise(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vpadd_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VPADD.I32 Dd, Dn, Dm</para>
        <para>A64: ADDP Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWidening(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint16x8_t vpaddlq_u8 (uint8x16_t a)</para>
        <para>A32: VPADDL.U8 Qd, Qm</para>
        <para>A64: UADDLP Vd.8H, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWidening(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int32x4_t vpaddlq_s16 (int16x8_t a)</para>
        <para>A32: VPADDL.S16 Qd, Qm</para>
        <para>A64: SADDLP Vd.4S, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWidening(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int64x2_t vpaddlq_s32 (int32x4_t a)</para>
        <para>A32: VPADDL.S32 Qd, Qm</para>
        <para>A64: SADDLP Vd.2D, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWidening(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int16x8_t vpaddlq_s8 (int8x16_t a)</para>
        <para>A32: VPADDL.S8 Qd, Qm</para>
        <para>A64: SADDLP Vd.8H, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWidening(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint32x4_t vpaddlq_u16 (uint16x8_t a)</para>
        <para>A32: VPADDL.U16 Qd, Qm</para>
        <para>A64: UADDLP Vd.4S, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWidening(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint64x2_t vpaddlq_u32 (uint32x4_t a)</para>
        <para>A32: VPADDL.U32 Qd, Qm</para>
        <para>A64: UADDLP Vd.2D, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWidening(System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint16x4_t vpaddl_u8 (uint8x8_t a)</para>
        <para>A32: VPADDL.U8 Dd, Dm</para>
        <para>A64: UADDLP Vd.4H, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWidening(System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int32x2_t vpaddl_s16 (int16x4_t a)</para>
        <para>A32: VPADDL.S16 Dd, Dm</para>
        <para>A64: SADDLP Vd.2S, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWidening(System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int16x4_t vpaddl_s8 (int8x8_t a)</para>
        <para>A32: VPADDL.S8 Dd, Dm</para>
        <para>A64: SADDLP Vd.4H, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWidening(System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint32x2_t vpaddl_u16 (uint16x4_t a)</para>
        <para>A32: VPADDL.U16 Dd, Dm</para>
        <para>A64: UADDLP Vd.2S, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWideningAndAdd(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int16x8_t vpadalq_s8 (int16x8_t a, int8x16_t b)</para>
        <para>A32: VPADAL.S8 Qd, Qm</para>
        <para>A64: SADALP Vd.8H, Vn.16B</para>
      </summary>
      <param name="addend" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWideningAndAdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int32x4_t vpadalq_s16 (int32x4_t a, int16x8_t b)</para>
        <para>A32: VPADAL.S16 Qd, Qm</para>
        <para>A64: SADALP Vd.4S, Vn.8H</para>
      </summary>
      <param name="addend" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWideningAndAdd(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int64x2_t vpadalq_s32 (int64x2_t a, int32x4_t b)</para>
        <para>A32: VPADAL.S32 Qd, Qm</para>
        <para>A64: SADALP Vd.2D, Vn.4S</para>
      </summary>
      <param name="addend" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWideningAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint16x8_t vpadalq_u8 (uint16x8_t a, uint8x16_t b)</para>
        <para>A32: VPADAL.U8 Qd, Qm</para>
        <para>A64: UADALP Vd.8H, Vn.16B</para>
      </summary>
      <param name="addend" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWideningAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint32x4_t vpadalq_u16 (uint32x4_t a, uint16x8_t b)</para>
        <para>A32: VPADAL.U16 Qd, Qm</para>
        <para>A64: UADALP Vd.4S, Vn.8H</para>
      </summary>
      <param name="addend" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWideningAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint64x2_t vpadalq_u32 (uint64x2_t a, uint32x4_t b)</para>
        <para>A32: VPADAL.U32 Qd, Qm</para>
        <para>A64: UADALP Vd.2D, Vn.4S</para>
      </summary>
      <param name="addend" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWideningAndAdd(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int16x4_t vpadal_s8 (int16x4_t a, int8x8_t b)</para>
        <para>A32: VPADAL.S8 Dd, Dm</para>
        <para>A64: SADALP Vd.4H, Vn.8B</para>
      </summary>
      <param name="addend" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWideningAndAdd(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int32x2_t vpadal_s16 (int32x2_t a, int16x4_t b)</para>
        <para>A32: VPADAL.S16 Dd, Dm</para>
        <para>A64: SADALP Vd.2S, Vn.4H</para>
      </summary>
      <param name="addend" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWideningAndAdd(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint16x4_t vpadal_u8 (uint16x4_t a, uint8x8_t b)</para>
        <para>A32: VPADAL.U8 Dd, Dm</para>
        <para>A64: UADALP Vd.4H, Vn.8B</para>
      </summary>
      <param name="addend" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWideningAndAdd(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint32x2_t vpadal_u16 (uint32x2_t a, uint16x4_t b)</para>
        <para>A32: VPADAL.U16 Dd, Dm</para>
        <para>A64: UADALP Vd.2S, Vn.4H</para>
      </summary>
      <param name="addend" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWideningAndAddScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int64x1_t vpadal_s32 (int64x1_t a, int32x2_t b)</para>
        <para>A32: VPADAL.S32 Dd, Dm</para>
        <para>A64: SADALP Vd.1D, Vn.2S</para>
      </summary>
      <param name="addend" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWideningAndAddScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint64x1_t vpadal_u32 (uint64x1_t a, uint32x2_t b)</para>
        <para>A32: VPADAL.U32 Dd, Dm</para>
        <para>A64: UADALP Vd.1D, Vn.2S</para>
      </summary>
      <param name="addend" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWideningScalar(System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int64x1_t vpaddl_s32 (int32x2_t a)</para>
        <para>A32: VPADDL.S32 Dd, Dm</para>
        <para>A64: SADDLP Dd, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddPairwiseWideningScalar(System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint64x1_t vpaddl_u32 (uint32x2_t a)</para>
        <para>A32: VPADDL.U32 Dd, Dm</para>
        <para>A64: UADDLP Dd, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddRoundedHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int8x8_t vraddhn_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VRADDHN.I16 Dd, Qn, Qm</para>
        <para>A64: RADDHN Vd.8B, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddRoundedHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int16x4_t vraddhn_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VRADDHN.I32 Dd, Qn, Qm</para>
        <para>A64: RADDHN Vd.4H, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddRoundedHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int32x2_t vraddhn_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A32: VRADDHN.I64 Dd, Qn, Qm</para>
        <para>A64: RADDHN Vd.2S, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddRoundedHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint8x8_t vraddhn_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VRADDHN.I16 Dd, Qn, Qm</para>
        <para>A64: RADDHN Vd.8B, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddRoundedHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint16x4_t vraddhn_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VRADDHN.I32 Dd, Qn, Qm</para>
        <para>A64: RADDHN Vd.4H, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddRoundedHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint32x2_t vraddhn_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A32: VRADDHN.I64 Dd, Qn, Qm</para>
        <para>A64: RADDHN Vd.2S, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddRoundedHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint8x16_t vraddhn_high_u16 (uint8x8_t r, uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VRADDHN.I16 Dd+1, Qn, Qm</para>
        <para>A64: RADDHN2 Vd.16B, Vn.8H, Vm.8H</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddRoundedHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int16x8_t vraddhn_high_s32 (int16x4_t r, int32x4_t a, int32x4_t b)</para>
        <para>A32: VRADDHN.I32 Dd+1, Qn, Qm</para>
        <para>A64: RADDHN2 Vd.8H, Vn.4S, Vm.4S</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddRoundedHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int32x4_t vraddhn_high_s64 (int32x2_t r, int64x2_t a, int64x2_t b)</para>
        <para>A32: VRADDHN.I64 Dd+1, Qn, Qm</para>
        <para>A64: RADDHN2 Vd.4S, Vn.2D, Vm.2D</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddRoundedHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int8x16_t vraddhn_high_s16 (int8x8_t r, int16x8_t a, int16x8_t b)</para>
        <para>A32: VRADDHN.I16 Dd+1, Qn, Qm</para>
        <para>A64: RADDHN2 Vd.16B, Vn.8H, Vm.8H</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddRoundedHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint16x8_t vraddhn_high_u32 (uint16x4_t r, uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VRADDHN.I32 Dd+1, Qn, Qm</para>
        <para>A64: RADDHN2 Vd.8H, Vn.4S, Vm.4S</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddRoundedHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint32x4_t vraddhn_high_u64 (uint32x2_t r, uint64x2_t a, uint64x2_t b)</para>
        <para>A32: VRADDHN.I64 Dd+1, Qn, Qm</para>
        <para>A64: RADDHN2 Vd.4S, Vn.2D, Vm.2D</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddSaturate(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vqaddq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VQADD.U8 Qd, Qn, Qm</para>
        <para>A64: UQADD Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vqaddq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VQADD.S16 Qd, Qn, Qm</para>
        <para>A64: SQADD Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vqaddq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VQADD.S32 Qd, Qn, Qm</para>
        <para>A64: SQADD Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vqaddq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A32: VQADD.S64 Qd, Qn, Qm</para>
        <para>A64: SQADD Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddSaturate(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vqaddq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VQADD.S8 Qd, Qn, Qm</para>
        <para>A64: SQADD Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddSaturate(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vqaddq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VQADD.U16 Qd, Qn, Qm</para>
        <para>A64: UQADD Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddSaturate(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vqaddq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VQADD.U32 Qd, Qn, Qm</para>
        <para>A64: UQADD Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddSaturate(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vqaddq_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A32: VQADD.U64 Qd, Qn, Qm</para>
        <para>A64: UQADD Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddSaturate(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vqadd_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VQADD.U8 Dd, Dn, Dm</para>
        <para>A64: UQADD Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddSaturate(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vqadd_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VQADD.S16 Dd, Dn, Dm</para>
        <para>A64: SQADD Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddSaturate(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vqadd_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VQADD.S32 Dd, Dn, Dm</para>
        <para>A64: SQADD Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddSaturate(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vqadd_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VQADD.S8 Dd, Dn, Dm</para>
        <para>A64: SQADD Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddSaturate(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vqadd_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VQADD.U16 Dd, Dn, Dm</para>
        <para>A64: UQADD Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddSaturate(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vqadd_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VQADD.U32 Dd, Dn, Dm</para>
        <para>A64: UQADD Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>int64x1_t vqadd_s64 (int64x1_t a, int64x1_t b)</para>
        <para>A32: VQADD.S64 Dd, Dn, Dm</para>
        <para>A64: SQADD Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>uint64x1_t vqadd_u64 (uint64x1_t a, uint64x1_t b)</para>
        <para>A32: VQADD.U64 Dd, Dn, Dm</para>
        <para>A64: UQADD Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vadd_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A32: VADD.F64 Dd, Dn, Dm</para>
        <para>A64: FADD Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>int64x1_t vadd_s64 (int64x1_t a, int64x1_t b)</para>
        <para>A32: VADD.I64 Dd, Dn, Dm</para>
        <para>A64: ADD Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vadds_f32 (float32_t a, float32_t b)</para>
        <para>A32: VADD.F32 Sd, Sn, Sm</para>
        <para>A64: FADD Sd, Sn, Sm The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>uint64x1_t vadd_u64 (uint64x1_t a, uint64x1_t b)</para>
        <para>A32: VADD.I64 Dd, Dn, Dm</para>
        <para>A64: ADD Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningLower(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int16x8_t vaddw_s8 (int16x8_t a, int8x8_t b)</para>
        <para>A32: VADDW.S8 Qd, Qn, Dm</para>
        <para>A64: SADDW Vd.8H, Vn.8H, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningLower(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int32x4_t vaddw_s16 (int32x4_t a, int16x4_t b)</para>
        <para>A32: VADDW.S16 Qd, Qn, Dm</para>
        <para>A64: SADDW Vd.4S, Vn.4S, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningLower(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int64x2_t vaddw_s32 (int64x2_t a, int32x2_t b)</para>
        <para>A32: VADDW.S32 Qd, Qn, Dm</para>
        <para>A64: SADDW Vd.2D, Vn.2D, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningLower(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint16x8_t vaddw_u8 (uint16x8_t a, uint8x8_t b)</para>
        <para>A32: VADDW.U8 Qd, Qn, Dm</para>
        <para>A64: UADDW Vd.8H, Vn.8H, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningLower(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint32x4_t vaddw_u16 (uint32x4_t a, uint16x4_t b)</para>
        <para>A32: VADDW.U16 Qd, Qn, Dm</para>
        <para>A64: UADDW Vd.4S, Vn.4S, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningLower(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint64x2_t vaddw_u32 (uint64x2_t a, uint32x2_t b)</para>
        <para>A32: VADDW.U32 Qd, Qn, Dm</para>
        <para>A64: UADDW Vd.2D, Vn.2D, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningLower(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint16x8_t vaddl_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VADDL.U8 Qd, Dn, Dm</para>
        <para>A64: UADDL Vd.8H, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningLower(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int32x4_t vaddl_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VADDL.S16 Qd, Dn, Dm</para>
        <para>A64: SADDL Vd.4S, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningLower(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int64x2_t vaddl_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VADDL.S32 Qd, Dn, Dm</para>
        <para>A64: SADDL Vd.2D, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningLower(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int16x8_t vaddl_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VADDL.S8 Qd, Dn, Dm</para>
        <para>A64: SADDL Vd.8H, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningLower(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint32x4_t vaddl_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VADDL.U16 Qd, Dn, Dm</para>
        <para>A64: UADDL Vd.4S, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningLower(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint64x2_t vaddl_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VADDL.U32 Qd, Dn, Dm</para>
        <para>A64: UADDL Vd.2D, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningUpper(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint16x8_t vaddl_high_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VADDL.U8 Qd, Dn+1, Dm+1</para>
        <para>A64: UADDL2 Vd.8H, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int32x4_t vaddl_high_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VADDL.S16 Qd, Dn+1, Dm+1</para>
        <para>A64: SADDL2 Vd.4S, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int16x8_t vaddw_high_s8 (int16x8_t a, int8x16_t b)</para>
        <para>A32: VADDW.S8 Qd, Qn, Dm+1</para>
        <para>A64: SADDW2 Vd.8H, Vn.8H, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int32x4_t vaddw_high_s16 (int32x4_t a, int16x8_t b)</para>
        <para>A32: VADDW.S16 Qd, Qn, Dm+1</para>
        <para>A64: SADDW2 Vd.4S, Vn.4S, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int64x2_t vaddl_high_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VADDL.S32 Qd, Dn+1, Dm+1</para>
        <para>A64: SADDL2 Vd.2D, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int64x2_t vaddw_high_s32 (int64x2_t a, int32x4_t b)</para>
        <para>A32: VADDW.S32 Qd, Qn, Dm+1</para>
        <para>A64: SADDW2 Vd.2D, Vn.2D, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningUpper(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int16x8_t vaddl_high_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VADDL.S8 Qd, Dn+1, Dm+1</para>
        <para>A64: SADDL2 Vd.8H, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint16x8_t vaddw_high_u8 (uint16x8_t a, uint8x16_t b)</para>
        <para>A32: VADDW.U8 Qd, Qn, Dm+1</para>
        <para>A64: UADDW2 Vd.8H, Vn.8H, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint32x4_t vaddl_high_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VADDL.U16 Qd, Dn+1, Dm+1</para>
        <para>A64: UADDL2 Vd.4S, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint32x4_t vaddw_high_u16 (uint32x4_t a, uint16x8_t b)</para>
        <para>A32: VADDW.U16 Qd, Qn, Dm+1</para>
        <para>A64: UADDW2 Vd.4S, Vn.4S, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint64x2_t vaddl_high_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VADDL.U32 Qd, Dn+1, Dm+1</para>
        <para>A64: UADDL2 Vd.2D, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.AddWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint64x2_t vaddw_high_u32 (uint64x2_t a, uint32x4_t b)</para>
        <para>A32: VADDW.U32 Qd, Qn, Dm+1</para>
        <para>A64: UADDW2 Vd.2D, Vn.2D, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vandq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VAND Qd, Qn, Qm</para>
        <para>A64: AND Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vandq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A32: VAND Qd, Qn, Qm</para>
        <para>A64: AND Vd.16B, Vn.16B, Vm.16B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vandq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VAND Qd, Qn, Qm</para>
        <para>A64: AND Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vandq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VAND Qd, Qn, Qm</para>
        <para>A64: AND Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vandq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A32: VAND Qd, Qn, Qm</para>
        <para>A64: AND Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vandq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VAND Qd, Qn, Qm</para>
        <para>A64: AND Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vandq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VAND Qd, Qn, Qm</para>
        <para>A64: AND Vd.16B, Vn.16B, Vm.16B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vandq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VAND Qd, Qn, Qm</para>
        <para>A64: AND Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vandq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VAND Qd, Qn, Qm</para>
        <para>A64: AND Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vandq_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A32: VAND Qd, Qn, Qm</para>
        <para>A64: AND Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vand_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VAND Dd, Dn, Dm</para>
        <para>A64: AND Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vand_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A32: VAND Dd, Dn, Dm</para>
        <para>A64: AND Vd.8B, Vn.8B, Vm.8B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vand_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VAND Dd, Dn, Dm</para>
        <para>A64: AND Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vand_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VAND Dd, Dn, Dm</para>
        <para>A64: AND Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>int64x1_t vand_s64 (int64x1_t a, int64x1_t b)</para>
        <para>A32: VAND Dd, Dn, Dm</para>
        <para>A64: AND Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vand_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VAND Dd, Dn, Dm</para>
        <para>A64: AND Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vand_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VAND Dd, Dn, Dm</para>
        <para>A64: AND Vd.8B, Vn.8B, Vm.8B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vand_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VAND Dd, Dn, Dm</para>
        <para>A64: AND Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vand_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VAND Dd, Dn, Dm</para>
        <para>A64: AND Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.And(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>uint64x1_t vand_u64 (uint64x1_t a, uint64x1_t b)</para>
        <para>A32: VAND Dd, Dn, Dm</para>
        <para>A64: AND Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vbicq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VBIC Qd, Qn, Qm</para>
        <para>A64: BIC Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vbicq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A32: VBIC Qd, Qn, Qm</para>
        <para>A64: BIC Vd.16B, Vn.16B, Vm.16B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vbicq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VBIC Qd, Qn, Qm</para>
        <para>A64: BIC Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vbicq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VBIC Qd, Qn, Qm</para>
        <para>A64: BIC Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vbicq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A32: VBIC Qd, Qn, Qm</para>
        <para>A64: BIC Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vbicq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VBIC Qd, Qn, Qm</para>
        <para>A64: BIC Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vbicq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VBIC Qd, Qn, Qm</para>
        <para>A64: BIC Vd.16B, Vn.16B, Vm.16B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vbicq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VBIC Qd, Qn, Qm</para>
        <para>A64: BIC Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vbicq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VBIC Qd, Qn, Qm</para>
        <para>A64: BIC Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vbicq_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A32: VBIC Qd, Qn, Qm</para>
        <para>A64: BIC Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vbic_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VBIC Dd, Dn, Dm</para>
        <para>A64: BIC Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vbic_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A32: VBIC Dd, Dn, Dm</para>
        <para>A64: BIC Vd.8B, Vn.8B, Vm.8B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vbic_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VBIC Dd, Dn, Dm</para>
        <para>A64: BIC Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vbic_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VBIC Dd, Dn, Dm</para>
        <para>A64: BIC Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>int64x1_t vbic_s64 (int64x1_t a, int64x1_t b)</para>
        <para>A32: VBIC Dd, Dn, Dm</para>
        <para>A64: BIC Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vbic_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VBIC Dd, Dn, Dm</para>
        <para>A64: BIC Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vbic_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VBIC Dd, Dn, Dm</para>
        <para>A64: BIC Vd.8B, Vn.8B, Vm.8B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vbic_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VBIC Dd, Dn, Dm</para>
        <para>A64: BIC Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vbic_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VBIC Dd, Dn, Dm</para>
        <para>A64: BIC Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseClear(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>uint64x1_t vbic_u64 (uint64x1_t a, uint64x1_t b)</para>
        <para>A32: VBIC Dd, Dn, Dm</para>
        <para>A64: BIC Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vbslq_u8 (uint8x16_t a, uint8x16_t b, uint8x16_t c)</para>
        <para>A32: VBSL Qd, Qn, Qm</para>
        <para>A64: BSL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vbslq_f64 (uint64x2_t a, float64x2_t b, float64x2_t c)</para>
        <para>A32: VBSL Qd, Qn, Qm</para>
        <para>A64: BSL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vbslq_s16 (uint16x8_t a, int16x8_t b, int16x8_t c)</para>
        <para>A32: VBSL Qd, Qn, Qm</para>
        <para>A64: BSL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vbslq_s32 (uint32x4_t a, int32x4_t b, int32x4_t c)</para>
        <para>A32: VBSL Qd, Qn, Qm</para>
        <para>A64: BSL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vbslq_s64 (uint64x2_t a, int64x2_t b, int64x2_t c)</para>
        <para>A32: VBSL Qd, Qn, Qm</para>
        <para>A64: BSL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vbslq_s8 (uint8x16_t a, int8x16_t b, int8x16_t c)</para>
        <para>A32: VBSL Qd, Qn, Qm</para>
        <para>A64: BSL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vbslq_f32 (uint32x4_t a, float32x4_t b, float32x4_t c)</para>
        <para>A32: VBSL Qd, Qn, Qm</para>
        <para>A64: BSL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vbslq_u16 (uint16x8_t a, uint16x8_t b, uint16x8_t c)</para>
        <para>A32: VBSL Qd, Qn, Qm</para>
        <para>A64: BSL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vbslq_u32 (uint32x4_t a, uint32x4_t b, uint32x4_t c)</para>
        <para>A32: VBSL Qd, Qn, Qm</para>
        <para>A64: BSL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vbslq_u64 (uint64x2_t a, uint64x2_t b, uint64x2_t c)</para>
        <para>A32: VBSL Qd, Qn, Qm</para>
        <para>A64: BSL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vbsl_u8 (uint8x8_t a, uint8x8_t b, uint8x8_t c)</para>
        <para>A32: VBSL Dd, Dn, Dm</para>
        <para>A64: BSL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vbsl_f64 (uint64x1_t a, float64x1_t b, float64x1_t c)</para>
        <para>A32: VBSL Dd, Dn, Dm</para>
        <para>A64: BSL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vbsl_s16 (uint16x4_t a, int16x4_t b, int16x4_t c)</para>
        <para>A32: VBSL Dd, Dn, Dm</para>
        <para>A64: BSL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vbsl_s32 (uint32x2_t a, int32x2_t b, int32x2_t c)</para>
        <para>A32: VBSL Dd, Dn, Dm</para>
        <para>A64: BSL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>int64x1_t vbsl_s64 (uint64x1_t a, int64x1_t b, int64x1_t c)</para>
        <para>A32: VBSL Dd, Dn, Dm</para>
        <para>A64: BSL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vbsl_s8 (uint8x8_t a, int8x8_t b, int8x8_t c)</para>
        <para>A32: VBSL Dd, Dn, Dm</para>
        <para>A64: BSL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vbsl_f32 (uint32x2_t a, float32x2_t b, float32x2_t c)</para>
        <para>A32: VBSL Dd, Dn, Dm</para>
        <para>A64: BSL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vbsl_u16 (uint16x4_t a, uint16x4_t b, uint16x4_t c)</para>
        <para>A32: VBSL Dd, Dn, Dm</para>
        <para>A64: BSL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vbsl_u32 (uint32x2_t a, uint32x2_t b, uint32x2_t c)</para>
        <para>A32: VBSL Dd, Dn, Dm</para>
        <para>A64: BSL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.BitwiseSelect(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>uint64x1_t vbsl_u64 (uint64x1_t a, uint64x1_t b, uint64x1_t c)</para>
        <para>A32: VBSL Dd, Dn, Dm</para>
        <para>A64: BSL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="select" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Ceiling(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vrndpq_f32 (float32x4_t a)</para>
        <para>A32: VRINTP.F32 Qd, Qm</para>
        <para>A64: FRINTP Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Ceiling(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vrndp_f32 (float32x2_t a)</para>
        <para>A32: VRINTP.F32 Dd, Dm</para>
        <para>A64: FRINTP Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CeilingScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vrndp_f64 (float64x1_t a)</para>
        <para>A32: VRINTP.F64 Dd, Dm</para>
        <para>A64: FRINTP Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CeilingScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vrndps_f32 (float32_t a)</para>
        <para>A32: VRINTP.F32 Sd, Sm</para>
        <para>A64: FRINTP Sd, Sn The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vceqq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VCEQ.I8 Qd, Qn, Qm</para>
        <para>A64: CMEQ Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>uint16x8_t vceqq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VCEQ.I16 Qd, Qn, Qm</para>
        <para>A64: CMEQ Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>uint32x4_t vceqq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VCEQ.I32 Qd, Qn, Qm</para>
        <para>A64: CMEQ Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareEqual(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>uint8x16_t vceqq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VCEQ.I8 Qd, Qn, Qm</para>
        <para>A64: CMEQ Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>uint32x4_t vceqq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VCEQ.F32 Qd, Qn, Qm</para>
        <para>A64: FCMEQ Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareEqual(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vceqq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VCEQ.I16 Qd, Qn, Qm</para>
        <para>A64: CMEQ Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareEqual(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vceqq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VCEQ.I32 Qd, Qn, Qm</para>
        <para>A64: CMEQ Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareEqual(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vceq_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VCEQ.I8 Dd, Dn, Dm</para>
        <para>A64: CMEQ Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareEqual(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16x4_t vceq_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VCEQ.I16 Dd, Dn, Dm</para>
        <para>A64: CMEQ Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareEqual(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32x2_t vceq_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VCEQ.I32 Dd, Dn, Dm</para>
        <para>A64: CMEQ Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareEqual(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8x8_t vceq_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VCEQ.I8 Dd, Dn, Dm</para>
        <para>A64: CMEQ Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareEqual(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32x2_t vceq_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VCEQ.F32 Dd, Dn, Dm</para>
        <para>A64: FCMEQ Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareEqual(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vceq_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VCEQ.I16 Dd, Dn, Dm</para>
        <para>A64: CMEQ Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareEqual(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vceq_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VCEQ.I32 Dd, Dn, Dm</para>
        <para>A64: CMEQ Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vcgtq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VCGT.U8 Qd, Qn, Qm</para>
        <para>A64: CMHI Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>uint16x8_t vcgtq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VCGT.S16 Qd, Qn, Qm</para>
        <para>A64: CMGT Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>uint32x4_t vcgtq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VCGT.S32 Qd, Qn, Qm</para>
        <para>A64: CMGT Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>uint8x16_t vcgtq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VCGT.S8 Qd, Qn, Qm</para>
        <para>A64: CMGT Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>uint32x4_t vcgtq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VCGT.F32 Qd, Qn, Qm</para>
        <para>A64: FCMGT Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vcgtq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VCGT.U16 Qd, Qn, Qm</para>
        <para>A64: CMHI Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vcgtq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VCGT.U32 Qd, Qn, Qm</para>
        <para>A64: CMHI Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThan(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vcgt_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VCGT.U8 Dd, Dn, Dm</para>
        <para>A64: CMHI Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThan(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16x4_t vcgt_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VCGT.S16 Dd, Dn, Dm</para>
        <para>A64: CMGT Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThan(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32x2_t vcgt_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VCGT.S32 Dd, Dn, Dm</para>
        <para>A64: CMGT Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThan(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8x8_t vcgt_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VCGT.S8 Dd, Dn, Dm</para>
        <para>A64: CMGT Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThan(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32x2_t vcgt_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VCGT.F32 Dd, Dn, Dm</para>
        <para>A64: FCMGT Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThan(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vcgt_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VCGT.U16 Dd, Dn, Dm</para>
        <para>A64: CMHI Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThan(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vcgt_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VCGT.U32 Dd, Dn, Dm</para>
        <para>A64: CMHI Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vcgeq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VCGE.U8 Qd, Qn, Qm</para>
        <para>A64: CMHS Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>uint16x8_t vcgeq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VCGE.S16 Qd, Qn, Qm</para>
        <para>A64: CMGE Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>uint32x4_t vcgeq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VCGE.S32 Qd, Qn, Qm</para>
        <para>A64: CMGE Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>uint8x16_t vcgeq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VCGE.S8 Qd, Qn, Qm</para>
        <para>A64: CMGE Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>uint32x4_t vcgeq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VCGE.F32 Qd, Qn, Qm</para>
        <para>A64: FCMGE Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vcgeq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VCGE.U16 Qd, Qn, Qm</para>
        <para>A64: CMHS Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vcgeq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VCGE.U32 Qd, Qn, Qm</para>
        <para>A64: CMHS Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vcge_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VCGE.U8 Dd, Dn, Dm</para>
        <para>A64: CMHS Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16x4_t vcge_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VCGE.S16 Dd, Dn, Dm</para>
        <para>A64: CMGE Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32x2_t vcge_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VCGE.S32 Dd, Dn, Dm</para>
        <para>A64: CMGE Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8x8_t vcge_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VCGE.S8 Dd, Dn, Dm</para>
        <para>A64: CMGE Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32x2_t vcge_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VCGE.F32 Dd, Dn, Dm</para>
        <para>A64: FCMGE Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vcge_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VCGE.U16 Dd, Dn, Dm</para>
        <para>A64: CMHS Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vcge_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VCGE.U32 Dd, Dn, Dm</para>
        <para>A64: CMHS Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vcltq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VCLT.U8 Qd, Qn, Qm</para>
        <para>A64: CMHI Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>uint16x8_t vcltq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VCLT.S16 Qd, Qn, Qm</para>
        <para>A64: CMGT Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>uint32x4_t vcltq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VCLT.S32 Qd, Qn, Qm</para>
        <para>A64: CMGT Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>uint8x16_t vcltq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VCLT.S8 Qd, Qn, Qm</para>
        <para>A64: CMGT Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>uint32x4_t vcltq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VCLT.F32 Qd, Qn, Qm</para>
        <para>A64: FCMGT Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vcltq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VCLT.U16 Qd, Qn, Qm</para>
        <para>A64: CMHI Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vcltq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VCLT.U32 Qd, Qn, Qm</para>
        <para>A64: CMHI Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThan(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vclt_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VCLT.U8 Dd, Dn, Dm</para>
        <para>A64: CMHI Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThan(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16x4_t vclt_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VCLT.S16 Dd, Dn, Dm</para>
        <para>A64: CMGT Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThan(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32x2_t vclt_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VCLT.S32 Dd, Dn, Dm</para>
        <para>A64: CMGT Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThan(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8x8_t vclt_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VCLT.S8 Dd, Dn, Dm</para>
        <para>A64: CMGT Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThan(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32x2_t vclt_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VCLT.F32 Dd, Dn, Dm</para>
        <para>A64: FCMGT Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThan(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vclt_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VCLT.U16 Dd, Dn, Dm</para>
        <para>A64: CMHI Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThan(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vclt_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VCLT.U32 Dd, Dn, Dm</para>
        <para>A64: CMHI Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vcleq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VCLE.U8 Qd, Qn, Qm</para>
        <para>A64: CMHS Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>uint16x8_t vcleq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VCLE.S16 Qd, Qn, Qm</para>
        <para>A64: CMGE Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>uint32x4_t vcleq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VCLE.S32 Qd, Qn, Qm</para>
        <para>A64: CMGE Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>uint8x16_t vcleq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VCLE.S8 Qd, Qn, Qm</para>
        <para>A64: CMGE Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>uint32x4_t vcleq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VCLE.F32 Qd, Qn, Qm</para>
        <para>A64: FCMGE Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vcleq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VCLE.U16 Qd, Qn, Qm</para>
        <para>A64: CMHS Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vcleq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VCLE.U32 Qd, Qn, Qm</para>
        <para>A64: CMHS Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vcle_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VCLE.U8 Dd, Dn, Dm</para>
        <para>A64: CMHS Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16x4_t vcle_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VCLE.S16 Dd, Dn, Dm</para>
        <para>A64: CMGE Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32x2_t vcle_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VCLE.S32 Dd, Dn, Dm</para>
        <para>A64: CMGE Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8x8_t vcle_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VCLE.S8 Dd, Dn, Dm</para>
        <para>A64: CMGE Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32x2_t vcle_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VCLE.F32 Dd, Dn, Dm</para>
        <para>A64: FCMGE Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vcle_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VCLE.U16 Dd, Dn, Dm</para>
        <para>A64: CMHS Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vcle_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VCLE.U32 Dd, Dn, Dm</para>
        <para>A64: CMHS Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareTest(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vtstq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VTST.8 Qd, Qn, Qm</para>
        <para>A64: CMTST Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareTest(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>uint16x8_t vtstq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VTST.16 Qd, Qn, Qm</para>
        <para>A64: CMTST Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareTest(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>uint32x4_t vtstq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VTST.32 Qd, Qn, Qm</para>
        <para>A64: CMTST Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareTest(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>uint8x16_t vtstq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VTST.8 Qd, Qn, Qm</para>
        <para>A64: CMTST Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareTest(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>uint32x4_t vtstq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VTST.32 Qd, Qn, Qm</para>
        <para>A64: CMTST Vd.4S, Vn.4S, Vm.4S The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareTest(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vtstq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VTST.16 Qd, Qn, Qm</para>
        <para>A64: CMTST Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareTest(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vtstq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VTST.32 Qd, Qn, Qm</para>
        <para>A64: CMTST Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareTest(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vtst_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VTST.8 Dd, Dn, Dm</para>
        <para>A64: CMTST Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareTest(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16x4_t vtst_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VTST.16 Dd, Dn, Dm</para>
        <para>A64: CMTST Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareTest(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32x2_t vtst_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VTST.32 Dd, Dn, Dm</para>
        <para>A64: CMTST Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareTest(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8x8_t vtst_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VTST.8 Dd, Dn, Dm</para>
        <para>A64: CMTST Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareTest(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32x2_t vtst_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VTST.32 Dd, Dn, Dm</para>
        <para>A64: CMTST Vd.2S, Vn.2S, Vm.2S The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareTest(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vtst_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VTST.16 Dd, Dn, Dm</para>
        <para>A64: CMTST Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.CompareTest(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vtst_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VTST.32 Dd, Dn, Dm</para>
        <para>A64: CMTST Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToInt32RoundAwayFromZero(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int32x4_t vcvtaq_s32_f32 (float32x4_t a)</para>
        <para>A32: VCVTA.S32.F32 Qd, Qm</para>
        <para>A64: FCVTAS Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToInt32RoundAwayFromZero(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>int32x2_t vcvta_s32_f32 (float32x2_t a)</para>
        <para>A32: VCVTA.S32.F32 Dd, Dm</para>
        <para>A64: FCVTAS Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToInt32RoundAwayFromZeroScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>int32_t vcvtas_s32_f32 (float32_t a)</para>
        <para>A32: VCVTA.S32.F32 Sd, Sm</para>
        <para>A64: FCVTAS Sd, Sn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToInt32RoundToEven(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int32x4_t vcvtnq_s32_f32 (float32x4_t a)</para>
        <para>A32: VCVTN.S32.F32 Qd, Qm</para>
        <para>A64: FCVTNS Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToInt32RoundToEven(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>int32x2_t vcvtn_s32_f32 (float32x2_t a)</para>
        <para>A32: VCVTN.S32.F32 Dd, Dm</para>
        <para>A64: FCVTNS Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToInt32RoundToEvenScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>int32_t vcvtns_s32_f32 (float32_t a)</para>
        <para>A32: VCVTN.S32.F32 Sd, Sm</para>
        <para>A64: FCVTNS Sd, Sn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToInt32RoundToNegativeInfinity(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int32x4_t vcvtmq_s32_f32 (float32x4_t a)</para>
        <para>A32: VCVTM.S32.F32 Qd, Qm</para>
        <para>A64: FCVTMS Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToInt32RoundToNegativeInfinity(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>int32x2_t vcvtm_s32_f32 (float32x2_t a)</para>
        <para>A32: VCVTM.S32.F32 Dd, Dm</para>
        <para>A64: FCVTMS Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToInt32RoundToNegativeInfinityScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>int32_t vcvtms_s32_f32 (float32_t a)</para>
        <para>A32: VCVTM.S32.F32 Sd, Sm</para>
        <para>A64: FCVTMS Sd, Sn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToInt32RoundToPositiveInfinity(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int32x4_t vcvtpq_s32_f32 (float32x4_t a)</para>
        <para>A32: VCVTP.S32.F32 Qd, Qm</para>
        <para>A64: FCVTPS Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToInt32RoundToPositiveInfinity(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>int32x2_t vcvtp_s32_f32 (float32x2_t a)</para>
        <para>A32: VCVTP.S32.F32 Dd, Dm</para>
        <para>A64: FCVTPS Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToInt32RoundToPositiveInfinityScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>int32_t vcvtps_s32_f32 (float32_t a)</para>
        <para>A32: VCVTP.S32.F32 Sd, Sm</para>
        <para>A64: FCVTPS Sd, Sn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToInt32RoundToZero(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int32x4_t vcvtq_s32_f32 (float32x4_t a)</para>
        <para>A32: VCVT.S32.F32 Qd, Qm</para>
        <para>A64: FCVTZS Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToInt32RoundToZero(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>int32x2_t vcvt_s32_f32 (float32x2_t a)</para>
        <para>A32: VCVT.S32.F32 Dd, Dm</para>
        <para>A64: FCVTZS Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToInt32RoundToZeroScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>int32_t vcvts_s32_f32 (float32_t a)</para>
        <para>A32: VCVT.S32.F32 Sd, Sm</para>
        <para>A64: FCVTZS Sd, Sn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToSingle(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>float32x4_t vcvtq_f32_s32 (int32x4_t a)</para>
        <para>A32: VCVT.F32.S32 Qd, Qm</para>
        <para>A64: SCVTF Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToSingle(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>float32x4_t vcvtq_f32_u32 (uint32x4_t a)</para>
        <para>A32: VCVT.F32.U32 Qd, Qm</para>
        <para>A64: UCVTF Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToSingle(System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>float32x2_t vcvt_f32_s32 (int32x2_t a)</para>
        <para>A32: VCVT.F32.S32 Dd, Dm</para>
        <para>A64: SCVTF Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToSingle(System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>float32x2_t vcvt_f32_u32 (uint32x2_t a)</para>
        <para>A32: VCVT.F32.U32 Dd, Dm</para>
        <para>A64: UCVTF Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToSingleScalar(System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>float32_t vcvts_f32_s32 (int32_t a)</para>
        <para>A32: VCVT.F32.S32 Sd, Sm</para>
        <para>A64: SCVTF Sd, Sn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToSingleScalar(System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>float32_t vcvts_f32_u32 (uint32_t a)</para>
        <para>A32: VCVT.F32.U32 Sd, Sm</para>
        <para>A64: UCVTF Sd, Sn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToUInt32RoundAwayFromZero(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>uint32x4_t vcvtaq_u32_f32 (float32x4_t a)</para>
        <para>A32: VCVTA.U32.F32 Qd, Qm</para>
        <para>A64: FCVTAU Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToUInt32RoundAwayFromZero(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32x2_t vcvta_u32_f32 (float32x2_t a)</para>
        <para>A32: VCVTA.U32.F32 Dd, Dm</para>
        <para>A64: FCVTAU Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToUInt32RoundAwayFromZeroScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32_t vcvtas_u32_f32 (float32_t a)</para>
        <para>A32: VCVTA.U32.F32 Sd, Sm</para>
        <para>A64: FCVTAU Sd, Sn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToUInt32RoundToEven(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>uint32x4_t vcvtnq_u32_f32 (float32x4_t a)</para>
        <para>A32: VCVTN.U32.F32 Qd, Qm</para>
        <para>A64: FCVTNU Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToUInt32RoundToEven(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32x2_t vcvtn_u32_f32 (float32x2_t a)</para>
        <para>A32: VCVTN.U32.F32 Dd, Dm</para>
        <para>A64: FCVTNU Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToUInt32RoundToEvenScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32_t vcvtns_u32_f32 (float32_t a)</para>
        <para>A32: VCVTN.U32.F32 Sd, Sm</para>
        <para>A64: FCVTNU Sd, Sn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToUInt32RoundToNegativeInfinity(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>uint32x4_t vcvtmq_u32_f32 (float32x4_t a)</para>
        <para>A32: VCVTM.U32.F32 Qd, Qm</para>
        <para>A64: FCVTMU Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToUInt32RoundToNegativeInfinity(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32x2_t vcvtm_u32_f32 (float32x2_t a)</para>
        <para>A32: VCVTM.U32.F32 Dd, Dm</para>
        <para>A64: FCVTMU Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToUInt32RoundToNegativeInfinityScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32_t vcvtms_u32_f32 (float32_t a)</para>
        <para>A32: VCVTM.U32.F32 Sd, Sm</para>
        <para>A64: FCVTMU Sd, Sn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToUInt32RoundToPositiveInfinity(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>uint32x4_t vcvtpq_u32_f32 (float32x4_t a)</para>
        <para>A32: VCVTP.U32.F32 Qd, Qm</para>
        <para>A64: FCVTPU Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToUInt32RoundToPositiveInfinity(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32x2_t vcvtp_u32_f32 (float32x2_t a)</para>
        <para>A32: VCVTP.U32.F32 Dd, Dm</para>
        <para>A64: FCVTPU Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToUInt32RoundToPositiveInfinityScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32_t vcvtps_u32_f32 (float32_t a)</para>
        <para>A32: VCVTP.U32.F32 Sd, Sm</para>
        <para>A64: FCVTPU Sd, Sn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToUInt32RoundToZero(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>uint32x4_t vcvtq_u32_f32 (float32x4_t a)</para>
        <para>A32: VCVT.U32.F32 Qd, Qm</para>
        <para>A64: FCVTZU Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToUInt32RoundToZero(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32x2_t vcvt_u32_f32 (float32x2_t a)</para>
        <para>A32: VCVT.U32.F32 Dd, Dm</para>
        <para>A64: FCVTZU Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ConvertToUInt32RoundToZeroScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32_t vcvts_u32_f32 (float32_t a)</para>
        <para>A32: VCVT.U32.F32 Sd, Sm</para>
        <para>A64: FCVTZU Sd, Sn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DivideScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vdiv_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A32: VDIV.F64 Dd, Dn, Dm</para>
        <para>A64: FDIV Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DivideScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vdivs_f32 (float32_t a, float32_t b)</para>
        <para>A32: VDIV.F32 Sd, Sn, Sm</para>
        <para>A64: FDIV Sd, Sn, Sm The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector128(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>uint8x16_t vdupq_lane_u8 (uint8x16_t vec, const int lane)</para>
        <para>A32: VDUP.8 Qd, Dm[index]</para>
        <para>A64: DUP Vd.16B, Vn.B[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector128(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int16x8_t vdupq_lane_s16 (int16x8_t vec, const int lane)</para>
        <para>A32: VDUP.16 Qd, Dm[index]</para>
        <para>A64: DUP Vd.8H, Vn.H[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector128(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int32x4_t vdupq_lane_s32 (int32x4_t vec, const int lane)</para>
        <para>A32: VDUP.32 Qd, Dm[index]</para>
        <para>A64: DUP Vd.4S, Vn.S[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector128(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>int8x16_t vdupq_lane_s8 (int8x16_t vec, const int lane)</para>
        <para>A32: VDUP.8 Qd, Dm[index]</para>
        <para>A64: DUP Vd.16B, Vn.B[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector128(System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>float32x4_t vdupq_lane_f32 (float32x4_t vec, const int lane)</para>
        <para>A32: VDUP.32 Qd, Dm[index]</para>
        <para>A64: DUP Vd.4S, Vn.S[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector128(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x8_t vdupq_lane_u16 (uint16x8_t vec, const int lane)</para>
        <para>A32: VDUP.16 Qd, Dm[index]</para>
        <para>A64: DUP Vd.8H, Vn.H[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector128(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x4_t vdupq_lane_u32 (uint32x4_t vec, const int lane)</para>
        <para>A32: VDUP.32 Qd, Dm[index]</para>
        <para>A64: DUP Vd.4S, Vn.S[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector128(System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte)">
      <summary>
        <para>uint8x16_t vdupq_lane_u8 (uint8x8_t vec, const int lane)</para>
        <para>A32: VDUP.8 Qd, Dm[index]</para>
        <para>A64: DUP Vd.16B, Vn.B[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector128(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16x8_t vdupq_lane_s16 (int16x4_t vec, const int lane)</para>
        <para>A32: VDUP.16 Qd, Dm[index]</para>
        <para>A64: DUP Vd.8H, Vn.H[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector128(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32x4_t vdupq_lane_s32 (int32x2_t vec, const int lane)</para>
        <para>A32: VDUP.32 Qd, Dm[index]</para>
        <para>A64: DUP Vd.4S, Vn.S[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector128(System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>int8x16_t vdupq_lane_s8 (int8x8_t vec, const int lane)</para>
        <para>A32: VDUP.8 Qd, Dm[index]</para>
        <para>A64: DUP Vd.16B, Vn.B[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector128(System.Runtime.Intrinsics.Vector64{System.Single},System.Byte)">
      <summary>
        <para>float32x4_t vdupq_lane_f32 (float32x2_t vec, const int lane)</para>
        <para>A32: VDUP.32 Qd, Dm[index]</para>
        <para>A64: DUP Vd.4S, Vn.S[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector128(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x8_t vdupq_lane_u16 (uint16x4_t vec, const int lane)</para>
        <para>A32: VDUP.16 Qd, Dm[index]</para>
        <para>A64: DUP Vd.8H, Vn.H[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector128(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x4_t vdupq_lane_u32 (uint32x2_t vec, const int lane)</para>
        <para>A32: VDUP.32 Qd, Dm[index]</para>
        <para>A64: DUP Vd.4S, Vn.S[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector64(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>uint8x8_t vdup_laneq_u8 (uint8x16_t vec, const int lane)</para>
        <para>A32: VDUP.8 Dd, Dm[index]</para>
        <para>A64: DUP Vd.8B, Vn.B[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector64(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int16x4_t vdup_laneq_s16 (int16x8_t vec, const int lane)</para>
        <para>A32: VDUP.16 Dd, Dm[index]</para>
        <para>A64: DUP Vd.4H, Vn.H[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector64(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int32x2_t vdup_laneq_s32 (int32x4_t vec, const int lane)</para>
        <para>A32: VDUP.32 Dd, Dm[index]</para>
        <para>A64: DUP Vd.2S, Vn.S[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector64(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>int8x8_t vdup_laneq_s8 (int8x16_t vec, const int lane)</para>
        <para>A32: VDUP.8 Dd, Dm[index]</para>
        <para>A64: DUP Vd.8B, Vn.B[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector64(System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>float32x2_t vdup_laneq_f32 (float32x4_t vec, const int lane)</para>
        <para>A32: VDUP.32 Dd, Dm[index]</para>
        <para>A64: DUP Vd.2S, Vn.S[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector64(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x4_t vdup_laneq_u16 (uint16x8_t vec, const int lane)</para>
        <para>A32: VDUP.16 Dd, Dm[index]</para>
        <para>A64: DUP Vd.4H, Vn.H[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector64(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x2_t vdup_laneq_u32 (uint32x4_t vec, const int lane)</para>
        <para>A32: VDUP.32 Dd, Dm[index]</para>
        <para>A64: DUP Vd.2S, Vn.S[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector64(System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte)">
      <summary>
        <para>uint8x8_t vdup_lane_u8 (uint8x8_t vec, const int lane)</para>
        <para>A32: VDUP.8 Dd, Dm[index]</para>
        <para>A64: DUP Vd.8B, Vn.B[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector64(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16x4_t vdup_lane_s16 (int16x4_t vec, const int lane)</para>
        <para>A32: VDUP.16 Dd, Dm[index]</para>
        <para>A64: DUP Vd.4H, Vn.H[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector64(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32x2_t vdup_lane_s32 (int32x2_t vec, const int lane)</para>
        <para>A32: VDUP.32 Dd, Dm[index]</para>
        <para>A64: DUP Vd.2S, Vn.S[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector64(System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>int8x8_t vdup_lane_s8 (int8x8_t vec, const int lane)</para>
        <para>A32: VDUP.8 Dd, Dm[index]</para>
        <para>A64: DUP Vd.8B, Vn.B[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector64(System.Runtime.Intrinsics.Vector64{System.Single},System.Byte)">
      <summary>
        <para>float32x2_t vdup_lane_f32 (float32x2_t vec, const int lane)</para>
        <para>A32: VDUP.32 Dd, Dm[index]</para>
        <para>A64: DUP Vd.2S, Vn.S[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector64(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x4_t vdup_lane_u16 (uint16x4_t vec, const int lane)</para>
        <para>A32: VDUP.16 Dd, Dm[index]</para>
        <para>A64: DUP Vd.4H, Vn.H[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateSelectedScalarToVector64(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x2_t vdup_lane_u32 (uint32x2_t vec, const int lane)</para>
        <para>A32: VDUP.32 Dd, Dm[index]</para>
        <para>A64: DUP Vd.2S, Vn.S[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateToVector128(System.Byte)">
      <summary>
        <para>uint8x16_t vdupq_n_u8 (uint8_t value)</para>
        <para>A32: VDUP.8 Qd, Rt</para>
        <para>A64: DUP Vd.16B, Rn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateToVector128(System.Int16)">
      <summary>
        <para>int16x8_t vdupq_n_s16 (int16_t value)</para>
        <para>A32: VDUP.16 Qd, Rt</para>
        <para>A64: DUP Vd.8H, Rn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateToVector128(System.Int32)">
      <summary>
        <para>int32x4_t vdupq_n_s32 (int32_t value)</para>
        <para>A32: VDUP.32 Qd, Rt</para>
        <para>A64: DUP Vd.4S, Rn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateToVector128(System.SByte)">
      <summary>
        <para>int8x16_t vdupq_n_s8 (int8_t value)</para>
        <para>A32: VDUP.8 Qd, Rt</para>
        <para>A64: DUP Vd.16B, Rn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateToVector128(System.Single)">
      <summary>
        <para>float32x4_t vdupq_n_f32 (float32_t value)</para>
        <para>A32: VDUP Qd, Dm[0]</para>
        <para>A64: DUP Vd.4S, Vn.S[0]</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateToVector128(System.UInt16)">
      <summary>
        <para>uint16x8_t vdupq_n_u16 (uint16_t value)</para>
        <para>A32: VDUP.16 Qd, Rt</para>
        <para>A64: DUP Vd.8H, Rn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateToVector128(System.UInt32)">
      <summary>
        <para>uint32x4_t vdupq_n_u32 (uint32_t value)</para>
        <para>A32: VDUP.32 Qd, Rt</para>
        <para>A64: DUP Vd.4S, Rn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateToVector64(System.Byte)">
      <summary>
        <para>uint8x8_t vdup_n_u8 (uint8_t value)</para>
        <para>A32: VDUP.8 Dd, Rt</para>
        <para>A64: DUP Vd.8B, Rn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateToVector64(System.Int16)">
      <summary>
        <para>int16x4_t vdup_n_s16 (int16_t value)</para>
        <para>A32: VDUP.16 Dd, Rt</para>
        <para>A64: DUP Vd.4H, Rn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateToVector64(System.Int32)">
      <summary>
        <para>int32x2_t vdup_n_s32 (int32_t value)</para>
        <para>A32: VDUP.32 Dd, Rt</para>
        <para>A64: DUP Vd.2S, Rn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateToVector64(System.SByte)">
      <summary>
        <para>int8x8_t vdup_n_s8 (int8_t value)</para>
        <para>A32: VDUP.8 Dd, Rt</para>
        <para>A64: DUP Vd.8B, Rn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateToVector64(System.Single)">
      <summary>
        <para>float32x2_t vdup_n_f32 (float32_t value)</para>
        <para>A32: VDUP Dd, Dm[0]</para>
        <para>A64: DUP Vd.2S, Vn.S[0]</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateToVector64(System.UInt16)">
      <summary>
        <para>uint16x4_t vdup_n_u16 (uint16_t value)</para>
        <para>A32: VDUP.16 Dd, Rt</para>
        <para>A64: DUP Vd.4H, Rn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.DuplicateToVector64(System.UInt32)">
      <summary>
        <para>uint32x2_t vdup_n_u32 (uint32_t value)</para>
        <para>A32: VDUP.32 Dd, Rt</para>
        <para>A64: DUP Vd.2S, Rn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Extract(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>uint8_t vgetq_lane_u8 (uint8x16_t v, const int lane)</para>
        <para>A32: VMOV.U8 Rt, Dn[lane]</para>
        <para>A64: UMOV Wd, Vn.B[lane]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Extract(System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>float64_t vgetq_lane_f64 (float64x2_t v, const int lane)</para>
        <para>A32: VMOV.F64 Dd, Dm</para>
        <para>A64: DUP Dd, Vn.D[lane]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Extract(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int16_t vgetq_lane_s16 (int16x8_t v, const int lane)</para>
        <para>A32: VMOV.S16 Rt, Dn[lane]</para>
        <para>A64: SMOV Wd, Vn.H[lane]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Extract(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int32_t vgetq_lane_s32 (int32x4_t v, const int lane)</para>
        <para>A32: VMOV.32 Rt, Dn[lane]</para>
        <para>A64: SMOV Wd, Vn.S[lane]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Extract(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>int64_t vgetq_lane_s64 (int64x2_t v, const int lane)</para>
        <para>A32: VMOV Rt, Rt2, Dm</para>
        <para>A64: UMOV Xd, Vn.D[lane]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Extract(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>int8_t vgetq_lane_s8 (int8x16_t v, const int lane)</para>
        <para>A32: VMOV.S8 Rt, Dn[lane]</para>
        <para>A64: SMOV Wd, Vn.B[lane]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Extract(System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>float32_t vgetq_lane_f32 (float32x4_t v, const int lane)</para>
        <para>A32: VMOV.F32 Sd, Sm</para>
        <para>A64: DUP Sd, Vn.S[lane]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Extract(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint16_t vgetq_lane_u16 (uint16x8_t v, const int lane)</para>
        <para>A32: VMOV.U16 Rt, Dn[lane]</para>
        <para>A64: UMOV Wd, Vn.H[lane]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Extract(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint32_t vgetq_lane_u32 (uint32x4_t v, const int lane)</para>
        <para>A32: VMOV.32 Rt, Dn[lane]</para>
        <para>A64: UMOV Wd, Vn.S[lane]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Extract(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>uint64_t vgetq_lane_u64 (uint64x2_t v, const int lane)</para>
        <para>A32: VMOV Rt, Rt2, Dm</para>
        <para>A64: UMOV Xd, Vn.D[lane]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Extract(System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte)">
      <summary>
        <para>uint8_t vget_lane_u8 (uint8x8_t v, const int lane)</para>
        <para>A32: VMOV.U8 Rt, Dn[lane]</para>
        <para>A64: UMOV Wd, Vn.B[lane]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Extract(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16_t vget_lane_s16 (int16x4_t v, const int lane)</para>
        <para>A32: VMOV.S16 Rt, Dn[lane]</para>
        <para>A64: SMOV Wd, Vn.H[lane]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Extract(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32_t vget_lane_s32 (int32x2_t v, const int lane)</para>
        <para>A32: VMOV.32 Rt, Dn[lane]</para>
        <para>A64: SMOV Wd, Vn.S[lane]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Extract(System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>int8_t vget_lane_s8 (int8x8_t v, const int lane)</para>
        <para>A32: VMOV.S8 Rt, Dn[lane]</para>
        <para>A64: SMOV Wd, Vn.B[lane]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Extract(System.Runtime.Intrinsics.Vector64{System.Single},System.Byte)">
      <summary>
        <para>float32_t vget_lane_f32 (float32x2_t v, const int lane)</para>
        <para>A32: VMOV.F32 Sd, Sm</para>
        <para>A64: DUP Sd, Vn.S[lane]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Extract(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16_t vget_lane_u16 (uint16x4_t v, const int lane)</para>
        <para>A32: VMOV.U16 Rt, Dn[lane]</para>
        <para>A64: UMOV Wd, Vn.H[lane]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Extract(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32_t vget_lane_u32 (uint32x2_t v, const int lane)</para>
        <para>A32: VMOV.32 Rt, Dn[lane]</para>
        <para>A64: UMOV Wd, Vn.S[lane]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int8x8_t vmovn_s16 (int16x8_t a)</para>
        <para>A32: VMOVN.I16 Dd, Qm</para>
        <para>A64: XTN Vd.8B, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int16x4_t vmovn_s32 (int32x4_t a)</para>
        <para>A32: VMOVN.I32 Dd, Qm</para>
        <para>A64: XTN Vd.4H, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int32x2_t vmovn_s64 (int64x2_t a)</para>
        <para>A32: VMOVN.I64 Dd, Qm</para>
        <para>A64: XTN Vd.2S, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint8x8_t vmovn_u16 (uint16x8_t a)</para>
        <para>A32: VMOVN.I16 Dd, Qm</para>
        <para>A64: XTN Vd.8B, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint16x4_t vmovn_u32 (uint32x4_t a)</para>
        <para>A32: VMOVN.I32 Dd, Qm</para>
        <para>A64: XTN Vd.4H, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint32x2_t vmovn_u64 (uint64x2_t a)</para>
        <para>A32: VMOVN.I64 Dd, Qm</para>
        <para>A64: XTN Vd.2S, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>int8x8_t vqmovn_s16 (int16x8_t a) A32: VQMOVN.S16 Dd, Qm A64: SQXTN Vd.8B, Vn.8H</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>int16x4_t vqmovn_s32 (int32x4_t a) A32: VQMOVN.S32 Dd, Qm A64: SQXTN Vd.4H, Vn.4S</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>int32x2_t vqmovn_s64 (int64x2_t a) A32: VQMOVN.S64 Dd, Qm A64: SQXTN Vd.2S, Vn.2D</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>uint8x8_t vqmovn_u16 (uint16x8_t a) A32: VQMOVN.U16 Dd, Qm A64: UQXTN Vd.8B, Vn.8H</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>uint16x4_t vqmovn_u32 (uint32x4_t a) A32: VQMOVN.U32 Dd, Qm A64: UQXTN Vd.4H, Vn.4S</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>uint32x2_t vqmovn_u64 (uint64x2_t a) A32: VQMOVN.U64 Dd, Qm A64: UQXTN Vd.2S, Vn.2D</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingSaturateUnsignedLower(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>uint8x8_t vqmovun_s16 (int16x8_t a) A32: VQMOVUN.S16 Dd, Qm A64: SQXTUN Vd.8B, Vn.8H</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingSaturateUnsignedLower(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>uint16x4_t vqmovun_s32 (int32x4_t a) A32: VQMOVUN.S32 Dd, Qm A64: SQXTUN Vd.4H, Vn.4S</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingSaturateUnsignedLower(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>uint32x2_t vqmovun_s64 (int64x2_t a) A32: VQMOVUN.S64 Dd, Qm A64: SQXTUN Vd.2S, Vn.2D</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingSaturateUnsignedUpper(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>uint8x16_t vqmovun_high_s16 (uint8x8_t r, int16x8_t a) A32: VQMOVUN.S16 Dd+1, Qm A64: SQXTUN2 Vd.16B, Vn.8H</summary>
      <param name="lower" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingSaturateUnsignedUpper(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>uint16x8_t vqmovun_high_s32 (uint16x4_t r, int32x4_t a) A32: VQMOVUN.S32 Dd+1, Qm A64: SQXTUN2 Vd.8H, Vn.4S</summary>
      <param name="lower" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingSaturateUnsignedUpper(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>uint32x4_t vqmovun_high_s64 (uint32x2_t r, int64x2_t a) A32: VQMOVUN.S64 Dd+1, Qm A64: SQXTUN2 Vd.4S, Vn.2D</summary>
      <param name="lower" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>uint8x16_t vqmovn_high_u16 (uint8x8_t r, uint16x8_t a) A32: VQMOVN.U16 Dd+1, Qm A64: UQXTN2 Vd.16B, Vn.8H</summary>
      <param name="lower" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>int16x8_t vqmovn_high_s32 (int16x4_t r, int32x4_t a) A32: VQMOVN.S32 Dd+1, Qm A64: SQXTN2 Vd.8H, Vn.4S</summary>
      <param name="lower" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>int32x4_t vqmovn_high_s64 (int32x2_t r, int64x2_t a) A32: VQMOVN.S64 Dd+1, Qm A64: SQXTN2 Vd.4S, Vn.2D</summary>
      <param name="lower" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>int8x16_t vqmovn_high_s16 (int8x8_t r, int16x8_t a) A32: VQMOVN.S16 Dd+1, Qm A64: SQXTN2 Vd.16B, Vn.8H</summary>
      <param name="lower" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>uint16x8_t vqmovn_high_u32 (uint16x4_t r, uint32x4_t a) A32: VQMOVN.U32 Dd+1, Qm A64: UQXTN2 Vd.8H, Vn.4S</summary>
      <param name="lower" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>uint32x4_t vqmovn_high_u64 (uint32x2_t r, uint64x2_t a) A32: VQMOVN.U64 Dd+1, Qm A64: UQXTN2 Vd.4S, Vn.2D</summary>
      <param name="lower" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint8x16_t vmovn_high_u16 (uint8x8_t r, uint16x8_t a)</para>
        <para>A32: VMOVN.I16 Dd+1, Qm</para>
        <para>A64: XTN2 Vd.16B, Vn.8H</para>
      </summary>
      <param name="lower" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int16x8_t vmovn_high_s32 (int16x4_t r, int32x4_t a)</para>
        <para>A32: VMOVN.I32 Dd+1, Qm</para>
        <para>A64: XTN2 Vd.8H, Vn.4S</para>
      </summary>
      <param name="lower" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int32x4_t vmovn_high_s64 (int32x2_t r, int64x2_t a)</para>
        <para>A32: VMOVN.I64 Dd+1, Qm</para>
        <para>A64: XTN2 Vd.4S, Vn.2D</para>
      </summary>
      <param name="lower" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int8x16_t vmovn_high_s16 (int8x8_t r, int16x8_t a)</para>
        <para>A32: VMOVN.I16 Dd+1, Qm</para>
        <para>A64: XTN2 Vd.16B, Vn.8H</para>
      </summary>
      <param name="lower" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint16x8_t vmovn_high_u32 (uint16x4_t r, uint32x4_t a)</para>
        <para>A32: VMOVN.I32 Dd+1, Qm</para>
        <para>A64: XTN2 Vd.8H, Vn.4S</para>
      </summary>
      <param name="lower" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint32x4_t vmovn_high_u64 (uint32x2_t r, uint64x2_t a)</para>
        <para>A32: VMOVN.I64 Dd+1, Qm</para>
        <para>A64: XTN2 Vd.4S, Vn.2D</para>
      </summary>
      <param name="lower" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractVector128(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>uint8x16_t vextq_s8 (uint8x16_t a, uint8x16_t b, const int n)</para>
        <para>A32: VEXT.8 Qd, Qn, Qm, #n</para>
        <para>A64: EXT Vd.16B, Vn.16B, Vm.16B, #n</para>
      </summary>
      <param name="upper" />
      <param name="lower" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractVector128(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>float64x2_t vextq_f64 (float64x2_t a, float64x2_t b, const int n)</para>
        <para>A32: VEXT.8 Qd, Qn, Qm, #(n*8)</para>
        <para>A64: EXT Vd.16B, Vn.16B, Vm.16B, #(n*8)</para>
      </summary>
      <param name="upper" />
      <param name="lower" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractVector128(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int16x8_t vextq_s16 (int16x8_t a, int16x8_t b, const int n)</para>
        <para>A32: VEXT.8 Qd, Qn, Qm, #(n*2)</para>
        <para>A64: EXT Vd.16B, Vn.16B, Vm.16B, #(n*2)</para>
      </summary>
      <param name="upper" />
      <param name="lower" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractVector128(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int32x4_t vextq_s32 (int32x4_t a, int32x4_t b, const int n)</para>
        <para>A32: VEXT.8 Qd, Qn, Qm, #(n*4)</para>
        <para>A64: EXT Vd.16B, Vn.16B, Vm.16B, #(n*4)</para>
      </summary>
      <param name="upper" />
      <param name="lower" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractVector128(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>int64x2_t vextq_s64 (int64x2_t a, int64x2_t b, const int n)</para>
        <para>A32: VEXT.8 Qd, Qn, Qm, #(n*8)</para>
        <para>A64: EXT Vd.16B, Vn.16B, Vm.16B, #(n*8)</para>
      </summary>
      <param name="upper" />
      <param name="lower" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractVector128(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>int8x16_t vextq_s8 (int8x16_t a, int8x16_t b, const int n)</para>
        <para>A32: VEXT.8 Qd, Qn, Qm, #n</para>
        <para>A64: EXT Vd.16B, Vn.16B, Vm.16B, #n</para>
      </summary>
      <param name="upper" />
      <param name="lower" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractVector128(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>float32x4_t vextq_f32 (float32x4_t a, float32x4_t b, const int n)</para>
        <para>A32: VEXT.8 Qd, Qn, Qm, #(n*4)</para>
        <para>A64: EXT Vd.16B, Vn.16B, Vm.16B, #(n*4)</para>
      </summary>
      <param name="upper" />
      <param name="lower" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractVector128(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x8_t vextq_s16 (uint16x8_t a, uint16x8_t b, const int n)</para>
        <para>A32: VEXT.8 Qd, Qn, Qm, #(n*2)</para>
        <para>A64: EXT Vd.16B, Vn.16B, Vm.16B, #(n*2)</para>
      </summary>
      <param name="upper" />
      <param name="lower" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractVector128(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x4_t vextq_s32 (uint32x4_t a, uint32x4_t b, const int n)</para>
        <para>A32: VEXT.8 Qd, Qn, Qm, #(n*4)</para>
        <para>A64: EXT Vd.16B, Vn.16B, Vm.16B, #(n*4)</para>
      </summary>
      <param name="upper" />
      <param name="lower" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractVector128(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>uint64x2_t vextq_s64 (uint64x2_t a, uint64x2_t b, const int n)</para>
        <para>A32: VEXT.8 Qd, Qn, Qm, #(n*8)</para>
        <para>A64: EXT Vd.16B, Vn.16B, Vm.16B, #(n*8)</para>
      </summary>
      <param name="upper" />
      <param name="lower" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractVector64(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte)">
      <summary>
        <para>uint8x8_t vext_s8 (uint8x8_t a, uint8x8_t b, const int n)</para>
        <para>A32: VEXT.8 Dd, Dn, Dm, #n</para>
        <para>A64: EXT Vd.8B, Vn.8B, Vm.8B, #n</para>
      </summary>
      <param name="upper" />
      <param name="lower" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractVector64(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16x4_t vext_s16 (int16x4_t a, int16x4_t b, const int n)</para>
        <para>A32: VEXT.8 Dd, Dn, Dm, #(n*2)</para>
        <para>A64: EXT Vd.8B, Vn.8B, Vm.8B, #(n*2)</para>
      </summary>
      <param name="upper" />
      <param name="lower" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractVector64(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32x2_t vext_s32 (int32x2_t a, int32x2_t b, const int n)</para>
        <para>A32: VEXT.8 Dd, Dn, Dm, #(n*4)</para>
        <para>A64: EXT Vd.8B, Vn.8B, Vm.8B, #(n*4)</para>
      </summary>
      <param name="upper" />
      <param name="lower" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractVector64(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>int8x8_t vext_s8 (int8x8_t a, int8x8_t b, const int n)</para>
        <para>A32: VEXT.8 Dd, Dn, Dm, #n</para>
        <para>A64: EXT Vd.8B, Vn.8B, Vm.8B, #n</para>
      </summary>
      <param name="upper" />
      <param name="lower" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractVector64(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Byte)">
      <summary>
        <para>float32x2_t vext_f32 (float32x2_t a, float32x2_t b, const int n)</para>
        <para>A32: VEXT.8 Dd, Dn, Dm, #(n*4)</para>
        <para>A64: EXT Vd.8B, Vn.8B, Vm.8B, #(n*4)</para>
      </summary>
      <param name="upper" />
      <param name="lower" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractVector64(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x4_t vext_s16 (uint16x4_t a, uint16x4_t b, const int n)</para>
        <para>A32: VEXT.8 Dd, Dn, Dm, #(n*2)</para>
        <para>A64: EXT Vd.8B, Vn.8B, Vm.8B, #(n*2)</para>
      </summary>
      <param name="upper" />
      <param name="lower" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ExtractVector64(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x2_t vext_s32 (uint32x2_t a, uint32x2_t b, const int n)</para>
        <para>A32: VEXT.8 Dd, Dn, Dm, #(n*4)</para>
        <para>A64: EXT Vd.8B, Vn.8B, Vm.8B, #(n*4)</para>
      </summary>
      <param name="upper" />
      <param name="lower" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Floor(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vrndmq_f32 (float32x4_t a)</para>
        <para>A32: VRINTM.F32 Qd, Qm</para>
        <para>A64: FRINTM Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Floor(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vrndm_f32 (float32x2_t a)</para>
        <para>A32: VRINTM.F32 Dd, Dm</para>
        <para>A64: FRINTM Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FloorScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vrndm_f64 (float64x1_t a)</para>
        <para>A32: VRINTM.F64 Dd, Dm</para>
        <para>A64: FRINTM Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FloorScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vrndms_f32 (float32_t a)</para>
        <para>A32: VRINTM.F32 Sd, Sm</para>
        <para>A64: FRINTM Sd, Sn The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddHalving(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vhaddq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VHADD.U8 Qd, Qn, Qm</para>
        <para>A64: UHADD Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddHalving(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vhaddq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VHADD.S16 Qd, Qn, Qm</para>
        <para>A64: SHADD Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddHalving(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vhaddq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VHADD.S32 Qd, Qn, Qm</para>
        <para>A64: SHADD Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddHalving(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vhaddq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VHADD.S8 Qd, Qn, Qm</para>
        <para>A64: SHADD Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddHalving(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vhaddq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VHADD.U16 Qd, Qn, Qm</para>
        <para>A64: UHADD Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddHalving(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vhaddq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VHADD.U32 Qd, Qn, Qm</para>
        <para>A64: UHADD Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddHalving(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vhadd_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VHADD.U8 Dd, Dn, Dm</para>
        <para>A64: UHADD Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddHalving(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vhadd_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VHADD.S16 Dd, Dn, Dm</para>
        <para>A64: SHADD Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddHalving(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vhadd_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VHADD.S32 Dd, Dn, Dm</para>
        <para>A64: SHADD Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddHalving(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vhadd_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VHADD.S8 Dd, Dn, Dm</para>
        <para>A64: SHADD Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddHalving(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vhadd_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VHADD.U16 Dd, Dn, Dm</para>
        <para>A64: UHADD Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddHalving(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vhadd_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VHADD.U32 Dd, Dn, Dm</para>
        <para>A64: UHADD Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddRoundedHalving(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vrhaddq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VRHADD.U8 Qd, Qn, Qm</para>
        <para>A64: URHADD Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddRoundedHalving(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vrhaddq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VRHADD.S16 Qd, Qn, Qm</para>
        <para>A64: SRHADD Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddRoundedHalving(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vrhaddq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VRHADD.S32 Qd, Qn, Qm</para>
        <para>A64: SRHADD Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddRoundedHalving(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vrhaddq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VRHADD.S8 Qd, Qn, Qm</para>
        <para>A64: SRHADD Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddRoundedHalving(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vrhaddq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VRHADD.U16 Qd, Qn, Qm</para>
        <para>A64: URHADD Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddRoundedHalving(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vrhaddq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VRHADD.U32 Qd, Qn, Qm</para>
        <para>A64: URHADD Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddRoundedHalving(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vrhadd_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VRHADD.U8 Dd, Dn, Dm</para>
        <para>A64: URHADD Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddRoundedHalving(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vrhadd_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VRHADD.S16 Dd, Dn, Dm</para>
        <para>A64: SRHADD Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddRoundedHalving(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vrhadd_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VRHADD.S32 Dd, Dn, Dm</para>
        <para>A64: SRHADD Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddRoundedHalving(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vrhadd_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VRHADD.S8 Dd, Dn, Dm</para>
        <para>A64: SRHADD Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddRoundedHalving(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vrhadd_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VRHADD.U16 Dd, Dn, Dm</para>
        <para>A64: URHADD Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedAddRoundedHalving(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vrhadd_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VRHADD.U32 Dd, Dn, Dm</para>
        <para>A64: URHADD Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedMultiplyAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vfmaq_f32 (float32x4_t a, float32x4_t b, float32x4_t c)</para>
        <para>A32: VFMA.F32 Qd, Qn, Qm</para>
        <para>A64: FMLA Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedMultiplyAdd(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vfma_f32 (float32x2_t a, float32x2_t b, float32x2_t c)</para>
        <para>A32: VFMA.F32 Dd, Dn, Dm</para>
        <para>A64: FMLA Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedMultiplyAddNegatedScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vfnma_f64 (float64x1_t a, float64x1_t b, float64x1_t c)</para>
        <para>A32: VFNMA.F64 Dd, Dn, Dm</para>
        <para>A64: FNMADD Dd, Dn, Dm, Da The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedMultiplyAddNegatedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vfnmas_f32 (float32_t a, float32_t b, float32_t c)</para>
        <para>A32: VFNMA.F32 Sd, Sn, Sm</para>
        <para>A64: FNMADD Sd, Sn, Sm, Sa The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedMultiplyAddScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vfma_f64 (float64x1_t a, float64x1_t b, float64x1_t c)</para>
        <para>A32: VFMA.F64 Dd, Dn, Dm</para>
        <para>A64: FMADD Dd, Dn, Dm, Da</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedMultiplyAddScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vfmas_f32 (float32_t a, float32_t b, float32_t c)</para>
        <para>A32: VFMA.F32 Sd, Sn, Sm</para>
        <para>A64: FMADD Sd, Sn, Sm, Sa The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedMultiplySubtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vfmsq_f32 (float32x4_t a, float32x4_t b, float32x4_t c)</para>
        <para>A32: VFMS.F32 Qd, Qn, Qm</para>
        <para>A64: FMLS Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedMultiplySubtract(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vfms_f32 (float32x2_t a, float32x2_t b, float32x2_t c)</para>
        <para>A32: VFMS.F32 Dd, Dn, Dm</para>
        <para>A64: FMLS Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedMultiplySubtractNegatedScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vfnms_f64 (float64x1_t a, float64x1_t b, float64x1_t c)</para>
        <para>A32: VFNMS.F64 Dd, Dn, Dm</para>
        <para>A64: FNMSUB Dd, Dn, Dm, Da The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedMultiplySubtractNegatedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vfnmss_f32 (float32_t a, float32_t b, float32_t c)</para>
        <para>A32: VFNMS.F32 Sd, Sn, Sm</para>
        <para>A64: FNMSUB Sd, Sn, Sm, Sa The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedMultiplySubtractScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vfms_f64 (float64x1_t a, float64x1_t b, float64x1_t c)</para>
        <para>A32: VFMS.F64 Dd, Dn, Dm</para>
        <para>A64: FMSUB Dd, Dn, Dm, Da</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedMultiplySubtractScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vfmss_f32 (float32_t a, float32_t b, float32_t c)</para>
        <para>A32: VFMS.F32 Sd, Sn, Sm</para>
        <para>A64: FMSUB Sd, Sn, Sm, Sa The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedSubtractHalving(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vhsubq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VHSUB.U8 Qd, Qn, Qm</para>
        <para>A64: UHSUB Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedSubtractHalving(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vhsubq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VHSUB.S16 Qd, Qn, Qm</para>
        <para>A64: SHSUB Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedSubtractHalving(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vhsubq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VHSUB.S32 Qd, Qn, Qm</para>
        <para>A64: SHSUB Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedSubtractHalving(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vhsubq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VHSUB.S8 Qd, Qn, Qm</para>
        <para>A64: SHSUB Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedSubtractHalving(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vhsubq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VHSUB.U16 Qd, Qn, Qm</para>
        <para>A64: UHSUB Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedSubtractHalving(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vhsubq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VHSUB.U32 Qd, Qn, Qm</para>
        <para>A64: UHSUB Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedSubtractHalving(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vhsub_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VHSUB.U8 Dd, Dn, Dm</para>
        <para>A64: UHSUB Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedSubtractHalving(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vhsub_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VHSUB.S16 Dd, Dn, Dm</para>
        <para>A64: SHSUB Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedSubtractHalving(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vhsub_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VHSUB.S32 Dd, Dn, Dm</para>
        <para>A64: SHSUB Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedSubtractHalving(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vhsub_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VHSUB.S8 Dd, Dn, Dm</para>
        <para>A64: SHSUB Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedSubtractHalving(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vhsub_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VHSUB.U16 Dd, Dn, Dm</para>
        <para>A64: UHSUB Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.FusedSubtractHalving(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vhsub_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VHSUB.U32 Dd, Dn, Dm</para>
        <para>A64: UHSUB Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Insert(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte,System.Byte)">
      <summary>
        <para>uint8x16_t vsetq_lane_u8 (uint8_t a, uint8x16_t v, const int lane)</para>
        <para>A32: VMOV.8 Dd[lane], Rt</para>
        <para>A64: INS Vd.B[lane], Wn</para>
      </summary>
      <param name="vector" />
      <param name="index" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Insert(System.Runtime.Intrinsics.Vector128{System.Double},System.Byte,System.Double)">
      <summary>
        <para>float64x2_t vsetq_lane_f64 (float64_t a, float64x2_t v, const int lane)</para>
        <para>A32: VMOV.F64 Dd, Dm</para>
        <para>A64: INS Vd.D[lane], Vn.D[0]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Insert(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte,System.Int16)">
      <summary>
        <para>int16x8_t vsetq_lane_s16 (int16_t a, int16x8_t v, const int lane)</para>
        <para>A32: VMOV.16 Dd[lane], Rt</para>
        <para>A64: INS Vd.H[lane], Wn</para>
      </summary>
      <param name="vector" />
      <param name="index" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Insert(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte,System.Int32)">
      <summary>
        <para>int32x4_t vsetq_lane_s32 (int32_t a, int32x4_t v, const int lane)</para>
        <para>A32: VMOV.32 Dd[lane], Rt</para>
        <para>A64: INS Vd.S[lane], Wn</para>
      </summary>
      <param name="vector" />
      <param name="index" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Insert(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte,System.Int64)">
      <summary>
        <para>int64x2_t vsetq_lane_s64 (int64_t a, int64x2_t v, const int lane)</para>
        <para>A32: VMOV.64 Dd, Rt, Rt2</para>
        <para>A64: INS Vd.D[lane], Xn</para>
      </summary>
      <param name="vector" />
      <param name="index" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Insert(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte,System.SByte)">
      <summary>
        <para>int8x16_t vsetq_lane_s8 (int8_t a, int8x16_t v, const int lane)</para>
        <para>A32: VMOV.8 Dd[lane], Rt</para>
        <para>A64: INS Vd.B[lane], Wn</para>
      </summary>
      <param name="vector" />
      <param name="index" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Insert(System.Runtime.Intrinsics.Vector128{System.Single},System.Byte,System.Single)">
      <summary>
        <para>float32x4_t vsetq_lane_f32 (float32_t a, float32x4_t v, const int lane)</para>
        <para>A32: VMOV.F32 Sd, Sm</para>
        <para>A64: INS Vd.S[lane], Vn.S[0]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Insert(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte,System.UInt16)">
      <summary>
        <para>uint16x8_t vsetq_lane_u16 (uint16_t a, uint16x8_t v, const int lane)</para>
        <para>A32: VMOV.16 Dd[lane], Rt</para>
        <para>A64: INS Vd.H[lane], Wn</para>
      </summary>
      <param name="vector" />
      <param name="index" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Insert(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte,System.UInt32)">
      <summary>
        <para>uint32x4_t vsetq_lane_u32 (uint32_t a, uint32x4_t v, const int lane)</para>
        <para>A32: VMOV.32 Dd[lane], Rt</para>
        <para>A64: INS Vd.S[lane], Wn</para>
      </summary>
      <param name="vector" />
      <param name="index" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Insert(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte,System.UInt64)">
      <summary>
        <para>uint64x2_t vsetq_lane_u64 (uint64_t a, uint64x2_t v, const int lane)</para>
        <para>A32: VMOV.64 Dd, Rt, Rt2</para>
        <para>A64: INS Vd.D[lane], Xn</para>
      </summary>
      <param name="vector" />
      <param name="index" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Insert(System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte,System.Byte)">
      <summary>
        <para>uint8x8_t vset_lane_u8 (uint8_t a, uint8x8_t v, const int lane)</para>
        <para>A32: VMOV.8 Dd[lane], Rt</para>
        <para>A64: INS Vd.B[lane], Wn</para>
      </summary>
      <param name="vector" />
      <param name="index" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Insert(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte,System.Int16)">
      <summary>
        <para>int16x4_t vset_lane_s16 (int16_t a, int16x4_t v, const int lane)</para>
        <para>A32: VMOV.16 Dd[lane], Rt</para>
        <para>A64: INS Vd.H[lane], Wn</para>
      </summary>
      <param name="vector" />
      <param name="index" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Insert(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte,System.Int32)">
      <summary>
        <para>int32x2_t vset_lane_s32 (int32_t a, int32x2_t v, const int lane)</para>
        <para>A32: VMOV.32 Dd[lane], Rt</para>
        <para>A64: INS Vd.S[lane], Wn</para>
      </summary>
      <param name="vector" />
      <param name="index" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Insert(System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte,System.SByte)">
      <summary>
        <para>int8x8_t vset_lane_s8 (int8_t a, int8x8_t v, const int lane)</para>
        <para>A32: VMOV.8 Dd[lane], Rt</para>
        <para>A64: INS Vd.B[lane], Wn</para>
      </summary>
      <param name="vector" />
      <param name="index" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Insert(System.Runtime.Intrinsics.Vector64{System.Single},System.Byte,System.Single)">
      <summary>
        <para>float32x2_t vset_lane_f32 (float32_t a, float32x2_t v, const int lane)</para>
        <para>A32: VMOV.F32 Sd, Sm</para>
        <para>A64: INS Vd.S[lane], Vn.S[0]</para>
      </summary>
      <param name="vector" />
      <param name="index" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Insert(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte,System.UInt16)">
      <summary>
        <para>uint16x4_t vset_lane_u16 (uint16_t a, uint16x4_t v, const int lane)</para>
        <para>A32: VMOV.16 Dd[lane], Rt</para>
        <para>A64: INS Vd.H[lane], Wn</para>
      </summary>
      <param name="vector" />
      <param name="index" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Insert(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte,System.UInt32)">
      <summary>
        <para>uint32x2_t vset_lane_u32 (uint32_t a, uint32x2_t v, const int lane)</para>
        <para>A32: VMOV.32 Dd[lane], Rt</para>
        <para>A64: INS Vd.S[lane], Wn</para>
      </summary>
      <param name="vector" />
      <param name="index" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.InsertScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Byte,System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>float64x2_t vcopyq_lane_f64 (float64x2_t a, const int lane1, float64x1_t b, const int lane2) A32: VMOV.F64 Dd, Dm A64: INS Vd.D[lane1], Vn.D[0]</summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.InsertScalar(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte,System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>int64x2_t vcopyq_lane_s64 (int64x2_t a, const int lane1, int64x1_t b, const int lane2) A32: VMOV Dd, Dm A64: INS Vd.D[lane1], Vn.D[0]</summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.InsertScalar(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte,System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>uint64x2_t vcopyq_lane_u64 (uint64x2_t a, const int lane1, uint64x1_t b, const int lane2) A32: VMOV Dd, Dm A64: INS Vd.D[lane1], Vn.D[0]</summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LeadingSignCount(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vclsq_s16 (int16x8_t a)</para>
        <para>A32: VCLS.S16 Qd, Qm</para>
        <para>A64: CLS Vd.8H, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LeadingSignCount(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vclsq_s32 (int32x4_t a)</para>
        <para>A32: VCLS.S32 Qd, Qm</para>
        <para>A64: CLS Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LeadingSignCount(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vclsq_s8 (int8x16_t a)</para>
        <para>A32: VCLS.S8 Qd, Qm</para>
        <para>A64: CLS Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LeadingSignCount(System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vcls_s16 (int16x4_t a)</para>
        <para>A32: VCLS.S16 Dd, Dm</para>
        <para>A64: CLS Vd.4H, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LeadingSignCount(System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vcls_s32 (int32x2_t a)</para>
        <para>A32: VCLS.S32 Dd, Dm</para>
        <para>A64: CLS Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LeadingSignCount(System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vcls_s8 (int8x8_t a)</para>
        <para>A32: VCLS.S8 Dd, Dm</para>
        <para>A64: CLS Vd.8B, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LeadingZeroCount(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vclzq_u8 (uint8x16_t a)</para>
        <para>A32: VCLZ.I8 Qd, Qm</para>
        <para>A64: CLZ Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LeadingZeroCount(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vclzq_s16 (int16x8_t a)</para>
        <para>A32: VCLZ.I16 Qd, Qm</para>
        <para>A64: CLZ Vd.8H, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LeadingZeroCount(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vclzq_s32 (int32x4_t a)</para>
        <para>A32: VCLZ.I32 Qd, Qm</para>
        <para>A64: CLZ Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LeadingZeroCount(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vclzq_s8 (int8x16_t a)</para>
        <para>A32: VCLZ.I8 Qd, Qm</para>
        <para>A64: CLZ Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LeadingZeroCount(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vclzq_u16 (uint16x8_t a)</para>
        <para>A32: VCLZ.I16 Qd, Qm</para>
        <para>A64: CLZ Vd.8H, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LeadingZeroCount(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vclzq_u32 (uint32x4_t a)</para>
        <para>A32: VCLZ.I32 Qd, Qm</para>
        <para>A64: CLZ Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LeadingZeroCount(System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vclz_u8 (uint8x8_t a)</para>
        <para>A32: VCLZ.I8 Dd, Dm</para>
        <para>A64: CLZ Vd.8B, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LeadingZeroCount(System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vclz_s16 (int16x4_t a)</para>
        <para>A32: VCLZ.I16 Dd, Dm</para>
        <para>A64: CLZ Vd.4H, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LeadingZeroCount(System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vclz_s32 (int32x2_t a)</para>
        <para>A32: VCLZ.I32 Dd, Dm</para>
        <para>A64: CLZ Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LeadingZeroCount(System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vclz_s8 (int8x8_t a)</para>
        <para>A32: VCLZ.I8 Dd, Dm</para>
        <para>A64: CLZ Vd.8B, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LeadingZeroCount(System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vclz_u16 (uint16x4_t a)</para>
        <para>A32: VCLZ.I16 Dd, Dm</para>
        <para>A64: CLZ Vd.4H, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LeadingZeroCount(System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vclz_u32 (uint32x2_t a)</para>
        <para>A32: VCLZ.I32 Dd, Dm</para>
        <para>A64: CLZ Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndInsertScalar(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte,System.Byte*)">
      <summary>
        <para>uint8x16_t vld1q_lane_u8 (uint8_t const * ptr, uint8x16_t src, const int lane)</para>
        <para>A32: VLD1.8 { Dd[index] }, [Rn]</para>
        <para>A64: LD1 { Vt.B }[index], [Xn]</para>
      </summary>
      <param name="value" />
      <param name="index" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndInsertScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Byte,System.Double*)">
      <summary>
        <para>float64x2_t vld1q_lane_f64 (float64_t const * ptr, float64x2_t src, const int lane)</para>
        <para>A32: VLDR.64 Dd, [Rn]</para>
        <para>A64: LD1 { Vt.D }[index], [Xn]</para>
      </summary>
      <param name="value" />
      <param name="index" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndInsertScalar(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte,System.Int16*)">
      <summary>
        <para>int16x8_t vld1q_lane_s16 (int16_t const * ptr, int16x8_t src, const int lane)</para>
        <para>A32: VLD1.16 { Dd[index] }, [Rn]</para>
        <para>A64: LD1 { Vt.H }[index], [Xn]</para>
      </summary>
      <param name="value" />
      <param name="index" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndInsertScalar(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte,System.Int32*)">
      <summary>
        <para>int32x4_t vld1q_lane_s32 (int32_t const * ptr, int32x4_t src, const int lane)</para>
        <para>A32: VLD1.32 { Dd[index] }, [Rn]</para>
        <para>A64: LD1 { Vt.S }[index], [Xn]</para>
      </summary>
      <param name="value" />
      <param name="index" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndInsertScalar(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte,System.Int64*)">
      <summary>
        <para>int64x2_t vld1q_lane_s64 (int64_t const * ptr, int64x2_t src, const int lane)</para>
        <para>A32: VLDR.64 Dd, [Rn]</para>
        <para>A64: LD1 { Vt.D }[index], [Xn]</para>
      </summary>
      <param name="value" />
      <param name="index" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndInsertScalar(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte,System.SByte*)">
      <summary>
        <para>int8x16_t vld1q_lane_s8 (int8_t const * ptr, int8x16_t src, const int lane)</para>
        <para>A32: VLD1.8 { Dd[index] }, [Rn]</para>
        <para>A64: LD1 { Vt.B }[index], [Xn]</para>
      </summary>
      <param name="value" />
      <param name="index" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndInsertScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Byte,System.Single*)">
      <summary>
        <para>float32x4_t vld1q_lane_f32 (float32_t const * ptr, float32x4_t src, const int lane)</para>
        <para>A32: VLD1.32 { Dd[index] }, [Rn]</para>
        <para>A64: LD1 { Vt.S }[index], [Xn]</para>
      </summary>
      <param name="value" />
      <param name="index" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndInsertScalar(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte,System.UInt16*)">
      <summary>
        <para>uint16x8_t vld1q_lane_u16 (uint16_t const * ptr, uint16x8_t src, const int lane)</para>
        <para>A32: VLD1.16 { Dd[index] }, [Rn]</para>
        <para>A64: LD1 { Vt.H }[index], [Xn]</para>
      </summary>
      <param name="value" />
      <param name="index" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndInsertScalar(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte,System.UInt32*)">
      <summary>
        <para>uint32x4_t vld1q_lane_u32 (uint32_t const * ptr, uint32x4_t src, const int lane)</para>
        <para>A32: VLD1.32 { Dd[index] }, [Rn]</para>
        <para>A64: LD1 { Vt.S }[index], [Xn]</para>
      </summary>
      <param name="value" />
      <param name="index" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndInsertScalar(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte,System.UInt64*)">
      <summary>
        <para>uint64x2_t vld1q_lane_u64 (uint64_t const * ptr, uint64x2_t src, const int lane)</para>
        <para>A32: VLDR.64 Dd, [Rn]</para>
        <para>A64: LD1 { Vt.D }[index], [Xn]</para>
      </summary>
      <param name="value" />
      <param name="index" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndInsertScalar(System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte,System.Byte*)">
      <summary>
        <para>uint8x8_t vld1_lane_u8 (uint8_t const * ptr, uint8x8_t src, const int lane)</para>
        <para>A32: VLD1.8 { Dd[index] }, [Rn]</para>
        <para>A64: LD1 { Vt.B }[index], [Xn]</para>
      </summary>
      <param name="value" />
      <param name="index" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndInsertScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte,System.Int16*)">
      <summary>
        <para>int16x4_t vld1_lane_s16 (int16_t const * ptr, int16x4_t src, const int lane)</para>
        <para>A32: VLD1.16 { Dd[index] }, [Rn]</para>
        <para>A64: LD1 { Vt.H }[index], [Xn]</para>
      </summary>
      <param name="value" />
      <param name="index" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndInsertScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte,System.Int32*)">
      <summary>
        <para>int32x2_t vld1_lane_s32 (int32_t const * ptr, int32x2_t src, const int lane)</para>
        <para>A32: VLD1.32 { Dd[index] }, [Rn]</para>
        <para>A64: LD1 { Vt.S }[index], [Xn]</para>
      </summary>
      <param name="value" />
      <param name="index" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndInsertScalar(System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte,System.SByte*)">
      <summary>
        <para>int8x8_t vld1_lane_s8 (int8_t const * ptr, int8x8_t src, const int lane)</para>
        <para>A32: VLD1.8 { Dd[index] }, [Rn]</para>
        <para>A64: LD1 { Vt.B }[index], [Xn]</para>
      </summary>
      <param name="value" />
      <param name="index" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndInsertScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Byte,System.Single*)">
      <summary>
        <para>float32x2_t vld1_lane_f32 (float32_t const * ptr, float32x2_t src, const int lane)</para>
        <para>A32: VLD1.32 { Dd[index] }, [Rn]</para>
        <para>A64: LD1 { Vt.S }[index], [Xn]</para>
      </summary>
      <param name="value" />
      <param name="index" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndInsertScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte,System.UInt16*)">
      <summary>
        <para>uint16x4_t vld1_lane_u16 (uint16_t const * ptr, uint16x4_t src, const int lane)</para>
        <para>A32: VLD1.16 { Dd[index] }, [Rn]</para>
        <para>A64: LD1 { Vt.H }[index], [Xn]</para>
      </summary>
      <param name="value" />
      <param name="index" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndInsertScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte,System.UInt32*)">
      <summary>
        <para>uint32x2_t vld1_lane_u32 (uint32_t const * ptr, uint32x2_t src, const int lane)</para>
        <para>A32: VLD1.32 { Dd[index] }, [Rn]</para>
        <para>A64: LD1 { Vt.S }[index], [Xn]</para>
      </summary>
      <param name="value" />
      <param name="index" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndReplicateToVector128(System.Byte*)">
      <summary>
        <para>uint8x16_t vld1q_dup_u8 (uint8_t const * ptr)</para>
        <para>A32: VLD1.8 { Dd[], Dd+1[] }, [Rn]</para>
        <para>A64: LD1R { Vt.16B }, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndReplicateToVector128(System.Int16*)">
      <summary>
        <para>int16x8_t vld1q_dup_s16 (int16_t const * ptr)</para>
        <para>A32: VLD1.16 { Dd[], Dd+1[] }, [Rn]</para>
        <para>A64: LD1R { Vt.8H }, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndReplicateToVector128(System.Int32*)">
      <summary>
        <para>int32x4_t vld1q_dup_s32 (int32_t const * ptr)</para>
        <para>A32: VLD1.32 { Dd[], Dd+1[] }, [Rn]</para>
        <para>A64: LD1R { Vt.4S }, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndReplicateToVector128(System.SByte*)">
      <summary>
        <para>int8x16_t vld1q_dup_s8 (int8_t const * ptr)</para>
        <para>A32: VLD1.8 { Dd[], Dd+1[] }, [Rn]</para>
        <para>A64: LD1R { Vt.16B }, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndReplicateToVector128(System.Single*)">
      <summary>
        <para>float32x4_t vld1q_dup_f32 (float32_t const * ptr)</para>
        <para>A32: VLD1.32 { Dd[], Dd+1[] }, [Rn]</para>
        <para>A64: LD1R { Vt.4S }, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndReplicateToVector128(System.UInt16*)">
      <summary>
        <para>uint16x8_t vld1q_dup_u16 (uint16_t const * ptr)</para>
        <para>A32: VLD1.16 { Dd[], Dd+1[] }, [Rn]</para>
        <para>A64: LD1R { Vt.8H }, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndReplicateToVector128(System.UInt32*)">
      <summary>
        <para>uint32x4_t vld1q_dup_u32 (uint32_t const * ptr)</para>
        <para>A32: VLD1.32 { Dd[], Dd+1[] }, [Rn]</para>
        <para>A64: LD1R { Vt.4S }, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndReplicateToVector64(System.Byte*)">
      <summary>
        <para>uint8x8_t vld1_dup_u8 (uint8_t const * ptr)</para>
        <para>A32: VLD1.8 { Dd[] }, [Rn]</para>
        <para>A64: LD1R { Vt.8B }, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndReplicateToVector64(System.Int16*)">
      <summary>
        <para>int16x4_t vld1_dup_s16 (int16_t const * ptr)</para>
        <para>A32: VLD1.16 { Dd[] }, [Rn]</para>
        <para>A64: LD1R { Vt.4H }, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndReplicateToVector64(System.Int32*)">
      <summary>
        <para>int32x2_t vld1_dup_s32 (int32_t const * ptr)</para>
        <para>A32: VLD1.32 { Dd[] }, [Rn]</para>
        <para>A64: LD1R { Vt.2S }, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndReplicateToVector64(System.SByte*)">
      <summary>
        <para>int8x8_t vld1_dup_s8 (int8_t const * ptr)</para>
        <para>A32: VLD1.8 { Dd[] }, [Rn]</para>
        <para>A64: LD1R { Vt.8B }, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndReplicateToVector64(System.Single*)">
      <summary>
        <para>float32x2_t vld1_dup_f32 (float32_t const * ptr)</para>
        <para>A32: VLD1.32 { Dd[] }, [Rn]</para>
        <para>A64: LD1R { Vt.2S }, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndReplicateToVector64(System.UInt16*)">
      <summary>
        <para>uint16x4_t vld1_dup_u16 (uint16_t const * ptr)</para>
        <para>A32: VLD1.16 { Dd[] }, [Rn]</para>
        <para>A64: LD1R { Vt.4H }, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadAndReplicateToVector64(System.UInt32*)">
      <summary>
        <para>uint32x2_t vld1_dup_u32 (uint32_t const * ptr)</para>
        <para>A32: VLD1.32 { Dd[] }, [Rn]</para>
        <para>A64: LD1R { Vt.2S }, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector128(System.Byte*)">
      <summary>
        <para>uint8x16_t vld1q_u8 (uint8_t const * ptr)</para>
        <para>A32: VLD1.8 Dd, Dd+1, [Rn]</para>
        <para>A64: LD1 Vt.16B, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector128(System.Double*)">
      <summary>
        <para>float64x2_t vld1q_f64 (float64_t const * ptr)</para>
        <para>A32: VLD1.64 Dd, Dd+1, [Rn]</para>
        <para>A64: LD1 Vt.2D, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector128(System.Int16*)">
      <summary>
        <para>int16x8_t vld1q_s16 (int16_t const * ptr)</para>
        <para>A32: VLD1.16 Dd, Dd+1, [Rn]</para>
        <para>A64: LD1 Vt.8H, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector128(System.Int32*)">
      <summary>
        <para>int32x4_t vld1q_s32 (int32_t const * ptr)</para>
        <para>A32: VLD1.32 Dd, Dd+1, [Rn]</para>
        <para>A64: LD1 Vt.4S, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector128(System.Int64*)">
      <summary>
        <para>int64x2_t vld1q_s64 (int64_t const * ptr)</para>
        <para>A32: VLD1.64 Dd, Dd+1, [Rn]</para>
        <para>A64: LD1 Vt.2D, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector128(System.SByte*)">
      <summary>
        <para>int8x16_t vld1q_s8 (int8_t const * ptr)</para>
        <para>A32: VLD1.8 Dd, Dd+1, [Rn]</para>
        <para>A64: LD1 Vt.16B, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector128(System.Single*)">
      <summary>
        <para>float32x4_t vld1q_f32 (float32_t const * ptr)</para>
        <para>A32: VLD1.32 Dd, Dd+1, [Rn]</para>
        <para>A64: LD1 Vt.4S, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector128(System.UInt16*)">
      <summary>
        <para>uint16x8_t vld1q_s16 (uint16_t const * ptr)</para>
        <para>A32: VLD1.16 Dd, Dd+1, [Rn]</para>
        <para>A64: LD1 Vt.8H, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector128(System.UInt32*)">
      <summary>
        <para>uint32x4_t vld1q_s32 (uint32_t const * ptr)</para>
        <para>A32: VLD1.32 Dd, Dd+1, [Rn]</para>
        <para>A64: LD1 Vt.4S, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector128(System.UInt64*)">
      <summary>
        <para>uint64x2_t vld1q_u64 (uint64_t const * ptr)</para>
        <para>A32: VLD1.64 Dd, Dd+1, [Rn]</para>
        <para>A64: LD1 Vt.2D, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector64(System.Byte*)">
      <summary>
        <para>uint8x8_t vld1_u8 (uint8_t const * ptr)</para>
        <para>A32: VLD1.8 Dd, [Rn]</para>
        <para>A64: LD1 Vt.8B, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector64(System.Double*)">
      <summary>
        <para>float64x1_t vld1_f64 (float64_t const * ptr)</para>
        <para>A32: VLD1.64 Dd, [Rn]</para>
        <para>A64: LD1 Vt.1D, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector64(System.Int16*)">
      <summary>
        <para>int16x4_t vld1_s16 (int16_t const * ptr)</para>
        <para>A32: VLD1.16 Dd, [Rn]</para>
        <para>A64: LD1 Vt.4H, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector64(System.Int32*)">
      <summary>
        <para>int32x2_t vld1_s32 (int32_t const * ptr)</para>
        <para>A32: VLD1.32 Dd, [Rn]</para>
        <para>A64: LD1 Vt.2S, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector64(System.Int64*)">
      <summary>
        <para>int64x1_t vld1_s64 (int64_t const * ptr)</para>
        <para>A32: VLD1.64 Dd, [Rn]</para>
        <para>A64: LD1 Vt.1D, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector64(System.SByte*)">
      <summary>
        <para>int8x8_t vld1_s8 (int8_t const * ptr)</para>
        <para>A32: VLD1.8 Dd, [Rn]</para>
        <para>A64: LD1 Vt.8B, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector64(System.Single*)">
      <summary>
        <para>float32x2_t vld1_f32 (float32_t const * ptr)</para>
        <para>A32: VLD1.32 Dd, [Rn]</para>
        <para>A64: LD1 Vt.2S, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector64(System.UInt16*)">
      <summary>
        <para>uint16x4_t vld1_u16 (uint16_t const * ptr)</para>
        <para>A32: VLD1.16 Dd, [Rn]</para>
        <para>A64: LD1 Vt.4H, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector64(System.UInt32*)">
      <summary>
        <para>uint32x2_t vld1_u32 (uint32_t const * ptr)</para>
        <para>A32: VLD1.32 Dd, [Rn]</para>
        <para>A64: LD1 Vt.2S, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.LoadVector64(System.UInt64*)">
      <summary>
        <para>uint64x1_t vld1_u64 (uint64_t const * ptr)</para>
        <para>A32: VLD1.64 Dd, [Rn]</para>
        <para>A64: LD1 Vt.1D, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Max(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vmaxq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VMAX.U8 Qd, Qn, Qm</para>
        <para>A64: UMAX Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Max(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vmaxq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VMAX.S16 Qd, Qn, Qm</para>
        <para>A64: SMAX Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Max(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vmaxq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VMAX.S32 Qd, Qn, Qm</para>
        <para>A64: SMAX Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Max(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vmaxq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VMAX.S8 Qd, Qn, Qm</para>
        <para>A64: SMAX Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Max(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vmaxq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VMAX.F32 Qd, Qn, Qm</para>
        <para>A64: FMAX Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Max(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vmaxq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VMAX.U16 Qd, Qn, Qm</para>
        <para>A64: UMAX Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Max(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vmaxq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VMAX.U32 Qd, Qn, Qm</para>
        <para>A64: UMAX Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Max(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vmax_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VMAX.U8 Dd, Dn, Dm</para>
        <para>A64: UMAX Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Max(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vmax_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VMAX.S16 Dd, Dn, Dm</para>
        <para>A64: SMAX Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Max(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vmax_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VMAX.S32 Dd, Dn, Dm</para>
        <para>A64: SMAX Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Max(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vmax_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VMAX.S8 Dd, Dn, Dm</para>
        <para>A64: SMAX Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Max(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vmax_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VMAX.F32 Dd, Dn, Dm</para>
        <para>A64: FMAX Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Max(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vmax_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VMAX.U16 Dd, Dn, Dm</para>
        <para>A64: UMAX Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Max(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vmax_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VMAX.U32 Dd, Dn, Dm</para>
        <para>A64: UMAX Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MaxNumber(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vmaxnmq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VMAXNM.F32 Qd, Qn, Qm</para>
        <para>A64: FMAXNM Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MaxNumber(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vmaxnm_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VMAXNM.F32 Dd, Dn, Dm</para>
        <para>A64: FMAXNM Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MaxNumberScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vmaxnm_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A32: VMAXNM.F64 Dd, Dn, Dm</para>
        <para>A64: FMAXNM Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MaxNumberScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vmaxnms_f32 (float32_t a, float32_t b)</para>
        <para>A32: VMAXNM.F32 Sd, Sn, Sm</para>
        <para>A64: FMAXNM Sd, Sn, Sm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MaxPairwise(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vpmax_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VPMAX.U8 Dd, Dn, Dm</para>
        <para>A64: UMAXP Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MaxPairwise(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vpmax_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VPMAX.S16 Dd, Dn, Dm</para>
        <para>A64: SMAXP Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MaxPairwise(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vpmax_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VPMAX.S32 Dd, Dn, Dm</para>
        <para>A64: SMAXP Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MaxPairwise(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vpmax_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VPMAX.S8 Dd, Dn, Dm</para>
        <para>A64: SMAXP Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MaxPairwise(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vpmax_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VPMAX.F32 Dd, Dn, Dm</para>
        <para>A64: FMAXP Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MaxPairwise(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vpmax_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VPMAX.U16 Dd, Dn, Dm</para>
        <para>A64: UMAXP Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MaxPairwise(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vpmax_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VPMAX.U32 Dd, Dn, Dm</para>
        <para>A64: UMAXP Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Min(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vminq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VMIN.U8 Qd, Qn, Qm</para>
        <para>A64: UMIN Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Min(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vminq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VMIN.S16 Qd, Qn, Qm</para>
        <para>A64: SMIN Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Min(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vminq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VMIN.S32 Qd, Qn, Qm</para>
        <para>A64: SMIN Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Min(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vminq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VMIN.S8 Qd, Qn, Qm</para>
        <para>A64: SMIN Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Min(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vminq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VMIN.F32 Qd, Qn, Qm</para>
        <para>A64: FMIN Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Min(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vminq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VMIN.U16 Qd, Qn, Qm</para>
        <para>A64: UMIN Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Min(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vminq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VMIN.U32 Qd, Qn, Qm</para>
        <para>A64: UMIN Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Min(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vmin_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VMIN.U8 Dd, Dn, Dm</para>
        <para>A64: UMIN Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Min(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vmin_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VMIN.S16 Dd, Dn, Dm</para>
        <para>A64: SMIN Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Min(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vmin_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VMIN.S32 Dd, Dn, Dm</para>
        <para>A64: SMIN Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Min(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vmin_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VMIN.S8 Dd, Dn, Dm</para>
        <para>A64: SMIN Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Min(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vmin_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VMIN.F32 Dd, Dn, Dm</para>
        <para>A64: FMIN Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Min(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vmin_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VMIN.U16 Dd, Dn, Dm</para>
        <para>A64: UMIN Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Min(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vmin_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VMIN.U32 Dd, Dn, Dm</para>
        <para>A64: UMIN Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MinNumber(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vminnmq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VMINNM.F32 Qd, Qn, Qm</para>
        <para>A64: FMINNM Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MinNumber(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vminnm_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VMINNM.F32 Dd, Dn, Dm</para>
        <para>A64: FMINNM Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MinNumberScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vminnm_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A32: VMINNM.F64 Dd, Dn, Dm</para>
        <para>A64: FMINNM Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MinNumberScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vminnms_f32 (float32_t a, float32_t b)</para>
        <para>A32: VMINNM.F32 Sd, Sn, Sm</para>
        <para>A64: FMINNM Sd, Sn, Sm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MinPairwise(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vpmin_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VPMIN.U8 Dd, Dn, Dm</para>
        <para>A64: UMINP Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MinPairwise(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vpmin_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VPMIN.S16 Dd, Dn, Dm</para>
        <para>A64: SMINP Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MinPairwise(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vpmin_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VPMIN.S32 Dd, Dn, Dm</para>
        <para>A64: SMINP Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MinPairwise(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vpmin_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VPMIN.S8 Dd, Dn, Dm</para>
        <para>A64: SMINP Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MinPairwise(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vpmin_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VPMIN.F32 Dd, Dn, Dm</para>
        <para>A64: FMINP Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MinPairwise(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vpmin_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VPMIN.U16 Dd, Dn, Dm</para>
        <para>A64: UMINP Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MinPairwise(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vpmin_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VPMIN.U32 Dd, Dn, Dm</para>
        <para>A64: UMINP Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Multiply(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vmulq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VMUL.I8 Qd, Qn, Qm</para>
        <para>A64: MUL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Multiply(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vmulq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VMUL.I16 Qd, Qn, Qm</para>
        <para>A64: MUL Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Multiply(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vmulq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VMUL.I32 Qd, Qn, Qm</para>
        <para>A64: MUL Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Multiply(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vmulq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VMUL.I8 Qd, Qn, Qm</para>
        <para>A64: MUL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Multiply(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vmulq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VMUL.F32 Qd, Qn, Qm</para>
        <para>A64: FMUL Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Multiply(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vmulq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VMUL.I16 Qd, Qn, Qm</para>
        <para>A64: MUL Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Multiply(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vmulq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VMUL.I32 Qd, Qn, Qm</para>
        <para>A64: MUL Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Multiply(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vmul_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VMUL.I8 Dd, Dn, Dm</para>
        <para>A64: MUL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Multiply(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vmul_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VMUL.I16 Dd, Dn, Dm</para>
        <para>A64: MUL Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Multiply(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vmul_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VMUL.I32 Dd, Dn, Dm</para>
        <para>A64: MUL Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Multiply(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vmul_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VMUL.I8 Dd, Dn, Dm</para>
        <para>A64: MUL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Multiply(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vmul_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VMUL.F32 Dd, Dn, Dm</para>
        <para>A64: FMUL Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Multiply(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vmul_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VMUL.I16 Dd, Dn, Dm</para>
        <para>A64: MUL Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Multiply(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vmul_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VMUL.I32 Dd, Dn, Dm</para>
        <para>A64: MUL Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAdd(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vmlaq_u8 (uint8x16_t a, uint8x16_t b, uint8x16_t c)</para>
        <para>A32: VMLA.I8 Qd, Qn, Qm</para>
        <para>A64: MLA Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAdd(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vmlaq_s16 (int16x8_t a, int16x8_t b, int16x8_t c)</para>
        <para>A32: VMLA.I16 Qd, Qn, Qm</para>
        <para>A64: MLA Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vmlaq_s32 (int32x4_t a, int32x4_t b, int32x4_t c)</para>
        <para>A32: VMLA.I32 Qd, Qn, Qm</para>
        <para>A64: MLA Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAdd(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vmlaq_s8 (int8x16_t a, int8x16_t b, int8x16_t c)</para>
        <para>A32: VMLA.I8 Qd, Qn, Qm</para>
        <para>A64: MLA Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAdd(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vmlaq_u16 (uint16x8_t a, uint16x8_t b, uint16x8_t c)</para>
        <para>A32: VMLA.I16 Qd, Qn, Qm</para>
        <para>A64: MLA Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAdd(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vmlaq_u32 (uint32x4_t a, uint32x4_t b, uint32x4_t c)</para>
        <para>A32: VMLA.I32 Qd, Qn, Qm</para>
        <para>A64: MLA Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAdd(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vmla_u8 (uint8x8_t a, uint8x8_t b, uint8x8_t c)</para>
        <para>A32: VMLA.I8 Dd, Dn, Dm</para>
        <para>A64: MLA Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAdd(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vmla_s16 (int16x4_t a, int16x4_t b, int16x4_t c)</para>
        <para>A32: VMLA.I16 Dd, Dn, Dm</para>
        <para>A64: MLA Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAdd(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vmla_s32 (int32x2_t a, int32x2_t b, int32x2_t c)</para>
        <para>A32: VMLA.I32 Dd, Dn, Dm</para>
        <para>A64: MLA Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAdd(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vmla_s8 (int8x8_t a, int8x8_t b, int8x8_t c)</para>
        <para>A32: VMLA.I8 Dd, Dn, Dm</para>
        <para>A64: MLA Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAdd(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vmla_u16 (uint16x4_t a, uint16x4_t b, uint16x4_t c)</para>
        <para>A32: VMLA.I16 Dd, Dn, Dm</para>
        <para>A64: MLA Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAdd(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vmla_u32 (uint32x2_t a, uint32x2_t b, uint32x2_t c)</para>
        <para>A32: VMLA.I32 Dd, Dn, Dm</para>
        <para>A64: MLA Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddByScalar(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x8_t vmlaq_n_s16 (int16x8_t a, int16x8_t b, int16_t c)</para>
        <para>A32: VMLA.I16 Qd, Qn, Dm[0]</para>
        <para>A64: MLA Vd.8H, Vn.8H, Vm.H[0]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddByScalar(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x4_t vmlaq_n_s32 (int32x4_t a, int32x4_t b, int32_t c)</para>
        <para>A32: VMLA.I32 Qd, Qn, Dm[0]</para>
        <para>A64: MLA Vd.4S, Vn.4S, Vm.S[0]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddByScalar(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x8_t vmlaq_n_u16 (uint16x8_t a, uint16x8_t b, uint16_t c)</para>
        <para>A32: VMLA.I16 Qd, Qn, Dm[0]</para>
        <para>A64: MLA Vd.8H, Vn.8H, Vm.H[0]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddByScalar(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x4_t vmlaq_n_u32 (uint32x4_t a, uint32x4_t b, uint32_t c)</para>
        <para>A32: VMLA.I32 Qd, Qn, Dm[0]</para>
        <para>A64: MLA Vd.4S, Vn.4S, Vm.S[0]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddByScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vmla_n_s16 (int16x4_t a, int16x4_t b, int16_t c)</para>
        <para>A32: VMLA.I16 Dd, Dn, Dm[0]</para>
        <para>A64: MLA Vd.4H, Vn.4H, Vm.H[0]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddByScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vmla_n_s32 (int32x2_t a, int32x2_t b, int32_t c)</para>
        <para>A32: VMLA.I32 Dd, Dn, Dm[0]</para>
        <para>A64: MLA Vd.2S, Vn.2S, Vm.S[0]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddByScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vmla_n_u16 (uint16x4_t a, uint16x4_t b, uint16_t c)</para>
        <para>A32: VMLA.I16 Dd, Dn, Dm[0]</para>
        <para>A64: MLA Vd.4H, Vn.4H, Vm.H[0]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddByScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vmla_n_u32 (uint32x2_t a, uint32x2_t b, uint32_t c)</para>
        <para>A32: VMLA.I32 Dd, Dn, Dm[0]</para>
        <para>A64: MLA Vd.2S, Vn.2S, Vm.S[0]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int16x8_t vmlaq_laneq_s16 (int16x8_t a, int16x8_t b, int16x8_t v, const int lane)</para>
        <para>A32: VMLA.I16 Qd, Qn, Dm[lane]</para>
        <para>A64: MLA Vd.8H, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16x8_t vmlaq_lane_s16 (int16x8_t a, int16x8_t b, int16x4_t v, const int lane)</para>
        <para>A32: VMLA.I16 Qd, Qn, Dm[lane]</para>
        <para>A64: MLA Vd.8H, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int32x4_t vmlaq_laneq_s32 (int32x4_t a, int32x4_t b, int32x4_t v, const int lane)</para>
        <para>A32: VMLA.I32 Qd, Qn, Dm[lane]</para>
        <para>A64: MLA Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32x4_t vmlaq_lane_s32 (int32x4_t a, int32x4_t b, int32x2_t v, const int lane)</para>
        <para>A32: VMLA.I32 Qd, Qn, Dm[lane]</para>
        <para>A64: MLA Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x8_t vmlaq_laneq_u16 (uint16x8_t a, uint16x8_t b, uint16x8_t v, const int lane)</para>
        <para>A32: VMLA.I16 Qd, Qn, Dm[lane]</para>
        <para>A64: MLA Vd.8H, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x8_t vmlaq_lane_u16 (uint16x8_t a, uint16x8_t b, uint16x4_t v, const int lane)</para>
        <para>A32: VMLA.I16 Qd, Qn, Dm[lane]</para>
        <para>A64: MLA Vd.8H, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x4_t vmlaq_laneq_u32 (uint32x4_t a, uint32x4_t b, uint32x4_t v, const int lane)</para>
        <para>A32: VMLA.I32 Qd, Qn, Dm[lane]</para>
        <para>A64: MLA Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x4_t vmlaq_lane_u32 (uint32x4_t a, uint32x4_t b, uint32x2_t v, const int lane)</para>
        <para>A32: VMLA.I32 Qd, Qn, Dm[lane]</para>
        <para>A64: MLA Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int16x4_t vmla_laneq_s16 (int16x4_t a, int16x4_t b, int16x8_t v, const int lane)</para>
        <para>A32: VMLA.I16 Dd, Dn, Dm[lane]</para>
        <para>A64: MLA Vd.4H, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16x4_t vmla_lane_s16 (int16x4_t a, int16x4_t b, int16x4_t v, const int lane)</para>
        <para>A32: VMLA.I16 Dd, Dn, Dm[lane]</para>
        <para>A64: MLA Vd.4H, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int32x2_t vmla_laneq_s32 (int32x2_t a, int32x2_t b, int32x4_t v, const int lane)</para>
        <para>A32: VMLA.I32 Dd, Dn, Dm[lane]</para>
        <para>A64: MLA Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32x2_t vmla_lane_s32 (int32x2_t a, int32x2_t b, int32x2_t v, const int lane)</para>
        <para>A32: VMLA.I32 Dd, Dn, Dm[lane]</para>
        <para>A64: MLA Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x4_t vmla_laneq_u16 (uint16x4_t a, uint16x4_t b, uint16x8_t v, const int lane)</para>
        <para>A32: VMLA.I16 Dd, Dn, Dm[lane]</para>
        <para>A64: MLA Vd.4H, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x4_t vmla_lane_u16 (uint16x4_t a, uint16x4_t b, uint16x4_t v, const int lane)</para>
        <para>A32: VMLA.I16 Dd, Dn, Dm[lane]</para>
        <para>A64: MLA Vd.4H, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x2_t vmla_laneq_u32 (uint32x2_t a, uint32x2_t b, uint32x4_t v, const int lane)</para>
        <para>A32: VMLA.I32 Dd, Dn, Dm[lane]</para>
        <para>A64: MLA Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x2_t vmla_lane_u32 (uint32x2_t a, uint32x2_t b, uint32x2_t v, const int lane)</para>
        <para>A32: VMLA.I32 Dd, Dn, Dm[lane]</para>
        <para>A64: MLA Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyByScalar(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x8_t vmulq_n_s16 (int16x8_t a, int16_t b)</para>
        <para>A32: VMUL.I16 Qd, Qn, Dm[0]</para>
        <para>A64: MUL Vd.8H, Vn.8H, Vm.H[0]</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyByScalar(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x4_t vmulq_n_s32 (int32x4_t a, int32_t b)</para>
        <para>A32: VMUL.I32 Qd, Qn, Dm[0]</para>
        <para>A64: MUL Vd.4S, Vn.4S, Vm.S[0]</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyByScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x4_t vmulq_n_f32 (float32x4_t a, float32_t b)</para>
        <para>A32: VMUL.F32 Qd, Qn, Dm[0]</para>
        <para>A64: FMUL Vd.4S, Vn.4S, Vm.S[0]</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyByScalar(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x8_t vmulq_n_u16 (uint16x8_t a, uint16_t b)</para>
        <para>A32: VMUL.I16 Qd, Qn, Dm[0]</para>
        <para>A64: MUL Vd.8H, Vn.8H, Vm.H[0]</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyByScalar(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x4_t vmulq_n_u32 (uint32x4_t a, uint32_t b)</para>
        <para>A32: VMUL.I32 Qd, Qn, Dm[0]</para>
        <para>A64: MUL Vd.4S, Vn.4S, Vm.S[0]</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyByScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vmul_n_s16 (int16x4_t a, int16_t b)</para>
        <para>A32: VMUL.I16 Dd, Dn, Dm[0]</para>
        <para>A64: MUL Vd.4H, Vn.4H, Vm.H[0]</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyByScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vmul_n_s32 (int32x2_t a, int32_t b)</para>
        <para>A32: VMUL.I32 Dd, Dn, Dm[0]</para>
        <para>A64: MUL Vd.2S, Vn.2S, Vm.S[0]</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyByScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vmul_n_f32 (float32x2_t a, float32_t b)</para>
        <para>A32: VMUL.F32 Dd, Dn, Dm[0]</para>
        <para>A64: FMUL Vd.2S, Vn.2S, Vm.S[0]</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyByScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vmul_n_u16 (uint16x4_t a, uint16_t b)</para>
        <para>A32: VMUL.I16 Dd, Dn, Dm[0]</para>
        <para>A64: MUL Vd.4H, Vn.4H, Vm.H[0]</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyByScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vmul_n_u32 (uint32x2_t a, uint32_t b)</para>
        <para>A32: VMUL.I32 Dd, Dn, Dm[0]</para>
        <para>A64: MUL Vd.2S, Vn.2S, Vm.S[0]</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int16x8_t vmulq_laneq_s16 (int16x8_t a, int16x8_t v, const int lane)</para>
        <para>A32: VMUL.I16 Qd, Qn, Dm[lane]</para>
        <para>A64: MUL Vd.8H, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16x8_t vmulq_lane_s16 (int16x8_t a, int16x4_t v, const int lane)</para>
        <para>A32: VMUL.I16 Qd, Qn, Dm[lane]</para>
        <para>A64: MUL Vd.8H, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int32x4_t vmulq_laneq_s32 (int32x4_t a, int32x4_t v, const int lane)</para>
        <para>A32: VMUL.I32 Qd, Qn, Dm[lane]</para>
        <para>A64: MUL Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32x4_t vmulq_lane_s32 (int32x4_t a, int32x2_t v, const int lane)</para>
        <para>A32: VMUL.I32 Qd, Qn, Dm[lane]</para>
        <para>A64: MUL Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>float32x4_t vmulq_laneq_f32 (float32x4_t a, float32x4_t v, const int lane)</para>
        <para>A32: VMUL.F32 Qd, Qn, Dm[lane]</para>
        <para>A64: FMUL Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Byte)">
      <summary>
        <para>float32x4_t vmulq_lane_f32 (float32x4_t a, float32x2_t v, const int lane)</para>
        <para>A32: VMUL.F32 Qd, Qn, Dm[lane]</para>
        <para>A64: FMUL Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x8_t vmulq_laneq_u16 (uint16x8_t a, uint16x8_t v, const int lane)</para>
        <para>A32: VMUL.I16 Qd, Qn, Dm[lane]</para>
        <para>A64: MUL Vd.8H, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x8_t vmulq_lane_u16 (uint16x8_t a, uint16x4_t v, const int lane)</para>
        <para>A32: VMUL.I16 Qd, Qn, Dm[lane]</para>
        <para>A64: MUL Vd.8H, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x4_t vmulq_laneq_u32 (uint32x4_t a, uint32x4_t v, const int lane)</para>
        <para>A32: VMUL.I32 Qd, Qn, Dm[lane]</para>
        <para>A64: MUL Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x4_t vmulq_lane_u32 (uint32x4_t a, uint32x2_t v, const int lane)</para>
        <para>A32: VMUL.I32 Qd, Qn, Dm[lane]</para>
        <para>A64: MUL Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int16x4_t vmul_laneq_s16 (int16x4_t a, int16x8_t v, const int lane)</para>
        <para>A32: VMUL.I16 Dd, Dn, Dm[lane]</para>
        <para>A64: MUL Vd.4H, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16x4_t vmul_lane_s16 (int16x4_t a, int16x4_t v, const int lane)</para>
        <para>A32: VMUL.I16 Dd, Dn, Dm[lane]</para>
        <para>A64: MUL Vd.4H, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int32x2_t vmul_laneq_s32 (int32x2_t a, int32x4_t v, const int lane)</para>
        <para>A32: VMUL.I32 Dd, Dn, Dm[lane]</para>
        <para>A64: MUL Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32x2_t vmul_lane_s32 (int32x2_t a, int32x2_t v, const int lane)</para>
        <para>A32: VMUL.I32 Dd, Dn, Dm[lane]</para>
        <para>A64: MUL Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>float32x2_t vmul_laneq_f32 (float32x2_t a, float32x4_t v, const int lane)</para>
        <para>A32: VMUL.F32 Dd, Dn, Dm[lane]</para>
        <para>A64: FMUL Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Byte)">
      <summary>
        <para>float32x2_t vmul_lane_f32 (float32x2_t a, float32x2_t v, const int lane)</para>
        <para>A32: VMUL.F32 Dd, Dn, Dm[lane]</para>
        <para>A64: FMUL Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x4_t vmul_laneq_u16 (uint16x4_t a, uint16x8_t v, const int lane)</para>
        <para>A32: VMUL.I16 Dd, Dn, Dm[lane]</para>
        <para>A64: MUL Vd.4H, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x4_t vmul_lane_u16 (uint16x4_t a, uint16x4_t v, const int lane)</para>
        <para>A32: VMUL.I16 Dd, Dn, Dm[lane]</para>
        <para>A64: MUL Vd.4H, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x2_t vmul_laneq_u32 (uint32x2_t a, uint32x4_t v, const int lane)</para>
        <para>A32: VMUL.I32 Dd, Dn, Dm[lane]</para>
        <para>A64: MUL Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x2_t vmul_lane_u32 (uint32x2_t a, uint32x2_t v, const int lane)</para>
        <para>A32: VMUL.I32 Dd, Dn, Dm[lane]</para>
        <para>A64: MUL Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLower(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int32x4_t vmull_laneq_s16 (int16x4_t a, int16x8_t v, const int lane)</para>
        <para>A32: VMULL.S16 Qd, Dn, Dm[lane]</para>
        <para>A64: SMULL Vd.4S, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLower(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int32x4_t vmull_lane_s16 (int16x4_t a, int16x4_t v, const int lane)</para>
        <para>A32: VMULL.S16 Qd, Dn, Dm[lane]</para>
        <para>A64: SMULL Vd.4S, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLower(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int64x2_t vmull_laneq_s32 (int32x2_t a, int32x4_t v, const int lane)</para>
        <para>A32: VMULL.S32 Qd, Dn, Dm[lane]</para>
        <para>A64: SMULL Vd.2D, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLower(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int64x2_t vmull_lane_s32 (int32x2_t a, int32x2_t v, const int lane)</para>
        <para>A32: VMULL.S32 Qd, Dn, Dm[lane]</para>
        <para>A64: SMULL Vd.2D, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLower(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint32x4_t vmull_laneq_u16 (uint16x4_t a, uint16x8_t v, const int lane)</para>
        <para>A32: VMULL.U16 Qd, Dn, Dm[lane]</para>
        <para>A64: UMULL Vd.4S, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLower(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint32x4_t vmull_lane_u16 (uint16x4_t a, uint16x4_t v, const int lane)</para>
        <para>A32: VMULL.U16 Qd, Dn, Dm[lane]</para>
        <para>A64: UMULL Vd.4S, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLower(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint64x2_t vmull_laneq_u32 (uint32x2_t a, uint32x4_t v, const int lane)</para>
        <para>A32: VMULL.U32 Qd, Dn, Dm[lane]</para>
        <para>A64: UMULL Vd.2D, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLower(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint64x2_t vmull_lane_u32 (uint32x2_t a, uint32x2_t v, const int lane)</para>
        <para>A32: VMULL.U32 Qd, Dn, Dm[lane]</para>
        <para>A64: UMULL Vd.2D, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int32x4_t vmlal_laneq_s16 (int32x4_t a, int16x4_t b, int16x8_t v, const int lane)</para>
        <para>A32: VMLAL.S16 Qd, Dn, Dm[lane]</para>
        <para>A64: SMLAL Vd.4S, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int32x4_t vmlal_lane_s16 (int32x4_t a, int16x4_t b, int16x4_t v, const int lane)</para>
        <para>A32: VMLAL.S16 Qd, Dn, Dm[lane]</para>
        <para>A64: SMLAL Vd.4S, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int64x2_t vmlal_laneq_s32 (int64x2_t a, int32x2_t b, int32x4_t v, const int lane)</para>
        <para>A32: VMLAL.S32 Qd, Dn, Dm[lane]</para>
        <para>A64: SMLAL Vd.2D, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int64x2_t vmlal_lane_s32 (int64x2_t a, int32x2_t b, int32x2_t v, const int lane)</para>
        <para>A32: VMLAL.S32 Qd, Dn, Dm[lane]</para>
        <para>A64: SMLAL Vd.2D, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint32x4_t vmlal_laneq_u16 (uint32x4_t a, uint16x4_t b, uint16x8_t v, const int lane)</para>
        <para>A32: VMLAL.U16 Qd, Dn, Dm[lane]</para>
        <para>A64: UMLAL Vd.4S, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint32x4_t vmlal_lane_u16 (uint32x4_t a, uint16x4_t b, uint16x4_t v, const int lane)</para>
        <para>A32: VMLAL.U16 Qd, Dn, Dm[lane]</para>
        <para>A64: UMLAL Vd.4S, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint64x2_t vmlal_laneq_u32 (uint64x2_t a, uint32x2_t b, uint32x4_t v, const int lane)</para>
        <para>A32: VMLAL.U32 Qd, Dn, Dm[lane]</para>
        <para>A64: UMLAL Vd.2D, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint64x2_t vmlal_lane_u32 (uint64x2_t a, uint32x2_t b, uint32x2_t v, const int lane)</para>
        <para>A32: VMLAL.U32 Qd, Dn, Dm[lane]</para>
        <para>A64: UMLAL Vd.2D, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLowerAndSubtract(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int32x4_t vmlsl_laneq_s16 (int32x4_t a, int16x4_t b, int16x8_t v, const int lane)</para>
        <para>A32: VMLSL.S16 Qd, Dn, Dm[lane]</para>
        <para>A64: SMLSL Vd.4S, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLowerAndSubtract(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int32x4_t vmlsl_lane_s16 (int32x4_t a, int16x4_t b, int16x4_t v, const int lane)</para>
        <para>A32: VMLSL.S16 Qd, Dn, Dm[lane]</para>
        <para>A64: SMLSL Vd.4S, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLowerAndSubtract(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int64x2_t vmlsl_laneq_s32 (int64x2_t a, int32x2_t b, int32x4_t v, const int lane)</para>
        <para>A32: VMLSL.S32 Qd, Dn, Dm[lane]</para>
        <para>A64: SMLSL Vd.2D, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLowerAndSubtract(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int64x2_t vmlsl_lane_s32 (int64x2_t a, int32x2_t b, int32x2_t v, const int lane)</para>
        <para>A32: VMLSL.S32 Qd, Dn, Dm[lane]</para>
        <para>A64: SMLSL Vd.2D, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLowerAndSubtract(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint32x4_t vmlsl_laneq_u16 (uint32x4_t a, uint16x4_t b, uint16x8_t v, const int lane)</para>
        <para>A32: VMLSL.U16 Qd, Dn, Dm[lane]</para>
        <para>A64: UMLSL Vd.4S, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLowerAndSubtract(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint32x4_t vmlsl_lane_u16 (uint32x4_t a, uint16x4_t b, uint16x4_t v, const int lane)</para>
        <para>A32: VMLSL.U16 Qd, Dn, Dm[lane]</para>
        <para>A64: UMLSL Vd.4S, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLowerAndSubtract(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint64x2_t vmlsl_laneq_u32 (uint64x2_t a, uint32x2_t b, uint32x4_t v, const int lane)</para>
        <para>A32: VMLSL.U32 Qd, Dn, Dm[lane]</para>
        <para>A64: UMLSL Vd.2D, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningLowerAndSubtract(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint64x2_t vmlsl_lane_u32 (uint64x2_t a, uint32x2_t b, uint32x2_t v, const int lane)</para>
        <para>A32: VMLSL.U32 Qd, Dn, Dm[lane]</para>
        <para>A64: UMLSL Vd.2D, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int32x4_t vmull_high_laneq_s16 (int16x8_t a, int16x8_t v, const int lane)</para>
        <para>A32: VMULL.S16 Qd, Dn+1, Dm[lane]</para>
        <para>A64: SMULL2 Vd.4S, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int32x4_t vmull_high_lane_s16 (int16x8_t a, int16x4_t v, const int lane)</para>
        <para>A32: VMULL.S16 Qd, Dn+1, Dm[lane]</para>
        <para>A64: SMULL2 Vd.4S, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int64x2_t vmull_high_laneq_s32 (int32x4_t a, int32x4_t v, const int lane)</para>
        <para>A32: VMULL.S32 Qd, Dn+1, Dm[lane]</para>
        <para>A64: SMULL2 Vd.2D, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int64x2_t vmull_high_lane_s32 (int32x4_t a, int32x2_t v, const int lane)</para>
        <para>A32: VMULL.S32 Qd, Dn+1, Dm[lane]</para>
        <para>A64: SMULL2 Vd.2D, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint32x4_t vmull_high_laneq_u16 (uint16x8_t a, uint16x8_t v, const int lane)</para>
        <para>A32: VMULL.U16 Qd, Dn+1, Dm[lane]</para>
        <para>A64: UMULL2 Vd.4S, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint32x4_t vmull_high_lane_u16 (uint16x8_t a, uint16x4_t v, const int lane)</para>
        <para>A32: VMULL.U16 Qd, Dn+1, Dm[lane]</para>
        <para>A64: UMULL2 Vd.4S, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint64x2_t vmull_high_laneq_u32 (uint32x4_t a, uint32x4_t v, const int lane)</para>
        <para>A32: VMULL.U32 Qd, Dn+1, Dm[lane]</para>
        <para>A64: UMULL2 Vd.2D, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint64x2_t vmull_high_lane_u32 (uint32x4_t a, uint32x2_t v, const int lane)</para>
        <para>A32: VMULL.U32 Qd, Dn+1, Dm[lane]</para>
        <para>A64: UMULL2 Vd.2D, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int32x4_t vmlal_high_laneq_s16 (int32x4_t a, int16x8_t b, int16x8_t v, const int lane)</para>
        <para>A32: VMLAL.S16 Qd, Dn+1, Dm[lane]</para>
        <para>A64: SMLAL2 Vd.4S, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int32x4_t vmlal_high_lane_s16 (int32x4_t a, int16x8_t b, int16x4_t v, const int lane)</para>
        <para>A32: VMLAL.S16 Qd, Dn+1, Dm[lane]</para>
        <para>A64: SMLAL2 Vd.4S, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int64x2_t vmlal_high_laneq_s32 (int64x2_t a, int32x4_t b, int32x4_t v, const int lane)</para>
        <para>A32: VMLAL.S32 Qd, Dn+1, Dm[lane]</para>
        <para>A64: SMLAL2 Vd.2D, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int64x2_t vmlal_high_lane_s32 (int64x2_t a, int32x4_t b, int32x2_t v, const int lane)</para>
        <para>A32: VMLAL.S32 Qd, Dn+1, Dm[lane]</para>
        <para>A64: SMLAL2 Vd.2D, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint32x4_t vmlal_high_laneq_u16 (uint32x4_t a, uint16x8_t b, uint16x8_t v, const int lane)</para>
        <para>A32: VMLAL.U16 Qd, Dn+1, Dm[lane]</para>
        <para>A64: UMLAL2 Vd.4S, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint32x4_t vmlal_high_lane_u16 (uint32x4_t a, uint16x8_t b, uint16x4_t v, const int lane)</para>
        <para>A32: VMLAL.U16 Qd, Dn+1, Dm[lane]</para>
        <para>A64: UMLAL2 Vd.4S, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint64x2_t vmlal_high_laneq_u32 (uint64x2_t a, uint32x4_t b, uint32x4_t v, const int lane)</para>
        <para>A32: VMLAL.U32 Qd, Dn+1, Dm[lane]</para>
        <para>A64: UMLAL2 Vd.2D, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint64x2_t vmlal_high_lane_u32 (uint64x2_t a, uint32x4_t b, uint32x2_t v, const int lane)</para>
        <para>A32: VMLAL.U32 Qd, Dn+1, Dm[lane]</para>
        <para>A64: UMLAL2 Vd.2D, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpperAndSubtract(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int32x4_t vmlsl_high_laneq_s16 (int32x4_t a, int16x8_t b, int16x8_t v, const int lane)</para>
        <para>A32: VMLSL.S16 Qd, Dn+1, Dm[lane]</para>
        <para>A64: SMLSL2 Vd.4S, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpperAndSubtract(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int32x4_t vmlsl_high_lane_s16 (int32x4_t a, int16x8_t b, int16x4_t v, const int lane)</para>
        <para>A32: VMLSL.S16 Qd, Dn+1, Dm[lane]</para>
        <para>A64: SMLSL2 Vd.4S, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpperAndSubtract(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int64x2_t vmlsl_high_laneq_s32 (int64x2_t a, int32x4_t b, int32x4_t v, const int lane)</para>
        <para>A32: VMLSL.S32 Qd, Dn+1, Dm[lane]</para>
        <para>A64: SMLSL2 Vd.2D, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpperAndSubtract(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int64x2_t vmlsl_high_lane_s32 (int64x2_t a, int32x4_t b, int32x2_t v, const int lane)</para>
        <para>A32: VMLSL.S32 Qd, Dn+1, Dm[lane]</para>
        <para>A64: SMLSL2 Vd.2D, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpperAndSubtract(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint32x4_t vmlsl_high_laneq_u16 (uint32x4_t a, uint16x8_t b, uint16x8_t v, const int lane)</para>
        <para>A32: VMLSL.U16 Qd, Dn+1, Dm[lane]</para>
        <para>A64: UMLSL2 Vd.4S, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpperAndSubtract(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint32x4_t vmlsl_high_lane_u16 (uint32x4_t a, uint16x8_t b, uint16x4_t v, const int lane)</para>
        <para>A32: VMLSL.U16 Qd, Dn+1, Dm[lane]</para>
        <para>A64: UMLSL2 Vd.4S, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpperAndSubtract(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint64x2_t vmlsl_high_laneq_u32 (uint64x2_t a, uint32x4_t b, uint32x4_t v, const int lane)</para>
        <para>A32: VMLSL.U32 Qd, Dn+1, Dm[lane]</para>
        <para>A64: UMLSL2 Vd.2D, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyBySelectedScalarWideningUpperAndSubtract(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint64x2_t vmlsl_high_lane_u32 (uint64x2_t a, uint32x4_t b, uint32x2_t v, const int lane)</para>
        <para>A32: VMLSL.U32 Qd, Dn+1, Dm[lane]</para>
        <para>A64: UMLSL2 Vd.2D, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingByScalarSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int16x8_t vqdmulhq_n_s16 (int16x8_t a, int16_t b) A32: VQDMULH.S16 Qd, Qn, Dm[0] A64: SQDMULH Vd.8H, Vn.8H, Vm.H[0]</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingByScalarSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int32x4_t vqdmulhq_n_s32 (int32x4_t a, int32_t b) A32: VQDMULH.S32 Qd, Qn, Dm[0] A64: SQDMULH Vd.4S, Vn.4S, Vm.S[0]</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingByScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int16x4_t vqdmulh_n_s16 (int16x4_t a, int16_t b) A32: VQDMULH.S16 Dd, Dn, Dm[0] A64: SQDMULH Vd.4H, Vn.4H, Vm.H[0]</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingByScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int32x2_t vqdmulh_n_s32 (int32x2_t a, int32_t b) A32: VQDMULH.S32 Dd, Dn, Dm[0] A64: SQDMULH Vd.2S, Vn.2S, Vm.S[0]</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int16x8_t vqdmulhq_laneq_s16 (int16x8_t a, int16x8_t v, const int lane) A32: VQDMULH.S16 Qd, Qn, Dm[lane] A64: SQDMULH Vd.8H, Vn.8H, Vm.H[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int16x8_t vqdmulhq_lane_s16 (int16x8_t a, int16x4_t v, const int lane) A32: VQDMULH.S16 Qd, Qn, Dm[lane] A64: SQDMULH Vd.8H, Vn.8H, Vm.H[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int32x4_t vqdmulhq_laneq_s32 (int32x4_t a, int32x4_t v, const int lane) A32: VQDMULH.S32 Qd, Qn, Dm[lane] A64: SQDMULH Vd.4S, Vn.4S, Vm.S[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int32x4_t vqdmulhq_lane_s32 (int32x4_t a, int32x2_t v, const int lane) A32: VQDMULH.S32 Qd, Qn, Dm[lane] A64: SQDMULH Vd.4S, Vn.4S, Vm.S[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int16x4_t vqdmulh_laneq_s16 (int16x4_t a, int16x8_t v, const int lane) A32: VQDMULH.S16 Dd, Dn, Dm[lane] A64: SQDMULH Vd.4H, Vn.4H, Vm.H[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int16x4_t vqdmulh_lane_s16 (int16x4_t a, int16x4_t v, const int lane) A32: VQDMULH.S16 Dd, Dn, Dm[lane] A64: SQDMULH Vd.4H, Vn.4H, Vm.H[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int32x2_t vqdmulh_laneq_s32 (int32x2_t a, int32x4_t v, const int lane) A32: VQDMULH.S32 Dd, Dn, Dm[lane] A64: SQDMULH Vd.2S, Vn.2S, Vm.S[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int32x2_t vqdmulh_lane_s32 (int32x2_t a, int32x2_t v, const int lane) A32: VQDMULH.S32 Dd, Dn, Dm[lane] A64: SQDMULH Vd.2S, Vn.2S, Vm.S[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>int16x8_t vqdmulhq_s16 (int16x8_t a, int16x8_t b) A32: VQDMULH.S16 Qd, Qn, Qm A64: SQDMULH Vd.8H, Vn.8H, Vm.8H</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>int32x4_t vqdmulhq_s32 (int32x4_t a, int32x4_t b) A32: VQDMULH.S32 Qd, Qn, Qm A64: SQDMULH Vd.4S, Vn.4S, Vm.4S</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int16x4_t vqdmulh_s16 (int16x4_t a, int16x4_t b) A32: VQDMULH.S16 Dd, Dn, Dm A64: SQDMULH Vd.4H, Vn.4H, Vm.4H</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int32x2_t vqdmulh_s32 (int32x2_t a, int32x2_t b) A32: VQDMULH.S32 Dd, Dn, Dm A64: SQDMULH Vd.2S, Vn.2S, Vm.2S</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningLowerAndAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int32x4_t vqdmlal_s16 (int32x4_t a, int16x4_t b, int16x4_t c) A32: VQDMLAL.S16 Qd, Dn, Dm A64: SQDMLAL Vd.4S, Vn.4H, Vm.4H</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningLowerAndAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int64x2_t vqdmlal_s32 (int64x2_t a, int32x2_t b, int32x2_t c) A32: VQDMLAL.S32 Qd, Dn, Dm A64: SQDMLAL Vd.2D, Vn.2S, Vm.2S</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningLowerAndSubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int32x4_t vqdmlsl_s16 (int32x4_t a, int16x4_t b, int16x4_t c) A32: VQDMLSL.S16 Qd, Dn, Dm A64: SQDMLSL Vd.4S, Vn.4H, Vm.4H</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningLowerAndSubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int64x2_t vqdmlsl_s32 (int64x2_t a, int32x2_t b, int32x2_t c) A32: VQDMLSL.S32 Qd, Dn, Dm A64: SQDMLSL Vd.2D, Vn.2S, Vm.2S</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningLowerByScalarAndAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int32x4_t vqdmlal_n_s16 (int32x4_t a, int16x4_t b, int16_t c) A32: VQDMLAL.S16 Qd, Dn, Dm[0] A64: SQDMLAL Vd.4S, Vn.4H, Vm.H[0]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningLowerByScalarAndAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int64x2_t vqdmlal_n_s32 (int64x2_t a, int32x2_t b, int32_t c) A32: VQDMLAL.S32 Qd, Dn, Dm[0] A64: SQDMLAL Vd.2D, Vn.2S, Vm.S[0]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningLowerByScalarAndSubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int32x4_t vqdmlsl_n_s16 (int32x4_t a, int16x4_t b, int16_t c) A32: VQDMLSL.S16 Qd, Dn, Dm[0] A64: SQDMLSL Vd.4S, Vn.4H, Vm.H[0]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningLowerByScalarAndSubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int64x2_t vqdmlsl_n_s32 (int64x2_t a, int32x2_t b, int32_t c) A32: VQDMLSL.S32 Qd, Dn, Dm[0] A64: SQDMLSL Vd.2D, Vn.2S, Vm.S[0]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningLowerBySelectedScalarAndAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int32x4_t vqdmlal_laneq_s16 (int32x4_t a, int16x4_t b, int16x8_t v, const int lane) A32: VQDMLAL.S16 Qd, Dn, Dm[lane] A64: SQDMLAL Vd.4S, Vn.4H, Vm.H[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningLowerBySelectedScalarAndAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int32x4_t vqdmlal_lane_s16 (int32x4_t a, int16x4_t b, int16x4_t v, const int lane) A32: VQDMLAL.S16 Qd, Dn, Dm[lane] A64: SQDMLAL Vd.4S, Vn.4H, Vm.H[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningLowerBySelectedScalarAndAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int64x2_t vqdmlal_laneq_s32 (int64x2_t a, int32x2_t b, int32x4_t v, const int lane) A32: VQDMLAL.S32 Qd, Dn, Dm[lane] A64: SQDMLAL Vd.2D, Vn.2S, Vm.S[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningLowerBySelectedScalarAndAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int64x2_t vqdmlal_lane_s32 (int64x2_t a, int32x2_t b, int32x2_t v, const int lane) A32: VQDMLAL.S32 Qd, Dn, Dm[lane] A64: SQDMLAL Vd.2D, Vn.2S, Vm.S[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningLowerBySelectedScalarAndSubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int32x4_t vqdmlsl_laneq_s16 (int32x4_t a, int16x4_t b, int16x8_t v, const int lane) A32: VQDMLSL.S16 Qd, Dn, Dm[lane] A64: SQDMLSL Vd.4S, Vn.4H, Vm.H[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningLowerBySelectedScalarAndSubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int32x4_t vqdmlsl_lane_s16 (int32x4_t a, int16x4_t b, int16x4_t v, const int lane) A32: VQDMLSL.S16 Qd, Dn, Dm[lane] A64: SQDMLSL Vd.4S, Vn.4H, Vm.H[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningLowerBySelectedScalarAndSubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int64x2_t vqdmlsl_laneq_s32 (int64x2_t a, int32x2_t b, int32x4_t v, const int lane) A32: VQDMLSL.S32 Qd, Dn, Dm[lane] A64: SQDMLSL Vd.2D, Vn.2S, Vm.S[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningLowerBySelectedScalarAndSubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int64x2_t vqdmlsl_lane_s32 (int64x2_t a, int32x2_t b, int32x2_t v, const int lane) A32: VQDMLSL.S32 Qd, Dn, Dm[lane] A64: SQDMLSL Vd.2D, Vn.2S, Vm.S[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningSaturateLower(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int32x4_t vqdmull_s16 (int16x4_t a, int16x4_t b) A32: VQDMULL.S16 Qd, Dn, Dm A64: SQDMULL Vd.4S, Vn.4H, Vm.4H</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningSaturateLower(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int64x2_t vqdmull_s32 (int32x2_t a, int32x2_t b) A32: VQDMULL.S32 Qd, Dn, Dm A64: SQDMULL Vd.2D, Vn.2S, Vm.2S</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningSaturateLowerByScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int32x4_t vqdmull_n_s16 (int16x4_t a, int16_t b) A32: VQDMULL.S16 Qd, Dn, Dm[0] A64: SQDMULL Vd.4S, Vn.4H, Vm.H[0]</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningSaturateLowerByScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int64x2_t vqdmull_n_s32 (int32x2_t a, int32_t b) A32: VQDMULL.S32 Qd, Dn, Dm[0] A64: SQDMULL Vd.2D, Vn.2S, Vm.S[0]</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningSaturateLowerBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int32x4_t vqdmull_laneq_s16 (int16x4_t a, int16x8_t v, const int lane) A32: VQDMULL.S16 Qd, Dn, Dm[lane] A64: SQDMULL Vd.4S, Vn.4H, Vm.H[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningSaturateLowerBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int32x4_t vqdmull_lane_s16 (int16x4_t a, int16x4_t v, const int lane) A32: VQDMULL.S16 Qd, Dn, Dm[lane] A64: SQDMULL Vd.4S, Vn.4H, Vm.H[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningSaturateLowerBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int64x2_t vqdmull_laneq_s32 (int32x2_t a, int32x4_t v, const int lane) A32: VQDMULL.S32 Qd, Dn, Dm[lane] A64: SQDMULL Vd.2D, Vn.2S, Vm.S[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningSaturateLowerBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int64x2_t vqdmull_lane_s32 (int32x2_t a, int32x2_t v, const int lane) A32: VQDMULL.S32 Qd, Dn, Dm[lane] A64: SQDMULL Vd.2D, Vn.2S, Vm.S[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningSaturateUpper(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>int32x4_t vqdmull_high_s16 (int16x8_t a, int16x8_t b) A32: VQDMULL.S16 Qd, Dn+1, Dm+1 A64: SQDMULL2 Vd.4S, Vn.8H, Vm.8H</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningSaturateUpper(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>int64x2_t vqdmull_high_s32 (int32x4_t a, int32x4_t b) A32: VQDMULL.S32 Qd, Dn+1, Dm+1 A64: SQDMULL2 Vd.2D, Vn.4S, Vm.4S</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningSaturateUpperByScalar(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int32x4_t vqdmull_high_n_s16 (int16x8_t a, int16_t b) A32: VQDMULL.S16 Qd, Dn+1, Dm[0] A64: SQDMULL2 Vd.4S, Vn.8H, Vm.H[0]</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningSaturateUpperByScalar(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int64x2_t vqdmull_high_n_s32 (int32x4_t a, int32_t b) A32: VQDMULL.S32 Qd, Dn+1, Dm[0] A64: SQDMULL2 Vd.2D, Vn.4S, Vm.S[0]</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningSaturateUpperBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int32x4_t vqdmull_high_laneq_s16 (int16x8_t a, int16x8_t v, const int lane) A32: VQDMULL.S16 Qd, Dn+1, Dm[lane] A64: SQDMULL2 Vd.4S, Vn.8H, Vm.H[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningSaturateUpperBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int32x4_t vqdmull_high_lane_s16 (int16x8_t a, int16x4_t v, const int lane) A32: VQDMULL.S16 Qd, Dn+1, Dm[lane] A64: SQDMULL2 Vd.4S, Vn.8H, Vm.H[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningSaturateUpperBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int64x2_t vqdmull_high_laneq_s32 (int32x4_t a, int32x4_t v, const int lane) A32: VQDMULL.S32 Qd, Dn+1, Dm[lane] A64: SQDMULL2 Vd.2D, Vn.4S, Vm.S[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningSaturateUpperBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int64x2_t vqdmull_high_lane_s32 (int32x4_t a, int32x2_t v, const int lane) A32: VQDMULL.S32 Qd, Dn+1, Dm[lane] A64: SQDMULL2 Vd.2D, Vn.4S, Vm.S[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningUpperAndAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>int32x4_t vqdmlal_high_s16 (int32x4_t a, int16x8_t b, int16x8_t c) A32: VQDMLAL.S16 Qd, Dn+1, Dm+1 A64: SQDMLAL2 Vd.4S, Vn.8H, Vm.8H</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningUpperAndAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>int64x2_t vqdmlal_high_s32 (int64x2_t a, int32x4_t b, int32x4_t c) A32: VQDMLAL.S32 Qd, Dn+1, Dm+1 A64: SQDMLAL2 Vd.2D, Vn.4S, Vm.4S</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningUpperAndSubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>int32x4_t vqdmlsl_high_s16 (int32x4_t a, int16x8_t b, int16x8_t c) A32: VQDMLSL.S16 Qd, Dn+1, Dm+1 A64: SQDMLSL2 Vd.4S, Vn.8H, Vm.8H</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningUpperAndSubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>int64x2_t vqdmlsl_high_s32 (int64x2_t a, int32x4_t b, int32x4_t c) A32: VQDMLSL.S32 Qd, Dn+1, Dm+1 A64: SQDMLSL2 Vd.2D, Vn.4S, Vm.4S</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningUpperByScalarAndAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int32x4_t vqdmlal_high_n_s16 (int32x4_t a, int16x8_t b, int16_t c) A32: VQDMLAL.S16 Qd, Dn+1, Dm[0] A64: SQDMLAL2 Vd.4S, Vn.8H, Vm.H[0]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningUpperByScalarAndAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int64x2_t vqdmlal_high_n_s32 (int64x2_t a, int32x4_t b, int32_t c) A32: VQDMLAL.S32 Qd, Dn+1, Dm[0] A64: SQDMLAL2 Vd.2D, Vn.4S, Vm.S[0]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningUpperByScalarAndSubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int32x4_t vqdmlsl_high_n_s16 (int32x4_t a, int16x8_t b, int16_t c) A32: VQDMLSL.S16 Qd, Dn+1, Dm[0] A64: SQDMLSL2 Vd.4S, Vn.8H, Vm.H[0]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningUpperByScalarAndSubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int64x2_t vqdmlsl_high_n_s32 (int64x2_t a, int32x4_t b, int32_t c) A32: VQDMLSL.S32 Qd, Dn+1, Dm[0] A64: SQDMLSL2 Vd.2D, Vn.4S, Vm.S[0]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningUpperBySelectedScalarAndAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int32x4_t vqdmlal_high_laneq_s16 (int32x4_t a, int16x8_t b, int16x8_t v, const int lane) A32: VQDMLAL.S16 Qd, Dn+1, Dm[lane] A64: SQDMLAL2 Vd.4S, Vn.8H, Vm.H[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningUpperBySelectedScalarAndAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int32x4_t vqdmlal_high_lane_s16 (int32x4_t a, int16x8_t b, int16x4_t v, const int lane) A32: VQDMLAL.S16 Qd, Dn+1, Dm[lane] A64: SQDMLAL2 Vd.4S, Vn.8H, Vm.H[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningUpperBySelectedScalarAndAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int64x2_t vqdmlal_high_laneq_s32 (int64x2_t a, int32x4_t b, int32x4_t v, const int lane) A32: VQDMLAL.S32 Qd, Dn+1, Dm[lane] A64: SQDMLAL2 Vd.2D, Vn.4S, Vm.S[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningUpperBySelectedScalarAndAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int64x2_t vqdmlal_high_lane_s32 (int64x2_t a, int32x4_t b, int32x2_t v, const int lane) A32: VQDMLAL.S32 Qd, Dn+1, Dm[lane] A64: SQDMLAL2 Vd.2D, Vn.4S, Vm.S[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningUpperBySelectedScalarAndSubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int32x4_t vqdmlsl_high_laneq_s16 (int32x4_t a, int16x8_t b, int16x8_t v, const int lane) A32: VQDMLSL.S16 Qd, Dn+1, Dm[lane] A64: SQDMLSL2 Vd.4S, Vn.8H, Vm.H[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningUpperBySelectedScalarAndSubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int32x4_t vqdmlsl_high_lane_s16 (int32x4_t a, int16x8_t b, int16x4_t v, const int lane) A32: VQDMLSL.S16 Qd, Dn+1, Dm[lane] A64: SQDMLSL2 Vd.4S, Vn.8H, Vm.H[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningUpperBySelectedScalarAndSubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int64x2_t vqdmlsl_high_laneq_s32 (int64x2_t a, int32x4_t b, int32x4_t v, const int lane) A32: VQDMLSL.S32 Qd, Dn+1, Dm[lane] A64: SQDMLSL2 Vd.2D, Vn.4S, Vm.S[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyDoublingWideningUpperBySelectedScalarAndSubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int64x2_t vqdmlsl_high_lane_s32 (int64x2_t a, int32x4_t b, int32x2_t v, const int lane) A32: VQDMLSL.S32 Qd, Dn+1, Dm[lane] A64: SQDMLSL2 Vd.2D, Vn.4S, Vm.S[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyRoundedDoublingByScalarSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int16x8_t vqrdmulhq_n_s16 (int16x8_t a, int16_t b) A32: VQRDMULH.S16 Qd, Qn, Dm[0] A64: SQRDMULH Vd.8H, Vn.8H, Vm.H[0]</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyRoundedDoublingByScalarSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int32x4_t vqrdmulhq_n_s32 (int32x4_t a, int32_t b) A32: VQRDMULH.S32 Qd, Qn, Dm[0] A64: SQRDMULH Vd.4S, Vn.4S, Vm.S[0]</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyRoundedDoublingByScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int16x4_t vqrdmulh_n_s16 (int16x4_t a, int16_t b) A32: VQRDMULH.S16 Dd, Dn, Dm[0] A64: SQRDMULH Vd.4H, Vn.4H, Vm.H[0]</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyRoundedDoublingByScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int32x2_t vqrdmulh_n_s32 (int32x2_t a, int32_t b) A32: VQRDMULH.S32 Dd, Dn, Dm[0] A64: SQRDMULH Vd.2S, Vn.2S, Vm.S[0]</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyRoundedDoublingBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int16x8_t vqrdmulhq_laneq_s16 (int16x8_t a, int16x8_t v, const int lane) A32: VQRDMULH.S16 Qd, Qn, Dm[lane] A64: SQRDMULH Vd.8H, Vn.8H, Vm.H[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyRoundedDoublingBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int16x8_t vqrdmulhq_lane_s16 (int16x8_t a, int16x4_t v, const int lane) A32: VQRDMULH.S16 Qd, Qn, Dm[lane] A64: SQRDMULH Vd.8H, Vn.8H, Vm.H[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyRoundedDoublingBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int32x4_t vqrdmulhq_laneq_s32 (int32x4_t a, int32x4_t v, const int lane) A32: VQRDMULH.S32 Qd, Qn, Dm[lane] A64: SQRDMULH Vd.4S, Vn.4S, Vm.S[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyRoundedDoublingBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int32x4_t vqrdmulhq_lane_s32 (int32x4_t a, int32x2_t v, const int lane) A32: VQRDMULH.S32 Qd, Qn, Dm[lane] A64: SQRDMULH Vd.4S, Vn.4S, Vm.S[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyRoundedDoublingBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int16x4_t vqrdmulh_laneq_s16 (int16x4_t a, int16x8_t v, const int lane) A32: VQRDMULH.S16 Dd, Dn, Dm[lane] A64: SQRDMULH Vd.4H, Vn.4H, Vm.H[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyRoundedDoublingBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int16x4_t vqrdmulh_lane_s16 (int16x4_t a, int16x4_t v, const int lane) A32: VQRDMULH.S16 Dd, Dn, Dm[lane] A64: SQRDMULH Vd.4H, Vn.4H, Vm.H[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyRoundedDoublingBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int32x2_t vqrdmulh_laneq_s32 (int32x2_t a, int32x4_t v, const int lane) A32: VQRDMULH.S32 Dd, Dn, Dm[lane] A64: SQRDMULH Vd.2S, Vn.2S, Vm.S[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyRoundedDoublingBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int32x2_t vqrdmulh_lane_s32 (int32x2_t a, int32x2_t v, const int lane) A32: VQRDMULH.S32 Dd, Dn, Dm[lane] A64: SQRDMULH Vd.2S, Vn.2S, Vm.S[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyRoundedDoublingSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>int16x8_t vqrdmulhq_s16 (int16x8_t a, int16x8_t b) A32: VQRDMULH.S16 Qd, Qn, Qm A64: SQRDMULH Vd.8H, Vn.8H, Vm.8H</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyRoundedDoublingSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>int32x4_t vqrdmulhq_s32 (int32x4_t a, int32x4_t b) A32: VQRDMULH.S32 Qd, Qn, Qm A64: SQRDMULH Vd.4S, Vn.4S, Vm.4S</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyRoundedDoublingSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int16x4_t vqrdmulh_s16 (int16x4_t a, int16x4_t b) A32: VQRDMULH.S16 Dd, Dn, Dm A64: SQRDMULH Vd.4H, Vn.4H, Vm.4H</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyRoundedDoublingSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int32x2_t vqrdmulh_s32 (int32x2_t a, int32x2_t b) A32: VQRDMULH.S32 Dd, Dn, Dm A64: SQRDMULH Vd.2S, Vn.2S, Vm.2S</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vmul_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A32: VMUL.F64 Dd, Dn, Dm</para>
        <para>A64: FMUL Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vmuls_f32 (float32_t a, float32_t b)</para>
        <para>A32: VMUL.F32 Sd, Sn, Sm</para>
        <para>A64: FMUL Sd, Sn, Sm The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyScalarBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>float32_t vmuls_laneq_f32 (float32_t a, float32x4_t v, const int lane)</para>
        <para>A32: VMUL.F32 Sd, Sn, Dm[lane]</para>
        <para>A64: FMUL Sd, Sn, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyScalarBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Byte)">
      <summary>
        <para>float32_t vmuls_lane_f32 (float32_t a, float32x2_t v, const int lane)</para>
        <para>A32: VMUL.F32 Sd, Sn, Dm[lane]</para>
        <para>A64: FMUL Sd, Sn, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtract(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vmlsq_u8 (uint8x16_t a, uint8x16_t b, uint8x16_t c)</para>
        <para>A32: VMLS.I8 Qd, Qn, Qm</para>
        <para>A64: MLS Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtract(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vmlsq_s16 (int16x8_t a, int16x8_t b, int16x8_t c)</para>
        <para>A32: VMLS.I16 Qd, Qn, Qm</para>
        <para>A64: MLS Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtract(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vmlsq_s32 (int32x4_t a, int32x4_t b, int32x4_t c)</para>
        <para>A32: VMLS.I32 Qd, Qn, Qm</para>
        <para>A64: MLS Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtract(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vmlsq_s8 (int8x16_t a, int8x16_t b, int8x16_t c)</para>
        <para>A32: VMLS.I8 Qd, Qn, Qm</para>
        <para>A64: MLS Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtract(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vmlsq_u16 (uint16x8_t a, uint16x8_t b, uint16x8_t c)</para>
        <para>A32: VMLS.I16 Qd, Qn, Qm</para>
        <para>A64: MLS Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtract(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vmlsq_u32 (uint32x4_t a, uint32x4_t b, uint32x4_t c)</para>
        <para>A32: VMLS.I32 Qd, Qn, Qm</para>
        <para>A64: MLS Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtract(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vmls_u8 (uint8x8_t a, uint8x8_t b, uint8x8_t c)</para>
        <para>A32: VMLS.I8 Dd, Dn, Dm</para>
        <para>A64: MLS Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtract(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vmls_s16 (int16x4_t a, int16x4_t b, int16x4_t c)</para>
        <para>A32: VMLS.I16 Dd, Dn, Dm</para>
        <para>A64: MLS Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtract(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vmls_s32 (int32x2_t a, int32x2_t b, int32x2_t c)</para>
        <para>A32: VMLS.I32 Dd, Dn, Dm</para>
        <para>A64: MLS Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtract(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vmls_s8 (int8x8_t a, int8x8_t b, int8x8_t c)</para>
        <para>A32: VMLS.I8 Dd, Dn, Dm</para>
        <para>A64: MLS Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtract(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vmls_u16 (uint16x4_t a, uint16x4_t b, uint16x4_t c)</para>
        <para>A32: VMLS.I16 Dd, Dn, Dm</para>
        <para>A64: MLS Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtract(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vmls_u32 (uint32x2_t a, uint32x2_t b, uint32x2_t c)</para>
        <para>A32: VMLS.I32 Dd, Dn, Dm</para>
        <para>A64: MLS Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractByScalar(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x8_t vmlsq_n_s16 (int16x8_t a, int16x8_t b, int16_t c)</para>
        <para>A32: VMLS.I16 Qd, Qn, Dm[0]</para>
        <para>A64: MLS Vd.8H, Vn.8H, Vm.H[0]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractByScalar(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x4_t vmlsq_n_s32 (int32x4_t a, int32x4_t b, int32_t c)</para>
        <para>A32: VMLS.I32 Qd, Qn, Dm[0]</para>
        <para>A64: MLS Vd.4S, Vn.4S, Vm.S[0]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractByScalar(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x8_t vmlsq_n_u16 (uint16x8_t a, uint16x8_t b, uint16_t c)</para>
        <para>A32: VMLS.I16 Qd, Qn, Dm[0]</para>
        <para>A64: MLS Vd.8H, Vn.8H, Vm.H[0]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractByScalar(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x4_t vmlsq_n_u32 (uint32x4_t a, uint32x4_t b, uint32_t c)</para>
        <para>A32: VMLS.I32 Qd, Qn, Dm[0]</para>
        <para>A64: MLS Vd.4S, Vn.4S, Vm.S[0]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractByScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vmls_n_s16 (int16x4_t a, int16x4_t b, int16_t c)</para>
        <para>A32: VMLS.I16 Dd, Dn, Dm[0]</para>
        <para>A64: MLS Vd.4H, Vn.4H, Vm.H[0]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractByScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vmls_n_s32 (int32x2_t a, int32x2_t b, int32_t c)</para>
        <para>A32: VMLS.I32 Dd, Dn, Dm[0]</para>
        <para>A64: MLS Vd.2S, Vn.2S, Vm.S[0]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractByScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vmls_n_u16 (uint16x4_t a, uint16x4_t b, uint16_t c)</para>
        <para>A32: VMLS.I16 Dd, Dn, Dm[0]</para>
        <para>A64: MLS Vd.4H, Vn.4H, Vm.H[0]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractByScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vmls_n_u32 (uint32x2_t a, uint32x2_t b, uint32_t c)</para>
        <para>A32: VMLS.I32 Dd, Dn, Dm[0]</para>
        <para>A64: MLS Vd.2S, Vn.2S, Vm.S[0]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int16x8_t vmlsq_laneq_s16 (int16x8_t a, int16x8_t b, int16x8_t v, const int lane)</para>
        <para>A32: VMLS.I16 Qd, Qn, Dm[lane]</para>
        <para>A64: MLS Vd.8H, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16x8_t vmlsq_lane_s16 (int16x8_t a, int16x8_t b, int16x4_t v, const int lane)</para>
        <para>A32: VMLS.I16 Qd, Qn, Dm[lane]</para>
        <para>A64: MLS Vd.8H, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int32x4_t vmlsq_laneq_s32 (int32x4_t a, int32x4_t b, int32x4_t v, const int lane)</para>
        <para>A32: VMLS.I32 Qd, Qn, Dm[lane]</para>
        <para>A64: MLS Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32x4_t vmlsq_lane_s32 (int32x4_t a, int32x4_t b, int32x2_t v, const int lane)</para>
        <para>A32: VMLS.I32 Qd, Qn, Dm[lane]</para>
        <para>A64: MLS Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x8_t vmlsq_laneq_u16 (uint16x8_t a, uint16x8_t b, uint16x8_t v, const int lane)</para>
        <para>A32: VMLS.I16 Qd, Qn, Dm[lane]</para>
        <para>A64: MLS Vd.8H, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x8_t vmlsq_lane_u16 (uint16x8_t a, uint16x8_t b, uint16x4_t v, const int lane)</para>
        <para>A32: VMLS.I16 Qd, Qn, Dm[lane]</para>
        <para>A64: MLS Vd.8H, Vn.8H, Vm.H[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x4_t vmlsq_laneq_u32 (uint32x4_t a, uint32x4_t b, uint32x4_t v, const int lane)</para>
        <para>A32: VMLS.I32 Qd, Qn, Dm[lane]</para>
        <para>A64: MLS Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x4_t vmlsq_lane_u32 (uint32x4_t a, uint32x4_t b, uint32x2_t v, const int lane)</para>
        <para>A32: VMLS.I32 Qd, Qn, Dm[lane]</para>
        <para>A64: MLS Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int16x4_t vmls_laneq_s16 (int16x4_t a, int16x4_t b, int16x8_t v, const int lane)</para>
        <para>A32: VMLS.I16 Dd, Dn, Dm[lane]</para>
        <para>A64: MLS Vd.4H, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16x4_t vmls_lane_s16 (int16x4_t a, int16x4_t b, int16x4_t v, const int lane)</para>
        <para>A32: VMLS.I16 Dd, Dn, Dm[lane]</para>
        <para>A64: MLS Vd.4H, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int32x2_t vmls_laneq_s32 (int32x2_t a, int32x2_t b, int32x4_t v, const int lane)</para>
        <para>A32: VMLS.I32 Dd, Dn, Dm[lane]</para>
        <para>A64: MLS Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32x2_t vmls_lane_s32 (int32x2_t a, int32x2_t b, int32x2_t v, const int lane)</para>
        <para>A32: VMLS.I32 Dd, Dn, Dm[lane]</para>
        <para>A64: MLS Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x4_t vmls_laneq_u16 (uint16x4_t a, uint16x4_t b, uint16x8_t v, const int lane)</para>
        <para>A32: VMLS.I16 Dd, Dn, Dm[lane]</para>
        <para>A64: MLS Vd.4H, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x4_t vmls_lane_u16 (uint16x4_t a, uint16x4_t b, uint16x4_t v, const int lane)</para>
        <para>A32: VMLS.I16 Dd, Dn, Dm[lane]</para>
        <para>A64: MLS Vd.4H, Vn.4H, Vm.H[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x2_t vmls_laneq_u32 (uint32x2_t a, uint32x2_t b, uint32x4_t v, const int lane)</para>
        <para>A32: VMLS.I32 Dd, Dn, Dm[lane]</para>
        <para>A64: MLS Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x2_t vmls_lane_u32 (uint32x2_t a, uint32x2_t b, uint32x2_t v, const int lane)</para>
        <para>A32: VMLS.I32 Dd, Dn, Dm[lane]</para>
        <para>A64: MLS Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningLower(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint16x8_t vmull_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VMULL.U8 Qd, Dn, Dm</para>
        <para>A64: UMULL Vd.8H, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningLower(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int32x4_t vmull_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VMULL.S16 Qd, Dn, Dm</para>
        <para>A64: SMULL Vd.4S, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningLower(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int64x2_t vmull_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VMULL.S32 Qd, Dn, Dm</para>
        <para>A64: SMULL Vd.2D, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningLower(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int16x8_t vmull_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VMULL.S8 Qd, Dn, Dm</para>
        <para>A64: SMULL Vd.8H, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningLower(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint32x4_t vmull_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VMULL.U16 Qd, Dn, Dm</para>
        <para>A64: UMULL Vd.4S, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningLower(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint64x2_t vmull_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VMULL.U32 Qd, Dn, Dm</para>
        <para>A64: UMULL Vd.2D, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int16x8_t vmlal_s8 (int16x8_t a, int8x8_t b, int8x8_t c)</para>
        <para>A32: VMLAL.S8 Qd, Dn, Dm</para>
        <para>A64: SMLAL Vd.8H, Vn.8B, Vm.8B</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int32x4_t vmlal_s16 (int32x4_t a, int16x4_t b, int16x4_t c)</para>
        <para>A32: VMLAL.S16 Qd, Dn, Dm</para>
        <para>A64: SMLAL Vd.4S, Vn.4H, Vm.4H</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int64x2_t vmlal_s32 (int64x2_t a, int32x2_t b, int32x2_t c)</para>
        <para>A32: VMLAL.S32 Qd, Dn, Dm</para>
        <para>A64: SMLAL Vd.2D, Vn.2S, Vm.2S</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint16x8_t vmlal_u8 (uint16x8_t a, uint8x8_t b, uint8x8_t c)</para>
        <para>A32: VMLAL.U8 Qd, Dn, Dm</para>
        <para>A64: UMLAL Vd.8H, Vn.8B, Vm.8B</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint32x4_t vmlal_u16 (uint32x4_t a, uint16x4_t b, uint16x4_t c)</para>
        <para>A32: VMLAL.U16 Qd, Dn, Dm</para>
        <para>A64: UMLAL Vd.4S, Vn.4H, Vm.4H</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningLowerAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint64x2_t vmlal_u32 (uint64x2_t a, uint32x2_t b, uint32x2_t c)</para>
        <para>A32: VMLAL.U32 Qd, Dn, Dm</para>
        <para>A64: UMLAL Vd.2D, Vn.2S, Vm.2S</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningLowerAndSubtract(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int16x8_t vmlsl_s8 (int16x8_t a, int8x8_t b, int8x8_t c)</para>
        <para>A32: VMLSL.S8 Qd, Dn, Dm</para>
        <para>A64: SMLSL Vd.8H, Vn.8B, Vm.8B</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningLowerAndSubtract(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int32x4_t vmlsl_s16 (int32x4_t a, int16x4_t b, int16x4_t c)</para>
        <para>A32: VMLSL.S16 Qd, Dn, Dm</para>
        <para>A64: SMLSL Vd.4S, Vn.4H, Vm.4H</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningLowerAndSubtract(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int64x2_t vmlsl_s32 (int64x2_t a, int32x2_t b, int32x2_t c)</para>
        <para>A32: VMLSL.S32 Qd, Dn, Dm</para>
        <para>A64: SMLSL Vd.2D, Vn.2S, Vm.2S</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningLowerAndSubtract(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint16x8_t vmlsl_u8 (uint16x8_t a, uint8x8_t b, uint8x8_t c)</para>
        <para>A32: VMLSL.U8 Qd, Dn, Dm</para>
        <para>A64: UMLSL Vd.8H, Vn.8B, Vm.8B</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningLowerAndSubtract(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint32x4_t vmlsl_u16 (uint32x4_t a, uint16x4_t b, uint16x4_t c)</para>
        <para>A32: VMLSL.U16 Qd, Dn, Dm</para>
        <para>A64: UMLSL Vd.4S, Vn.4H, Vm.4H</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningLowerAndSubtract(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint64x2_t vmlsl_u32 (uint64x2_t a, uint32x2_t b, uint32x2_t c)</para>
        <para>A32: VMLSL.U32 Qd, Dn, Dm</para>
        <para>A64: UMLSL Vd.2D, Vn.2S, Vm.2S</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningUpper(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint16x8_t vmull_high_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VMULL.U8 Qd, Dn+1, Dm+1</para>
        <para>A64: UMULL2 Vd.8H, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int32x4_t vmull_high_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VMULL.S16 Qd, Dn+1, Dm+1</para>
        <para>A64: SMULL2 Vd.4S, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int64x2_t vmull_high_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VMULL.S32 Qd, Dn+1, Dm+1</para>
        <para>A64: SMULL2 Vd.2D, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningUpper(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int16x8_t vmull_high_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VMULL.S8 Qd, Dn+1, Dm+1</para>
        <para>A64: SMULL2 Vd.8H, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint32x4_t vmull_high_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VMULL.U16 Qd, Dn+1, Dm+1</para>
        <para>A64: UMULL2 Vd.4S, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint64x2_t vmull_high_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VMULL.U32 Qd, Dn+1, Dm+1</para>
        <para>A64: UMULL2 Vd.2D, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int16x8_t vmlal_high_s8 (int16x8_t a, int8x16_t b, int8x16_t c)</para>
        <para>A32: VMLAL.S8 Qd, Dn+1, Dm+1</para>
        <para>A64: SMLAL2 Vd.8H, Vn.16B, Vm.16B</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int32x4_t vmlal_high_s16 (int32x4_t a, int16x8_t b, int16x8_t c)</para>
        <para>A32: VMLAL.S16 Qd, Dn+1, Dm+1</para>
        <para>A64: SMLAL2 Vd.4S, Vn.8H, Vm.8H</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int64x2_t vmlal_high_s32 (int64x2_t a, int32x4_t b, int32x4_t c)</para>
        <para>A32: VMLAL.S32 Qd, Dn+1, Dm+1</para>
        <para>A64: SMLAL2 Vd.2D, Vn.4S, Vm.4S</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint16x8_t vmlal_high_u8 (uint16x8_t a, uint8x16_t b, uint8x16_t c)</para>
        <para>A32: VMLAL.U8 Qd, Dn+1, Dm+1</para>
        <para>A64: UMLAL2 Vd.8H, Vn.16B, Vm.16B</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint32x4_t vmlal_high_u16 (uint32x4_t a, uint16x8_t b, uint16x8_t c)</para>
        <para>A32: VMLAL.U16 Qd, Dn+1, Dm+1</para>
        <para>A64: UMLAL2 Vd.4S, Vn.8H, Vm.8H</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningUpperAndAdd(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint64x2_t vmlal_high_u32 (uint64x2_t a, uint32x4_t b, uint32x4_t c)</para>
        <para>A32: VMLAL.U32 Qd, Dn+1, Dm+1</para>
        <para>A64: UMLAL2 Vd.2D, Vn.4S, Vm.4S</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningUpperAndSubtract(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int16x8_t vmlsl_high_s8 (int16x8_t a, int8x16_t b, int8x16_t c)</para>
        <para>A32: VMLSL.S8 Qd, Dn+1, Dm+1</para>
        <para>A64: SMLSL2 Vd.8H, Vn.16B, Vm.16B</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningUpperAndSubtract(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int32x4_t vmlsl_high_s16 (int32x4_t a, int16x8_t b, int16x8_t c)</para>
        <para>A32: VMLSL.S16 Qd, Dn+1, Dm+1</para>
        <para>A64: SMLSL2 Vd.4S, Vn.8H, Vm.8H</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningUpperAndSubtract(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int64x2_t vmlsl_high_s32 (int64x2_t a, int32x4_t b, int32x4_t c)</para>
        <para>A32: VMLSL.S32 Qd, Dn+1, Dm+1</para>
        <para>A64: SMLSL2 Vd.2D, Vn.4S, Vm.4S</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningUpperAndSubtract(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint16x8_t vmlsl_high_u8 (uint16x8_t a, uint8x16_t b, uint8x16_t c)</para>
        <para>A32: VMLSL.U8 Qd, Dn+1, Dm+1</para>
        <para>A64: UMLSL2 Vd.8H, Vn.16B, Vm.16B</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningUpperAndSubtract(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint32x4_t vmlsl_high_u16 (uint32x4_t a, uint16x8_t b, uint16x8_t c)</para>
        <para>A32: VMLSL.U16 Qd, Dn+1, Dm+1</para>
        <para>A64: UMLSL2 Vd.4S, Vn.8H, Vm.8H</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.MultiplyWideningUpperAndSubtract(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint64x2_t vmlsl_high_u32 (uint64x2_t a, uint32x4_t b, uint32x4_t c)</para>
        <para>A32: VMLSL.U32 Qd, Dn+1, Dm+1</para>
        <para>A64: UMLSL2 Vd.2D, Vn.4S, Vm.4S</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Negate(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vnegq_s16 (int16x8_t a)</para>
        <para>A32: VNEG.S16 Qd, Qm</para>
        <para>A64: NEG Vd.8H, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Negate(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vnegq_s32 (int32x4_t a)</para>
        <para>A32: VNEG.S32 Qd, Qm</para>
        <para>A64: NEG Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Negate(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vnegq_s8 (int8x16_t a)</para>
        <para>A32: VNEG.S8 Qd, Qm</para>
        <para>A64: NEG Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Negate(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vnegq_f32 (float32x4_t a)</para>
        <para>A32: VNEG.F32 Qd, Qm</para>
        <para>A64: FNEG Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Negate(System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vneg_s16 (int16x4_t a)</para>
        <para>A32: VNEG.S16 Dd, Dm</para>
        <para>A64: NEG Vd.4H, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Negate(System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vneg_s32 (int32x2_t a)</para>
        <para>A32: VNEG.S32 Dd, Dm</para>
        <para>A64: NEG Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Negate(System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vneg_s8 (int8x8_t a)</para>
        <para>A32: VNEG.S8 Dd, Dm</para>
        <para>A64: NEG Vd.8B, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Negate(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vneg_f32 (float32x2_t a)</para>
        <para>A32: VNEG.F32 Dd, Dm</para>
        <para>A64: FNEG Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.NegateSaturate(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vqnegq_s16 (int16x8_t a)</para>
        <para>A32: VQNEG.S16 Qd, Qm</para>
        <para>A64: SQNEG Vd.8H, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.NegateSaturate(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vqnegq_s32 (int32x4_t a)</para>
        <para>A32: VQNEG.S32 Qd, Qm</para>
        <para>A64: SQNEG Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.NegateSaturate(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vqnegq_s8 (int8x16_t a)</para>
        <para>A32: VQNEG.S8 Qd, Qm</para>
        <para>A64: SQNEG Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.NegateSaturate(System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vqneg_s16 (int16x4_t a)</para>
        <para>A32: VQNEG.S16 Dd, Dm</para>
        <para>A64: SQNEG Vd.4H, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.NegateSaturate(System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vqneg_s32 (int32x2_t a)</para>
        <para>A32: VQNEG.S32 Dd, Dm</para>
        <para>A64: SQNEG Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.NegateSaturate(System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vqneg_s8 (int8x8_t a)</para>
        <para>A32: VQNEG.S8 Dd, Dm</para>
        <para>A64: SQNEG Vd.8B, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.NegateScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vneg_f64 (float64x1_t a)</para>
        <para>A32: VNEG.F64 Dd, Dm</para>
        <para>A64: FNEG Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.NegateScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vnegs_f32 (float32_t a)</para>
        <para>A32: VNEG.F32 Sd, Sm</para>
        <para>A64: FNEG Sd, Sn The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vmvnq_u8 (uint8x16_t a)</para>
        <para>A32: VMVN Qd, Qm</para>
        <para>A64: MVN Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vmvnq_f64 (float64x2_t a)</para>
        <para>A32: VMVN Qd, Qm</para>
        <para>A64: MVN Vd.16B, Vn.16B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vmvnq_s16 (int16x8_t a)</para>
        <para>A32: VMVN Qd, Qm</para>
        <para>A64: MVN Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vmvnq_s32 (int32x4_t a)</para>
        <para>A32: VMVN Qd, Qm</para>
        <para>A64: MVN Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vmvnq_s64 (int64x2_t a)</para>
        <para>A32: VMVN Qd, Qm</para>
        <para>A64: MVN Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vmvnq_s8 (int8x16_t a)</para>
        <para>A32: VMVN Qd, Qm</para>
        <para>A64: MVN Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vmvnq_f32 (float32x4_t a)</para>
        <para>A32: VMVN Qd, Qm</para>
        <para>A64: MVN Vd.16B, Vn.16B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vmvnq_u16 (uint16x8_t a)</para>
        <para>A32: VMVN Qd, Qm</para>
        <para>A64: MVN Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vmvnq_u32 (uint32x4_t a)</para>
        <para>A32: VMVN Qd, Qm</para>
        <para>A64: MVN Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vmvnq_u64 (uint64x2_t a)</para>
        <para>A32: VMVN Qd, Qm</para>
        <para>A64: MVN Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vmvn_u8 (uint8x8_t a)</para>
        <para>A32: VMVN Dd, Dm</para>
        <para>A64: MVN Vd.8B, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vmvn_f64 (float64x1_t a)</para>
        <para>A32: VMVN Dd, Dm</para>
        <para>A64: MVN Vd.8B, Vn.8B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vmvn_s16 (int16x4_t a)</para>
        <para>A32: VMVN Dd, Dm</para>
        <para>A64: MVN Vd.8B, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vmvn_s32 (int32x2_t a)</para>
        <para>A32: VMVN Dd, Dm</para>
        <para>A64: MVN Vd.8B, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>int64x1_t vmvn_s64 (int64x1_t a)</para>
        <para>A32: VMVN Dd, Dm</para>
        <para>A64: MVN Vd.8B, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vmvn_s8 (int8x8_t a)</para>
        <para>A32: VMVN Dd, Dm</para>
        <para>A64: MVN Vd.8B, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vmvn_f32 (float32x2_t a)</para>
        <para>A32: VMVN Dd, Dm</para>
        <para>A64: MVN Vd.8B, Vn.8B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vmvn_u16 (uint16x4_t a)</para>
        <para>A32: VMVN Dd, Dm</para>
        <para>A64: MVN Vd.8B, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vmvn_u32 (uint32x2_t a)</para>
        <para>A32: VMVN Dd, Dm</para>
        <para>A64: MVN Vd.8B, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Not(System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>uint64x1_t vmvn_u64 (uint64x1_t a)</para>
        <para>A32: VMVN Dd, Dm</para>
        <para>A64: MVN Vd.8B, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vorrq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VORR Qd, Qn, Qm</para>
        <para>A64: ORR Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vorrq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A32: VORR Qd, Qn, Qm</para>
        <para>A64: ORR Vd.16B, Vn.16B, Vm.16B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vorrq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VORR Qd, Qn, Qm</para>
        <para>A64: ORR Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vorrq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VORR Qd, Qn, Qm</para>
        <para>A64: ORR Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vorrq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A32: VORR Qd, Qn, Qm</para>
        <para>A64: ORR Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vorrq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VORR Qd, Qn, Qm</para>
        <para>A64: ORR Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vorrq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VORR Qd, Qn, Qm</para>
        <para>A64: ORR Vd.16B, Vn.16B, Vm.16B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vorrq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VORR Qd, Qn, Qm</para>
        <para>A64: ORR Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vorrq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VORR Qd, Qn, Qm</para>
        <para>A64: ORR Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vorrq_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A32: VORR Qd, Qn, Qm</para>
        <para>A64: ORR Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vorr_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VORR Dd, Dn, Dm</para>
        <para>A64: ORR Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vorr_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A32: VORR Dd, Dn, Dm</para>
        <para>A64: ORR Vd.8B, Vn.8B, Vm.8B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vorr_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VORR Dd, Dn, Dm</para>
        <para>A64: ORR Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vorr_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VORR Dd, Dn, Dm</para>
        <para>A64: ORR Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>int64x1_t vorr_s64 (int64x1_t a, int64x1_t b)</para>
        <para>A32: VORR Dd, Dn, Dm</para>
        <para>A64: ORR Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vorr_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VORR Dd, Dn, Dm</para>
        <para>A64: ORR Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vorr_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VORR Dd, Dn, Dm</para>
        <para>A64: ORR Vd.8B, Vn.8B, Vm.8B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vorr_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VORR Dd, Dn, Dm</para>
        <para>A64: ORR Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vorr_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VORR Dd, Dn, Dm</para>
        <para>A64: ORR Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Or(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>uint64x1_t vorr_u64 (uint64x1_t a, uint64x1_t b)</para>
        <para>A32: VORR Dd, Dn, Dm</para>
        <para>A64: ORR Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vornq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VORN Qd, Qn, Qm</para>
        <para>A64: ORN Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vornq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A32: VORN Qd, Qn, Qm</para>
        <para>A64: ORN Vd.16B, Vn.16B, Vm.16B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vornq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VORN Qd, Qn, Qm</para>
        <para>A64: ORN Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vornq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VORN Qd, Qn, Qm</para>
        <para>A64: ORN Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vornq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A32: VORN Qd, Qn, Qm</para>
        <para>A64: ORN Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vornq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VORN Qd, Qn, Qm</para>
        <para>A64: ORN Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vornq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VORN Qd, Qn, Qm</para>
        <para>A64: ORN Vd.16B, Vn.16B, Vm.16B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vornq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VORN Qd, Qn, Qm</para>
        <para>A64: ORN Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vornq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VORN Qd, Qn, Qm</para>
        <para>A64: ORN Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vornq_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A32: VORN Qd, Qn, Qm</para>
        <para>A64: ORN Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vorn_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VORN Dd, Dn, Dm</para>
        <para>A64: ORN Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vorn_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A32: VORN Dd, Dn, Dm</para>
        <para>A64: ORN Vd.8B, Vn.8B, Vm.8B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vorn_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VORN Dd, Dn, Dm</para>
        <para>A64: ORN Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vorn_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VORN Dd, Dn, Dm</para>
        <para>A64: ORN Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>int64x1_t vorn_s64 (int64x1_t a, int64x1_t b)</para>
        <para>A32: VORN Dd, Dn, Dm</para>
        <para>A64: ORN Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vorn_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VORN Dd, Dn, Dm</para>
        <para>A64: ORN Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vorn_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VORN Dd, Dn, Dm</para>
        <para>A64: ORN Vd.8B, Vn.8B, Vm.8B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vorn_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VORN Dd, Dn, Dm</para>
        <para>A64: ORN Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vorn_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VORN Dd, Dn, Dm</para>
        <para>A64: ORN Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.OrNot(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>uint64x1_t vorn_u64 (uint64x1_t a, uint64x1_t b)</para>
        <para>A32: VORN Dd, Dn, Dm</para>
        <para>A64: ORN Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.PolynomialMultiply(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>poly8x16_t vmulq_p8 (poly8x16_t a, poly8x16_t b)</para>
        <para>A32: VMUL.P8 Qd, Qn, Qm</para>
        <para>A64: PMUL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.PolynomialMultiply(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>poly8x16_t vmulq_p8 (poly8x16_t a, poly8x16_t b)</para>
        <para>A32: VMUL.P8 Qd, Qn, Qm</para>
        <para>A64: PMUL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.PolynomialMultiply(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>poly8x8_t vmul_p8 (poly8x8_t a, poly8x8_t b)</para>
        <para>A32: VMUL.P8 Dd, Dn, Dm</para>
        <para>A64: PMUL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.PolynomialMultiply(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>poly8x8_t vmul_p8 (poly8x8_t a, poly8x8_t b)</para>
        <para>A32: VMUL.P8 Dd, Dn, Dm</para>
        <para>A64: PMUL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.PolynomialMultiplyWideningLower(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>poly16x8_t vmull_p8 (poly8x8_t a, poly8x8_t b)</para>
        <para>A32: VMULL.P8 Qd, Dn, Dm</para>
        <para>A64: PMULL Vd.16B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.PolynomialMultiplyWideningLower(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>poly16x8_t vmull_p8 (poly8x8_t a, poly8x8_t b)</para>
        <para>A32: VMULL.P8 Qd, Dn, Dm</para>
        <para>A64: PMULL Vd.16B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.PolynomialMultiplyWideningUpper(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>poly16x8_t vmull_high_p8 (poly8x16_t a, poly8x16_t b)</para>
        <para>A32: VMULL.P8 Qd, Dn+1, Dm+1</para>
        <para>A64: PMULL2 Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.PolynomialMultiplyWideningUpper(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>poly16x8_t vmull_high_p8 (poly8x16_t a, poly8x16_t b)</para>
        <para>A32: VMULL.P8 Qd, Dn+1, Dm+1</para>
        <para>A64: PMULL2 Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.PopCount(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vcntq_u8 (uint8x16_t a)</para>
        <para>A32: VCNT.I8 Qd, Qm</para>
        <para>A64: CNT Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.PopCount(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vcntq_s8 (int8x16_t a)</para>
        <para>A32: VCNT.I8 Qd, Qm</para>
        <para>A64: CNT Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.PopCount(System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vcnt_u8 (uint8x8_t a)</para>
        <para>A32: VCNT.I8 Dd, Dm</para>
        <para>A64: CNT Vd.8B, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.PopCount(System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vcnt_s8 (int8x8_t a)</para>
        <para>A32: VCNT.I8 Dd, Dm</para>
        <para>A64: CNT Vd.8B, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReciprocalEstimate(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vrecpeq_f32 (float32x4_t a)</para>
        <para>A32: VRECPE.F32 Qd, Qm</para>
        <para>A64: FRECPE Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReciprocalEstimate(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vrecpeq_u32 (uint32x4_t a)</para>
        <para>A32: VRECPE.U32 Qd, Qm</para>
        <para>A64: URECPE Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReciprocalEstimate(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vrecpe_f32 (float32x2_t a)</para>
        <para>A32: VRECPE.F32 Dd, Dm</para>
        <para>A64: FRECPE Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReciprocalEstimate(System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vrecpe_u32 (uint32x2_t a)</para>
        <para>A32: VRECPE.U32 Dd, Dm</para>
        <para>A64: URECPE Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReciprocalSquareRootEstimate(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vrsqrteq_f32 (float32x4_t a)</para>
        <para>A32: VRSQRTE.F32 Qd, Qm</para>
        <para>A64: FRSQRTE Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReciprocalSquareRootEstimate(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vrsqrteq_u32 (uint32x4_t a)</para>
        <para>A32: VRSQRTE.U32 Qd, Qm</para>
        <para>A64: URSQRTE Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReciprocalSquareRootEstimate(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vrsqrte_f32 (float32x2_t a)</para>
        <para>A32: VRSQRTE.F32 Dd, Dm</para>
        <para>A64: FRSQRTE Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReciprocalSquareRootEstimate(System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vrsqrte_u32 (uint32x2_t a)</para>
        <para>A32: VRSQRTE.U32 Dd, Dm</para>
        <para>A64: URSQRTE Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReciprocalSquareRootStep(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vrsqrtsq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VRSQRTS.F32 Qd, Qn, Qm</para>
        <para>A64: FRSQRTS Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReciprocalSquareRootStep(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vrsqrts_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VRSQRTS.F32 Dd, Dn, Dm</para>
        <para>A64: FRSQRTS Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReciprocalStep(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vrecpsq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VRECPS.F32 Qd, Qn, Qm</para>
        <para>A64: FRECPS Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReciprocalStep(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vrecps_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VRECPS.F32 Dd, Dn, Dm</para>
        <para>A64: FRECPS Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement16(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>int16x8_t vrev32q_s16 (int16x8_t vec) A32: VREV32.16 Qd, Qm A64: REV32 Vd.8H, Vn.8H</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement16(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>int16x8_t vrev64q_s16 (int16x8_t vec) A32: VREV64.16 Qd, Qm A64: REV64 Vd.8H, Vn.8H</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement16(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>uint16x8_t vrev32q_u16 (uint16x8_t vec) A32: VREV32.16 Qd, Qm A64: REV32 Vd.8H, Vn.8H</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement16(System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>uint16x8_t vrev64q_u16 (uint16x8_t vec) A32: VREV64.16 Qd, Qm A64: REV64 Vd.8H, Vn.8H</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement16(System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int16x4_t vrev32_s16 (int16x4_t vec) A32: VREV32.16 Dd, Dm A64: REV32 Vd.4H, Vn.4H</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement16(System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>int16x4_t vrev64_s16 (int16x4_t vec) A32: VREV64.16 Dd, Dm A64: REV64 Vd.4H, Vn.4H</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement16(System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>uint16x4_t vrev32_u16 (uint16x4_t vec) A32: VREV32.16 Dd, Dm A64: REV32 Vd.4H, Vn.4H</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement16(System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>uint16x4_t vrev64_u16 (uint16x4_t vec) A32: VREV64.16 Dd, Dm A64: REV64 Vd.4H, Vn.4H</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement32(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>int32x4_t vrev64q_s32 (int32x4_t vec) A32: VREV64.32 Qd, Qm A64: REV64 Vd.4S, Vn.4S</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement32(System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>uint32x4_t vrev64q_u32 (uint32x4_t vec) A32: VREV64.32 Qd, Qm A64: REV64 Vd.4S, Vn.4S</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement32(System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>int32x2_t vrev64_s32 (int32x2_t vec) A32: VREV64.32 Dd, Dm A64: REV64 Vd.2S, Vn.2S</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement32(System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>uint32x2_t vrev64_u32 (uint32x2_t vec) A32: VREV64.32 Dd, Dm A64: REV64 Vd.2S, Vn.2S</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement8(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>int8x16_t vrev16q_s8 (int8x16_t vec) A32: VREV16.8 Qd, Qm A64: REV16 Vd.16B, Vn.16B</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement8(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>int8x16_t vrev32q_s8 (int8x16_t vec) A32: VREV32.8 Qd, Qm A64: REV32 Vd.16B, Vn.16B</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement8(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>int8x16_t vrev64q_s8 (int8x16_t vec) A32: VREV64.8 Qd, Qm A64: REV64 Vd.16B, Vn.16B</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement8(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>uint8x16_t vrev16q_u8 (uint8x16_t vec) A32: VREV16.8 Qd, Qm A64: REV16 Vd.16B, Vn.16B</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement8(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>uint8x16_t vrev32q_u8 (uint8x16_t vec) A32: VREV32.8 Qd, Qm A64: REV32 Vd.16B, Vn.16B</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement8(System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>uint8x16_t vrev64q_u8 (uint8x16_t vec) A32: VREV64.8 Qd, Qm A64: REV64 Vd.16B, Vn.16B</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement8(System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int8x8_t vrev16_s8 (int8x8_t vec) A32: VREV16.8 Dd, Dm A64: REV16 Vd.8B, Vn.8B</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement8(System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int8x8_t vrev32_s8 (int8x8_t vec) A32: VREV32.8 Dd, Dm A64: REV32 Vd.8B, Vn.8B</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement8(System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>int8x8_t vrev64_s8 (int8x8_t vec) A32: VREV64.8 Dd, Dm A64: REV64 Vd.8B, Vn.8B</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement8(System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>uint8x8_t vrev16_u8 (uint8x8_t vec) A32: VREV16.8 Dd, Dm A64: REV16 Vd.8B, Vn.8B</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement8(System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>uint8x8_t vrev32_u8 (uint8x8_t vec) A32: VREV32.8 Dd, Dm A64: REV32 Vd.8B, Vn.8B</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ReverseElement8(System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>uint8x8_t vrev64_u8 (uint8x8_t vec) A32: VREV64.8 Dd, Dm A64: REV64 Vd.8B, Vn.8B</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundAwayFromZero(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vrndaq_f32 (float32x4_t a)</para>
        <para>A32: VRINTA.F32 Qd, Qm</para>
        <para>A64: FRINTA Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundAwayFromZero(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vrnda_f32 (float32x2_t a)</para>
        <para>A32: VRINTA.F32 Dd, Dm</para>
        <para>A64: FRINTA Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundAwayFromZeroScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vrnda_f64 (float64x1_t a)</para>
        <para>A32: VRINTA.F64 Dd, Dm</para>
        <para>A64: FRINTA Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundAwayFromZeroScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vrndas_f32 (float32_t a)</para>
        <para>A32: VRINTA.F32 Sd, Sm</para>
        <para>A64: FRINTA Sd, Sn The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundToNearest(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vrndnq_f32 (float32x4_t a)</para>
        <para>A32: VRINTN.F32 Qd, Qm</para>
        <para>A64: FRINTN Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundToNearest(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vrndn_f32 (float32x2_t a)</para>
        <para>A32: VRINTN.F32 Dd, Dm</para>
        <para>A64: FRINTN Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundToNearestScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vrndn_f64 (float64x1_t a)</para>
        <para>A32: VRINTN.F64 Dd, Dm</para>
        <para>A64: FRINTN Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundToNearestScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vrndns_f32 (float32_t a)</para>
        <para>A32: VRINTN.F32 Sd, Sm</para>
        <para>A64: FRINTN Sd, Sn The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundToNegativeInfinity(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vrndmq_f32 (float32x4_t a)</para>
        <para>A32: VRINTM.F32 Qd, Qm</para>
        <para>A64: FRINTM Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundToNegativeInfinity(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vrndm_f32 (float32x2_t a)</para>
        <para>A32: VRINTM.F32 Dd, Dm</para>
        <para>A64: FRINTM Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundToNegativeInfinityScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vrndm_f64 (float64x1_t a)</para>
        <para>A32: VRINTM.F64 Dd, Dm</para>
        <para>A64: FRINTM Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundToNegativeInfinityScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vrndms_f32 (float32_t a)</para>
        <para>A32: VRINTM.F32 Sd, Sm</para>
        <para>A64: FRINTM Sd, Sn The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundToPositiveInfinity(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vrndpq_f32 (float32x4_t a)</para>
        <para>A32: VRINTP.F32 Qd, Qm</para>
        <para>A64: FRINTP Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundToPositiveInfinity(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vrndp_f32 (float32x2_t a)</para>
        <para>A32: VRINTP.F32 Dd, Dm</para>
        <para>A64: FRINTP Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundToPositiveInfinityScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vrndp_f64 (float64x1_t a)</para>
        <para>A32: VRINTP.F64 Dd, Dm</para>
        <para>A64: FRINTP Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundToPositiveInfinityScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vrndps_f32 (float32_t a)</para>
        <para>A32: VRINTP.F32 Sd, Sm</para>
        <para>A64: FRINTP Sd, Sn The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundToZero(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vrndq_f32 (float32x4_t a)</para>
        <para>A32: VRINTZ.F32 Qd, Qm</para>
        <para>A64: FRINTZ Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundToZero(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vrnd_f32 (float32x2_t a)</para>
        <para>A32: VRINTZ.F32 Dd, Dm</para>
        <para>A64: FRINTZ Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundToZeroScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vrnd_f64 (float64x1_t a)</para>
        <para>A32: VRINTZ.F64 Dd, Dm</para>
        <para>A64: FRINTZ Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.RoundToZeroScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vrnds_f32 (float32_t a)</para>
        <para>A32: VRINTZ.F32 Sd, Sm</para>
        <para>A64: FRINTZ Sd, Sn The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmetic(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vshlq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VSHL.S16 Qd, Qn, Qm</para>
        <para>A64: SSHL Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmetic(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vshlq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VSHL.S32 Qd, Qn, Qm</para>
        <para>A64: SSHL Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmetic(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vshlq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A32: VSHL.S64 Qd, Qn, Qm</para>
        <para>A64: SSHL Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmetic(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vshlq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VSHL.S8 Qd, Qn, Qm</para>
        <para>A64: SSHL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmetic(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vshl_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VSHL.S16 Dd, Dn, Dm</para>
        <para>A64: SSHL Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmetic(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vshl_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VSHL.S32 Dd, Dn, Dm</para>
        <para>A64: SSHL Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmetic(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vshl_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VSHL.S8 Dd, Dn, Dm</para>
        <para>A64: SSHL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticRounded(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vrshlq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VRSHL.S16 Qd, Qn, Qm</para>
        <para>A64: SRSHL Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticRounded(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vrshlq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VRSHL.S32 Qd, Qn, Qm</para>
        <para>A64: SRSHL Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticRounded(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vrshlq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A32: VRSHL.S64 Qd, Qn, Qm</para>
        <para>A64: SRSHL Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticRounded(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vrshlq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VRSHL.S8 Qd, Qn, Qm</para>
        <para>A64: SRSHL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticRounded(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vrshl_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VRSHL.S16 Dd, Dn, Dm</para>
        <para>A64: SRSHL Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticRounded(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vrshl_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VRSHL.S32 Dd, Dn, Dm</para>
        <para>A64: SRSHL Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticRounded(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vrshl_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VRSHL.S8 Dd, Dn, Dm</para>
        <para>A64: SRSHL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticRoundedSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vqrshlq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VQRSHL.S16 Qd, Qn, Qm</para>
        <para>A64: SQRSHL Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticRoundedSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vqrshlq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VQRSHL.S32 Qd, Qn, Qm</para>
        <para>A64: SQRSHL Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticRoundedSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vqrshlq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A32: VQRSHL.S64 Qd, Qn, Qm</para>
        <para>A64: SQRSHL Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticRoundedSaturate(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vqrshlq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VQRSHL.S8 Qd, Qn, Qm</para>
        <para>A64: SQRSHL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticRoundedSaturate(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vqrshl_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VQRSHL.S16 Dd, Dn, Dm</para>
        <para>A64: SQRSHL Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticRoundedSaturate(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vqrshl_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VQRSHL.S32 Dd, Dn, Dm</para>
        <para>A64: SQRSHL Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticRoundedSaturate(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vqrshl_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VQRSHL.S8 Dd, Dn, Dm</para>
        <para>A64: SQRSHL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticRoundedSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>int64x1_t vqrshl_s64 (int64x1_t a, int64x1_t b)</para>
        <para>A32: VQRSHL.S64 Dd, Dn, Dm</para>
        <para>A64: SQRSHL Dd, Dn, Dm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticRoundedScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>int64x1_t vrshl_s64 (int64x1_t a, int64x1_t b)</para>
        <para>A32: VRSHL.S64 Dd, Dn, Dm</para>
        <para>A64: SRSHL Dd, Dn, Dm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vqshlq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VQSHL.S16 Qd, Qn, Qm</para>
        <para>A64: SQSHL Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vqshlq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VQSHL.S32 Qd, Qn, Qm</para>
        <para>A64: SQSHL Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vqshlq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A32: VQSHL.S64 Qd, Qn, Qm</para>
        <para>A64: SQSHL Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticSaturate(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vqshlq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VQSHL.S8 Qd, Qn, Qm</para>
        <para>A64: SQSHL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticSaturate(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vqshl_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VQSHL.S16 Dd, Dn, Dm</para>
        <para>A64: SQSHL Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticSaturate(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vqshl_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VQSHL.S32 Dd, Dn, Dm</para>
        <para>A64: SQSHL Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticSaturate(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vqshl_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VQSHL.S8 Dd, Dn, Dm</para>
        <para>A64: SQSHL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>int64x1_t vqshl_s64 (int64x1_t a, int64x1_t b)</para>
        <para>A32: VQSHL.S64 Dd, Dn, Dm</para>
        <para>A64: SQSHL Dd, Dn, Dm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftArithmeticScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>int64x1_t vshl_s64 (int64x1_t a, int64x1_t b)</para>
        <para>A32: VSHL.S64 Dd, Dn, Dm</para>
        <para>A64: SSHL Dd, Dn, Dm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftAndInsert(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>uint8x16_t vsliq_n_u8(uint8x16_t a, uint8x16_t b, __builtin_constant_p(n)) A32: VSLI.8 Qd, Qm, #n A64: SLI Vd.16B, Vn.16B, #n</summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftAndInsert(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int16x8_t vsliq_n_s16(int16x8_t a, int16x8_t b, __builtin_constant_p(n)) A32: VSLI.16 Qd, Qm, #n A64: SLI Vd.8H, Vn.8H, #n</summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftAndInsert(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int32x4_t vsliq_n_s32(int32x4_t a, int32x4_t b, __builtin_constant_p(n)) A32: VSLI.32 Qd, Qm, #n A64: SLI Vd.4S, Vn.4S, #n</summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftAndInsert(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>int64x2_t vsliq_n_s64(int64x2_t a, int64x2_t b, __builtin_constant_p(n)) A32: VSLI.64 Qd, Qm, #n A64: SLI Vd.2D, Vn.2D, #n</summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftAndInsert(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>int8x16_t vsliq_n_s8(int8x16_t a, int8x16_t b, __builtin_constant_p(n)) A32: VSLI.8 Qd, Qm, #n A64: SLI Vd.16B, Vn.16B, #n</summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftAndInsert(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>uint16x8_t vsliq_n_u16(uint16x8_t a, uint16x8_t b, __builtin_constant_p(n)) A32: VSLI.16 Qd, Qm, #n A64: SLI Vd.8H, Vn.8H, #n</summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftAndInsert(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>uint32x4_t vsliq_n_u32(uint32x4_t a, uint32x4_t b, __builtin_constant_p(n)) A32: VSLI.32 Qd, Qm, #n A64: SLI Vd.4S, Vn.4S, #n</summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftAndInsert(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>uint64x2_t vsliq_n_u64(uint64x2_t a, uint64x2_t b, __builtin_constant_p(n)) A32: VSLI.64 Qd, Qm, #n A64: SLI Vd.2D, Vn.2D, #n</summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftAndInsert(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte)">
      <summary>uint8x8_t vsli_n_u8(uint8x8_t a, uint8x8_t b, __builtin_constant_p(n)) A32: VSLI.8 Dd, Dm, #n A64: SLI Vd.8B, Vn.8B, #n</summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftAndInsert(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int16x4_t vsli_n_s16(int16x4_t a, int16x4_t b, __builtin_constant_p(n)) A32: VSLI.16 Dd, Dm, #n A64: SLI Vd.4H, Vn.4H, #n</summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftAndInsert(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int32x2_t vsli_n_s32(int32x2_t a, int32x2_t b, __builtin_constant_p(n)) A32: VSLI.32 Dd, Dm, #n A64: SLI Vd.2S, Vn.2S, #n</summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftAndInsert(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>int8x8_t vsli_n_s8(int8x8_t a, int8x8_t b, __builtin_constant_p(n)) A32: VSLI.8 Dd, Dm, #n A64: SLI Vd.8B, Vn.8B, #n</summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftAndInsert(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>uint16x4_t vsli_n_u16(uint16x4_t a, uint16x4_t b, __builtin_constant_p(n)) A32: VSLI.16 Dd, Dm, #n A64: SLI Vd.4H, Vn.4H, #n</summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftAndInsert(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>uint32x2_t vsli_n_u32(uint32x2_t a, uint32x2_t b, __builtin_constant_p(n)) A32: VSLI.32 Dd, Dm, #n A64: SLI Vd.2S, Vn.2S, #n</summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftAndInsertScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64},System.Byte)">
      <summary>int64_t vslid_n_s64(int64_t a, int64_t b, __builtin_constant_p(n)) A32: VSLI.64 Dd, Dm, #n A64: SLI Dd, Dn, #n</summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftAndInsertScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64},System.Byte)">
      <summary>uint64_t vslid_n_u64(uint64_t a, uint64_t b, __builtin_constant_p(n)) A32: VSLI.64 Dd, Dm, #n A64: SLI Dd, Dn, #n</summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>uint8x16_t vshlq_n_u8 (uint8x16_t a, const int n)</para>
        <para>A32: VSHL.I8 Qd, Qm, #n</para>
        <para>A64: SHL Vd.16B, Vn.16B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int16x8_t vshlq_n_s16 (int16x8_t a, const int n)</para>
        <para>A32: VSHL.I16 Qd, Qm, #n</para>
        <para>A64: SHL Vd.8H, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>int64x2_t vshlq_n_s64 (int64x2_t a, const int n)</para>
        <para>A32: VSHL.I64 Qd, Qm, #n</para>
        <para>A64: SHL Vd.2D, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>int8x16_t vshlq_n_s8 (int8x16_t a, const int n)</para>
        <para>A32: VSHL.I8 Qd, Qm, #n</para>
        <para>A64: SHL Vd.16B, Vn.16B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x8_t vshlq_n_u16 (uint16x8_t a, const int n)</para>
        <para>A32: VSHL.I16 Qd, Qm, #n</para>
        <para>A64: SHL Vd.8H, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x4_t vshlq_n_u32 (uint32x4_t a, const int n)</para>
        <para>A32: VSHL.I32 Qd, Qm, #n</para>
        <para>A64: SHL Vd.4S, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>uint64x2_t vshlq_n_u64 (uint64x2_t a, const int n)</para>
        <para>A32: VSHL.I64 Qd, Qm, #n</para>
        <para>A64: SHL Vd.2D, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogical(System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte)">
      <summary>
        <para>uint8x8_t vshl_n_u8 (uint8x8_t a, const int n)</para>
        <para>A32: VSHL.I8 Dd, Dm, #n</para>
        <para>A64: SHL Vd.8B, Vn.8B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogical(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16x4_t vshl_n_s16 (int16x4_t a, const int n)</para>
        <para>A32: VSHL.I16 Dd, Dm, #n</para>
        <para>A64: SHL Vd.4H, Vn.4H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogical(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32x2_t vshl_n_s32 (int32x2_t a, const int n)</para>
        <para>A32: VSHL.I32 Dd, Dm, #n</para>
        <para>A64: SHL Vd.2S, Vn.2S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogical(System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>int8x8_t vshl_n_s8 (int8x8_t a, const int n)</para>
        <para>A32: VSHL.I8 Dd, Dm, #n</para>
        <para>A64: SHL Vd.8B, Vn.8B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogical(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x4_t vshl_n_u16 (uint16x4_t a, const int n)</para>
        <para>A32: VSHL.I16 Dd, Dm, #n</para>
        <para>A64: SHL Vd.4H, Vn.4H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogical(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x2_t vshl_n_u32 (uint32x2_t a, const int n)</para>
        <para>A32: VSHL.I32 Dd, Dm, #n</para>
        <para>A64: SHL Vd.2S, Vn.2S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturate(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>uint8x16_t vqshlq_n_u8 (uint8x16_t a, const int n)</para>
        <para>A32: VQSHL.U8 Qd, Qm, #n</para>
        <para>A64: UQSHL Vd.16B, Vn.16B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int16x8_t vqshlq_n_s16 (int16x8_t a, const int n)</para>
        <para>A32: VQSHL.S16 Qd, Qm, #n</para>
        <para>A64: SQSHL Vd.8H, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int32x4_t vqshlq_n_s32 (int32x4_t a, const int n)</para>
        <para>A32: VQSHL.S32 Qd, Qm, #n</para>
        <para>A64: SQSHL Vd.4S, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>int64x2_t vqshlq_n_s64 (int64x2_t a, const int n)</para>
        <para>A32: VQSHL.S64 Qd, Qm, #n</para>
        <para>A64: SQSHL Vd.2D, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturate(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>int8x16_t vqshlq_n_s8 (int8x16_t a, const int n)</para>
        <para>A32: VQSHL.S8 Qd, Qm, #n</para>
        <para>A64: SQSHL Vd.16B, Vn.16B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturate(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x8_t vqshlq_n_u16 (uint16x8_t a, const int n)</para>
        <para>A32: VQSHL.U16 Qd, Qm, #n</para>
        <para>A64: UQSHL Vd.8H, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturate(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x4_t vqshlq_n_u32 (uint32x4_t a, const int n)</para>
        <para>A32: VQSHL.U32 Qd, Qm, #n</para>
        <para>A64: UQSHL Vd.4S, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturate(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>uint64x2_t vqshlq_n_u64 (uint64x2_t a, const int n)</para>
        <para>A32: VQSHL.U64 Qd, Qm, #n</para>
        <para>A64: UQSHL Vd.2D, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturate(System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte)">
      <summary>
        <para>uint8x8_t vqshl_n_u8 (uint8x8_t a, const int n)</para>
        <para>A32: VQSHL.U8 Dd, Dm, #n</para>
        <para>A64: UQSHL Vd.8B, Vn.8B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturate(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16x4_t vqshl_n_s16 (int16x4_t a, const int n)</para>
        <para>A32: VQSHL.S16 Dd, Dm, #n</para>
        <para>A64: SQSHL Vd.4H, Vn.4H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturate(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32x2_t vqshl_n_s32 (int32x2_t a, const int n)</para>
        <para>A32: VQSHL.S32 Dd, Dm, #n</para>
        <para>A64: SQSHL Vd.2S, Vn.2S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturate(System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>int8x8_t vqshl_n_s8 (int8x8_t a, const int n)</para>
        <para>A32: VQSHL.S8 Dd, Dm, #n</para>
        <para>A64: SQSHL Vd.8B, Vn.8B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturate(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x4_t vqshl_n_u16 (uint16x4_t a, const int n)</para>
        <para>A32: VQSHL.U16 Dd, Dm, #n</para>
        <para>A64: UQSHL Vd.4H, Vn.4H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturate(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x2_t vqshl_n_u32 (uint32x2_t a, const int n)</para>
        <para>A32: VQSHL.U32 Dd, Dm, #n</para>
        <para>A64: UQSHL Vd.2S, Vn.2S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Byte)">
      <summary>
        <para>int64x1_t vqshl_n_s64 (int64x1_t a, const int n)</para>
        <para>A32: VQSHL.S64 Dd, Dm, #n</para>
        <para>A64: SQSHL Dd, Dn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Byte)">
      <summary>
        <para>uint64x1_t vqshl_n_u64 (uint64x1_t a, const int n)</para>
        <para>A32: VQSHL.U64 Dd, Dm, #n</para>
        <para>A64: UQSHL Dd, Dn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturateUnsigned(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>uint16x8_t vqshluq_n_s16 (int16x8_t a, const int n)</para>
        <para>A32: VQSHLU.S16 Qd, Qm, #n</para>
        <para>A64: SQSHLU Vd.8H, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturateUnsigned(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>uint32x4_t vqshluq_n_s32 (int32x4_t a, const int n)</para>
        <para>A32: VQSHLU.S32 Qd, Qm, #n</para>
        <para>A64: SQSHLU Vd.4S, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturateUnsigned(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>uint64x2_t vqshluq_n_s64 (int64x2_t a, const int n)</para>
        <para>A32: VQSHLU.S64 Qd, Qm, #n</para>
        <para>A64: SQSHLU Vd.2D, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturateUnsigned(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>uint8x16_t vqshluq_n_s8 (int8x16_t a, const int n)</para>
        <para>A32: VQSHLU.S8 Qd, Qm, #n</para>
        <para>A64: SQSHLU Vd.16B, Vn.16B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturateUnsigned(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>uint16x4_t vqshlu_n_s16 (int16x4_t a, const int n)</para>
        <para>A32: VQSHLU.S16 Dd, Dm, #n</para>
        <para>A64: SQSHLU Vd.4H, Vn.4H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturateUnsigned(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>uint32x2_t vqshlu_n_s32 (int32x2_t a, const int n)</para>
        <para>A32: VQSHLU.S32 Dd, Dm, #n</para>
        <para>A64: SQSHLU Vd.2S, Vn.2S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturateUnsigned(System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>uint8x8_t vqshlu_n_s8 (int8x8_t a, const int n)</para>
        <para>A32: VQSHLU.S8 Dd, Dm, #n</para>
        <para>A64: SQSHLU Vd.8B, Vn.8B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalSaturateUnsignedScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Byte)">
      <summary>
        <para>uint64x1_t vqshlu_n_s64 (int64x1_t a, const int n)</para>
        <para>A32: VQSHLU.S64 Dd, Dm, #n</para>
        <para>A64: SQSHLU Dd, Dn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Byte)">
      <summary>
        <para>int64x1_t vshl_n_s64 (int64x1_t a, const int n)</para>
        <para>A32: VSHL.I64 Dd, Dm, #n</para>
        <para>A64: SHL Dd, Dn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Byte)">
      <summary>
        <para>uint64x1_t vshl_n_u64 (uint64x1_t a, const int n)</para>
        <para>A32: VSHL.I64 Dd, Dm, #n</para>
        <para>A64: SHL Dd, Dn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalWideningLower(System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte)">
      <summary>
        <para>uint16x8_t vshll_n_u8 (uint8x8_t a, const int n)</para>
        <para>A32: VSHLL.U8 Qd, Dm, #n</para>
        <para>A64: USHLL Vd.8H, Vn.8B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalWideningLower(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int32x4_t vshll_n_s16 (int16x4_t a, const int n)</para>
        <para>A32: VSHLL.S16 Qd, Dm, #n</para>
        <para>A64: SSHLL Vd.4S, Vn.4H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalWideningLower(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int64x2_t vshll_n_s32 (int32x2_t a, const int n)</para>
        <para>A32: VSHLL.S32 Qd, Dm, #n</para>
        <para>A64: SSHLL Vd.2D, Vn.2S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalWideningLower(System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>int16x8_t vshll_n_s8 (int8x8_t a, const int n)</para>
        <para>A32: VSHLL.S8 Qd, Dm, #n</para>
        <para>A64: SSHLL Vd.8H, Vn.8B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalWideningLower(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint32x4_t vshll_n_u16 (uint16x4_t a, const int n)</para>
        <para>A32: VSHLL.U16 Qd, Dm, #n</para>
        <para>A64: USHLL Vd.4S, Vn.4H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalWideningLower(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint64x2_t vshll_n_u32 (uint32x2_t a, const int n)</para>
        <para>A32: VSHLL.U32 Qd, Dm, #n</para>
        <para>A64: USHLL Vd.2D, Vn.2S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalWideningUpper(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>uint16x8_t vshll_high_n_u8 (uint8x16_t a, const int n)</para>
        <para>A32: VSHLL.U8 Qd, Dm+1, #n</para>
        <para>A64: USHLL2 Vd.8H, Vn.16B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int32x4_t vshll_high_n_s16 (int16x8_t a, const int n)</para>
        <para>A32: VSHLL.S16 Qd, Dm+1, #n</para>
        <para>A64: SSHLL2 Vd.4S, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int64x2_t vshll_high_n_s32 (int32x4_t a, const int n)</para>
        <para>A32: VSHLL.S32 Qd, Dm+1, #n</para>
        <para>A64: SSHLL2 Vd.2D, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalWideningUpper(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>int16x8_t vshll_high_n_s8 (int8x16_t a, const int n)</para>
        <para>A32: VSHLL.S8 Qd, Dm+1, #n</para>
        <para>A64: SSHLL2 Vd.8H, Vn.16B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint32x4_t vshll_high_n_u16 (uint16x8_t a, const int n)</para>
        <para>A32: VSHLL.U16 Qd, Dm+1, #n</para>
        <para>A64: USHLL2 Vd.4S, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLeftLogicalWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint64x2_t vshll_high_n_u32 (uint32x4_t a, const int n)</para>
        <para>A32: VSHLL.U32 Qd, Dm+1, #n</para>
        <para>A64: USHLL2 Vd.2D, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogical(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>uint8x16_t vshlq_u8 (uint8x16_t a, int8x16_t b)</para>
        <para>A32: VSHL.U8 Qd, Qn, Qm</para>
        <para>A64: USHL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogical(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>uint16x8_t vshlq_u16 (uint16x8_t a, int16x8_t b)</para>
        <para>A32: VSHL.U16 Qd, Qn, Qm</para>
        <para>A64: USHL Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogical(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>uint32x4_t vshlq_u32 (uint32x4_t a, int32x4_t b)</para>
        <para>A32: VSHL.U32 Qd, Qn, Qm</para>
        <para>A64: USHL Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogical(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>uint64x2_t vshlq_u64 (uint64x2_t a, int64x2_t b)</para>
        <para>A32: VSHL.U64 Qd, Qn, Qm</para>
        <para>A64: USHL Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogical(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>uint8x16_t vshlq_u8 (uint8x16_t a, int8x16_t b)</para>
        <para>A32: VSHL.U8 Qd, Qn, Qm</para>
        <para>A64: USHL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogical(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>uint16x8_t vshlq_u16 (uint16x8_t a, int16x8_t b)</para>
        <para>A32: VSHL.U16 Qd, Qn, Qm</para>
        <para>A64: USHL Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogical(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>uint32x4_t vshlq_u32 (uint32x4_t a, int32x4_t b)</para>
        <para>A32: VSHL.U32 Qd, Qn, Qm</para>
        <para>A64: USHL Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogical(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>uint64x2_t vshlq_u64 (uint64x2_t a, int64x2_t b)</para>
        <para>A32: VSHL.U64 Qd, Qn, Qm</para>
        <para>A64: USHL Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogical(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8x8_t vshl_u8 (uint8x8_t a, int8x8_t b)</para>
        <para>A32: VSHL.U8 Dd, Dn, Dm</para>
        <para>A64: USHL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogical(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16x4_t vshl_u16 (uint16x4_t a, int16x4_t b)</para>
        <para>A32: VSHL.U16 Dd, Dn, Dm</para>
        <para>A64: USHL Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogical(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32x2_t vshl_u32 (uint32x2_t a, int32x2_t b)</para>
        <para>A32: VSHL.U32 Dd, Dn, Dm</para>
        <para>A64: USHL Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogical(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8x8_t vshl_u8 (uint8x8_t a, int8x8_t b)</para>
        <para>A32: VSHL.U8 Dd, Dn, Dm</para>
        <para>A64: USHL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogical(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16x4_t vshl_u16 (uint16x4_t a, int16x4_t b)</para>
        <para>A32: VSHL.U16 Dd, Dn, Dm</para>
        <para>A64: USHL Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogical(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32x2_t vshl_u32 (uint32x2_t a, int32x2_t b)</para>
        <para>A32: VSHL.U32 Dd, Dn, Dm</para>
        <para>A64: USHL Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRounded(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>uint8x16_t vrshlq_u8 (uint8x16_t a, int8x16_t b)</para>
        <para>A32: VRSHL.U8 Qd, Qn, Qm</para>
        <para>A64: URSHL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRounded(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>uint16x8_t vrshlq_u16 (uint16x8_t a, int16x8_t b)</para>
        <para>A32: VRSHL.U16 Qd, Qn, Qm</para>
        <para>A64: URSHL Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRounded(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>uint32x4_t vrshlq_u32 (uint32x4_t a, int32x4_t b)</para>
        <para>A32: VRSHL.U32 Qd, Qn, Qm</para>
        <para>A64: URSHL Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRounded(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>uint64x2_t vrshlq_u64 (uint64x2_t a, int64x2_t b)</para>
        <para>A32: VRSHL.U64 Qd, Qn, Qm</para>
        <para>A64: URSHL Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRounded(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>uint8x16_t vrshlq_u8 (uint8x16_t a, int8x16_t b)</para>
        <para>A32: VRSHL.U8 Qd, Qn, Qm</para>
        <para>A64: URSHL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRounded(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>uint16x8_t vrshlq_u16 (uint16x8_t a, int16x8_t b)</para>
        <para>A32: VRSHL.U16 Qd, Qn, Qm</para>
        <para>A64: URSHL Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRounded(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>uint32x4_t vrshlq_u32 (uint32x4_t a, int32x4_t b)</para>
        <para>A32: VRSHL.U32 Qd, Qn, Qm</para>
        <para>A64: URSHL Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRounded(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>uint64x2_t vrshlq_u64 (uint64x2_t a, int64x2_t b)</para>
        <para>A32: VRSHL.U64 Qd, Qn, Qm</para>
        <para>A64: URSHL Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRounded(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8x8_t vrshl_u8 (uint8x8_t a, int8x8_t b)</para>
        <para>A32: VRSHL.U8 Dd, Dn, Dm</para>
        <para>A64: URSHL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRounded(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16x4_t vrshl_u16 (uint16x4_t a, int16x4_t b)</para>
        <para>A32: VRSHL.U16 Dd, Dn, Dm</para>
        <para>A64: URSHL Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRounded(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32x2_t vrshl_u32 (uint32x2_t a, int32x2_t b)</para>
        <para>A32: VRSHL.U32 Dd, Dn, Dm</para>
        <para>A64: URSHL Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRounded(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8x8_t vrshl_u8 (uint8x8_t a, int8x8_t b)</para>
        <para>A32: VRSHL.U8 Dd, Dn, Dm</para>
        <para>A64: URSHL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRounded(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16x4_t vrshl_u16 (uint16x4_t a, int16x4_t b)</para>
        <para>A32: VRSHL.U16 Dd, Dn, Dm</para>
        <para>A64: URSHL Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRounded(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32x2_t vrshl_u32 (uint32x2_t a, int32x2_t b)</para>
        <para>A32: VRSHL.U32 Dd, Dn, Dm</para>
        <para>A64: URSHL Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRoundedSaturate(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>uint8x16_t vqrshlq_u8 (uint8x16_t a, int8x16_t b)</para>
        <para>A32: VQRSHL.U8 Qd, Qn, Qm</para>
        <para>A64: UQRSHL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRoundedSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>uint16x8_t vqrshlq_u16 (uint16x8_t a, int16x8_t b)</para>
        <para>A32: VQRSHL.U16 Qd, Qn, Qm</para>
        <para>A64: UQRSHL Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRoundedSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>uint32x4_t vqrshlq_u32 (uint32x4_t a, int32x4_t b)</para>
        <para>A32: VQRSHL.U32 Qd, Qn, Qm</para>
        <para>A64: UQRSHL Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRoundedSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>uint64x2_t vqrshlq_u64 (uint64x2_t a, int64x2_t b)</para>
        <para>A32: VQRSHL.U64 Qd, Qn, Qm</para>
        <para>A64: UQRSHL Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRoundedSaturate(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>uint8x16_t vqrshlq_u8 (uint8x16_t a, int8x16_t b)</para>
        <para>A32: VQRSHL.U8 Qd, Qn, Qm</para>
        <para>A64: UQRSHL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRoundedSaturate(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>uint16x8_t vqrshlq_u16 (uint16x8_t a, int16x8_t b)</para>
        <para>A32: VQRSHL.U16 Qd, Qn, Qm</para>
        <para>A64: UQRSHL Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRoundedSaturate(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>uint32x4_t vqrshlq_u32 (uint32x4_t a, int32x4_t b)</para>
        <para>A32: VQRSHL.U32 Qd, Qn, Qm</para>
        <para>A64: UQRSHL Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRoundedSaturate(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>uint64x2_t vqrshlq_u64 (uint64x2_t a, int64x2_t b)</para>
        <para>A32: VQRSHL.U64 Qd, Qn, Qm</para>
        <para>A64: UQRSHL Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRoundedSaturate(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8x8_t vqrshl_u8 (uint8x8_t a, int8x8_t b)</para>
        <para>A32: VQRSHL.U8 Dd, Dn, Dm</para>
        <para>A64: UQRSHL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRoundedSaturate(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16x4_t vqrshl_u16 (uint16x4_t a, int16x4_t b)</para>
        <para>A32: VQRSHL.U16 Dd, Dn, Dm</para>
        <para>A64: UQRSHL Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRoundedSaturate(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32x2_t vqrshl_u32 (uint32x2_t a, int32x2_t b)</para>
        <para>A32: VQRSHL.U32 Dd, Dn, Dm</para>
        <para>A64: UQRSHL Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRoundedSaturate(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8x8_t vqrshl_u8 (uint8x8_t a, int8x8_t b)</para>
        <para>A32: VQRSHL.U8 Dd, Dn, Dm</para>
        <para>A64: UQRSHL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRoundedSaturate(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16x4_t vqrshl_u16 (uint16x4_t a, int16x4_t b)</para>
        <para>A32: VQRSHL.U16 Dd, Dn, Dm</para>
        <para>A64: UQRSHL Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRoundedSaturate(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32x2_t vqrshl_u32 (uint32x2_t a, int32x2_t b)</para>
        <para>A32: VQRSHL.U32 Dd, Dn, Dm</para>
        <para>A64: UQRSHL Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRoundedSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>uint64x1_t vqrshl_u64 (uint64x1_t a, int64x1_t b)</para>
        <para>A32: VQRSHL.U64 Dd, Dn, Dm</para>
        <para>A64: UQRSHL Dd, Dn, Dm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRoundedSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>uint64x1_t vqrshl_u64 (uint64x1_t a, int64x1_t b)</para>
        <para>A32: VQRSHL.U64 Dd, Dn, Dm</para>
        <para>A64: UQRSHL Dd, Dn, Dm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRoundedScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>uint64x1_t vrshl_u64 (uint64x1_t a, int64x1_t b)</para>
        <para>A32: VRSHL.U64 Dd, Dn, Dm</para>
        <para>A64: URSHL Dd, Dn, Dm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalRoundedScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>uint64x1_t vrshl_u64 (uint64x1_t a, int64x1_t b)</para>
        <para>A32: VRSHL.U64 Dd, Dn, Dm</para>
        <para>A64: URSHL Dd, Dn, Dm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalSaturate(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>uint8x16_t vqshlq_u8 (uint8x16_t a, int8x16_t b)</para>
        <para>A32: VQSHL.U8 Qd, Qn, Qm</para>
        <para>A64: UQSHL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>uint16x8_t vqshlq_u16 (uint16x8_t a, int16x8_t b)</para>
        <para>A32: VQSHL.U16 Qd, Qn, Qm</para>
        <para>A64: UQSHL Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>uint32x4_t vqshlq_u32 (uint32x4_t a, int32x4_t b)</para>
        <para>A32: VQSHL.U32 Qd, Qn, Qm</para>
        <para>A64: UQSHL Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>uint64x2_t vqshlq_u64 (uint64x2_t a, int64x2_t b)</para>
        <para>A32: VQSHL.U64 Qd, Qn, Qm</para>
        <para>A64: UQSHL Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalSaturate(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>uint8x16_t vqshlq_u8 (uint8x16_t a, int8x16_t b)</para>
        <para>A32: VQSHL.U8 Qd, Qn, Qm</para>
        <para>A64: UQSHL Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalSaturate(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>uint16x8_t vqshlq_u16 (uint16x8_t a, int16x8_t b)</para>
        <para>A32: VQSHL.U16 Qd, Qn, Qm</para>
        <para>A64: UQSHL Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalSaturate(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>uint32x4_t vqshlq_u32 (uint32x4_t a, int32x4_t b)</para>
        <para>A32: VQSHL.U32 Qd, Qn, Qm</para>
        <para>A64: UQSHL Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalSaturate(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>uint64x2_t vqshlq_u64 (uint64x2_t a, int64x2_t b)</para>
        <para>A32: VQSHL.U64 Qd, Qn, Qm</para>
        <para>A64: UQSHL Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalSaturate(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8x8_t vqshl_u8 (uint8x8_t a, int8x8_t b)</para>
        <para>A32: VQSHL.U8 Dd, Dn, Dm</para>
        <para>A64: UQSHL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalSaturate(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16x4_t vqshl_u16 (uint16x4_t a, int16x4_t b)</para>
        <para>A32: VQSHL.U16 Dd, Dn, Dm</para>
        <para>A64: UQSHL Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalSaturate(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32x2_t vqshl_u32 (uint32x2_t a, int32x2_t b)</para>
        <para>A32: VQSHL.U32 Dd, Dn, Dm</para>
        <para>A64: UQSHL Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalSaturate(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8x8_t vqshl_u8 (uint8x8_t a, int8x8_t b)</para>
        <para>A32: VQSHL.U8 Dd, Dn, Dm</para>
        <para>A64: UQSHL Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalSaturate(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16x4_t vqshl_u16 (uint16x4_t a, int16x4_t b)</para>
        <para>A32: VQSHL.U16 Dd, Dn, Dm</para>
        <para>A64: UQSHL Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalSaturate(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32x2_t vqshl_u32 (uint32x2_t a, int32x2_t b)</para>
        <para>A32: VQSHL.U32 Dd, Dn, Dm</para>
        <para>A64: UQSHL Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>uint64x1_t vqshl_u64 (uint64x1_t a, int64x1_t b)</para>
        <para>A32: VQSHL.U64 Dd, Dn, Dm</para>
        <para>A64: UQSHL Dd, Dn, Dm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>uint64x1_t vqshl_u64 (uint64x1_t a, int64x1_t b)</para>
        <para>A32: VQSHL.U64 Dd, Dn, Dm</para>
        <para>A64: UQSHL Dd, Dn, Dm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>uint64x1_t vshl_u64 (uint64x1_t a, int64x1_t b)</para>
        <para>A32: VSHL.U64 Dd, Dn, Dm</para>
        <para>A64: USHL Dd, Dn, Dm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftLogicalScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>uint64x1_t vshl_u64 (uint64x1_t a, int64x1_t b)</para>
        <para>A32: VSHL.U64 Dd, Dn, Dm</para>
        <para>A64: USHL Dd, Dn, Dm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightAndInsert(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>uint8x16_t vsriq_n_u8(uint8x16_t a, uint8x16_t b, __builtin_constant_p(n))</para>
        <para>A32: VSRI.8 Qd, Qm, #n</para>
        <para>A64: SRI Vd.16B, Vn.16B, #n</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightAndInsert(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int16x8_t vsriq_n_s16(int16x8_t a, int16x8_t b, __builtin_constant_p(n))</para>
        <para>A32: VSRI.16 Qd, Qm, #n</para>
        <para>A64: SRI Vd.8H, Vn.8H, #n</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightAndInsert(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int32x4_t vsriq_n_s32(int32x4_t a, int32x4_t b, __builtin_constant_p(n))</para>
        <para>A32: VSRI.32 Qd, Qm, #n</para>
        <para>A64: SRI Vd.4S, Vn.4S, #n</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightAndInsert(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>int64x2_t vsriq_n_s64(int64x2_t a, int64x2_t b, __builtin_constant_p(n))</para>
        <para>A32: VSRI.64 Qd, Qm, #n</para>
        <para>A64: SRI Vd.2D, Vn.2D, #n</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightAndInsert(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>int8x16_t vsriq_n_s8(int8x16_t a, int8x16_t b, __builtin_constant_p(n))</para>
        <para>A32: VSRI.8 Qd, Qm, #n</para>
        <para>A64: SRI Vd.16B, Vn.16B, #n</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightAndInsert(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x8_t vsriq_n_u16(uint16x8_t a, uint16x8_t b, __builtin_constant_p(n))</para>
        <para>A32: VSRI.16 Qd, Qm, #n</para>
        <para>A64: SRI Vd.8H, Vn.8H, #n</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightAndInsert(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x4_t vsriq_n_u32(uint32x4_t a, uint32x4_t b, __builtin_constant_p(n))</para>
        <para>A32: VSRI.32 Qd, Qm, #n</para>
        <para>A64: SRI Vd.4S, Vn.4S, #n</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightAndInsert(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>uint64x2_t vsriq_n_u64(uint64x2_t a, uint64x2_t b, __builtin_constant_p(n))</para>
        <para>A32: VSRI.64 Qd, Qm, #n</para>
        <para>A64: SRI Vd.2D, Vn.2D, #n</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightAndInsert(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte)">
      <summary>
        <para>uint8x8_t vsri_n_u8(uint8x8_t a, uint8x8_t b, __builtin_constant_p(n))</para>
        <para>A32: VSRI.8 Dd, Dm, #n</para>
        <para>A64: SRI Vd.8B, Vn.8B, #n</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightAndInsert(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16x4_t vsri_n_s16(int16x4_t a, int16x4_t b, __builtin_constant_p(n))</para>
        <para>A32: VSRI.16 Dd, Dm, #n</para>
        <para>A64: SRI Vd.4H, Vn.4H, #n</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightAndInsert(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32x2_t vsri_n_s32(int32x2_t a, int32x2_t b, __builtin_constant_p(n))</para>
        <para>A32: VSRI.32 Dd, Dm, #n</para>
        <para>A64: SRI Vd.2S, Vn.2S, #n</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightAndInsert(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>int8x8_t vsri_n_s8(int8x8_t a, int8x8_t b, __builtin_constant_p(n))</para>
        <para>A32: VSRI.8 Dd, Dm, #n</para>
        <para>A64: SRI Vd.8B, Vn.8B, #n</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightAndInsert(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x4_t vsri_n_u16(uint16x4_t a, uint16x4_t b, __builtin_constant_p(n))</para>
        <para>A32: VSRI.16 Dd, Dm, #n</para>
        <para>A64: SRI Vd.4H, Vn.4H, #n</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightAndInsert(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x2_t vsri_n_u32(uint32x2_t a, uint32x2_t b, __builtin_constant_p(n))</para>
        <para>A32: VSRI.32 Dd, Dm, #n</para>
        <para>A64: SRI Vd.2S, Vn.2S, #n</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightAndInsertScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64},System.Byte)">
      <summary>int64_t vsrid_n_s64(int64_t a, int64_t b, __builtin_constant_p(n)) A32: VSRI.64 Dd, Dm, #n A64: SRI Dd, Dn, #n</summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightAndInsertScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64},System.Byte)">
      <summary>uint64_t vsrid_n_u64(uint64_t a, uint64_t b, __builtin_constant_p(n)) A32: VSRI.64 Dd, Dm, #n A64: SRI Dd, Dn, #n</summary>
      <param name="left" />
      <param name="right" />
      <param name="shift" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int16x8_t vshrq_n_s16 (int16x8_t a, const int n)</para>
        <para>A32: VSHR.S16 Qd, Qm, #n</para>
        <para>A64: SSHR Vd.8H, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int32x4_t vshrq_n_s32 (int32x4_t a, const int n)</para>
        <para>A32: VSHR.S32 Qd, Qm, #n</para>
        <para>A64: SSHR Vd.4S, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>int64x2_t vshrq_n_s64 (int64x2_t a, const int n)</para>
        <para>A32: VSHR.S64 Qd, Qm, #n</para>
        <para>A64: SSHR Vd.2D, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>int8x16_t vshrq_n_s8 (int8x16_t a, const int n)</para>
        <para>A32: VSHR.S8 Qd, Qm, #n</para>
        <para>A64: SSHR Vd.16B, Vn.16B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16x4_t vshr_n_s16 (int16x4_t a, const int n)</para>
        <para>A32: VSHR.S16 Dd, Dm, #n</para>
        <para>A64: SSHR Vd.4H, Vn.4H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32x2_t vshr_n_s32 (int32x2_t a, const int n)</para>
        <para>A32: VSHR.S32 Dd, Dm, #n</para>
        <para>A64: SSHR Vd.2S, Vn.2S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>int8x8_t vshr_n_s8 (int8x8_t a, const int n)</para>
        <para>A32: VSHR.S8 Dd, Dm, #n</para>
        <para>A64: SSHR Vd.8B, Vn.8B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticAdd(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int16x8_t vsraq_n_s16 (int16x8_t a, int16x8_t b, const int n)</para>
        <para>A32: VSRA.S16 Qd, Qm, #n</para>
        <para>A64: SSRA Vd.8H, Vn.8H, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticAdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int32x4_t vsraq_n_s32 (int32x4_t a, int32x4_t b, const int n)</para>
        <para>A32: VSRA.S32 Qd, Qm, #n</para>
        <para>A64: SSRA Vd.4S, Vn.4S, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticAdd(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>int64x2_t vsraq_n_s64 (int64x2_t a, int64x2_t b, const int n)</para>
        <para>A32: VSRA.S64 Qd, Qm, #n</para>
        <para>A64: SSRA Vd.2D, Vn.2D, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticAdd(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>int8x16_t vsraq_n_s8 (int8x16_t a, int8x16_t b, const int n)</para>
        <para>A32: VSRA.S8 Qd, Qm, #n</para>
        <para>A64: SSRA Vd.16B, Vn.16B, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticAdd(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16x4_t vsra_n_s16 (int16x4_t a, int16x4_t b, const int n)</para>
        <para>A32: VSRA.S16 Dd, Dm, #n</para>
        <para>A64: SSRA Vd.4H, Vn.4H, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticAdd(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32x2_t vsra_n_s32 (int32x2_t a, int32x2_t b, const int n)</para>
        <para>A32: VSRA.S32 Dd, Dm, #n</para>
        <para>A64: SSRA Vd.2S, Vn.2S, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticAdd(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>int8x8_t vsra_n_s8 (int8x8_t a, int8x8_t b, const int n)</para>
        <para>A32: VSRA.S8 Dd, Dm, #n</para>
        <para>A64: SSRA Vd.8B, Vn.8B, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticAddScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64},System.Byte)">
      <summary>
        <para>int64x1_t vsra_n_s64 (int64x1_t a, int64x1_t b, const int n)</para>
        <para>A32: VSRA.S64 Dd, Dm, #n</para>
        <para>A64: SSRA Dd, Dn, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int8x8_t vqshrn_n_s16 (int16x8_t a, const int n)</para>
        <para>A32: VQSHRN.S16 Dd, Qm, #n</para>
        <para>A64: SQSHRN Vd.8B, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int16x4_t vqshrn_n_s32 (int32x4_t a, const int n)</para>
        <para>A32: VQSHRN.S32 Dd, Qm, #n</para>
        <para>A64: SQSHRN Vd.4H, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>int32x2_t vqshrn_n_s64 (int64x2_t a, const int n)</para>
        <para>A32: VQSHRN.S64 Dd, Qm, #n</para>
        <para>A64: SQSHRN Vd.2S, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticNarrowingSaturateUnsignedLower(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>uint8x8_t vqshrun_n_s16 (int16x8_t a, const int n)</para>
        <para>A32: VQSHRUN.S16 Dd, Qm, #n</para>
        <para>A64: SQSHRUN Vd.8B, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticNarrowingSaturateUnsignedLower(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>uint16x4_t vqshrun_n_s32 (int32x4_t a, const int n)</para>
        <para>A32: VQSHRUN.S32 Dd, Qm, #n</para>
        <para>A64: SQSHRUN Vd.4H, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticNarrowingSaturateUnsignedLower(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>uint32x2_t vqshrun_n_s64 (int64x2_t a, const int n)</para>
        <para>A32: VQSHRUN.S64 Dd, Qm, #n</para>
        <para>A64: SQSHRUN Vd.2S, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticNarrowingSaturateUnsignedUpper(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>uint8x16_t vqshrun_high_n_s16 (uint8x8_t r, int16x8_t a, const int n)</para>
        <para>A32: VQSHRUN.S16 Dd+1, Dn, #n</para>
        <para>A64: SQSHRUN2 Vd.16B, Vn.8H, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticNarrowingSaturateUnsignedUpper(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>uint16x8_t vqshrun_high_n_s32 (uint16x4_t r, int32x4_t a, const int n)</para>
        <para>A32: VQSHRUN.S32 Dd+1, Dn, #n</para>
        <para>A64: SQSHRUN2 Vd.8H, Vn.4S, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticNarrowingSaturateUnsignedUpper(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>uint32x4_t vqshrun_high_n_s64 (uint32x2_t r, int64x2_t a, const int n)</para>
        <para>A32: VQSHRUN.S64 Dd+1, Dn, #n</para>
        <para>A64: SQSHRUN2 Vd.4S, Vn.2D, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int16x8_t vqshrn_high_n_s32 (int16x4_t r, int32x4_t a, const int n)</para>
        <para>A32: VQSHRN.S32 Dd+1, Qm, #n</para>
        <para>A64: SQSHRN2 Vd.8H, Vn.4S, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>int32x4_t vqshrn_high_n_s64 (int32x2_t r, int64x2_t a, const int n)</para>
        <para>A32: VQSHRN.S64 Dd+1, Qm, #n</para>
        <para>A64: SQSHRN2 Vd.4S, Vn.2D, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int8x16_t vqshrn_high_n_s16 (int8x8_t r, int16x8_t a, const int n)</para>
        <para>A32: VQSHRN.S16 Dd+1, Qm, #n</para>
        <para>A64: SQSHRN2 Vd.16B, Vn.8H, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRounded(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int16x8_t vrshrq_n_s16 (int16x8_t a, const int n)</para>
        <para>A32: VRSHR.S16 Qd, Qm, #n</para>
        <para>A64: SRSHR Vd.8H, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRounded(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int32x4_t vrshrq_n_s32 (int32x4_t a, const int n)</para>
        <para>A32: VRSHR.S32 Qd, Qm, #n</para>
        <para>A64: SRSHR Vd.4S, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRounded(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>int64x2_t vrshrq_n_s64 (int64x2_t a, const int n)</para>
        <para>A32: VRSHR.S64 Qd, Qm, #n</para>
        <para>A64: SRSHR Vd.2D, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRounded(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>int8x16_t vrshrq_n_s8 (int8x16_t a, const int n)</para>
        <para>A32: VRSHR.S8 Qd, Qm, #n</para>
        <para>A64: SRSHR Vd.16B, Vn.16B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRounded(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16x4_t vrshr_n_s16 (int16x4_t a, const int n)</para>
        <para>A32: VRSHR.S16 Dd, Dm, #n</para>
        <para>A64: SRSHR Vd.4H, Vn.4H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRounded(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32x2_t vrshr_n_s32 (int32x2_t a, const int n)</para>
        <para>A32: VRSHR.S32 Dd, Dm, #n</para>
        <para>A64: SRSHR Vd.2S, Vn.2S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRounded(System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>int8x8_t vrshr_n_s8 (int8x8_t a, const int n)</para>
        <para>A32: VRSHR.S8 Dd, Dm, #n</para>
        <para>A64: SRSHR Vd.8B, Vn.8B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedAdd(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int16x8_t vrsraq_n_s16 (int16x8_t a, int16x8_t b, const int n)</para>
        <para>A32: VRSRA.S16 Qd, Qm, #n</para>
        <para>A64: SRSRA Vd.8H, Vn.8H, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedAdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int32x4_t vrsraq_n_s32 (int32x4_t a, int32x4_t b, const int n)</para>
        <para>A32: VRSRA.S32 Qd, Qm, #n</para>
        <para>A64: SRSRA Vd.4S, Vn.4S, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedAdd(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>int64x2_t vrsraq_n_s64 (int64x2_t a, int64x2_t b, const int n)</para>
        <para>A32: VRSRA.S64 Qd, Qm, #n</para>
        <para>A64: SRSRA Vd.2D, Vn.2D, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedAdd(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>int8x16_t vrsraq_n_s8 (int8x16_t a, int8x16_t b, const int n)</para>
        <para>A32: VRSRA.S8 Qd, Qm, #n</para>
        <para>A64: SRSRA Vd.16B, Vn.16B, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedAdd(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16x4_t vrsra_n_s16 (int16x4_t a, int16x4_t b, const int n)</para>
        <para>A32: VRSRA.S16 Dd, Dm, #n</para>
        <para>A64: SRSRA Vd.4H, Vn.4H, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedAdd(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32x2_t vrsra_n_s32 (int32x2_t a, int32x2_t b, const int n)</para>
        <para>A32: VRSRA.S32 Dd, Dm, #n</para>
        <para>A64: SRSRA Vd.2S, Vn.2S, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedAdd(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>int8x8_t vrsra_n_s8 (int8x8_t a, int8x8_t b, const int n)</para>
        <para>A32: VRSRA.S8 Dd, Dm, #n</para>
        <para>A64: SRSRA Vd.8B, Vn.8B, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedAddScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64},System.Byte)">
      <summary>
        <para>int64x1_t vrsra_n_s64 (int64x1_t a, int64x1_t b, const int n)</para>
        <para>A32: VRSRA.S64 Dd, Dm, #n</para>
        <para>A64: SRSRA Dd, Dn, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int8x8_t vqrshrn_n_s16 (int16x8_t a, const int n)</para>
        <para>A32: VQRSHRN.S16 Dd, Qm, #n</para>
        <para>A64: SQRSHRN Vd.8B, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int16x4_t vqrshrn_n_s32 (int32x4_t a, const int n)</para>
        <para>A32: VQRSHRN.S32 Dd, Qm, #n</para>
        <para>A64: SQRSHRN Vd.4H, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>int32x2_t vqrshrn_n_s64 (int64x2_t a, const int n)</para>
        <para>A32: VQRSHRN.S64 Dd, Qm, #n</para>
        <para>A64: SQRSHRN Vd.2S, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedNarrowingSaturateUnsignedLower(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>uint8x8_t vqrshrun_n_s16 (int16x8_t a, const int n)</para>
        <para>A32: VQRSHRUN.S16 Dd, Qm, #n</para>
        <para>A64: SQRSHRUN Vd.8B, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedNarrowingSaturateUnsignedLower(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>uint16x4_t vqrshrun_n_s32 (int32x4_t a, const int n)</para>
        <para>A32: VQRSHRUN.S32 Dd, Qm, #n</para>
        <para>A64: SQRSHRUN Vd.4H, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedNarrowingSaturateUnsignedLower(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>uint32x2_t vqrshrun_n_s64 (int64x2_t a, const int n)</para>
        <para>A32: VQRSHRUN.S64 Dd, Qm, #n</para>
        <para>A64: SQRSHRUN Vd.2S, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedNarrowingSaturateUnsignedUpper(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>uint8x16_t vqrshrun_high_n_s16 (uint8x8_t r, int16x8_t a, const int n)</para>
        <para>A32: VQRSHRUN.S16 Dd+1, Dn, #n</para>
        <para>A64: SQRSHRUN2 Vd.16B, Vn.8H, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedNarrowingSaturateUnsignedUpper(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>uint16x8_t vqrshrun_high_n_s32 (uint16x4_t r, int32x4_t a, const int n)</para>
        <para>A32: VQRSHRUN.S32 Dd+1, Dn, #n</para>
        <para>A64: SQRSHRUN2 Vd.8H, Vn.4S, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedNarrowingSaturateUnsignedUpper(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>uint32x4_t vqrshrun_high_n_s64 (uint32x2_t r, int64x2_t a, const int n)</para>
        <para>A32: VQRSHRUN.S64 Dd+1, Dn, #n</para>
        <para>A64: SQRSHRUN2 Vd.4S, Vn.2D, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int16x8_t vqrshrn_high_n_s32 (int16x4_t r, int32x4_t a, const int n)</para>
        <para>A32: VQRSHRN.S32 Dd+1, Dn, #n</para>
        <para>A64: SQRSHRN2 Vd.8H, Vn.4S, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>int32x4_t vqrshrn_high_n_s64 (int32x2_t r, int64x2_t a, const int n)</para>
        <para>A32: VQRSHRN.S64 Dd+1, Dn, #n</para>
        <para>A64: SQRSHRN2 Vd.4S, Vn.2D, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int8x16_t vqrshrn_high_n_s16 (int8x8_t r, int16x8_t a, const int n)</para>
        <para>A32: VQRSHRN.S16 Dd+1, Dn, #n</para>
        <para>A64: SQRSHRN2 Vd.16B, Vn.8H, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticRoundedScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Byte)">
      <summary>
        <para>int64x1_t vrshr_n_s64 (int64x1_t a, const int n)</para>
        <para>A32: VRSHR.S64 Dd, Dm, #n</para>
        <para>A64: SRSHR Dd, Dn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightArithmeticScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Byte)">
      <summary>
        <para>int64x1_t vshr_n_s64 (int64x1_t a, const int n)</para>
        <para>A32: VSHR.S64 Dd, Dm, #n</para>
        <para>A64: SSHR Dd, Dn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>uint8x16_t vshrq_n_u8 (uint8x16_t a, const int n)</para>
        <para>A32: VSHR.U8 Qd, Qm, #n</para>
        <para>A64: USHR Vd.16B, Vn.16B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>uint16x8_t vshrq_n_u16 (uint16x8_t a, const int n)</para>
        <para>A32: VSHR.U16 Qd, Qm, #n</para>
        <para>A64: USHR Vd.8H, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>uint32x4_t vshrq_n_u32 (uint32x4_t a, const int n)</para>
        <para>A32: VSHR.U32 Qd, Qm, #n</para>
        <para>A64: USHR Vd.4S, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>uint64x2_t vshrq_n_u64 (uint64x2_t a, const int n)</para>
        <para>A32: VSHR.U64 Qd, Qm, #n</para>
        <para>A64: USHR Vd.2D, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>uint8x16_t vshrq_n_u8 (uint8x16_t a, const int n)</para>
        <para>A32: VSHR.U8 Qd, Qm, #n</para>
        <para>A64: USHR Vd.16B, Vn.16B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x8_t vshrq_n_u16 (uint16x8_t a, const int n)</para>
        <para>A32: VSHR.U16 Qd, Qm, #n</para>
        <para>A64: USHR Vd.8H, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x4_t vshrq_n_u32 (uint32x4_t a, const int n)</para>
        <para>A32: VSHR.U32 Qd, Qm, #n</para>
        <para>A64: USHR Vd.4S, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>uint64x2_t vshrq_n_u64 (uint64x2_t a, const int n)</para>
        <para>A32: VSHR.U64 Qd, Qm, #n</para>
        <para>A64: USHR Vd.2D, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogical(System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte)">
      <summary>
        <para>uint8x8_t vshr_n_u8 (uint8x8_t a, const int n)</para>
        <para>A32: VSHR.U8 Dd, Dm, #n</para>
        <para>A64: USHR Vd.8B, Vn.8B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogical(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>uint16x4_t vshr_n_u16 (uint16x4_t a, const int n)</para>
        <para>A32: VSHR.U16 Dd, Dm, #n</para>
        <para>A64: USHR Vd.4H, Vn.4H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogical(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>uint32x2_t vshr_n_u32 (uint32x2_t a, const int n)</para>
        <para>A32: VSHR.U32 Dd, Dm, #n</para>
        <para>A64: USHR Vd.2S, Vn.2S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogical(System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>uint8x8_t vshr_n_u8 (uint8x8_t a, const int n)</para>
        <para>A32: VSHR.U8 Dd, Dm, #n</para>
        <para>A64: USHR Vd.8B, Vn.8B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogical(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x4_t vshr_n_u16 (uint16x4_t a, const int n)</para>
        <para>A32: VSHR.U16 Dd, Dm, #n</para>
        <para>A64: USHR Vd.4H, Vn.4H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogical(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x2_t vshr_n_u32 (uint32x2_t a, const int n)</para>
        <para>A32: VSHR.U32 Dd, Dm, #n</para>
        <para>A64: USHR Vd.2S, Vn.2S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalAdd(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>uint8x16_t vsraq_n_u8 (uint8x16_t a, uint8x16_t b, const int n)</para>
        <para>A32: VSRA.U8 Qd, Qm, #n</para>
        <para>A64: USRA Vd.16B, Vn.16B, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalAdd(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>uint16x8_t vsraq_n_u16 (uint16x8_t a, uint16x8_t b, const int n)</para>
        <para>A32: VSRA.U16 Qd, Qm, #n</para>
        <para>A64: USRA Vd.8H, Vn.8H, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalAdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>uint32x4_t vsraq_n_u32 (uint32x4_t a, uint32x4_t b, const int n)</para>
        <para>A32: VSRA.U32 Qd, Qm, #n</para>
        <para>A64: USRA Vd.4S, Vn.4S, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalAdd(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>uint64x2_t vsraq_n_u64 (uint64x2_t a, uint64x2_t b, const int n)</para>
        <para>A32: VSRA.U64 Qd, Qm, #n</para>
        <para>A64: USRA Vd.2D, Vn.2D, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalAdd(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>uint8x16_t vsraq_n_u8 (uint8x16_t a, uint8x16_t b, const int n)</para>
        <para>A32: VSRA.U8 Qd, Qm, #n</para>
        <para>A64: USRA Vd.16B, Vn.16B, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalAdd(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x8_t vsraq_n_u16 (uint16x8_t a, uint16x8_t b, const int n)</para>
        <para>A32: VSRA.U16 Qd, Qm, #n</para>
        <para>A64: USRA Vd.8H, Vn.8H, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalAdd(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x4_t vsraq_n_u32 (uint32x4_t a, uint32x4_t b, const int n)</para>
        <para>A32: VSRA.U32 Qd, Qm, #n</para>
        <para>A64: USRA Vd.4S, Vn.4S, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalAdd(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>uint64x2_t vsraq_n_u64 (uint64x2_t a, uint64x2_t b, const int n)</para>
        <para>A32: VSRA.U64 Qd, Qm, #n</para>
        <para>A64: USRA Vd.2D, Vn.2D, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalAdd(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte)">
      <summary>
        <para>uint8x8_t vsra_n_u8 (uint8x8_t a, uint8x8_t b, const int n)</para>
        <para>A32: VSRA.U8 Dd, Dm, #n</para>
        <para>A64: USRA Vd.8B, Vn.8B, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalAdd(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>uint16x4_t vsra_n_u16 (uint16x4_t a, uint16x4_t b, const int n)</para>
        <para>A32: VSRA.U16 Dd, Dm, #n</para>
        <para>A64: USRA Vd.4H, Vn.4H, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalAdd(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>uint32x2_t vsra_n_u32 (uint32x2_t a, uint32x2_t b, const int n)</para>
        <para>A32: VSRA.U32 Dd, Dm, #n</para>
        <para>A64: USRA Vd.2S, Vn.2S, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalAdd(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>uint8x8_t vsra_n_u8 (uint8x8_t a, uint8x8_t b, const int n)</para>
        <para>A32: VSRA.U8 Dd, Dm, #n</para>
        <para>A64: USRA Vd.8B, Vn.8B, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalAdd(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x4_t vsra_n_u16 (uint16x4_t a, uint16x4_t b, const int n)</para>
        <para>A32: VSRA.U16 Dd, Dm, #n</para>
        <para>A64: USRA Vd.4H, Vn.4H, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalAdd(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x2_t vsra_n_u32 (uint32x2_t a, uint32x2_t b, const int n)</para>
        <para>A32: VSRA.U32 Dd, Dm, #n</para>
        <para>A64: USRA Vd.2S, Vn.2S, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalAddScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64},System.Byte)">
      <summary>
        <para>uint64x1_t vsra_n_u64 (uint64x1_t a, uint64x1_t b, const int n)</para>
        <para>A32: VSRA.U64 Dd, Dm, #n</para>
        <para>A64: USRA Dd, Dn, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalAddScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64},System.Byte)">
      <summary>
        <para>uint64x1_t vsra_n_u64 (uint64x1_t a, uint64x1_t b, const int n)</para>
        <para>A32: VSRA.U64 Dd, Dm, #n</para>
        <para>A64: USRA Dd, Dn, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int8x8_t vshrn_n_s16 (int16x8_t a, const int n)</para>
        <para>A32: VSHRN.I16 Dd, Qm, #n</para>
        <para>A64: SHRN Vd.8B, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int16x4_t vshrn_n_s32 (int32x4_t a, const int n)</para>
        <para>A32: VSHRN.I32 Dd, Qm, #n</para>
        <para>A64: SHRN Vd.4H, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>int32x2_t vshrn_n_s64 (int64x2_t a, const int n)</para>
        <para>A32: VSHRN.I64 Dd, Qm, #n</para>
        <para>A64: SHRN Vd.2S, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint8x8_t vshrn_n_u16 (uint16x8_t a, const int n)</para>
        <para>A32: VSHRN.I16 Dd, Qm, #n</para>
        <para>A64: SHRN Vd.8B, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint16x4_t vshrn_n_u32 (uint32x4_t a, const int n)</para>
        <para>A32: VSHRN.I32 Dd, Qm, #n</para>
        <para>A64: SHRN Vd.4H, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>uint32x2_t vshrn_n_u64 (uint64x2_t a, const int n)</para>
        <para>A32: VSHRN.I64 Dd, Qm, #n</para>
        <para>A64: SHRN Vd.2S, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>uint8x8_t vqshrn_n_u16 (uint16x8_t a, const int n)</para>
        <para>A32: VQSHRN.U16 Dd, Qm, #n</para>
        <para>A64: UQSHRN Vd.8B, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>uint16x4_t vqshrn_n_u32 (uint32x4_t a, const int n)</para>
        <para>A32: VQSHRN.U32 Dd, Qm, #n</para>
        <para>A64: UQSHRN Vd.4H, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>uint32x2_t vqshrn_n_u64 (uint64x2_t a, const int n)</para>
        <para>A32: VQSHRN.U64 Dd, Qm, #n</para>
        <para>A64: UQSHRN Vd.2S, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint8x8_t vqshrn_n_u16 (uint16x8_t a, const int n)</para>
        <para>A32: VQSHRN.U16 Dd, Qm, #n</para>
        <para>A64: UQSHRN Vd.8B, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint16x4_t vqshrn_n_u32 (uint32x4_t a, const int n)</para>
        <para>A32: VQSHRN.U32 Dd, Qm, #n</para>
        <para>A64: UQSHRN Vd.4H, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>uint32x2_t vqshrn_n_u64 (uint64x2_t a, const int n)</para>
        <para>A32: VQSHRN.U64 Dd, Qm, #n</para>
        <para>A64: UQSHRN Vd.2S, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint8x16_t vqshrn_high_n_u16 (uint8x8_t r, uint16x8_t a, const int n)</para>
        <para>A32: VQSHRN.U16 Dd+1, Qm, #n</para>
        <para>A64: UQSHRN2 Vd.16B, Vn.8H, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>uint16x8_t vqshrn_high_n_u32 (uint16x4_t r, uint32x4_t a, const int n)</para>
        <para>A32: VQSHRN.U32 Dd+1, Qm, #n</para>
        <para>A64: UQSHRN2 Vd.8H, Vn.4S, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>uint32x4_t vqshrn_high_n_u64 (uint32x2_t r, uint64x2_t a, const int n)</para>
        <para>A32: VQSHRN.U64 Dd+1, Qm, #n</para>
        <para>A64: UQSHRN2 Vd.4S, Vn.2D, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>uint8x16_t vqshrn_high_n_u16 (uint8x8_t r, uint16x8_t a, const int n)</para>
        <para>A32: VQSHRN.U16 Dd+1, Qm, #n</para>
        <para>A64: UQSHRN2 Vd.16B, Vn.8H, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint16x8_t vqshrn_high_n_u32 (uint16x4_t r, uint32x4_t a, const int n)</para>
        <para>A32: VQSHRN.U32 Dd+1, Qm, #n</para>
        <para>A64: UQSHRN2 Vd.8H, Vn.4S, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>uint32x4_t vqshrn_high_n_u64 (uint32x2_t r, uint64x2_t a, const int n)</para>
        <para>A32: VQSHRN.U64 Dd+1, Qm, #n</para>
        <para>A64: UQSHRN2 Vd.4S, Vn.2D, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint8x16_t vshrn_high_n_u16 (uint8x8_t r, uint16x8_t a, const int n)</para>
        <para>A32: VSHRN.I16 Dd+1, Qm, #n</para>
        <para>A64: SHRN2 Vd.16B, Vn.8H, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int16x8_t vshrn_high_n_s32 (int16x4_t r, int32x4_t a, const int n)</para>
        <para>A32: VSHRN.I32 Dd+1, Qm, #n</para>
        <para>A64: SHRN2 Vd.8H, Vn.4S, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>int32x4_t vshrn_high_n_s64 (int32x2_t r, int64x2_t a, const int n)</para>
        <para>A32: VSHRN.I64 Dd+1, Qm, #n</para>
        <para>A64: SHRN2 Vd.4S, Vn.2D, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int8x16_t vshrn_high_n_s16 (int8x8_t r, int16x8_t a, const int n)</para>
        <para>A32: VSHRN.I16 Dd+1, Qm, #n</para>
        <para>A64: SHRN2 Vd.16B, Vn.8H, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint16x8_t vshrn_high_n_u32 (uint16x4_t r, uint32x4_t a, const int n)</para>
        <para>A32: VSHRN.I32 Dd+1, Qm, #n</para>
        <para>A64: SHRN2 Vd.8H, Vn.4S, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>uint32x4_t vshrn_high_n_u64 (uint32x2_t r, uint64x2_t a, const int n)</para>
        <para>A32: VSHRN.I64 Dd+1, Qm, #n</para>
        <para>A64: SHRN2 Vd.4S, Vn.2D, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRounded(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>uint8x16_t vrshrq_n_u8 (uint8x16_t a, const int n)</para>
        <para>A32: VRSHR.U8 Qd, Qm, #n</para>
        <para>A64: URSHR Vd.16B, Vn.16B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRounded(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>uint16x8_t vrshrq_n_u16 (uint16x8_t a, const int n)</para>
        <para>A32: VRSHR.U16 Qd, Qm, #n</para>
        <para>A64: URSHR Vd.8H, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRounded(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>uint32x4_t vrshrq_n_u32 (uint32x4_t a, const int n)</para>
        <para>A32: VRSHR.U32 Qd, Qm, #n</para>
        <para>A64: URSHR Vd.4S, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRounded(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>uint64x2_t vrshrq_n_u64 (uint64x2_t a, const int n)</para>
        <para>A32: VRSHR.U64 Qd, Qm, #n</para>
        <para>A64: URSHR Vd.2D, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRounded(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>uint8x16_t vrshrq_n_u8 (uint8x16_t a, const int n)</para>
        <para>A32: VRSHR.U8 Qd, Qm, #n</para>
        <para>A64: URSHR Vd.16B, Vn.16B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRounded(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x8_t vrshrq_n_u16 (uint16x8_t a, const int n)</para>
        <para>A32: VRSHR.U16 Qd, Qm, #n</para>
        <para>A64: URSHR Vd.8H, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRounded(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x4_t vrshrq_n_u32 (uint32x4_t a, const int n)</para>
        <para>A32: VRSHR.U32 Qd, Qm, #n</para>
        <para>A64: URSHR Vd.4S, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRounded(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>uint64x2_t vrshrq_n_u64 (uint64x2_t a, const int n)</para>
        <para>A32: VRSHR.U64 Qd, Qm, #n</para>
        <para>A64: URSHR Vd.2D, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRounded(System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte)">
      <summary>
        <para>uint8x8_t vrshr_n_u8 (uint8x8_t a, const int n)</para>
        <para>A32: VRSHR.U8 Dd, Dm, #n</para>
        <para>A64: URSHR Vd.8B, Vn.8B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRounded(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>uint16x4_t vrshr_n_u16 (uint16x4_t a, const int n)</para>
        <para>A32: VRSHR.U16 Dd, Dm, #n</para>
        <para>A64: URSHR Vd.4H, Vn.4H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRounded(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>uint32x2_t vrshr_n_u32 (uint32x2_t a, const int n)</para>
        <para>A32: VRSHR.U32 Dd, Dm, #n</para>
        <para>A64: URSHR Vd.2S, Vn.2S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRounded(System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>uint8x8_t vrshr_n_u8 (uint8x8_t a, const int n)</para>
        <para>A32: VRSHR.U8 Dd, Dm, #n</para>
        <para>A64: URSHR Vd.8B, Vn.8B, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRounded(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x4_t vrshr_n_u16 (uint16x4_t a, const int n)</para>
        <para>A32: VRSHR.U16 Dd, Dm, #n</para>
        <para>A64: URSHR Vd.4H, Vn.4H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRounded(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x2_t vrshr_n_u32 (uint32x2_t a, const int n)</para>
        <para>A32: VRSHR.U32 Dd, Dm, #n</para>
        <para>A64: URSHR Vd.2S, Vn.2S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedAdd(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>uint8x16_t vrsraq_n_u8 (uint8x16_t a, uint8x16_t b, const int n)</para>
        <para>A32: VRSRA.U8 Qd, Qm, #n</para>
        <para>A64: URSRA Vd.16B, Vn.16B, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedAdd(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>uint16x8_t vrsraq_n_u16 (uint16x8_t a, uint16x8_t b, const int n)</para>
        <para>A32: VRSRA.U16 Qd, Qm, #n</para>
        <para>A64: URSRA Vd.8H, Vn.8H, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedAdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>uint32x4_t vrsraq_n_u32 (uint32x4_t a, uint32x4_t b, const int n)</para>
        <para>A32: VRSRA.U32 Qd, Qm, #n</para>
        <para>A64: URSRA Vd.4S, Vn.4S, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedAdd(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>uint64x2_t vrsraq_n_u64 (uint64x2_t a, uint64x2_t b, const int n)</para>
        <para>A32: VRSRA.U64 Qd, Qm, #n</para>
        <para>A64: URSRA Vd.2D, Vn.2D, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedAdd(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>uint8x16_t vrsraq_n_u8 (uint8x16_t a, uint8x16_t b, const int n)</para>
        <para>A32: VRSRA.U8 Qd, Qm, #n</para>
        <para>A64: URSRA Vd.16B, Vn.16B, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedAdd(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x8_t vrsraq_n_u16 (uint16x8_t a, uint16x8_t b, const int n)</para>
        <para>A32: VRSRA.U16 Qd, Qm, #n</para>
        <para>A64: URSRA Vd.8H, Vn.8H, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedAdd(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x4_t vrsraq_n_u32 (uint32x4_t a, uint32x4_t b, const int n)</para>
        <para>A32: VRSRA.U32 Qd, Qm, #n</para>
        <para>A64: URSRA Vd.4S, Vn.4S, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedAdd(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>uint64x2_t vrsraq_n_u64 (uint64x2_t a, uint64x2_t b, const int n)</para>
        <para>A32: VRSRA.U64 Qd, Qm, #n</para>
        <para>A64: URSRA Vd.2D, Vn.2D, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedAdd(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte)">
      <summary>
        <para>uint8x8_t vrsra_n_u8 (uint8x8_t a, uint8x8_t b, const int n)</para>
        <para>A32: VRSRA.U8 Dd, Dm, #n</para>
        <para>A64: URSRA Vd.8B, Vn.8B, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedAdd(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>uint16x4_t vrsra_n_u16 (uint16x4_t a, uint16x4_t b, const int n)</para>
        <para>A32: VRSRA.U16 Dd, Dm, #n</para>
        <para>A64: URSRA Vd.4H, Vn.4H, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedAdd(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>uint32x2_t vrsra_n_u32 (uint32x2_t a, uint32x2_t b, const int n)</para>
        <para>A32: VRSRA.U32 Dd, Dm, #n</para>
        <para>A64: URSRA Vd.2S, Vn.2S, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedAdd(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>uint8x8_t vrsra_n_u8 (uint8x8_t a, uint8x8_t b, const int n)</para>
        <para>A32: VRSRA.U8 Dd, Dm, #n</para>
        <para>A64: URSRA Vd.8B, Vn.8B, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedAdd(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x4_t vrsra_n_u16 (uint16x4_t a, uint16x4_t b, const int n)</para>
        <para>A32: VRSRA.U16 Dd, Dm, #n</para>
        <para>A64: URSRA Vd.4H, Vn.4H, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedAdd(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x2_t vrsra_n_u32 (uint32x2_t a, uint32x2_t b, const int n)</para>
        <para>A32: VRSRA.U32 Dd, Dm, #n</para>
        <para>A64: URSRA Vd.2S, Vn.2S, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedAddScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64},System.Byte)">
      <summary>
        <para>uint64x1_t vrsra_n_u64 (uint64x1_t a, uint64x1_t b, const int n)</para>
        <para>A32: VRSRA.U64 Dd, Dm, #n</para>
        <para>A64: URSRA Dd, Dn, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedAddScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64},System.Byte)">
      <summary>
        <para>uint64x1_t vrsra_n_u64 (uint64x1_t a, uint64x1_t b, const int n)</para>
        <para>A32: VRSRA.U64 Dd, Dm, #n</para>
        <para>A64: URSRA Dd, Dn, #n</para>
      </summary>
      <param name="addend" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int8x8_t vrshrn_n_s16 (int16x8_t a, const int n)</para>
        <para>A32: VRSHRN.I16 Dd, Qm, #n</para>
        <para>A64: RSHRN Vd.8B, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int16x4_t vrshrn_n_s32 (int32x4_t a, const int n)</para>
        <para>A32: VRSHRN.I32 Dd, Qm, #n</para>
        <para>A64: RSHRN Vd.4H, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>int32x2_t vrshrn_n_s64 (int64x2_t a, const int n)</para>
        <para>A32: VRSHRN.I64 Dd, Qm, #n</para>
        <para>A64: RSHRN Vd.2S, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint8x8_t vrshrn_n_u16 (uint16x8_t a, const int n)</para>
        <para>A32: VRSHRN.I16 Dd, Qm, #n</para>
        <para>A64: RSHRN Vd.8B, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint16x4_t vrshrn_n_u32 (uint32x4_t a, const int n)</para>
        <para>A32: VRSHRN.I32 Dd, Qm, #n</para>
        <para>A64: RSHRN Vd.4H, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>uint32x2_t vrshrn_n_u64 (uint64x2_t a, const int n)</para>
        <para>A32: VRSHRN.I64 Dd, Qm, #n</para>
        <para>A64: RSHRN Vd.2S, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>uint8x8_t vqrshrn_n_u16 (uint16x8_t a, const int n)</para>
        <para>A32: VQRSHRN.U16 Dd, Qm, #n</para>
        <para>A64: UQRSHRN Vd.8B, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>uint16x4_t vqrshrn_n_u32 (uint32x4_t a, const int n)</para>
        <para>A32: VQRSHRN.U32 Dd, Qm, #n</para>
        <para>A64: UQRSHRN Vd.4H, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>uint32x2_t vqrshrn_n_u64 (uint64x2_t a, const int n)</para>
        <para>A32: VQRSHRN.U64 Dd, Qm, #n</para>
        <para>A64: UQRSHRN Vd.2S, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint8x8_t vqrshrn_n_u16 (uint16x8_t a, const int n)</para>
        <para>A32: VQRSHRN.U16 Dd, Qm, #n</para>
        <para>A64: UQRSHRN Vd.8B, Vn.8H, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint16x4_t vqrshrn_n_u32 (uint32x4_t a, const int n)</para>
        <para>A32: VQRSHRN.U32 Dd, Qm, #n</para>
        <para>A64: UQRSHRN Vd.4H, Vn.4S, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingSaturateLower(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>uint32x2_t vqrshrn_n_u64 (uint64x2_t a, const int n)</para>
        <para>A32: VQRSHRN.U64 Dd, Qm, #n</para>
        <para>A64: UQRSHRN Vd.2S, Vn.2D, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint8x16_t vqrshrn_high_n_u16 (uint8x8_t r, uint16x8_t a, const int n)</para>
        <para>A32: VQRSHRN.U16 Dd+1, Dn, #n</para>
        <para>A64: UQRSHRN2 Vd.16B, Vn.8H, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>uint16x8_t vqrshrn_high_n_u32 (uint16x4_t r, uint32x4_t a, const int n)</para>
        <para>A32: VQRSHRN.U32 Dd+1, Dn, #n</para>
        <para>A64: UQRSHRN2 Vd.8H, Vn.4S, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>uint32x4_t vqrshrn_high_n_u64 (uint32x2_t r, uint64x2_t a, const int n)</para>
        <para>A32: VQRSHRN.U64 Dd+1, Dn, #n</para>
        <para>A64: UQRSHRN2 Vd.4S, Vn.2D, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>uint8x16_t vqrshrn_high_n_u16 (uint8x8_t r, uint16x8_t a, const int n)</para>
        <para>A32: VQRSHRN.U16 Dd+1, Dn, #n</para>
        <para>A64: UQRSHRN2 Vd.16B, Vn.8H, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint16x8_t vqrshrn_high_n_u32 (uint16x4_t r, uint32x4_t a, const int n)</para>
        <para>A32: VQRSHRN.U32 Dd+1, Dn, #n</para>
        <para>A64: UQRSHRN2 Vd.8H, Vn.4S, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingSaturateUpper(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>uint32x4_t vqrshrn_high_n_u64 (uint32x2_t r, uint64x2_t a, const int n)</para>
        <para>A32: VQRSHRN.U64 Dd+1, Dn, #n</para>
        <para>A64: UQRSHRN2 Vd.4S, Vn.2D, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint8x16_t vrshrn_high_n_u16 (uint8x8_t r, uint16x8_t a, const int n)</para>
        <para>A32: VRSHRN.I16 Dd+1, Qm, #n</para>
        <para>A64: RSHRN2 Vd.16B, Vn.8H, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int16x8_t vrshrn_high_n_s32 (int16x4_t r, int32x4_t a, const int n)</para>
        <para>A32: VRSHRN.I32 Dd+1, Qm, #n</para>
        <para>A64: RSHRN2 Vd.8H, Vn.4S, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>int32x4_t vrshrn_high_n_s64 (int32x2_t r, int64x2_t a, const int n)</para>
        <para>A32: VRSHRN.I64 Dd+1, Qm, #n</para>
        <para>A64: RSHRN2 Vd.4S, Vn.2D, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int8x16_t vrshrn_high_n_s16 (int8x8_t r, int16x8_t a, const int n)</para>
        <para>A32: VRSHRN.I16 Dd+1, Qm, #n</para>
        <para>A64: RSHRN2 Vd.16B, Vn.8H, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint16x8_t vrshrn_high_n_u32 (uint16x4_t r, uint32x4_t a, const int n)</para>
        <para>A32: VRSHRN.I32 Dd+1, Qm, #n</para>
        <para>A64: RSHRN2 Vd.8H, Vn.4S, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>uint32x4_t vrshrn_high_n_u64 (uint32x2_t r, uint64x2_t a, const int n)</para>
        <para>A32: VRSHRN.I64 Dd+1, Qm, #n</para>
        <para>A64: RSHRN2 Vd.4S, Vn.2D, #n</para>
      </summary>
      <param name="lower" />
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Byte)">
      <summary>
        <para>uint64x1_t vrshr_n_u64 (uint64x1_t a, const int n)</para>
        <para>A32: VRSHR.U64 Dd, Dm, #n</para>
        <para>A64: URSHR Dd, Dn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalRoundedScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Byte)">
      <summary>
        <para>uint64x1_t vrshr_n_u64 (uint64x1_t a, const int n)</para>
        <para>A32: VRSHR.U64 Dd, Dm, #n</para>
        <para>A64: URSHR Dd, Dn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Byte)">
      <summary>
        <para>uint64x1_t vshr_n_u64 (uint64x1_t a, const int n)</para>
        <para>A32: VSHR.U64 Dd, Dm, #n</para>
        <para>A64: USHR Dd, Dn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ShiftRightLogicalScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Byte)">
      <summary>
        <para>uint64x1_t vshr_n_u64 (uint64x1_t a, const int n)</para>
        <para>A32: VSHR.U64 Dd, Dm, #n</para>
        <para>A64: USHR Dd, Dn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SignExtendWideningLower(System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int32x4_t vmovl_s16 (int16x4_t a)</para>
        <para>A32: VMOVL.S16 Qd, Dm</para>
        <para>A64: SXTL Vd.4S, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SignExtendWideningLower(System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int64x2_t vmovl_s32 (int32x2_t a)</para>
        <para>A32: VMOVL.S32 Qd, Dm</para>
        <para>A64: SXTL Vd.2D, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SignExtendWideningLower(System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int16x8_t vmovl_s8 (int8x8_t a)</para>
        <para>A32: VMOVL.S8 Qd, Dm</para>
        <para>A64: SXTL Vd.8H, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SignExtendWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int32x4_t vmovl_high_s16 (int16x8_t a)</para>
        <para>A32: VMOVL.S16 Qd, Dm+1</para>
        <para>A64: SXTL2 Vd.4S, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SignExtendWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int64x2_t vmovl_high_s32 (int32x4_t a)</para>
        <para>A32: VMOVL.S32 Qd, Dm+1</para>
        <para>A64: SXTL2 Vd.2D, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SignExtendWideningUpper(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int16x8_t vmovl_high_s8 (int8x16_t a)</para>
        <para>A32: VMOVL.S8 Qd, Dm+1</para>
        <para>A64: SXTL2 Vd.8H, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SqrtScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vsqrt_f64 (float64x1_t a)</para>
        <para>A32: VSQRT.F64 Dd, Dm</para>
        <para>A64: FSQRT Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SqrtScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vsqrts_f32 (float32_t a)</para>
        <para>A32: VSQRT.F32 Sd, Sm</para>
        <para>A64: FSQRT Sd, Sn The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.Byte*,System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>void vst1q_u8 (uint8_t * ptr, uint8x16_t val)</para>
        <para>A32: VST1.8 { Dd, Dd+1 }, [Rn]</para>
        <para>A64: ST1 { Vt.16B }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.Byte*,System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>void vst1_u8 (uint8_t * ptr, uint8x8_t val)</para>
        <para>A32: VST1.8 { Dd }, [Rn]</para>
        <para>A64: ST1 { Vt.8B }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>void vst1q_f64 (float64_t * ptr, float64x2_t val)</para>
        <para>A32: VST1.64 { Dd, Dd+1 }, [Rn]</para>
        <para>A64: ST1 { Vt.2D }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.Double*,System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>void vst1_f64 (float64_t * ptr, float64x1_t val)</para>
        <para>A32: VST1.64 { Dd }, [Rn]</para>
        <para>A64: ST1 { Vt.1D }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.Int16*,System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>void vst1q_s16 (int16_t * ptr, int16x8_t val)</para>
        <para>A32: VST1.16 { Dd, Dd+1 }, [Rn]</para>
        <para>A64: ST1 { Vt.8H }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.Int16*,System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>void vst1_s16 (int16_t * ptr, int16x4_t val)</para>
        <para>A32: VST1.16 { Dd }, [Rn]</para>
        <para>A64: ST1 {Vt.4H }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>void vst1q_s32 (int32_t * ptr, int32x4_t val)</para>
        <para>A32: VST1.32 { Dd, Dd+1 }, [Rn]</para>
        <para>A64: ST1 { Vt.4S }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.Int32*,System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>void vst1_s32 (int32_t * ptr, int32x2_t val)</para>
        <para>A32: VST1.32 { Dd }, [Rn]</para>
        <para>A64: ST1 { Vt.2S }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>void vst1q_s64 (int64_t * ptr, int64x2_t val)</para>
        <para>A32: VST1.64 { Dd, Dd+1 }, [Rn]</para>
        <para>A64: ST1 { Vt.2D }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.Int64*,System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>void vst1_s64 (int64_t * ptr, int64x1_t val)</para>
        <para>A32: VST1.64 { Dd }, [Rn]</para>
        <para>A64: ST1 { Vt.1D }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.SByte*,System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>void vst1q_s8 (int8_t * ptr, int8x16_t val)</para>
        <para>A32: VST1.8 { Dd, Dd+1 }, [Rn]</para>
        <para>A64: ST1 { Vt.16B }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.SByte*,System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>void vst1_s8 (int8_t * ptr, int8x8_t val)</para>
        <para>A32: VST1.8 { Dd }, [Rn]</para>
        <para>A64: ST1 { Vt.8B }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>void vst1q_f32 (float32_t * ptr, float32x4_t val)</para>
        <para>A32: VST1.32 { Dd, Dd+1 }, [Rn]</para>
        <para>A64: ST1 { Vt.4S }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.Single*,System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>void vst1_f32 (float32_t * ptr, float32x2_t val)</para>
        <para>A32: VST1.32 { Dd }, [Rn]</para>
        <para>A64: ST1 { Vt.2S }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.UInt16*,System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>void vst1q_u16 (uint16_t * ptr, uint16x8_t val)</para>
        <para>A32: VST1.16 { Dd, Dd+1 }, [Rn]</para>
        <para>A64: ST1 { Vt.8H }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.UInt16*,System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>void vst1_u16 (uint16_t * ptr, uint16x4_t val)</para>
        <para>A32: VST1.16 { Dd }, [Rn]</para>
        <para>A64: ST1 { Vt.4H }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>void vst1q_u32 (uint32_t * ptr, uint32x4_t val)</para>
        <para>A32: VST1.32 { Dd, Dd+1 }, [Rn]</para>
        <para>A64: ST1 { Vt.4S }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.UInt32*,System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>void vst1_u32 (uint32_t * ptr, uint32x2_t val)</para>
        <para>A32: VST1.32 { Dd }, [Rn]</para>
        <para>A64: ST1 { Vt.2S }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>void vst1q_u64 (uint64_t * ptr, uint64x2_t val)</para>
        <para>A32: VST1.64 { Dd, Dd+1 }, [Rn]</para>
        <para>A64: ST1 { Vt.2D }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Store(System.UInt64*,System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>void vst1_u64 (uint64_t * ptr, uint64x1_t val)</para>
        <para>A32: VST1.64 { Dd }, [Rn]</para>
        <para>A64: ST1 { Vt.1D }, [Xn]</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.StoreSelectedScalar(System.Byte*,System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>void vst1q_lane_u8 (uint8_t * ptr, uint8x16_t val, const int lane)</para>
        <para>A32: VST1.8 { Dd[index] }, [Rn]</para>
        <para>A64: ST1 { Vt.B }[index], [Xn]</para>
      </summary>
      <param name="address" />
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.StoreSelectedScalar(System.Byte*,System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte)">
      <summary>
        <para>void vst1_lane_u8 (uint8_t * ptr, uint8x8_t val, const int lane)</para>
        <para>A32: VST1.8 { Dd[index] }, [Rn]</para>
        <para>A64: ST1 { Vt.B }[index], [Xn]</para>
      </summary>
      <param name="address" />
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.StoreSelectedScalar(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>void vst1q_lane_f64 (float64_t * ptr, float64x2_t val, const int lane)</para>
        <para>A32: VSTR.64 Dd, [Rn]</para>
        <para>A64: ST1 { Vt.D }[index], [Xn]</para>
      </summary>
      <param name="address" />
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.StoreSelectedScalar(System.Int16*,System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>void vst1q_lane_s16 (int16_t * ptr, int16x8_t val, const int lane)</para>
        <para>A32: VST1.16 { Dd[index] }, [Rn]</para>
        <para>A64: ST1 { Vt.H }[index], [Xn]</para>
      </summary>
      <param name="address" />
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.StoreSelectedScalar(System.Int16*,System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>void vst1_lane_s16 (int16_t * ptr, int16x4_t val, const int lane)</para>
        <para>A32: VST1.16 { Dd[index] }, [Rn]</para>
        <para>A64: ST1 { Vt.H }[index], [Xn]</para>
      </summary>
      <param name="address" />
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.StoreSelectedScalar(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>void vst1q_lane_s32 (int32_t * ptr, int32x4_t val, const int lane)</para>
        <para>A32: VST1.32 { Dd[index] }, [Rn]</para>
        <para>A64: ST1 { Vt.S }[index], [Xn]</para>
      </summary>
      <param name="address" />
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.StoreSelectedScalar(System.Int32*,System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>void vst1_lane_s32 (int32_t * ptr, int32x2_t val, const int lane)</para>
        <para>A32: VST1.32 { Dd[index] }, [Rn]</para>
        <para>A64: ST1 { Vt.S }[index], [Xn]</para>
      </summary>
      <param name="address" />
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.StoreSelectedScalar(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>void vst1q_lane_s64 (int64_t * ptr, int64x2_t val, const int lane)</para>
        <para>A32: VSTR.64 Dd, [Rn]</para>
        <para>A64: ST1 { Vt.D }[index], [Xn]</para>
      </summary>
      <param name="address" />
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.StoreSelectedScalar(System.SByte*,System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>void vst1q_lane_s8 (int8_t * ptr, int8x16_t val, const int lane)</para>
        <para>A32: VST1.8 { Dd[index] }, [Rn]</para>
        <para>A64: ST1 { Vt.B }[index], [Xn]</para>
      </summary>
      <param name="address" />
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.StoreSelectedScalar(System.SByte*,System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>void vst1_lane_s8 (int8_t * ptr, int8x8_t val, const int lane)</para>
        <para>A32: VST1.8 { Dd[index] }, [Rn]</para>
        <para>A64: ST1 { Vt.B }[index], [Xn]</para>
      </summary>
      <param name="address" />
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.StoreSelectedScalar(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>void vst1q_lane_f32 (float32_t * ptr, float32x4_t val, const int lane)</para>
        <para>A32: VST1.32 { Dd[index] }, [Rn]</para>
        <para>A64: ST1 { Vt.S }[index], [Xn]</para>
      </summary>
      <param name="address" />
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.StoreSelectedScalar(System.Single*,System.Runtime.Intrinsics.Vector64{System.Single},System.Byte)">
      <summary>
        <para>void vst1_lane_f32 (float32_t * ptr, float32x2_t val, const int lane)</para>
        <para>A32: VST1.32 { Dd[index] }, [Rn]</para>
        <para>A64: ST1 { Vt.S }[index], [Xn]</para>
      </summary>
      <param name="address" />
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.StoreSelectedScalar(System.UInt16*,System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>void vst1q_lane_u16 (uint16_t * ptr, uint16x8_t val, const int lane)</para>
        <para>A32: VST1.16 { Dd[index] }, [Rn]</para>
        <para>A64: ST1 { Vt.H }[index], [Xn]</para>
      </summary>
      <param name="address" />
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.StoreSelectedScalar(System.UInt16*,System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>void vst1_lane_u16 (uint16_t * ptr, uint16x4_t val, const int lane)</para>
        <para>A32: VST1.16 { Dd[index] }, [Rn]</para>
        <para>A64: ST1 { Vt.H }[index], [Xn]</para>
      </summary>
      <param name="address" />
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.StoreSelectedScalar(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>void vst1q_lane_u32 (uint32_t * ptr, uint32x4_t val, const int lane)</para>
        <para>A32: VST1.32 { Dd[index] }, [Rn]</para>
        <para>A64: ST1 { Vt.S }[index], [Xn]</para>
      </summary>
      <param name="address" />
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.StoreSelectedScalar(System.UInt32*,System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>void vst1_lane_u32 (uint32_t * ptr, uint32x2_t val, const int lane)</para>
        <para>A32: VST1.32 { Dd[index] }, [Rn]</para>
        <para>A64: ST1 { Vt.S }[index], [Xn]</para>
      </summary>
      <param name="address" />
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.StoreSelectedScalar(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>void vst1q_lane_u64 (uint64_t * ptr, uint64x2_t val, const int lane)</para>
        <para>A32: VSTR.64 Dd, [Rn]</para>
        <para>A64: ST1 { Vt.D }[index], [Xn]</para>
      </summary>
      <param name="address" />
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Subtract(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vsubq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VSUB.I8 Qd, Qn, Qm</para>
        <para>A64: SUB Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Subtract(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vsubq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VSUB.I16 Qd, Qn, Qm</para>
        <para>A64: SUB Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Subtract(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vsubq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VSUB.I32 Qd, Qn, Qm</para>
        <para>A64: SUB Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Subtract(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vsubq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A32: VSUB.I64 Qd, Qn, Qm</para>
        <para>A64: SUB Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Subtract(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vsubq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VSUB.I8 Qd, Qn, Qm</para>
        <para>A64: SUB Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Subtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vsubq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VSUB.F32 Qd, Qn, Qm</para>
        <para>A64: FSUB Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Subtract(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vsubq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VSUB.I16 Qd, Qn, Qm</para>
        <para>A64: SUB Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Subtract(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vsubq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VSUB.I32 Qd, Qn, Qm</para>
        <para>A64: SUB Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Subtract(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vsubq_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A32: VSUB.I64 Qd, Qn, Qm</para>
        <para>A64: SUB Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Subtract(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vsub_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VSUB.I8 Dd, Dn, Dm</para>
        <para>A64: SUB Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Subtract(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vsub_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VSUB.I16 Dd, Dn, Dm</para>
        <para>A64: SUB Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Subtract(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vsub_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VSUB.I32 Dd, Dn, Dm</para>
        <para>A64: SUB Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Subtract(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vsub_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VSUB.I8 Dd, Dn, Dm</para>
        <para>A64: SUB Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Subtract(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vsub_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VSUB.F32 Dd, Dn, Dm</para>
        <para>A64: FSUB Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Subtract(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vsub_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VSUB.I16 Dd, Dn, Dm</para>
        <para>A64: SUB Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Subtract(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vsub_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VSUB.I32 Dd, Dn, Dm</para>
        <para>A64: SUB Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int8x8_t vsubhn_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VSUBHN.I16 Dd, Qn, Qm</para>
        <para>A64: SUBHN Vd.8B, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int16x4_t vsubhn_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VSUBHN.I32 Dd, Qn, Qm</para>
        <para>A64: SUBHN Vd.4H, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int32x2_t vsubhn_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A32: VSUBHN.I64 Dd, Qn, Qm</para>
        <para>A64: SUBHN Vd.2S, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint8x8_t vsubhn_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VSUBHN.I16 Dd, Qn, Qm</para>
        <para>A64: SUBHN Vd.8B, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint16x4_t vsubhn_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VSUBHN.I32 Dd, Qn, Qm</para>
        <para>A64: SUBHN Vd.4H, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint32x2_t vsubhn_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A32: VSUBHN.I64 Dd, Qn, Qm</para>
        <para>A64: SUBHN Vd.2S, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint8x16_t vsubhn_high_u16 (uint8x8_t r, uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VSUBHN.I16 Dd+1, Qn, Qm</para>
        <para>A64: SUBHN2 Vd.16B, Vn.8H, Vm.8H</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int16x8_t vsubhn_high_s32 (int16x4_t r, int32x4_t a, int32x4_t b)</para>
        <para>A32: VSUBHN.I32 Dd+1, Qn, Qm</para>
        <para>A64: SUBHN2 Vd.8H, Vn.4S, Vm.4S</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int32x4_t vsubhn_high_s64 (int32x2_t r, int64x2_t a, int64x2_t b)</para>
        <para>A32: VSUBHN.I64 Dd+1, Qn, Qm</para>
        <para>A64: SUBHN2 Vd.4S, Vn.2D, Vm.2D</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int8x16_t vsubhn_high_s16 (int8x8_t r, int16x8_t a, int16x8_t b)</para>
        <para>A32: VSUBHN.I16 Dd+1, Qn, Qm</para>
        <para>A64: SUBHN2 Vd.16B, Vn.8H, Vm.8H</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint16x8_t vsubhn_high_u32 (uint16x4_t r, uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VSUBHN.I32 Dd+1, Qn, Qm</para>
        <para>A64: SUBHN2 Vd.8H, Vn.4S, Vm.4S</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint32x4_t vsubhn_high_u64 (uint32x2_t r, uint64x2_t a, uint64x2_t b)</para>
        <para>A32: VSUBHN.I64 Dd+1, Qn, Qm</para>
        <para>A64: SUBHN2 Vd.4S, Vn.2D, Vm.2D</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractRoundedHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int8x8_t vrsubhn_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VRSUBHN.I16 Dd, Qn, Qm</para>
        <para>A64: RSUBHN Vd.8B, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractRoundedHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int16x4_t vrsubhn_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VRSUBHN.I32 Dd, Qn, Qm</para>
        <para>A64: RSUBHN Vd.4H, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractRoundedHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int32x2_t vrsubhn_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A32: VRSUBHN.I64 Dd, Qn, Qm</para>
        <para>A64: RSUBHN Vd.2S, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractRoundedHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint8x8_t vrsubhn_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VRSUBHN.I16 Dd, Qn, Qm</para>
        <para>A64: RSUBHN Vd.8B, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractRoundedHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint16x4_t vrsubhn_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VRSUBHN.I32 Dd, Qn, Qm</para>
        <para>A64: RSUBHN Vd.4H, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractRoundedHighNarrowingLower(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint32x2_t vrsubhn_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A32: VRSUBHN.I64 Dd, Qn, Qm</para>
        <para>A64: RSUBHN Vd.2S, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractRoundedHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint8x16_t vrsubhn_high_u16 (uint8x8_t r, uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VRSUBHN.I16 Dd+1, Qn, Qm</para>
        <para>A64: RSUBHN2 Vd.16B, Vn.8H, Vm.8H</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractRoundedHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int16x8_t vrsubhn_high_s32 (int16x4_t r, int32x4_t a, int32x4_t b)</para>
        <para>A32: VRSUBHN.I32 Dd+1, Qn, Qm</para>
        <para>A64: RSUBHN2 Vd.8H, Vn.4S, Vm.4S</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractRoundedHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int32x4_t vrsubhn_high_s64 (int32x2_t r, int64x2_t a, int64x2_t b)</para>
        <para>A32: VRSUBHN.I64 Dd+1, Qn, Qm</para>
        <para>A64: RSUBHN2 Vd.4S, Vn.2D, Vm.2D</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractRoundedHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int8x16_t vrsubhn_high_s16 (int8x8_t r, int16x8_t a, int16x8_t b)</para>
        <para>A32: VRSUBHN.I16 Dd+1, Qn, Qm</para>
        <para>A64: RSUBHN2 Vd.16B, Vn.8H, Vm.8H</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractRoundedHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint16x8_t vrsubhn_high_u32 (uint16x4_t r, uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VRSUBHN.I32 Dd+1, Qn, Qm</para>
        <para>A64: RSUBHN2 Vd.8H, Vn.4S, Vm.4S</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractRoundedHighNarrowingUpper(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint32x4_t vrsubhn_high_u64 (uint32x2_t r, uint64x2_t a, uint64x2_t b)</para>
        <para>A32: VRSUBHN.I64 Dd+1, Qn, Qm</para>
        <para>A64: RSUBHN2 Vd.4S, Vn.2D, Vm.2D</para>
      </summary>
      <param name="lower" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vqsubq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VQSUB.U8 Qd, Qn, Qm</para>
        <para>A64: UQSUB Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vqsubq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VQSUB.S16 Qd, Qn, Qm</para>
        <para>A64: SQSUB Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vqsubq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VQSUB.S32 Qd, Qn, Qm</para>
        <para>A64: SQSUB Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vqsubq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A32: VQSUB.S64 Qd, Qn, Qm</para>
        <para>A64: SQSUB Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractSaturate(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vqsubq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VQSUB.S8 Qd, Qn, Qm</para>
        <para>A64: SQSUB Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractSaturate(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vqsubq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VQSUB.U16 Qd, Qn, Qm</para>
        <para>A64: UQSUB Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractSaturate(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vqsubq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VQSUB.U32 Qd, Qn, Qm</para>
        <para>A64: UQSUB Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractSaturate(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vqsubq_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A32: VQSUB.U64 Qd, Qn, Qm</para>
        <para>A64: UQSUB Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractSaturate(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vqsub_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VQSUB.U8 Dd, Dn, Dm</para>
        <para>A64: UQSUB Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractSaturate(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vqsub_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VQSUB.S16 Dd, Dn, Dm</para>
        <para>A64: SQSUB Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractSaturate(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vqsub_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VQSUB.S32 Dd, Dn, Dm</para>
        <para>A64: SQSUB Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractSaturate(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vqsub_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VQSUB.S8 Dd, Dn, Dm</para>
        <para>A64: SQSUB Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractSaturate(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vqsub_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VQSUB.U16 Dd, Dn, Dm</para>
        <para>A64: UQSUB Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractSaturate(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vqsub_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VQSUB.U32 Dd, Dn, Dm</para>
        <para>A64: UQSUB Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>int64x1_t vqsub_s64 (int64x1_t a, int64x1_t b)</para>
        <para>A32: VQSUB.S64 Dd, Dn, Dm</para>
        <para>A64: SQSUB Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>uint64x1_t vqsub_u64 (uint64x1_t a, uint64x1_t b)</para>
        <para>A32: VQSUB.U64 Dd, Dn, Dm</para>
        <para>A64: UQSUB Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vsub_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A32: VSUB.F64 Dd, Dn, Dm</para>
        <para>A64: FSUB Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>int64x1_t vsub_s64 (int64x1_t a, int64x1_t b)</para>
        <para>A32: VSUB.I64 Dd, Dn, Dm</para>
        <para>A64: SUB Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vsubs_f32 (float32_t a, float32_t b)</para>
        <para>A32: VSUB.F32 Sd, Sn, Sm</para>
        <para>A64: FSUB Sd, Sn, Sm The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>uint64x1_t vsub_u64 (uint64x1_t a, uint64x1_t b)</para>
        <para>A32: VSUB.I64 Dd, Dn, Dm</para>
        <para>A64: SUB Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningLower(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int16x8_t vsubw_s8 (int16x8_t a, int8x8_t b)</para>
        <para>A32: VSUBW.S8 Qd, Qn, Dm</para>
        <para>A64: SSUBW Vd.8H, Vn.8H, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningLower(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int32x4_t vsubw_s16 (int32x4_t a, int16x4_t b)</para>
        <para>A32: VSUBW.S16 Qd, Qn, Dm</para>
        <para>A64: SSUBW Vd.4S, Vn.4S, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningLower(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int64x2_t vsubw_s32 (int64x2_t a, int32x2_t b)</para>
        <para>A32: VSUBW.S32 Qd, Qn, Dm</para>
        <para>A64: SSUBW Vd.2D, Vn.2D, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningLower(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint16x8_t vsubw_u8 (uint16x8_t a, uint8x8_t b)</para>
        <para>A32: VSUBW.U8 Qd, Qn, Dm</para>
        <para>A64: USUBW Vd.8H, Vn.8H, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningLower(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint32x4_t vsubw_u16 (uint32x4_t a, uint16x4_t b)</para>
        <para>A32: VSUBW.U16 Qd, Qn, Dm</para>
        <para>A64: USUBW Vd.4S, Vn.4S, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningLower(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint64x2_t vsubw_u32 (uint64x2_t a, uint32x2_t b)</para>
        <para>A32: VSUBW.U32 Qd, Qn, Dm</para>
        <para>A64: USUBW Vd.2D, Vn.2D, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningLower(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint16x8_t vsubl_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VSUBL.U8 Qd, Dn, Dm</para>
        <para>A64: USUBL Vd.8H, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningLower(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int32x4_t vsubl_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VSUBL.S16 Qd, Dn, Dm</para>
        <para>A64: SSUBL Vd.4S, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningLower(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int64x2_t vsubl_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VSUBL.S32 Qd, Dn, Dm</para>
        <para>A64: SSUBL Vd.2D, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningLower(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int16x8_t vsubl_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VSUBL.S8 Qd, Dn, Dm</para>
        <para>A64: SSUBL Vd.8H, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningLower(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint32x4_t vsubl_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VSUBL.U16 Qd, Dn, Dm</para>
        <para>A64: USUBL Vd.4S, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningLower(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint64x2_t vsubl_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VSUBL.U32 Qd, Dn, Dm</para>
        <para>A64: USUBL Vd.2D, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningUpper(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint16x8_t vsubl_high_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VSUBL.U8 Qd, Dn+1, Dm+1</para>
        <para>A64: USUBL2 Vd.8H, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int32x4_t vsubl_high_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VSUBL.S16 Qd, Dn+1, Dm+1</para>
        <para>A64: SSUBL2 Vd.4S, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int16x8_t vsubw_high_s8 (int16x8_t a, int8x16_t b)</para>
        <para>A32: VSUBW.S8 Qd, Qn, Dm+1</para>
        <para>A64: SSUBW2 Vd.8H, Vn.8H, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int32x4_t vsubw_high_s16 (int32x4_t a, int16x8_t b)</para>
        <para>A32: VSUBW.S16 Qd, Qn, Dm+1</para>
        <para>A64: SSUBW2 Vd.4S, Vn.4S, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int64x2_t vsubl_high_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VSUBL.S32 Qd, Dn+1, Dm+1</para>
        <para>A64: SSUBL2 Vd.2D, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int64x2_t vsubw_high_s32 (int64x2_t a, int32x4_t b)</para>
        <para>A32: VSUBW.S32 Qd, Qn, Dm+1</para>
        <para>A64: SSUBW2 Vd.2D, Vn.2D, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningUpper(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int16x8_t vsubl_high_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VSUBL.S8 Qd, Dn+1, Dm+1</para>
        <para>A64: SSUBL2 Vd.8H, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint16x8_t vsubw_high_u8 (uint16x8_t a, uint8x16_t b)</para>
        <para>A32: VSUBW.U8 Qd, Qn, Dm+1</para>
        <para>A64: USUBW2 Vd.8H, Vn.8H, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint32x4_t vsubl_high_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VSUBL.U16 Qd, Dn+1, Dm+1</para>
        <para>A64: USUBL2 Vd.4S, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint32x4_t vsubw_high_u16 (uint32x4_t a, uint16x8_t b)</para>
        <para>A32: VSUBW.U16 Qd, Qn, Dm+1</para>
        <para>A64: USUBW2 Vd.4S, Vn.4S, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint64x2_t vsubl_high_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VSUBL.U32 Qd, Dn+1, Dm+1</para>
        <para>A64: USUBL2 Vd.2D, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.SubtractWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint64x2_t vsubw_high_u32 (uint64x2_t a, uint32x4_t b)</para>
        <para>A32: VSUBW.U32 Qd, Qn, Dm+1</para>
        <para>A64: USUBW2 Vd.2D, Vn.2D, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.VectorTableLookup(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vqvtbl1_u8(uint8x16_t t, uint8x8_t idx)</para>
        <para>A32: VTBL Dd, {Dn, Dn+1}, Dm</para>
        <para>A64: TBL Vd.8B, {Vn.16B}, Vm.8B</para>
      </summary>
      <param name="table" />
      <param name="byteIndexes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.VectorTableLookup(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vqvtbl1_s8(int8x16_t t, uint8x8_t idx)</para>
        <para>A32: VTBL Dd, {Dn, Dn+1}, Dm</para>
        <para>A64: TBL Vd.8B, {Vn.16B}, Vm.8B</para>
      </summary>
      <param name="table" />
      <param name="byteIndexes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.VectorTableLookupExtension(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vqvtbx1_u8(uint8x8_t r, uint8x16_t t, uint8x8_t idx)</para>
        <para>A32: VTBX Dd, {Dn, Dn+1}, Dm</para>
        <para>A64: TBX Vd.8B, {Vn.16B}, Vm.8B</para>
      </summary>
      <param name="defaultValues" />
      <param name="table" />
      <param name="byteIndexes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.VectorTableLookupExtension(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vqvtbx1_s8(int8x8_t r, int8x16_t t, uint8x8_t idx)</para>
        <para>A32: VTBX Dd, {Dn, Dn+1}, Dm</para>
        <para>A64: TBX Vd.8B, {Vn.16B}, Vm.8B</para>
      </summary>
      <param name="defaultValues" />
      <param name="table" />
      <param name="byteIndexes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t veorq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A32: VEOR Qd, Qn, Qm</para>
        <para>A64: EOR Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t veorq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A32: VEOR Qd, Qn, Qm</para>
        <para>A64: EOR Vd.16B, Vn.16B, Vm.16B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t veorq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A32: VEOR Qd, Qn, Qm</para>
        <para>A64: EOR Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t veorq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A32: VEOR Qd, Qn, Qm</para>
        <para>A64: EOR Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t veorq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A32: VEOR Qd, Qn, Qm</para>
        <para>A64: EOR Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t veorq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A32: VEOR Qd, Qn, Qm</para>
        <para>A64: EOR Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t veorq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A32: VEOR Qd, Qn, Qm</para>
        <para>A64: EOR Vd.16B, Vn.16B, Vm.16B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t veorq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A32: VEOR Qd, Qn, Qm</para>
        <para>A64: EOR Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t veorq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A32: VEOR Qd, Qn, Qm</para>
        <para>A64: EOR Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t veorq_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A32: VEOR Qd, Qn, Qm</para>
        <para>A64: EOR Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t veor_u8 (uint8x8_t a, uint8x8_t b)</para>
        <para>A32: VEOR Dd, Dn, Dm</para>
        <para>A64: EOR Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t veor_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A32: VEOR Dd, Dn, Dm</para>
        <para>A64: EOR Vd.8B, Vn.8B, Vm.8B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t veor_s16 (int16x4_t a, int16x4_t b)</para>
        <para>A32: VEOR Dd, Dn, Dm</para>
        <para>A64: EOR Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t veor_s32 (int32x2_t a, int32x2_t b)</para>
        <para>A32: VEOR Dd, Dn, Dm</para>
        <para>A64: EOR Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>int64x1_t veor_s64 (int64x1_t a, int64x1_t b)</para>
        <para>A32: VEOR Dd, Dn, Dm</para>
        <para>A64: EOR Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t veor_s8 (int8x8_t a, int8x8_t b)</para>
        <para>A32: VEOR Dd, Dn, Dm</para>
        <para>A64: EOR Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t veor_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A32: VEOR Dd, Dn, Dm</para>
        <para>A64: EOR Vd.8B, Vn.8B, Vm.8B The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t veor_u16 (uint16x4_t a, uint16x4_t b)</para>
        <para>A32: VEOR Dd, Dn, Dm</para>
        <para>A64: EOR Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t veor_u32 (uint32x2_t a, uint32x2_t b)</para>
        <para>A32: VEOR Dd, Dn, Dm</para>
        <para>A64: EOR Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Xor(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>uint64x1_t veor_u64 (uint64x1_t a, uint64x1_t b)</para>
        <para>A32: VEOR Dd, Dn, Dm</para>
        <para>A64: EOR Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ZeroExtendWideningLower(System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint16x8_t vmovl_u8 (uint8x8_t a)</para>
        <para>A32: VMOVL.U8 Qd, Dm</para>
        <para>A64: UXTL Vd.8H, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ZeroExtendWideningLower(System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint32x4_t vmovl_u16 (uint16x4_t a)</para>
        <para>A32: VMOVL.U16 Qd, Dm</para>
        <para>A64: UXTL Vd.4S, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ZeroExtendWideningLower(System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint64x2_t vmovl_u32 (uint32x2_t a)</para>
        <para>A32: VMOVL.U32 Qd, Dm</para>
        <para>A64: UXTL Vd.2D, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ZeroExtendWideningLower(System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint16x8_t vmovl_u8 (uint8x8_t a)</para>
        <para>A32: VMOVL.U8 Qd, Dm</para>
        <para>A64: UXTL Vd.8H, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ZeroExtendWideningLower(System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint32x4_t vmovl_u16 (uint16x4_t a)</para>
        <para>A32: VMOVL.U16 Qd, Dm</para>
        <para>A64: UXTL Vd.4S, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ZeroExtendWideningLower(System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint64x2_t vmovl_u32 (uint32x2_t a)</para>
        <para>A32: VMOVL.U32 Qd, Dm</para>
        <para>A64: UXTL Vd.2D, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ZeroExtendWideningUpper(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint16x8_t vmovl_high_u8 (uint8x16_t a)</para>
        <para>A32: VMOVL.U8 Qd, Dm+1</para>
        <para>A64: UXTL2 Vd.8H, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ZeroExtendWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>uint32x4_t vmovl_high_u16 (uint16x8_t a)</para>
        <para>A32: VMOVL.U16 Qd, Dm+1</para>
        <para>A64: UXTL2 Vd.4S, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ZeroExtendWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>uint64x2_t vmovl_high_u32 (uint32x4_t a)</para>
        <para>A32: VMOVL.U32 Qd, Dm+1</para>
        <para>A64: UXTL2 Vd.2D, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ZeroExtendWideningUpper(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>uint16x8_t vmovl_high_u8 (uint8x16_t a)</para>
        <para>A32: VMOVL.U8 Qd, Dm+1</para>
        <para>A64: UXTL2 Vd.8H, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ZeroExtendWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint32x4_t vmovl_high_u16 (uint16x8_t a)</para>
        <para>A32: VMOVL.U16 Qd, Dm+1</para>
        <para>A64: UXTL2 Vd.4S, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.ZeroExtendWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint64x2_t vmovl_high_u32 (uint32x4_t a)</para>
        <para>A32: VMOVL.U32 Qd, Dm+1</para>
        <para>A64: UXTL2 Vd.2D, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="P:System.Runtime.Intrinsics.Arm.AdvSimd.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64" />
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.Abs(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vabsq_f64 (float64x2_t a)</para>
        <para>A64: FABS Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.Abs(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vabsq_s64 (int64x2_t a)</para>
        <para>A64: ABS Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsoluteCompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>uint64x2_t vcagtq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FACGT Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsoluteCompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>uint64x2_t vcageq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FACGE Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsoluteCompareGreaterThanOrEqualScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>uint64x1_t vcage_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A64: FACGE Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsoluteCompareGreaterThanOrEqualScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32_t vcages_f32 (float32_t a, float32_t b)</para>
        <para>A64: FACGE Sd, Sn, Sm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsoluteCompareGreaterThanScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>uint64x1_t vcagt_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A64: FACGT Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsoluteCompareGreaterThanScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32_t vcagts_f32 (float32_t a, float32_t b)</para>
        <para>A64: FACGT Sd, Sn, Sm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsoluteCompareLessThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>uint64x2_t vcaltq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FACGT Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsoluteCompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>uint64x2_t vcaleq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FACGE Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsoluteCompareLessThanOrEqualScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>uint64x1_t vcale_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A64: FACGE Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsoluteCompareLessThanOrEqualScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32_t vcales_f32 (float32_t a, float32_t b)</para>
        <para>A64: FACGE Sd, Sn, Sm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsoluteCompareLessThanScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>uint64x1_t vcalt_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A64: FACGT Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsoluteCompareLessThanScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32_t vcalts_f32 (float32_t a, float32_t b)</para>
        <para>A64: FACGT Sd, Sn, Sm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsoluteDifference(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vabdq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FABD Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsoluteDifferenceScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vabd_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A64: FABD Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsoluteDifferenceScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vabds_f32 (float32_t a, float32_t b)</para>
        <para>A64: FABD Sd, Sn, Sm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsSaturate(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vqabsq_s64 (int64x2_t a)</para>
        <para>A64: SQABS Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16_t vqabsh_s16 (int16_t a)</para>
        <para>A64: SQABS Hd, Hn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32_t vqabss_s32 (int32_t a)</para>
        <para>A64: SQABS Sd, Sn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>int64_t vqabsd_s64 (int64_t a)</para>
        <para>A64: SQABS Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsSaturateScalar(System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8_t vqabsb_s8 (int8_t a)</para>
        <para>A64: SQABS Bd, Bn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AbsScalar(System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>int64x1_t vabs_s64 (int64x1_t a)</para>
        <para>A64: ABS Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.Add(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vaddq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FADD Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcross(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8_t vaddvq_u8 (uint8x16_t a)</para>
        <para>A64: ADDV Bd, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcross(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16_t vaddvq_s16 (int16x8_t a)</para>
        <para>A64: ADDV Hd, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcross(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32_t vaddvq_s32 (int32x4_t a)</para>
        <para>A64: ADDV Sd, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcross(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8_t vaddvq_s8 (int8x16_t a)</para>
        <para>A64: ADDV Bd, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcross(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16_t vaddvq_u16 (uint16x8_t a)</para>
        <para>A64: ADDV Hd, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcross(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32_t vaddvq_u32 (uint32x4_t a)</para>
        <para>A64: ADDV Sd, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcross(System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8_t vaddv_u8 (uint8x8_t a)</para>
        <para>A64: ADDV Bd, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcross(System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16_t vaddv_s16 (int16x4_t a)</para>
        <para>A64: ADDV Hd, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcross(System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8_t vaddv_s8 (int8x8_t a)</para>
        <para>A64: ADDV Bd, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcross(System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16_t vaddv_u16 (uint16x4_t a)</para>
        <para>A64: ADDV Hd, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcrossWidening(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint16_t vaddlvq_u8 (uint8x16_t a)</para>
        <para>A64: UADDLV Hd, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcrossWidening(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int32_t vaddlvq_s16 (int16x8_t a)</para>
        <para>A64: SADDLV Sd, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcrossWidening(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int64_t vaddlvq_s32 (int32x4_t a)</para>
        <para>A64: SADDLV Dd, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcrossWidening(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int16_t vaddlvq_s8 (int8x16_t a)</para>
        <para>A64: SADDLV Hd, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcrossWidening(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint32_t vaddlvq_u16 (uint16x8_t a)</para>
        <para>A64: UADDLV Sd, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcrossWidening(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint64_t vaddlvq_u32 (uint32x4_t a)</para>
        <para>A64: UADDLV Dd, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcrossWidening(System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint16_t vaddlv_u8 (uint8x8_t a)</para>
        <para>A64: UADDLV Hd, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcrossWidening(System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int32_t vaddlv_s16 (int16x4_t a)</para>
        <para>A64: SADDLV Sd, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcrossWidening(System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int16_t vaddlv_s8 (int8x8_t a)</para>
        <para>A64: SADDLV Hd, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddAcrossWidening(System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint32_t vaddlv_u16 (uint16x4_t a)</para>
        <para>A64: UADDLV Sd, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddPairwise(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vpaddq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A64: ADDP Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddPairwise(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vpaddq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FADDP Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddPairwise(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vpaddq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A64: ADDP Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddPairwise(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vpaddq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A64: ADDP Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddPairwise(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vpaddq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A64: ADDP Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddPairwise(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vpaddq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A64: ADDP Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddPairwise(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vpaddq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A64: FADDP Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddPairwise(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vpaddq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A64: ADDP Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddPairwise(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vpaddq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A64: ADDP Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddPairwise(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vpaddq_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A64: ADDP Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddPairwiseScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64_t vpaddd_f64 (float64x2_t a)</para>
        <para>A64: FADDP Dd, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddPairwiseScalar(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64_t vpaddd_s64 (int64x2_t a)</para>
        <para>A64: ADDP Dd, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddPairwiseScalar(System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64_t vpaddd_u64 (uint64x2_t a)</para>
        <para>A64: ADDP Dd, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddPairwiseScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vpadds_f32 (float32x2_t a)</para>
        <para>A64: FADDP Sd, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturate(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>uint8x16_t vsqaddq_u8 (uint8x16_t a, int8x16_t b)</para>
        <para>A64: USQADD Vd.16B, Vn.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>int16x8_t vuqaddq_s16 (int16x8_t a, uint16x8_t b)</para>
        <para>A64: SUQADD Vd.8H, Vn.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>int32x4_t vuqaddq_s32 (int32x4_t a, uint32x4_t b)</para>
        <para>A64: SUQADD Vd.4S, Vn.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturate(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>int64x2_t vuqaddq_s64 (int64x2_t a, uint64x2_t b)</para>
        <para>A64: SUQADD Vd.2D, Vn.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturate(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>int8x16_t vuqaddq_s8 (int8x16_t a, uint8x16_t b)</para>
        <para>A64: SUQADD Vd.16B, Vn.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturate(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>uint16x8_t vsqaddq_u16 (uint16x8_t a, int16x8_t b)</para>
        <para>A64: USQADD Vd.8H, Vn.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturate(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>uint32x4_t vsqaddq_u32 (uint32x4_t a, int32x4_t b)</para>
        <para>A64: USQADD Vd.4S, Vn.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturate(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>uint64x2_t vsqaddq_u64 (uint64x2_t a, int64x2_t b)</para>
        <para>A64: USQADD Vd.2D, Vn.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturate(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8x8_t vsqadd_u8 (uint8x8_t a, int8x8_t b)</para>
        <para>A64: USQADD Vd.8B, Vn.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturate(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>int16x4_t vuqadd_s16 (int16x4_t a, uint16x4_t b)</para>
        <para>A64: SUQADD Vd.4H, Vn.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturate(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>int32x2_t vuqadd_s32 (int32x2_t a, uint32x2_t b)</para>
        <para>A64: SUQADD Vd.2S, Vn.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturate(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>int8x8_t vuqadd_s8 (int8x8_t a, uint8x8_t b)</para>
        <para>A64: SUQADD Vd.8B, Vn.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturate(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16x4_t vsqadd_u16 (uint16x4_t a, int16x4_t b)</para>
        <para>A64: USQADD Vd.4H, Vn.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturate(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32x2_t vsqadd_u32 (uint32x2_t a, int32x2_t b)</para>
        <para>A64: USQADD Vd.2S, Vn.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8_t vqaddb_u8 (uint8_t a, uint8_t b)</para>
        <para>A64: UQADD Bd, Bn, Bm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8_t vsqaddb_u8 (uint8_t a, int8_t b)</para>
        <para>A64: USQADD Bd, Bn</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16_t vqaddh_s16 (int16_t a, int16_t b)</para>
        <para>A64: SQADD Hd, Hn, Hm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>int16_t vuqaddh_s16 (int16_t a, uint16_t b)</para>
        <para>A64: SUQADD Hd, Hn</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32_t vqadds_s32 (int32_t a, int32_t b)</para>
        <para>A64: SQADD Sd, Sn, Sm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>int32_t vuqadds_s32 (int32_t a, uint32_t b)</para>
        <para>A64: SUQADD Sd, Sn</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>int64x1_t vuqadd_s64 (int64x1_t a, uint64x1_t b)</para>
        <para>A64: SUQADD Dd, Dn</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturateScalar(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>int8_t vuqaddb_s8 (int8_t a, uint8_t b)</para>
        <para>A64: SUQADD Bd, Bn</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturateScalar(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8_t vqaddb_s8 (int8_t a, int8_t b)</para>
        <para>A64: SQADD Bd, Bn, Bm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16_t vsqaddh_u16 (uint16_t a, int16_t b)</para>
        <para>A64: USQADD Hd, Hn</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16_t vqaddh_u16 (uint16_t a, uint16_t b)</para>
        <para>A64: UQADD Hd, Hn, Hm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32_t vsqadds_u32 (uint32_t a, int32_t b)</para>
        <para>A64: USQADD Sd, Sn</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32_t vqadds_u32 (uint32_t a, uint32_t b)</para>
        <para>A64: UQADD Sd, Sn, Sm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.AddSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>uint64x1_t vsqadd_u64 (uint64x1_t a, int64x1_t b)</para>
        <para>A64: USQADD Dd, Dn</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.Ceiling(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vrndpq_f64 (float64x2_t a)</para>
        <para>A64: FRINTP Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>uint64x2_t vceqq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FCMEQ Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>uint64x2_t vceqq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A64: CMEQ Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareEqual(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vceqq_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A64: CMEQ Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareEqualScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>uint64x1_t vceq_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A64: FCMEQ Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareEqualScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>uint64x1_t vceq_s64 (int64x1_t a, int64x1_t b)</para>
        <para>A64: CMEQ Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareEqualScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32_t vceqs_f32 (float32_t a, float32_t b)</para>
        <para>A64: FCMEQ Sd, Sn, Sm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareEqualScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>uint64x1_t vceq_u64 (uint64x1_t a, uint64x1_t b)</para>
        <para>A64: CMEQ Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>uint64x2_t vcgtq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FCMGT Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>uint64x2_t vcgtq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A64: CMGT Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vcgtq_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A64: CMHI Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>uint64x2_t vcgeq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FCMGE Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>uint64x2_t vcgeq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A64: CMGE Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vcgeq_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A64: CMHS Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareGreaterThanOrEqualScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>uint64x1_t vcge_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A64: FCMGE Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareGreaterThanOrEqualScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>uint64x1_t vcge_s64 (int64x1_t a, int64x1_t b)</para>
        <para>A64: CMGE Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareGreaterThanOrEqualScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32_t vcges_f32 (float32_t a, float32_t b)</para>
        <para>A64: FCMGE Sd, Sn, Sm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareGreaterThanOrEqualScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>uint64x1_t vcge_u64 (uint64x1_t a, uint64x1_t b)</para>
        <para>A64: CMHS Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareGreaterThanScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>uint64x1_t vcgt_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A64: FCMGT Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareGreaterThanScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>uint64x1_t vcgt_s64 (int64x1_t a, int64x1_t b)</para>
        <para>A64: CMGT Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareGreaterThanScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32_t vcgts_f32 (float32_t a, float32_t b)</para>
        <para>A64: FCMGT Sd, Sn, Sm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareGreaterThanScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>uint64x1_t vcgt_u64 (uint64x1_t a, uint64x1_t b)</para>
        <para>A64: CMHI Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>uint64x2_t vcltq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FCMGT Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>uint64x2_t vcltq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A64: CMGT Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vcltq_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A64: CMHI Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>uint64x2_t vcleq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FCMGE Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>uint64x2_t vcleq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A64: CMGE Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vcleq_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A64: CMHS Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareLessThanOrEqualScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>uint64x1_t vcle_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A64: FCMGE Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareLessThanOrEqualScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>uint64x1_t vcle_s64 (int64x1_t a, int64x1_t b)</para>
        <para>A64: CMGE Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareLessThanOrEqualScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32_t vcles_f32 (float32_t a, float32_t b)</para>
        <para>A64: FCMGE Sd, Sn, Sm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareLessThanOrEqualScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>uint64x1_t vcle_u64 (uint64x1_t a, uint64x1_t b)</para>
        <para>A64: CMHS Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareLessThanScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>uint64x1_t vclt_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A64: FCMGT Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareLessThanScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>uint64x1_t vclt_s64 (int64x1_t a, int64x1_t b)</para>
        <para>A64: CMGT Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareLessThanScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>uint32_t vclts_f32 (float32_t a, float32_t b)</para>
        <para>A64: FCMGT Sd, Sn, Sm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareLessThanScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>uint64x1_t vclt_u64 (uint64x1_t a, uint64x1_t b)</para>
        <para>A64: CMHI Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareTest(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>uint64x2_t vtstq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: CMTST Vd.2D, Vn.2D, Vm.2D The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareTest(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>uint64x2_t vtstq_s64 (int64x2_t a, int64x2_t b)</para>
        <para>A64: CMTST Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareTest(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vtstq_u64 (uint64x2_t a, uint64x2_t b)</para>
        <para>A64: CMTST Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareTestScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>uint64x1_t vtst_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A64: CMTST Dd, Dn, Dm The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareTestScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>uint64x1_t vtst_s64 (int64x1_t a, int64x1_t b)</para>
        <para>A64: CMTST Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.CompareTestScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>uint64x1_t vtst_u64 (uint64x1_t a, uint64x1_t b)</para>
        <para>A64: CMTST Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToDouble(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>float64x2_t vcvtq_f64_s64 (int64x2_t a)</para>
        <para>A64: SCVTF Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToDouble(System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>float64x2_t vcvtq_f64_u64 (uint64x2_t a)</para>
        <para>A64: UCVTF Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToDouble(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float64x2_t vcvt_f64_f32 (float32x2_t a)</para>
        <para>A64: FCVTL Vd.2D, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToDoubleScalar(System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>float64x1_t vcvt_f64_s64 (int64x1_t a)</para>
        <para>A64: SCVTF Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToDoubleScalar(System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>float64x1_t vcvt_f64_u64 (uint64x1_t a)</para>
        <para>A64: UCVTF Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToDoubleUpper(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float64x2_t vcvt_high_f64_f32 (float32x4_t a)</para>
        <para>A64: FCVTL2 Vd.2D, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToInt64RoundAwayFromZero(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int64x2_t vcvtaq_s64_f64 (float64x2_t a)</para>
        <para>A64: FCVTAS Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToInt64RoundAwayFromZeroScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>int64x1_t vcvta_s64_f64 (float64x1_t a)</para>
        <para>A64: FCVTAS Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToInt64RoundToEven(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int64x2_t vcvtnq_s64_f64 (float64x2_t a)</para>
        <para>A64: FCVTNS Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToInt64RoundToEvenScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>int64x1_t vcvtn_s64_f64 (float64x1_t a)</para>
        <para>A64: FCVTNS Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToInt64RoundToNegativeInfinity(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int64x2_t vcvtmq_s64_f64 (float64x2_t a)</para>
        <para>A64: FCVTMS Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToInt64RoundToNegativeInfinityScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>int64x1_t vcvtm_s64_f64 (float64x1_t a)</para>
        <para>A64: FCVTMS Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToInt64RoundToPositiveInfinity(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int64x2_t vcvtpq_s64_f64 (float64x2_t a)</para>
        <para>A64: FCVTPS Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToInt64RoundToPositiveInfinityScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>int64x1_t vcvtp_s64_f64 (float64x1_t a)</para>
        <para>A64: FCVTPS Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToInt64RoundToZero(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int64x2_t vcvtq_s64_f64 (float64x2_t a)</para>
        <para>A64: FCVTZS Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToInt64RoundToZeroScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>int64x1_t vcvt_s64_f64 (float64x1_t a)</para>
        <para>A64: FCVTZS Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToSingleLower(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float32x2_t vcvt_f32_f64 (float64x2_t a)</para>
        <para>A64: FCVTN Vd.2S, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToSingleRoundToOddLower(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float32x2_t vcvtx_f32_f64 (float64x2_t a)</para>
        <para>A64: FCVTXN Vd.2S, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToSingleRoundToOddUpper(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float32x4_t vcvtx_high_f32_f64 (float32x2_t r, float64x2_t a)</para>
        <para>A64: FCVTXN2 Vd.4S, Vn.2D</para>
      </summary>
      <param name="lower" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToSingleUpper(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float32x4_t vcvt_high_f32_f64 (float32x2_t r, float64x2_t a)</para>
        <para>A64: FCVTN2 Vd.4S, Vn.2D</para>
      </summary>
      <param name="lower" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToUInt64RoundAwayFromZero(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>uint64x2_t vcvtaq_u64_f64 (float64x2_t a)</para>
        <para>A64: FCVTAU Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToUInt64RoundAwayFromZeroScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>uint64x1_t vcvta_u64_f64 (float64x1_t a)</para>
        <para>A64: FCVTAU Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToUInt64RoundToEven(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>uint64x2_t vcvtnq_u64_f64 (float64x2_t a)</para>
        <para>A64: FCVTNU Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToUInt64RoundToEvenScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>uint64x1_t vcvtn_u64_f64 (float64x1_t a)</para>
        <para>A64: FCVTNU Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToUInt64RoundToNegativeInfinity(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>uint64x2_t vcvtmq_u64_f64 (float64x2_t a)</para>
        <para>A64: FCVTMU Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToUInt64RoundToNegativeInfinityScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>uint64x1_t vcvtm_u64_f64 (float64x1_t a)</para>
        <para>A64: FCVTMU Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToUInt64RoundToPositiveInfinity(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>uint64x2_t vcvtpq_u64_f64 (float64x2_t a)</para>
        <para>A64: FCVTPU Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToUInt64RoundToPositiveInfinityScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>uint64x1_t vcvtp_u64_f64 (float64x1_t a)</para>
        <para>A64: FCVTPU Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToUInt64RoundToZero(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>uint64x2_t vcvtq_u64_f64 (float64x2_t a)</para>
        <para>A64: FCVTZU Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ConvertToUInt64RoundToZeroScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>uint64x1_t vcvt_u64_f64 (float64x1_t a)</para>
        <para>A64: FCVTZU Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.Divide(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vdivq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FDIV Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.Divide(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vdivq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A64: FDIV Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.Divide(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vdiv_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A64: FDIV Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.DuplicateSelectedScalarToVector128(System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>float64x2_t vdupq_laneq_f64 (float64x2_t vec, const int lane)</para>
        <para>A64: DUP Vd.2D, Vn.D[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.DuplicateSelectedScalarToVector128(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>int64x2_t vdupq_laneq_s64 (int64x2_t vec, const int lane)</para>
        <para>A64: DUP Vd.2D, Vn.D[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.DuplicateSelectedScalarToVector128(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>uint64x2_t vdupq_laneq_u64 (uint64x2_t vec, const int lane)</para>
        <para>A64: DUP Vd.2D, Vn.D[index]</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.DuplicateToVector128(System.Double)">
      <summary>
        <para>float64x2_t vdupq_n_f64 (float64_t value)</para>
        <para>A64: DUP Vd.2D, Vn.D[0]</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.DuplicateToVector128(System.Int64)">
      <summary>
        <para>int64x2_t vdupq_n_s64 (int64_t value)</para>
        <para>A64: DUP Vd.2D, Rn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.DuplicateToVector128(System.UInt64)">
      <summary>
        <para>uint64x2_t vdupq_n_s64 (uint64_t value)</para>
        <para>A64: DUP Vd.2D, Rn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ExtractNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int8_t vqmovnh_s16 (int16_t a) A64: SQXTN Bd, Hn</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ExtractNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int16_t vqmovns_s32 (int32_t a) A64: SQXTN Hd, Sn</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ExtractNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>int32_t vqmovnd_s64 (int64_t a) A64: SQXTN Sd, Dn</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ExtractNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>uint8_t vqmovnh_u16 (uint16_t a) A64: UQXTN Bd, Hn</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ExtractNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>uint16_t vqmovns_u32 (uint32_t a) A64: UQXTN Hd, Sn</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ExtractNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>uint32_t vqmovnd_u64 (uint64_t a) A64: UQXTN Sd, Dn</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ExtractNarrowingSaturateUnsignedScalar(System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>uint8_t vqmovunh_s16 (int16_t a) A64: SQXTUN Bd, Hn</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ExtractNarrowingSaturateUnsignedScalar(System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>uint16_t vqmovuns_s32 (int32_t a) A64: SQXTUN Hd, Sn</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ExtractNarrowingSaturateUnsignedScalar(System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>uint32_t vqmovund_s64 (int64_t a) A64: SQXTUN Sd, Dn</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.Floor(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vrndmq_f64 (float64x2_t a)</para>
        <para>A64: FRINTM Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplyAdd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vfmaq_f64 (float64x2_t a, float64x2_t b, float64x2_t c)</para>
        <para>A64: FMLA Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplyAddByScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x2_t vfmaq_n_f64 (float64x2_t a, float64x2_t b, float64_t n)</para>
        <para>A64: FMLA Vd.2D, Vn.2D, Vm.D[0]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplyAddByScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x4_t vfmaq_n_f32 (float32x4_t a, float32x4_t b, float32_t n)</para>
        <para>A64: FMLA Vd.4S, Vn.4S, Vm.S[0]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplyAddByScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vfma_n_f32 (float32x2_t a, float32x2_t b, float32_t n)</para>
        <para>A64: FMLA Vd.2S, Vn.2S, Vm.S[0]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>float64x2_t vfmaq_laneq_f64 (float64x2_t a, float64x2_t b, float64x2_t v, const int lane)</para>
        <para>A64: FMLA Vd.2D, Vn.2D, Vm.D[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>float32x4_t vfmaq_laneq_f32 (float32x4_t a, float32x4_t b, float32x4_t v, const int lane)</para>
        <para>A64: FMLA Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Byte)">
      <summary>
        <para>float32x4_t vfmaq_lane_f32 (float32x4_t a, float32x4_t b, float32x2_t v, const int lane)</para>
        <para>A64: FMLA Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>float32x2_t vfma_laneq_f32 (float32x2_t a, float32x2_t b, float32x4_t v, const int lane)</para>
        <para>A64: FMLA Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplyAddBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Byte)">
      <summary>
        <para>float32x2_t vfma_lane_f32 (float32x2_t a, float32x2_t b, float32x2_t v, const int lane)</para>
        <para>A64: FMLA Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplyAddScalarBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>float64_t vfmad_laneq_f64 (float64_t a, float64_t b, float64x2_t v, const int lane)</para>
        <para>A64: FMLA Dd, Dn, Vm.D[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplyAddScalarBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>float32_t vfmas_laneq_f32 (float32_t a, float32_t b, float32x4_t v, const int lane)</para>
        <para>A64: FMLA Sd, Sn, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplyAddScalarBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Byte)">
      <summary>
        <para>float32_t vfmas_lane_f32 (float32_t a, float32_t b, float32x2_t v, const int lane)</para>
        <para>A64: FMLA Sd, Sn, Vm.S[lane]</para>
      </summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplySubtract(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vfmsq_f64 (float64x2_t a, float64x2_t b, float64x2_t c)</para>
        <para>A64: FMLS Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplySubtractByScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x2_t vfmsq_n_f64 (float64x2_t a, float64x2_t b, float64_t n)</para>
        <para>A64: FMLS Vd.2D, Vn.2D, Vm.D[0]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplySubtractByScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x4_t vfmsq_n_f32 (float32x4_t a, float32x4_t b, float32_t n)</para>
        <para>A64: FMLS Vd.4S, Vn.4S, Vm.S[0]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplySubtractByScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vfms_n_f32 (float32x2_t a, float32x2_t b, float32_t n)</para>
        <para>A64: FMLS Vd.2S, Vn.2S, Vm.S[0]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>float64x2_t vfmsq_laneq_f64 (float64x2_t a, float64x2_t b, float64x2_t v, const int lane)</para>
        <para>A64: FMLS Vd.2D, Vn.2D, Vm.D[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>float32x4_t vfmsq_laneq_f32 (float32x4_t a, float32x4_t b, float32x4_t v, const int lane)</para>
        <para>A64: FMLS Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Byte)">
      <summary>
        <para>float32x4_t vfmsq_lane_f32 (float32x4_t a, float32x4_t b, float32x2_t v, const int lane)</para>
        <para>A64: FMLS Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>float32x2_t vfms_laneq_f32 (float32x2_t a, float32x2_t b, float32x4_t v, const int lane)</para>
        <para>A64: FMLS Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplySubtractBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Byte)">
      <summary>
        <para>float32x2_t vfms_lane_f32 (float32x2_t a, float32x2_t b, float32x2_t v, const int lane)</para>
        <para>A64: FMLS Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplySubtractScalarBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>float64_t vfmsd_laneq_f64 (float64_t a, float64_t b, float64x2_t v, const int lane)</para>
        <para>A64: FMLS Dd, Dn, Vm.D[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplySubtractScalarBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>float32_t vfmss_laneq_f32 (float32_t a, float32_t b, float32x4_t v, const int lane)</para>
        <para>A64: FMLS Sd, Sn, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.FusedMultiplySubtractScalarBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Byte)">
      <summary>
        <para>float32_t vfmss_lane_f32 (float32_t a, float32_t b, float32x2_t v, const int lane)</para>
        <para>A64: FMLS Sd, Sn, Vm.S[lane]</para>
      </summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte,System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>uint8x16_t vcopyq_laneq_u8 (uint8x16_t a, const int lane1, uint8x16_t b, const int lane2)</para>
        <para>A64: INS Vd.B[lane1], Vn.B[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte,System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte)">
      <summary>
        <para>uint8x16_t vcopyq_lane_u8 (uint8x16_t a, const int lane1, uint8x8_t b, const int lane2)</para>
        <para>A64: INS Vd.B[lane1], Vn.B[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Byte,System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>float64x2_t vcopyq_laneq_f64 (float64x2_t a, const int lane1, float64x2_t b, const int lane2)</para>
        <para>A64: INS Vd.D[lane1], Vn.D[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte,System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int16x8_t vcopyq_laneq_s16 (int16x8_t a, const int lane1, int16x8_t b, const int lane2)</para>
        <para>A64: INS Vd.H[lane1], Vn.H[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte,System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16x8_t vcopyq_lane_s16 (int16x8_t a, const int lane1, int16x4_t b, const int lane2)</para>
        <para>A64: INS Vd.H[lane1], Vn.H[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int32x4_t vcopyq_laneq_s32 (int32x4_t a, const int lane1, int32x4_t b, const int lane2)</para>
        <para>A64: INS Vd.S[lane1], Vn.S[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte,System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32x4_t vcopyq_lane_s32 (int32x4_t a, const int lane1, int32x2_t b, const int lane2)</para>
        <para>A64: INS Vd.S[lane1], Vn.S[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte,System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>int64x2_t vcopyq_laneq_s64 (int64x2_t a, const int lane1, int64x2_t b, const int lane2)</para>
        <para>A64: INS Vd.D[lane1], Vn.D[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte,System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>int8x16_t vcopyq_laneq_s8 (int8x16_t a, const int lane1, int8x16_t b, const int lane2)</para>
        <para>A64: INS Vd.B[lane1], Vn.B[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte,System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>int8x16_t vcopyq_lane_s8 (int8x16_t a, const int lane1, int8x8_t b, const int lane2)</para>
        <para>A64: INS Vd.B[lane1], Vn.B[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Byte,System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>float32x4_t vcopyq_laneq_f32 (float32x4_t a, const int lane1, float32x4_t b, const int lane2)</para>
        <para>A64: INS Vd.S[lane1], Vn.S[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Byte,System.Runtime.Intrinsics.Vector64{System.Single},System.Byte)">
      <summary>
        <para>float32x4_t vcopyq_lane_f32 (float32x4_t a, const int lane1, float32x2_t b, const int lane2)</para>
        <para>A64: INS Vd.S[lane1], Vn.S[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte,System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x8_t vcopyq_laneq_u16 (uint16x8_t a, const int lane1, uint16x8_t b, const int lane2)</para>
        <para>A64: INS Vd.H[lane1], Vn.H[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte,System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x8_t vcopyq_lane_u16 (uint16x8_t a, const int lane1, uint16x4_t b, const int lane2)</para>
        <para>A64: INS Vd.H[lane1], Vn.H[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte,System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x4_t vcopyq_laneq_u32 (uint32x4_t a, const int lane1, uint32x4_t b, const int lane2)</para>
        <para>A64: INS Vd.S[lane1], Vn.S[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte,System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x4_t vcopyq_lane_u32 (uint32x4_t a, const int lane1, uint32x2_t b, const int lane2)</para>
        <para>A64: INS Vd.S[lane1], Vn.S[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte,System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>uint64x2_t vcopyq_laneq_u64 (uint64x2_t a, const int lane1, uint64x2_t b, const int lane2)</para>
        <para>A64: INS Vd.D[lane1], Vn.D[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte,System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>uint8x8_t vcopy_laneq_u8 (uint8x8_t a, const int lane1, uint8x16_t b, const int lane2)</para>
        <para>A64: INS Vd.B[lane1], Vn.B[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte,System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte)">
      <summary>
        <para>uint8x8_t vcopy_lane_u8 (uint8x8_t a, const int lane1, uint8x8_t b, const int lane2)</para>
        <para>A64: INS Vd.B[lane1], Vn.B[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte,System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>int16x4_t vcopy_laneq_s16 (int16x4_t a, const int lane1, int16x8_t b, const int lane2)</para>
        <para>A64: INS Vd.H[lane1], Vn.H[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte,System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16x4_t vcopy_lane_s16 (int16x4_t a, const int lane1, int16x4_t b, const int lane2)</para>
        <para>A64: INS Vd.H[lane1], Vn.H[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int32x2_t vcopy_laneq_s32 (int32x2_t a, const int lane1, int32x4_t b, const int lane2)</para>
        <para>A64: INS Vd.S[lane1], Vn.S[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte,System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32x2_t vcopy_lane_s32 (int32x2_t a, const int lane1, int32x2_t b, const int lane2)</para>
        <para>A64: INS Vd.S[lane1], Vn.S[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte,System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>int8x8_t vcopy_laneq_s8 (int8x8_t a, const int lane1, int8x16_t b, const int lane2)</para>
        <para>A64: INS Vd.B[lane1], Vn.B[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte,System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>int8x8_t vcopy_lane_s8 (int8x8_t a, const int lane1, int8x8_t b, const int lane2)</para>
        <para>A64: INS Vd.B[lane1], Vn.B[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Byte,System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>float32x2_t vcopy_laneq_f32 (float32x2_t a, const int lane1, float32x4_t b, const int lane2)</para>
        <para>A64: INS Vd.S[lane1], Vn.S[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Byte,System.Runtime.Intrinsics.Vector64{System.Single},System.Byte)">
      <summary>
        <para>float32x2_t vcopy_lane_f32 (float32x2_t a, const int lane1, float32x2_t b, const int lane2)</para>
        <para>A64: INS Vd.S[lane1], Vn.S[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte,System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x4_t vcopy_laneq_u16 (uint16x4_t a, const int lane1, uint16x8_t b, const int lane2)</para>
        <para>A64: INS Vd.H[lane1], Vn.H[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte,System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16x4_t vcopy_lane_u16 (uint16x4_t a, const int lane1, uint16x4_t b, const int lane2)</para>
        <para>A64: INS Vd.H[lane1], Vn.H[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte,System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x2_t vcopy_laneq_u32 (uint32x2_t a, const int lane1, uint32x4_t b, const int lane2)</para>
        <para>A64: INS Vd.S[lane1], Vn.S[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.InsertSelectedScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte,System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32x2_t vcopy_lane_u32 (uint32x2_t a, const int lane1, uint32x2_t b, const int lane2)</para>
        <para>A64: INS Vd.S[lane1], Vn.S[lane2]</para>
      </summary>
      <param name="result" />
      <param name="resultIndex" />
      <param name="value" />
      <param name="valueIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.LoadAndReplicateToVector128(System.Double*)">
      <summary>
        <para>float64x2_t vld1q_dup_f64 (float64_t const * ptr)</para>
        <para>A64: LD1R { Vt.2D }, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.LoadAndReplicateToVector128(System.Int64*)">
      <summary>
        <para>int64x2_t vld1q_dup_s64 (int64_t const * ptr)</para>
        <para>A64: LD1R { Vt.2D }, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.LoadAndReplicateToVector128(System.UInt64*)">
      <summary>
        <para>uint64x2_t vld1q_dup_u64 (uint64_t const * ptr)</para>
        <para>A64: LD1R { Vt.2D }, [Xn]</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.Max(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vmaxq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FMAX Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxAcross(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8_t vmaxvq_u8 (uint8x16_t a)</para>
        <para>A64: UMAXV Bd, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxAcross(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16_t vmaxvq_s16 (int16x8_t a)</para>
        <para>A64: SMAXV Hd, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxAcross(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32_t vmaxvq_s32 (int32x4_t a)</para>
        <para>A64: SMAXV Sd, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxAcross(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8_t vmaxvq_s8 (int8x16_t a)</para>
        <para>A64: SMAXV Bd, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxAcross(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32_t vmaxvq_f32 (float32x4_t a)</para>
        <para>A64: FMAXV Sd, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxAcross(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16_t vmaxvq_u16 (uint16x8_t a)</para>
        <para>A64: UMAXV Hd, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxAcross(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32_t vmaxvq_u32 (uint32x4_t a)</para>
        <para>A64: UMAXV Sd, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxAcross(System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8_t vmaxv_u8 (uint8x8_t a)</para>
        <para>A64: UMAXV Bd, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxAcross(System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16_t vmaxv_s16 (int16x4_t a)</para>
        <para>A64: SMAXV Hd, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxAcross(System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8_t vmaxv_s8 (int8x8_t a)</para>
        <para>A64: SMAXV Bd, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxAcross(System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16_t vmaxv_u16 (uint16x4_t a)</para>
        <para>A64: UMAXV Hd, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxNumber(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vmaxnmq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FMAXNM Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxNumberAcross(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32_t vmaxnmvq_f32 (float32x4_t a)</para>
        <para>A64: FMAXNMV Sd, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxNumberPairwise(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vpmaxnmq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FMAXNMP Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxNumberPairwise(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vpmaxnmq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A64: FMAXNMP Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxNumberPairwise(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vpmaxnm_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A64: FMAXNMP Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxNumberPairwiseScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64_t vpmaxnmqd_f64 (float64x2_t a)</para>
        <para>A64: FMAXNMP Dd, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxNumberPairwiseScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vpmaxnms_f32 (float32x2_t a)</para>
        <para>A64: FMAXNMP Sd, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxPairwise(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vpmaxq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A64: UMAXP Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxPairwise(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vpmaxq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FMAXP Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxPairwise(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vpmaxq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A64: SMAXP Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxPairwise(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vpmaxq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A64: SMAXP Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxPairwise(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vpmaxq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A64: SMAXP Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxPairwise(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vpmaxq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A64: FMAXP Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxPairwise(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vpmaxq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A64: UMAXP Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxPairwise(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vpmaxq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A64: UMAXP Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxPairwiseScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64_t vpmaxqd_f64 (float64x2_t a)</para>
        <para>A64: FMAXP Dd, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxPairwiseScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vpmaxs_f32 (float32x2_t a)</para>
        <para>A64: FMAXP Sd, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vmax_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A64: FMAX Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MaxScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vmaxs_f32 (float32_t a, float32_t b)</para>
        <para>A64: FMAX Sd, Sn, Sm The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.Min(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vminq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FMIN Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinAcross(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8_t vminvq_u8 (uint8x16_t a)</para>
        <para>A64: UMINV Bd, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinAcross(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16_t vminvq_s16 (int16x8_t a)</para>
        <para>A64: SMINV Hd, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinAcross(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32_t vaddvq_s32 (int32x4_t a)</para>
        <para>A64: SMINV Sd, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinAcross(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8_t vminvq_s8 (int8x16_t a)</para>
        <para>A64: SMINV Bd, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinAcross(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32_t vminvq_f32 (float32x4_t a)</para>
        <para>A64: FMINV Sd, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinAcross(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16_t vminvq_u16 (uint16x8_t a)</para>
        <para>A64: UMINV Hd, Vn.8H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinAcross(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32_t vminvq_u32 (uint32x4_t a)</para>
        <para>A64: UMINV Sd, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinAcross(System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8_t vminv_u8 (uint8x8_t a)</para>
        <para>A64: UMINV Bd, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinAcross(System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16_t vminv_s16 (int16x4_t a)</para>
        <para>A64: SMINV Hd, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinAcross(System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8_t vminv_s8 (int8x8_t a)</para>
        <para>A64: SMINV Bd, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinAcross(System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16_t vminv_u16 (uint16x4_t a)</para>
        <para>A64: UMINV Hd, Vn.4H</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinNumber(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vminnmq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FMINNM Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinNumberAcross(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32_t vminnmvq_f32 (float32x4_t a)</para>
        <para>A64: FMINNMV Sd, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinNumberPairwise(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vpminnmq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FMINNMP Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinNumberPairwise(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vpminnmq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A64: FMINNMP Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinNumberPairwise(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vpminnm_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A64: FMINNMP Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinNumberPairwiseScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64_t vpminnmqd_f64 (float64x2_t a)</para>
        <para>A64: FMINNMP Dd, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinNumberPairwiseScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vpminnms_f32 (float32x2_t a)</para>
        <para>A64: FMINNMP Sd, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinPairwise(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vpminq_u8 (uint8x16_t a, uint8x16_t b)</para>
        <para>A64: UMINP Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinPairwise(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vpminq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FMINP Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinPairwise(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vpminq_s16 (int16x8_t a, int16x8_t b)</para>
        <para>A64: SMINP Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinPairwise(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vpminq_s32 (int32x4_t a, int32x4_t b)</para>
        <para>A64: SMINP Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinPairwise(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vpminq_s8 (int8x16_t a, int8x16_t b)</para>
        <para>A64: SMINP Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinPairwise(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vpminq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A64: FMINP Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinPairwise(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vpminq_u16 (uint16x8_t a, uint16x8_t b)</para>
        <para>A64: UMINP Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinPairwise(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vpminq_u32 (uint32x4_t a, uint32x4_t b)</para>
        <para>A64: UMINP Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinPairwiseScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64_t vpminqd_f64 (float64x2_t a)</para>
        <para>A64: FMINP Dd, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinPairwiseScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vpmins_f32 (float32x2_t a)</para>
        <para>A64: FMINP Sd, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vmin_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A64: FMIN Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MinScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vmins_f32 (float32_t a, float32_t b)</para>
        <para>A64: FMIN Sd, Sn, Sm The above native signature does not exist. We provide this additional overload for consistency with the other scalar APIs.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.Multiply(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vmulq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FMUL Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyByScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x2_t vmulq_n_f64 (float64x2_t a, float64_t b)</para>
        <para>A64: FMUL Vd.2D, Vn.2D, Vm.D[0]</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>float64x2_t vmulq_laneq_f64 (float64x2_t a, float64x2_t v, const int lane)</para>
        <para>A64: FMUL Vd.2D, Vn.2D, Vm.D[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingSaturateHighScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int16_t vqdmulhh_s16 (int16_t a, int16_t b) A64: SQDMULH Hd, Hn, Hm</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingSaturateHighScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int32_t vqdmulhs_s32 (int32_t a, int32_t b) A64: SQDMULH Sd, Sn, Sm</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingScalarBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int16_t vqdmulhh_laneq_s16 (int16_t a, int16x8_t v, const int lane) A64: SQDMULH Hd, Hn, Vm.H[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingScalarBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int16_t vqdmulhh_lane_s16 (int16_t a, int16x4_t v, const int lane) A64: SQDMULH Hd, Hn, Vm.H[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingScalarBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int32_t vqdmulhs_laneq_s32 (int32_t a, int32x4_t v, const int lane) A64: SQDMULH Sd, Sn, Vm.S[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingScalarBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int32_t vqdmulhs_lane_s32 (int32_t a, int32x2_t v, const int lane) A64: SQDMULH Sd, Sn, Vm.S[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingWideningAndAddSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int32_t vqdmlalh_s16 (int32_t a, int16_t b, int16_t c) A64: SQDMLAL Sd, Hn, Hm</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingWideningAndAddSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int64_t vqdmlals_s32 (int64_t a, int32_t b, int32_t c) A64: SQDMLAL Dd, Sn, Sm</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingWideningAndSubtractSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int32_t vqdmlslh_s16 (int32_t a, int16_t b, int16_t c) A64: SQDMLSL Sd, Hn, Hm</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingWideningAndSubtractSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int64_t vqdmlsls_s32 (int64_t a, int32_t b, int32_t c) A64: SQDMLSL Dd, Sn, Sm</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingWideningSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int32_t vqdmullh_s16 (int16_t a, int16_t b) A64: SQDMULL Sd, Hn, Hm</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingWideningSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int64_t vqdmulls_s32 (int32_t a, int32_t b) A64: SQDMULL Dd, Sn, Sm</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingWideningSaturateScalarBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int32_t vqdmullh_laneq_s16 (int16_t a, int16x8_t v, const int lane) A64: SQDMULL Sd, Hn, Vm.H[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingWideningSaturateScalarBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int32_t vqdmullh_lane_s16 (int16_t a, int16x4_t v, const int lane) A64: SQDMULL Sd, Hn, Vm.H[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingWideningSaturateScalarBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int64_t vqdmulls_laneq_s32 (int32_t a, int32x4_t v, const int lane) A64: SQDMULL Dd, Sn, Vm.S[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingWideningSaturateScalarBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int64_t vqdmulls_lane_s32 (int32_t a, int32x2_t v, const int lane) A64: SQDMULL Dd, Sn, Vm.S[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingWideningScalarBySelectedScalarAndAddSaturate(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int32_t vqdmlalh_laneq_s16 (int32_t a, int16_t b, int16x8_t v, const int lane) A64: SQDMLAL Sd, Hn, Vm.H[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingWideningScalarBySelectedScalarAndAddSaturate(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int32_t vqdmlalh_lane_s16 (int32_t a, int16_t b, int16x4_t v, const int lane) A64: SQDMLAL Sd, Hn, Vm.H[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingWideningScalarBySelectedScalarAndAddSaturate(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int64_t vqdmlals_laneq_s32 (int64_t a, int32_t b, int32x4_t v, const int lane) A64: SQDMLAL Dd, Sn, Vm.S[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingWideningScalarBySelectedScalarAndAddSaturate(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int64_t vqdmlals_lane_s32 (int64_t a, int32_t b, int32x2_t v, const int lane) A64: SQDMLAL Dd, Sn, Vm.S[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingWideningScalarBySelectedScalarAndSubtractSaturate(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int32_t vqdmlslh_laneq_s16 (int32_t a, int16_t b, int16x8_t v, const int lane) A64: SQDMLSL Sd, Hn, Vm.H[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingWideningScalarBySelectedScalarAndSubtractSaturate(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int32_t vqdmlslh_lane_s16 (int32_t a, int16_t b, int16x4_t v, const int lane) A64: SQDMLSL Sd, Hn, Vm.H[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingWideningScalarBySelectedScalarAndSubtractSaturate(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int64_t vqdmlsls_laneq_s32 (int64_t a, int32_t b, int32x4_t v, const int lane) A64: SQDMLSL Dd, Sn, Vm.S[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyDoublingWideningScalarBySelectedScalarAndSubtractSaturate(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int64_t vqdmlsls_lane_s32 (int64_t a, int32_t b, int32x2_t v, const int lane) A64: SQDMLSL Dd, Sn, Vm.S[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyExtended(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vmulxq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FMULX Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyExtended(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vmulxq_f32 (float32x4_t a, float32x4_t b)</para>
        <para>A64: FMULX Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyExtended(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vmulx_f32 (float32x2_t a, float32x2_t b)</para>
        <para>A64: FMULX Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyExtendedByScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x2_t vmulxq_lane_f64 (float64x2_t a, float64x1_t v, const int lane)</para>
        <para>A64: FMULX Vd.2D, Vn.2D, Vm.D[0]</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyExtendedBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>float64x2_t vmulxq_laneq_f64 (float64x2_t a, float64x2_t v, const int lane)</para>
        <para>A64: FMULX Vd.2D, Vn.2D, Vm.D[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyExtendedBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>float32x4_t vmulxq_laneq_f32 (float32x4_t a, float32x4_t v, const int lane)</para>
        <para>A64: FMULX Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyExtendedBySelectedScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Byte)">
      <summary>
        <para>float32x4_t vmulxq_lane_f32 (float32x4_t a, float32x2_t v, const int lane)</para>
        <para>A64: FMULX Vd.4S, Vn.4S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyExtendedBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>float32x2_t vmulx_laneq_f32 (float32x2_t a, float32x4_t v, const int lane)</para>
        <para>A64: FMULX Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyExtendedBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Byte)">
      <summary>
        <para>float32x2_t vmulx_lane_f32 (float32x2_t a, float32x2_t v, const int lane)</para>
        <para>A64: FMULX Vd.2S, Vn.2S, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyExtendedScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vmulx_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A64: FMULX Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyExtendedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vmulxs_f32 (float32_t a, float32_t b)</para>
        <para>A64: FMULX Sd, Sn, Sm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyExtendedScalarBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>float64_t vmulxd_laneq_f64 (float64_t a, float64x2_t v, const int lane)</para>
        <para>A64: FMULX Dd, Dn, Vm.D[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyExtendedScalarBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>float32_t vmulxs_laneq_f32 (float32_t a, float32x4_t v, const int lane)</para>
        <para>A64: FMULX Sd, Sn, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyExtendedScalarBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single},System.Byte)">
      <summary>
        <para>float32_t vmulxs_lane_f32 (float32_t a, float32x2_t v, const int lane)</para>
        <para>A64: FMULX Sd, Sn, Vm.S[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyRoundedDoublingSaturateHighScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int16_t vqrdmulhh_s16 (int16_t a, int16_t b) A64: SQRDMULH Hd, Hn, Hm</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyRoundedDoublingSaturateHighScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int32_t vqrdmulhs_s32 (int32_t a, int32_t b) A64: SQRDMULH Sd, Sn, Sm</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyRoundedDoublingScalarBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int16_t vqrdmulhh_laneq_s16 (int16_t a, int16x8_t v, const int lane) A64: SQRDMULH Hd, Hn, Vm.H[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyRoundedDoublingScalarBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int16_t vqrdmulhh_lane_s16 (int16_t a, int16x4_t v, const int lane) A64: SQRDMULH Hd, Hn, Vm.H[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyRoundedDoublingScalarBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int32_t vqrdmulhs_laneq_s32 (int32_t a, int32x4_t v, const int lane) A64: SQRDMULH Sd, Sn, Vm.S[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyRoundedDoublingScalarBySelectedScalarSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int32_t vqrdmulhs_lane_s32 (int32_t a, int32x2_t v, const int lane) A64: SQRDMULH Sd, Sn, Vm.S[lane]</summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.MultiplyScalarBySelectedScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>float64_t vmuld_laneq_f64 (float64_t a, float64x2_t v, const int lane)</para>
        <para>A64: FMUL Dd, Dn, Vm.D[lane]</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.Negate(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vnegq_f64 (float64x2_t a)</para>
        <para>A64: FNEG Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.Negate(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vnegq_s64 (int64x2_t a)</para>
        <para>A64: NEG Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.NegateSaturate(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vqnegq_s64 (int64x2_t a)</para>
        <para>A64: SQNEG Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.NegateSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16_t vqnegh_s16 (int16_t a)</para>
        <para>A64: SQNEG Hd, Hn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.NegateSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32_t vqnegs_s32 (int32_t a)</para>
        <para>A64: SQNEG Sd, Sn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.NegateSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>int64_t vqnegd_s64 (int64_t a)</para>
        <para>A64: SQNEG Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.NegateSaturateScalar(System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8_t vqnegb_s8 (int8_t a)</para>
        <para>A64: SQNEG Bd, Bn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.NegateScalar(System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>int64x1_t vneg_s64 (int64x1_t a)</para>
        <para>A64: NEG Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ReciprocalEstimate(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vrecpeq_f64 (float64x2_t a)</para>
        <para>A64: FRECPE Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ReciprocalEstimateScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vrecpe_f64 (float64x1_t a)</para>
        <para>A64: FRECPE Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ReciprocalEstimateScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vrecpes_f32 (float32_t a)</para>
        <para>A64: FRECPE Sd, Sn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ReciprocalExponentScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64_t vrecpxd_f64 (float64_t a)</para>
        <para>A64: FRECPX Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ReciprocalExponentScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vrecpxs_f32 (float32_t a)</para>
        <para>A64: FRECPX Sd, Sn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ReciprocalSquareRootEstimate(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vrsqrteq_f64 (float64x2_t a)</para>
        <para>A64: FRSQRTE Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ReciprocalSquareRootEstimateScalar(System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vrsqrte_f64 (float64x1_t a)</para>
        <para>A64: FRSQRTE Dd, Dn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ReciprocalSquareRootEstimateScalar(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vrsqrtes_f32 (float32_t a)</para>
        <para>A64: FRSQRTE Sd, Sn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ReciprocalSquareRootStep(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vrsqrtsq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FRSQRTS Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ReciprocalSquareRootStepScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vrsqrts_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A64: FRSQRTS Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ReciprocalSquareRootStepScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vrsqrtss_f32 (float32_t a, float32_t b)</para>
        <para>A64: FRSQRTS Sd, Sn, Sm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ReciprocalStep(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vrecpsq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FRECPS Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ReciprocalStepScalar(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>
        <para>float64x1_t vrecps_f64 (float64x1_t a, float64x1_t b)</para>
        <para>A64: FRECPS Dd, Dn, Dm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ReciprocalStepScalar(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32_t vrecpss_f32 (float32_t a, float32_t b)</para>
        <para>A64: FRECPS Sd, Sn, Sm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ReverseElementBits(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vrbitq_u8 (uint8x16_t a)</para>
        <para>A64: RBIT Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ReverseElementBits(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vrbitq_s8 (int8x16_t a)</para>
        <para>A64: RBIT Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ReverseElementBits(System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vrbit_u8 (uint8x8_t a)</para>
        <para>A64: RBIT Vd.8B, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ReverseElementBits(System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vrbit_s8 (int8x8_t a)</para>
        <para>A64: RBIT Vd.8B, Vn.8B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.RoundAwayFromZero(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vrndaq_f64 (float64x2_t a)</para>
        <para>A64: FRINTA Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.RoundToNearest(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vrndnq_f64 (float64x2_t a)</para>
        <para>A64: FRINTN Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.RoundToNegativeInfinity(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vrndmq_f64 (float64x2_t a)</para>
        <para>A64: FRINTM Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.RoundToPositiveInfinity(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vrndpq_f64 (float64x2_t a)</para>
        <para>A64: FRINTP Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.RoundToZero(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vrndq_f64 (float64x2_t a)</para>
        <para>A64: FRINTZ Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftArithmeticRoundedSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16_t vqrshlh_s16 (int16_t a, int16_t b)</para>
        <para>A64: SQRSHL Hd, Hn, Hm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftArithmeticRoundedSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32_t vqrshls_s32 (int32_t a, int32_t b)</para>
        <para>A64: SQRSHL Sd, Sn, Sm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftArithmeticRoundedSaturateScalar(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8_t vqrshlb_s8 (int8_t a, int8_t b)</para>
        <para>A64: SQRSHL Bd, Bn, Bm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftArithmeticSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16_t vqshlh_s16 (int16_t a, int16_t b)</para>
        <para>A64: SQSHL Hd, Hn, Hm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftArithmeticSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32_t vqshls_s32 (int32_t a, int32_t b)</para>
        <para>A64: SQSHL Sd, Sn, Sm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftArithmeticSaturateScalar(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8_t vqshlb_s8 (int8_t a, int8_t b)</para>
        <para>A64: SQSHL Bd, Bn, Bm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLeftLogicalSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte)">
      <summary>
        <para>uint8_t vqshlb_n_u8 (uint8_t a, const int n)</para>
        <para>A64: UQSHL Bd, Bn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLeftLogicalSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int16_t vqshlh_n_s16 (int16_t a, const int n)</para>
        <para>A64: SQSHL Hd, Hn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLeftLogicalSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int32_t vqshls_n_s32 (int32_t a, const int n)</para>
        <para>A64: SQSHL Sd, Sn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLeftLogicalSaturateScalar(System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>int8_t vqshlb_n_s8 (int8_t a, const int n)</para>
        <para>A64: SQSHL Bd, Bn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLeftLogicalSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint16_t vqshlh_n_u16 (uint16_t a, const int n)</para>
        <para>A64: UQSHL Hd, Hn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLeftLogicalSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint32_t vqshls_n_u32 (uint32_t a, const int n)</para>
        <para>A64: UQSHL Sd, Sn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLeftLogicalSaturateUnsignedScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>uint16_t vqshluh_n_s16 (int16_t a, const int n)</para>
        <para>A64: SQSHLU Hd, Hn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLeftLogicalSaturateUnsignedScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>uint32_t vqshlus_n_s32 (int32_t a, const int n)</para>
        <para>A64: SQSHLU Sd, Sn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLeftLogicalSaturateUnsignedScalar(System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>
        <para>uint8_t vqshlub_n_s8 (int8_t a, const int n)</para>
        <para>A64: SQSHLU Bd, Bn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLogicalRoundedSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8_t vqrshlb_u8 (uint8_t a, int8_t b)</para>
        <para>A64: UQRSHL Bd, Bn, Bm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLogicalRoundedSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16_t vqrshlh_u16 (uint16_t a, int16_t b)</para>
        <para>A64: UQRSHL Hd, Hn, Hm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLogicalRoundedSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32_t vqrshls_u32 (uint32_t a, int32_t b)</para>
        <para>A64: UQRSHL Sd, Sn, Sm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLogicalRoundedSaturateScalar(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8_t vqrshlb_u8 (uint8_t a, int8_t b)</para>
        <para>A64: UQRSHL Bd, Bn, Bm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLogicalRoundedSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16_t vqrshlh_u16 (uint16_t a, int16_t b)</para>
        <para>A64: UQRSHL Hd, Hn, Hm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLogicalRoundedSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32_t vqrshls_u32 (uint32_t a, int32_t b)</para>
        <para>A64: UQRSHL Sd, Sn, Sm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLogicalSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8_t vqshlb_u8 (uint8_t a, int8_t b)</para>
        <para>A64: UQSHL Bd, Bn, Bm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLogicalSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16_t vqshlh_u16 (uint16_t a, int16_t b)</para>
        <para>A64: UQSHL Hd, Hn, Hm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLogicalSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32_t vqshls_u32 (uint32_t a, int32_t b)</para>
        <para>A64: UQSHL Sd, Sn, Sm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLogicalSaturateScalar(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>uint8_t vqshlb_u8 (uint8_t a, int8_t b)</para>
        <para>A64: UQSHL Bd, Bn, Bm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLogicalSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>uint16_t vqshlh_u16 (uint16_t a, int16_t b)</para>
        <para>A64: UQSHL Hd, Hn, Hm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftLogicalSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>uint32_t vqshls_u32 (uint32_t a, int32_t b)</para>
        <para>A64: UQSHL Sd, Sn, Sm</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightArithmeticNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int8_t vqshrnh_n_s16 (int16_t a, const int n)</para>
        <para>A64: SQSHRN Bd, Hn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightArithmeticNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int16_t vqshrns_n_s32 (int32_t a, const int n)</para>
        <para>A64: SQSHRN Hd, Sn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightArithmeticNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Byte)">
      <summary>
        <para>int32_t vqshrnd_n_s64 (int64_t a, const int n)</para>
        <para>A64: SQSHRN Sd, Dn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightArithmeticNarrowingSaturateUnsignedScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>uint8_t vqshrunh_n_s16 (int16_t a, const int n)</para>
        <para>A64: SQSHRUN Bd, Hn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightArithmeticNarrowingSaturateUnsignedScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>uint16_t vqshruns_n_s32 (int32_t a, const int n)</para>
        <para>A64: SQSHRUN Hd, Sn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightArithmeticNarrowingSaturateUnsignedScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Byte)">
      <summary>
        <para>uint32_t vqshrund_n_s64 (int64_t a, const int n)</para>
        <para>A64: SQSHRUN Sd, Dn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightArithmeticRoundedNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>int8_t vqrshrnh_n_s16 (int16_t a, const int n)</para>
        <para>A64: SQRSHRN Bd, Hn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightArithmeticRoundedNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>int16_t vqrshrns_n_s32 (int32_t a, const int n)</para>
        <para>A64: SQRSHRN Hd, Sn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightArithmeticRoundedNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Byte)">
      <summary>
        <para>int32_t vqrshrnd_n_s64 (int64_t a, const int n)</para>
        <para>A64: SQRSHRN Sd, Dn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightArithmeticRoundedNarrowingSaturateUnsignedScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>uint8_t vqrshrunh_n_s16 (int16_t a, const int n)</para>
        <para>A64: SQRSHRUN Bd, Hn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightArithmeticRoundedNarrowingSaturateUnsignedScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>uint16_t vqrshruns_n_s32 (int32_t a, const int n)</para>
        <para>A64: SQRSHRUN Hd, Sn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightArithmeticRoundedNarrowingSaturateUnsignedScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Byte)">
      <summary>
        <para>uint32_t vqrshrund_n_s64 (int64_t a, const int n)</para>
        <para>A64: SQRSHRUN Sd, Dn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightLogicalNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>uint8_t vqshrnh_n_u16 (uint16_t a, const int n)</para>
        <para>A64: UQSHRN Bd, Hn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightLogicalNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>uint16_t vqshrns_n_u32 (uint32_t a, const int n)</para>
        <para>A64: UQSHRN Hd, Sn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightLogicalNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Byte)">
      <summary>
        <para>uint32_t vqshrnd_n_u64 (uint64_t a, const int n)</para>
        <para>A64: UQSHRN Sd, Dn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightLogicalNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint8_t vqshrnh_n_u16 (uint16_t a, const int n)</para>
        <para>A64: UQSHRN Bd, Hn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightLogicalNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint16_t vqshrns_n_u32 (uint32_t a, const int n)</para>
        <para>A64: UQSHRN Hd, Sn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightLogicalNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Byte)">
      <summary>
        <para>uint32_t vqshrnd_n_u64 (uint64_t a, const int n)</para>
        <para>A64: UQSHRN Sd, Dn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightLogicalRoundedNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>
        <para>uint8_t vqrshrnh_n_u16 (uint16_t a, const int n)</para>
        <para>A64: UQRSHRN Bd, Hn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightLogicalRoundedNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>
        <para>uint16_t vqrshrns_n_u32 (uint32_t a, const int n)</para>
        <para>A64: UQRSHRN Hd, Sn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightLogicalRoundedNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int64},System.Byte)">
      <summary>
        <para>uint32_t vqrshrnd_n_u64 (uint64_t a, const int n)</para>
        <para>A64: UQRSHRN Sd, Dn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightLogicalRoundedNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Byte)">
      <summary>
        <para>uint8_t vqrshrnh_n_u16 (uint16_t a, const int n)</para>
        <para>A64: UQRSHRN Bd, Hn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightLogicalRoundedNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Byte)">
      <summary>
        <para>uint16_t vqrshrns_n_u32 (uint32_t a, const int n)</para>
        <para>A64: UQRSHRN Hd, Sn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ShiftRightLogicalRoundedNarrowingSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Byte)">
      <summary>
        <para>uint32_t vqrshrnd_n_u64 (uint64_t a, const int n)</para>
        <para>A64: UQRSHRN Sd, Dn, #n</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.Sqrt(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vsqrtq_f64 (float64x2_t a)</para>
        <para>A64: FSQRT Vd.2D, Vn.2D</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.Sqrt(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vsqrtq_f32 (float32x4_t a)</para>
        <para>A64: FSQRT Vd.4S, Vn.4S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.Sqrt(System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vsqrt_f32 (float32x2_t a)</para>
        <para>A64: FSQRT Vd.2S, Vn.2S</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Byte*,System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>A64: STP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Byte*,System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>A64: STP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>A64: STP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Double*,System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>A64: STP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Int16*,System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>A64: STP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Int16*,System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>A64: STP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>A64: STP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Int32*,System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>A64: STP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>A64: STP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Int64*,System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>A64: STP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.SByte*,System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>A64: STP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.SByte*,System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>A64: STP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>A64: STP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Single*,System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>A64: STP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.UInt16*,System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>A64: STP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.UInt16*,System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>A64: STP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>A64: STP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.UInt32*,System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>A64: STP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>A64: STP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.UInt64*,System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>A64: STP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.Byte*,System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>A64: STNP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.Byte*,System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>A64: STNP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>A64: STNP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.Double*,System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>A64: STNP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.Int16*,System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>A64: STNP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.Int16*,System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>A64: STNP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>A64: STNP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.Int32*,System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>A64: STNP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>A64: STNP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.Int64*,System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>A64: STNP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.SByte*,System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>A64: STNP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.SByte*,System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>A64: STNP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>A64: STNP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.Single*,System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>A64: STNP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.UInt16*,System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>A64: STNP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.UInt16*,System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>A64: STNP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>A64: STNP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.UInt32*,System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>A64: STNP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>A64: STNP Qt1, Qt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairNonTemporal(System.UInt64*,System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>A64: STNP Dt1, Dt2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairScalar(System.Int32*,System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>A64: STP St1, St2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairScalar(System.Single*,System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>A64: STP St1, St2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairScalar(System.UInt32*,System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>A64: STP St1, St2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairScalarNonTemporal(System.Int32*,System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>A64: STNP St1, St2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairScalarNonTemporal(System.Single*,System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>A64: STNP St1, St2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePairScalarNonTemporal(System.UInt32*,System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>A64: STNP St1, St2, [Xn]</summary>
      <param name="address" />
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.Subtract(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vsubq_f64 (float64x2_t a, float64x2_t b)</para>
        <para>A64: FSUB Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.SubtractSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8_t vqsubb_u8 (uint8_t a, uint8_t b)</para>
        <para>A64: UQSUB Bd, Bn, Bm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.SubtractSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16_t vqsubh_s16 (int16_t a, int16_t b)</para>
        <para>A64: SQSUB Hd, Hn, Hm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.SubtractSaturateScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32_t vqsubs_s32 (int32_t a, int32_t b)</para>
        <para>A64: SQSUB Sd, Sn, Sm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.SubtractSaturateScalar(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8_t vqsubb_s8 (int8_t a, int8_t b)</para>
        <para>A64: SQSUB Bd, Bn, Bm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.SubtractSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16_t vqsubh_u16 (uint16_t a, uint16_t b)</para>
        <para>A64: UQSUB Hd, Hn, Hm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.SubtractSaturateScalar(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32_t vqsubs_u32 (uint32_t a, uint32_t b)</para>
        <para>A64: UQSUB Sd, Sn, Sm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeEven(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vtrn1q_u8(uint8x16_t a, uint8x16_t b)</para>
        <para>A64: TRN1 Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeEven(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vtrn1q_f64(float64x2_t a, float64x2_t b)</para>
        <para>A64: TRN1 Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeEven(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vtrn1q_s16(int16x8_t a, int16x8_t b)</para>
        <para>A64: TRN1 Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeEven(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vtrn1q_s32(int32x4_t a, int32x4_t b)</para>
        <para>A64: TRN1 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeEven(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vtrn1q_s64(int64x2_t a, int64x2_t b)</para>
        <para>A64: TRN1 Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeEven(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vtrn1q_u8(int8x16_t a, int8x16_t b)</para>
        <para>A64: TRN1 Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeEven(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vtrn1q_f32(float32x4_t a, float32x4_t b)</para>
        <para>A64: TRN1 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeEven(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vtrn1q_u16(uint16x8_t a, uint16x8_t b)</para>
        <para>A64: TRN1 Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeEven(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vtrn1q_u32(uint32x4_t a, uint32x4_t b)</para>
        <para>A64: TRN1 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeEven(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vtrn1q_u64(uint64x2_t a, uint64x2_t b)</para>
        <para>A64: TRN1 Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeEven(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vtrn1_u8(uint8x8_t a, uint8x8_t b)</para>
        <para>A64: TRN1 Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeEven(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vtrn1_s16(int16x4_t a, int16x4_t b)</para>
        <para>A64: TRN1 Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeEven(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vtrn1_s32(int32x2_t a, int32x2_t b)</para>
        <para>A64: TRN1 Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeEven(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vtrn1_s8(int8x8_t a, int8x8_t b)</para>
        <para>A64: TRN1 Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeEven(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vtrn1_f32(float32x2_t a, float32x2_t b)</para>
        <para>A64: TRN1 Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeEven(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vtrn1_u16(uint16x4_t a, uint16x4_t b)</para>
        <para>A64: TRN1 Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeEven(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vtrn1_u32(uint32x2_t a, uint32x2_t b)</para>
        <para>A64: TRN1 Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeOdd(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vtrn2q_u8(uint8x16_t a, uint8x16_t b)</para>
        <para>A64: TRN2 Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeOdd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vtrn2q_f64(float64x2_t a, float64x2_t b)</para>
        <para>A64: TRN2 Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeOdd(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vtrn2q_s16(int16x8_t a, int16x8_t b)</para>
        <para>A64: TRN2 Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeOdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vtrn2q_s32(int32x4_t a, int32x4_t b)</para>
        <para>A64: TRN2 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeOdd(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vtrn2q_s64(int64x2_t a, int64x2_t b)</para>
        <para>A64: TRN2 Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeOdd(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vtrn2q_u8(int8x16_t a, int8x16_t b)</para>
        <para>A64: TRN2 Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeOdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vtrn2q_f32(float32x4_t a, float32x4_t b)</para>
        <para>A64: TRN2 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeOdd(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vtrn2q_u16(uint16x8_t a, uint16x8_t b)</para>
        <para>A64: TRN2 Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeOdd(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vtrn1q_u32(uint32x4_t a, uint32x4_t b)</para>
        <para>A64: TRN1 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeOdd(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vtrn1q_u64(uint64x2_t a, uint64x2_t b)</para>
        <para>A64: TRN1 Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeOdd(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vtrn2_u8(uint8x8_t a, uint8x8_t b)</para>
        <para>A64: TRN2 Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeOdd(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vtrn2_s16(int16x4_t a, int16x4_t b)</para>
        <para>A64: TRN2 Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeOdd(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vtrn2_s32(int32x2_t a, int32x2_t b)</para>
        <para>A64: TRN2 Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeOdd(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vtrn2_s8(int8x8_t a, int8x8_t b)</para>
        <para>A64: TRN2 Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeOdd(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vtrn2_f32(float32x2_t a, float32x2_t b)</para>
        <para>A64: TRN2 Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeOdd(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vtrn2_u16(uint16x4_t a, uint16x4_t b)</para>
        <para>A64: TRN2 Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.TransposeOdd(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vtrn2_u32(uint32x2_t a, uint32x2_t b)</para>
        <para>A64: TRN2 Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipEven(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vuzp1q_u8(uint8x16_t a, uint8x16_t b)</para>
        <para>A64: UZP1 Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipEven(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vuzp1q_f64(float64x2_t a, float64x2_t b)</para>
        <para>A64: UZP1 Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipEven(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vuzp1q_s16(int16x8_t a, int16x8_t b)</para>
        <para>A64: UZP1 Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipEven(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vuzp1q_s32(int32x4_t a, int32x4_t b)</para>
        <para>A64: UZP1 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipEven(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vuzp1q_s64(int64x2_t a, int64x2_t b)</para>
        <para>A64: UZP1 Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipEven(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vuzp1q_u8(int8x16_t a, int8x16_t b)</para>
        <para>A64: UZP1 Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipEven(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vuzp1q_f32(float32x4_t a, float32x4_t b)</para>
        <para>A64: UZP1 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipEven(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vuzp1q_u16(uint16x8_t a, uint16x8_t b)</para>
        <para>A64: UZP1 Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipEven(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vuzp1q_u32(uint32x4_t a, uint32x4_t b)</para>
        <para>A64: UZP1 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipEven(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vuzp1q_u64(uint64x2_t a, uint64x2_t b)</para>
        <para>A64: UZP1 Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipEven(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vuzp1_u8(uint8x8_t a, uint8x8_t b)</para>
        <para>A64: UZP1 Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipEven(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vuzp1_s16(int16x4_t a, int16x4_t b)</para>
        <para>A64: UZP1 Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipEven(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vuzp1_s32(int32x2_t a, int32x2_t b)</para>
        <para>A64: UZP1 Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipEven(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vuzp1_s8(int8x8_t a, int8x8_t b)</para>
        <para>A64: UZP1 Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipEven(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vuzp1_f32(float32x2_t a, float32x2_t b)</para>
        <para>A64: UZP1 Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipEven(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vuzp1_u16(uint16x4_t a, uint16x4_t b)</para>
        <para>A64: UZP1 Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipEven(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vuzp1_u32(uint32x2_t a, uint32x2_t b)</para>
        <para>A64: UZP1 Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipOdd(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vuzp2q_u8(uint8x16_t a, uint8x16_t b)</para>
        <para>A64: UZP2 Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipOdd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vuzp2q_f64(float64x2_t a, float64x2_t b)</para>
        <para>A64: UZP2 Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipOdd(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vuzp2q_s16(int16x8_t a, int16x8_t b)</para>
        <para>A64: UZP2 Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipOdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vuzp2q_s32(int32x4_t a, int32x4_t b)</para>
        <para>A64: UZP2 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipOdd(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vuzp2q_s64(int64x2_t a, int64x2_t b)</para>
        <para>A64: UZP2 Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipOdd(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vuzp2q_u8(int8x16_t a, int8x16_t b)</para>
        <para>A64: UZP2 Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipOdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vuzp2_f32(float32x4_t a, float32x4_t b)</para>
        <para>A64: UZP2 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipOdd(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vuzp2q_u16(uint16x8_t a, uint16x8_t b)</para>
        <para>A64: UZP2 Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipOdd(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vuzp2q_u32(uint32x4_t a, uint32x4_t b)</para>
        <para>A64: UZP2 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipOdd(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vuzp2q_u64(uint64x2_t a, uint64x2_t b)</para>
        <para>A64: UZP2 Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipOdd(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vuzp2_u8(uint8x8_t a, uint8x8_t b)</para>
        <para>A64: UZP2 Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipOdd(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vuzp2_s16(int16x4_t a, int16x4_t b)</para>
        <para>A64: UZP2 Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipOdd(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vuzp2_s32(int32x2_t a, int32x2_t b)</para>
        <para>A64: UZP2 Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipOdd(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vuzp2_s8(int8x8_t a, int8x8_t b)</para>
        <para>A64: UZP2 Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipOdd(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vuzp2_f32(float32x2_t a, float32x2_t b)</para>
        <para>A64: UZP2 Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipOdd(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vuzp2_u16(uint16x4_t a, uint16x4_t b)</para>
        <para>A64: UZP2 Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.UnzipOdd(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vuzp2_u32(uint32x2_t a, uint32x2_t b)</para>
        <para>A64: UZP2 Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.VectorTableLookup(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vqvtbl1q_u8(uint8x16_t t, uint8x16_t idx)</para>
        <para>A64: TBL Vd.16B, {Vn.16B}, Vm.16B</para>
      </summary>
      <param name="table" />
      <param name="byteIndexes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.VectorTableLookup(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vqvtbl1q_s8(int8x16_t t, uint8x16_t idx)</para>
        <para>A64: TBL Vd.16B, {Vn.16B}, Vm.16B</para>
      </summary>
      <param name="table" />
      <param name="byteIndexes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.VectorTableLookupExtension(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vqvtbx1q_u8(uint8x16_t r, int8x16_t t, uint8x16_t idx)</para>
        <para>A64: TBX Vd.16B, {Vn.16B}, Vm.16B</para>
      </summary>
      <param name="defaultValues" />
      <param name="table" />
      <param name="byteIndexes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.VectorTableLookupExtension(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vqvtbx1q_s8(int8x16_t r, int8x16_t t, uint8x16_t idx)</para>
        <para>A64: TBX Vd.16B, {Vn.16B}, Vm.16B</para>
      </summary>
      <param name="defaultValues" />
      <param name="table" />
      <param name="byteIndexes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipHigh(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vzip2q_u8(uint8x16_t a, uint8x16_t b)</para>
        <para>A64: ZIP2 Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipHigh(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vzip2q_f64(float64x2_t a, float64x2_t b)</para>
        <para>A64: ZIP2 Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vzip2q_s16(int16x8_t a, int16x8_t b)</para>
        <para>A64: ZIP2 Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipHigh(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vzip2q_s32(int32x4_t a, int32x4_t b)</para>
        <para>A64: ZIP2 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipHigh(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vzip2q_s64(int64x2_t a, int64x2_t b)</para>
        <para>A64: ZIP2 Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipHigh(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vzip2q_u8(int8x16_t a, int8x16_t b)</para>
        <para>A64: ZIP2 Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipHigh(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vzip2q_f32(float32x4_t a, float32x4_t b)</para>
        <para>A64: ZIP2 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipHigh(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vzip2q_u16(uint16x8_t a, uint16x8_t b)</para>
        <para>A64: ZIP2 Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipHigh(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vzip2q_u32(uint32x4_t a, uint32x4_t b)</para>
        <para>A64: ZIP2 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipHigh(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vzip2q_u64(uint64x2_t a, uint64x2_t b)</para>
        <para>A64: ZIP2 Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipHigh(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vzip2_u8(uint8x8_t a, uint8x8_t b)</para>
        <para>A64: ZIP2 Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vzip2_s16(int16x4_t a, int16x4_t b)</para>
        <para>A64: ZIP2 Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vzip2_s32(int32x2_t a, int32x2_t b)</para>
        <para>A64: ZIP2 Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipHigh(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vzip2_s8(int8x8_t a, int8x8_t b)</para>
        <para>A64: ZIP2 Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipHigh(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vzip2_f32(float32x2_t a, float32x2_t b)</para>
        <para>A64: ZIP2 Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipHigh(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vzip2_u16(uint16x4_t a, uint16x4_t b)</para>
        <para>A64: ZIP2 Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipHigh(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vzip2_u32(uint32x2_t a, uint32x2_t b)</para>
        <para>A64: ZIP2 Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipLow(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vzip1q_u8(uint8x16_t a, uint8x16_t b)</para>
        <para>A64: ZIP1 Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipLow(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>float64x2_t vzip1q_f64(float64x2_t a, float64x2_t b)</para>
        <para>A64: ZIP1 Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipLow(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>int16x8_t vzip1q_s16(int16x8_t a, int16x8_t b)</para>
        <para>A64: ZIP1 Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipLow(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int32x4_t vzip1q_s32(int32x4_t a, int32x4_t b)</para>
        <para>A64: ZIP1 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipLow(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>int64x2_t vzip1q_s64(int64x2_t a, int64x2_t b)</para>
        <para>A64: ZIP1 Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipLow(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int8x16_t vzip1q_u8(int8x16_t a, int8x16_t b)</para>
        <para>A64: ZIP1 Vd.16B, Vn.16B, Vm.16B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipLow(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>float32x4_t vzip1q_f32(float32x4_t a, float32x4_t b)</para>
        <para>A64: ZIP1 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipLow(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>uint16x8_t vzip1q_u16(uint16x8_t a, uint16x8_t b)</para>
        <para>A64: ZIP1 Vd.8H, Vn.8H, Vm.8H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipLow(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vzip1q_u32(uint32x4_t a, uint32x4_t b)</para>
        <para>A64: ZIP1 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipLow(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>uint64x2_t vzip1q_u64(uint64x2_t a, uint64x2_t b)</para>
        <para>A64: ZIP1 Vd.2D, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipLow(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>
        <para>uint8x8_t vzip1_u8(uint8x8_t a, uint8x8_t b)</para>
        <para>A64: ZIP1 Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipLow(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>
        <para>int16x4_t vzip1_s16(int16x4_t a, int16x4_t b)</para>
        <para>A64: ZIP1 Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipLow(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>
        <para>int32x2_t vzip1_s32(int32x2_t a, int32x2_t b)</para>
        <para>A64: ZIP1 Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipLow(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>
        <para>int8x8_t vzip1_s8(int8x8_t a, int8x8_t b)</para>
        <para>A64: ZIP1 Vd.8B, Vn.8B, Vm.8B</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipLow(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>
        <para>float32x2_t vzip1_f32(float32x2_t a, float32x2_t b)</para>
        <para>A64: ZIP1 Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipLow(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>
        <para>uint16x4_t vzip1_u16(uint16x4_t a, uint16x4_t b)</para>
        <para>A64: ZIP1 Vd.4H, Vn.4H, Vm.4H</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.ZipLow(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32x2_t vzip1_u32(uint32x2_t a, uint32x2_t b)</para>
        <para>A64: ZIP1 Vd.2S, Vn.2S, Vm.2S</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="P:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.Arm.Aes">
      <summary>This class provides access to the ARM AES hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Aes.Decrypt(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vaesdq_u8 (uint8x16_t data, uint8x16_t key)</para>
        <para>A32: AESD.8 Qd, Qm</para>
        <para>A64: AESD Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
      <param name="roundKey" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Aes.Encrypt(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vaeseq_u8 (uint8x16_t data, uint8x16_t key)</para>
        <para>A32: AESE.8 Qd, Qm</para>
        <para>A64: AESE Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
      <param name="roundKey" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Aes.InverseMixColumns(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vaesimcq_u8 (uint8x16_t data)</para>
        <para>A32: AESIMC.8 Qd, Qm</para>
        <para>A64: AESIMC Vd.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Aes.MixColumns(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>uint8x16_t vaesmcq_u8 (uint8x16_t data)</para>
        <para>A32: AESMC.8 Qd, Qm</para>
        <para>A64: AESMC V&gt;.16B, Vn.16B</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Aes.PolynomialMultiplyWideningLower(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>
        <para>poly128_t vmull_p64 (poly64_t a, poly64_t b)</para>
        <para>A32: VMULL.P8 Qd, Dn, Dm</para>
        <para>A64: PMULL Vd.1Q, Vn.1D, Vm.1D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Aes.PolynomialMultiplyWideningLower(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>
        <para>poly128_t vmull_p64 (poly64_t a, poly64_t b)</para>
        <para>A32: VMULL.P8 Qd, Dn, Dm</para>
        <para>A64: PMULL Vd.1Q, Vn.1D, Vm.1D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Aes.PolynomialMultiplyWideningUpper(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>poly128_t vmull_high_p64 (poly64x2_t a, poly64x2_t b)</para>
        <para>A32: VMULL.P8 Qd, Dn+1, Dm+1</para>
        <para>A64: PMULL2 Vd.1Q, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Aes.PolynomialMultiplyWideningUpper(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>poly128_t vmull_high_p64 (poly64x2_t a, poly64x2_t b)</para>
        <para>A32: VMULL.P8 Qd, Dn+1, Dm+1</para>
        <para>A64: PMULL2 Vd.1Q, Vn.2D, Vm.2D</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="P:System.Runtime.Intrinsics.Arm.Aes.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.Arm.Aes.Arm64" />
    <member name="P:System.Runtime.Intrinsics.Arm.Aes.Arm64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.Arm.ArmBase">
      <summary>This class provides access to the ARM base hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.ArmBase.LeadingZeroCount(System.Int32)">
      <summary>
        <para>A32: CLZ Rd, Rm</para>
        <para>A64: CLZ Wd, Wn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.ArmBase.LeadingZeroCount(System.UInt32)">
      <summary>
        <para>A32: CLZ Rd, Rm</para>
        <para>A64: CLZ Wd, Wn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.ArmBase.ReverseElementBits(System.Int32)">
      <summary>
        <para>A32: RBIT Rd, Rm</para>
        <para>A64: RBIT Wd, Wn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.ArmBase.ReverseElementBits(System.UInt32)">
      <summary>
        <para>A32: RBIT Rd, Rm</para>
        <para>A64: RBIT Wd, Wn</para>
      </summary>
      <param name="value" />
    </member>
    <member name="P:System.Runtime.Intrinsics.Arm.ArmBase.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.Arm.ArmBase.Arm64" />
    <member name="M:System.Runtime.Intrinsics.Arm.ArmBase.Arm64.LeadingSignCount(System.Int32)">
      <summary>A64: CLS Wd, Wn.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.ArmBase.Arm64.LeadingSignCount(System.Int64)">
      <summary>A64: CLS Xd, Xn.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.ArmBase.Arm64.LeadingZeroCount(System.Int64)">
      <summary>A64: CLZ Xd, Xn.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.ArmBase.Arm64.LeadingZeroCount(System.UInt64)">
      <summary>A64: CLZ Xd, Xn.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.ArmBase.Arm64.MultiplyHigh(System.Int64,System.Int64)">
      <summary>A64: SMULH Xd, Xn, Xm</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.ArmBase.Arm64.MultiplyHigh(System.UInt64,System.UInt64)">
      <summary>A64: UMULH Xd, Xn, Xm</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.ArmBase.Arm64.ReverseElementBits(System.Int64)">
      <summary>A64: RBIT Xd, Xn.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.ArmBase.Arm64.ReverseElementBits(System.UInt64)">
      <summary>A64: RBIT Xd, Xn.</summary>
      <param name="value" />
    </member>
    <member name="P:System.Runtime.Intrinsics.Arm.ArmBase.Arm64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.Arm.Crc32">
      <summary>This class provides access to the ARM Crc32 hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Crc32.ComputeCrc32(System.UInt32,System.Byte)">
      <summary>
        <para>uint32_t __crc32b (uint32_t a, uint8_t b)</para>
        <para>A32: CRC32B Rd, Rn, Rm</para>
        <para>A64: CRC32B Wd, Wn, Wm</para>
      </summary>
      <param name="crc" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Crc32.ComputeCrc32(System.UInt32,System.UInt16)">
      <summary>
        <para>uint32_t __crc32h (uint32_t a, uint16_t b)</para>
        <para>A32: CRC32H Rd, Rn, Rm</para>
        <para>A64: CRC32H Wd, Wn, Wm</para>
      </summary>
      <param name="crc" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Crc32.ComputeCrc32(System.UInt32,System.UInt32)">
      <summary>
        <para>uint32_t __crc32w (uint32_t a, uint32_t b)</para>
        <para>A32: CRC32W Rd, Rn, Rm</para>
        <para>A64: CRC32W Wd, Wn, Wm</para>
      </summary>
      <param name="crc" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Crc32.ComputeCrc32C(System.UInt32,System.Byte)">
      <summary>
        <para>uint32_t __crc32cb (uint32_t a, uint8_t b)</para>
        <para>A32: CRC32CB Rd, Rn, Rm</para>
        <para>A64: CRC32CB Wd, Wn, Wm</para>
      </summary>
      <param name="crc" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Crc32.ComputeCrc32C(System.UInt32,System.UInt16)">
      <summary>
        <para>uint32_t __crc32ch (uint32_t a, uint16_t b)</para>
        <para>A32: CRC32CH Rd, Rn, Rm</para>
        <para>A64: CRC32CH Wd, Wn, Wm</para>
      </summary>
      <param name="crc" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Crc32.ComputeCrc32C(System.UInt32,System.UInt32)">
      <summary>
        <para>uint32_t __crc32cw (uint32_t a, uint32_t b)</para>
        <para>A32: CRC32CW Rd, Rn, Rm</para>
        <para>A64: CRC32CW Wd, Wn, Wm</para>
      </summary>
      <param name="crc" />
      <param name="data" />
    </member>
    <member name="P:System.Runtime.Intrinsics.Arm.Crc32.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.Arm.Crc32.Arm64" />
    <member name="M:System.Runtime.Intrinsics.Arm.Crc32.Arm64.ComputeCrc32(System.UInt32,System.UInt64)">
      <summary>
        <para>uint32_t __crc32d (uint32_t a, uint64_t b)</para>
        <para>A64: CRC32X Wd, Wn, Xm</para>
      </summary>
      <param name="crc" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Crc32.Arm64.ComputeCrc32C(System.UInt32,System.UInt64)">
      <summary>
        <para>uint32_t __crc32cd (uint32_t a, uint64_t b)</para>
        <para>A64: CRC32CX Wd, Wn, Xm</para>
      </summary>
      <param name="crc" />
      <param name="data" />
    </member>
    <member name="P:System.Runtime.Intrinsics.Arm.Crc32.Arm64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.Arm.Dp">
      <summary>Provides access to the ARMv8.2-DotProd hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Dp.DotProduct(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>int32x4_t vdotq_s32 (int32x4_t r, int8x16_t a, int8x16_t b) A32: VSDOT.S8 Qd, Qn, Qm A64: SDOT Vd.4S, Vn.16B, Vm.16B</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Dp.DotProduct(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>uint32x4_t vdotq_u32 (uint32x4_t r, uint8x16_t a, uint8x16_t b) A32: VUDOT.U8 Qd, Qn, Qm A64: UDOT Vd.4S, Vn.16B, Vm.16B</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Dp.DotProduct(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>int32x2_t vdot_s32 (int32x2_t r, int8x8_t a, int8x8_t b) A32: VSDOT.S8 Dd, Dn, Dm A64: SDOT Vd.2S, Vn.8B, Vm.8B</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Dp.DotProduct(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>uint32x2_t vdot_u32 (uint32x2_t r, uint8x8_t a, uint8x8_t b) A32: VUDOT.U8 Dd, Dn, Dm A64: UDOT Vd.2S, Vn.8B, Vm.8B</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Dp.DotProductBySelectedQuadruplet(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>int32x4_t vdotq_laneq_s32 (int32x4_t r, int8x16_t a, int8x16_t b, const int lane) A32: VSDOT.S8 Qd, Qn, Dm[lane] A64: SDOT Vd.4S, Vn.16B, Vm.4B[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightScaledIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Dp.DotProductBySelectedQuadruplet(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>int32x4_t vdotq_lane_s32 (int32x4_t r, int8x16_t a, int8x8_t b, const int lane) A32: VSDOT.S8 Qd, Qn, Dm[lane] A64: SDOT Vd.4S, Vn.16B, Vm.4B[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightScaledIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Dp.DotProductBySelectedQuadruplet(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>uint32x4_t vdotq_laneq_u32 (uint32x4_t r, uint8x16_t a, uint8x16_t b, const int lane) A32: VUDOT.U8 Qd, Qn, Dm[lane] A64: UDOT Vd.4S, Vn.16B, Vm.4B[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightScaledIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Dp.DotProductBySelectedQuadruplet(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte)">
      <summary>uint32x4_t vdotq_lane_u32 (uint32x4_t r, uint8x16_t a, uint8x8_t b, const int lane) A32: VUDOT.U8 Qd, Qn, Dm[lane] A64: UDOT Vd.4S, Vn.16B, Vm.4B[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightScaledIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Dp.DotProductBySelectedQuadruplet(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>int32x2_t vdot_laneq_s32 (int32x2_t r, int8x8_t a, int8x16_t b, const int lane) A32: VSDOT.S8 Dd, Dn, Dm[lane] A64: SDOT Vd.2S, Vn.8B, Vm.4B[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightScaledIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Dp.DotProductBySelectedQuadruplet(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte},System.Byte)">
      <summary>int32x2_t vdot_lane_s32 (int32x2_t r, int8x8_t a, int8x8_t b, const int lane) A32: VSDOT.S8 Dd, Dn, Dm[lane] A64: SDOT Vd.2S, Vn.8B, Vm.4B[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightScaledIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Dp.DotProductBySelectedQuadruplet(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>uint32x2_t vdot_laneq_u32 (uint32x2_t r, uint8x8_t a, uint8x16_t b, const int lane) A32: VUDOT.U8 Dd, Dn, Dm[lane] A64: UDOT Vd.2S, Vn.8B, Vm.4B[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightScaledIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Dp.DotProductBySelectedQuadruplet(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte},System.Byte)">
      <summary>uint32x2_t vdot_lane_u32 (uint32x2_t r, uint8x8_t a, uint8x8_t b, const int lane) A32: VUDOT.U8 Dd, Dn, Dm[lane] A64: UDOT Vd.2S, Vn.8B, Vm.4B[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightScaledIndex" />
    </member>
    <member name="P:System.Runtime.Intrinsics.Arm.Dp.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.Arm.Dp.Arm64" />
    <member name="P:System.Runtime.Intrinsics.Arm.Dp.Arm64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.Arm.Rdm">
      <summary>Provides access to the ARMv8.1-RDMA hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingAndAddSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>int16x8_t vqrdmlahq_s16 (int16x8_t a, int16x8_t b, int16x8_t c) A32: VQRDMLAH.S16 Qd, Qn, Qm A64: SQRDMLAH Vd.8H, Vn.8H, Vm.8H</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingAndAddSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>int32x4_t vqrdmlahq_s32 (int32x4_t a, int32x4_t b, int32x4_t c) A32: VQRDMLAH.S32 Qd, Qn, Qm A64: SQRDMLAH Vd.4S, Vn.4S, Vm.4S</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingAndAddSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int16x4_t vqrdmlah_s16 (int16x4_t a, int16x4_t b, int16x4_t c) A32: VQRDMLAH.S16 Dd, Dn, Dm A64: SQRDMLAH Vd.4H, Vn.4H, Vm.4H</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingAndAddSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int32x2_t vqrdmlah_s32 (int32x2_t a, int32x2_t b, int32x2_t c) A32: VQRDMLAH.S32 Dd, Dn, Dm A64: SQRDMLAH Vd.2S, Vn.2S, Vm.2S</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingAndSubtractSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>int16x8_t vqrdmlshq_s16 (int16x8_t a, int16x8_t b, int16x8_t c) A32: VQRDMLSH.S16 Qd, Qn, Qm A64: SQRDMLSH Vd.8H, Vn.8H, Vm.8H</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingAndSubtractSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>int32x4_t vqrdmlshq_s32 (int32x4_t a, int32x4_t b, int32x4_t c) A32: VQRDMLSH.S32 Qd, Qn, Qm A64: SQRDMLSH Vd.4S, Vn.4S, Vm.4S</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingAndSubtractSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int16x4_t vqrdmlsh_s16 (int16x4_t a, int16x4_t b, int16x4_t c) A32: VQRDMLSH.S16 Dd, Dn, Dm A64: SQRDMLSH Vd.4H, Vn.4H, Vm.4H</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingAndSubtractSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int32x2_t vqrdmlsh_s32 (int32x2_t a, int32x2_t b, int32x2_t c) A32: VQRDMLSH.S32 Dd, Dn, Dm A64: SQRDMLSH Vd.2S, Vn.2S, Vm.2S</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int16x8_t vqrdmlahq_laneq_s16 (int16x8_t a, int16x8_t b, int16x8_t v, const int lane) A32: VQRDMLAH.S16 Qd, Qn, Dm[lane] A64: SQRDMLAH Vd.8H, Vn.8H, Vm.H[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int16x8_t vqrdmlahq_lane_s16 (int16x8_t a, int16x8_t b, int16x4_t v, const int lane) A32: VQRDMLAH.S16 Qd, Qn, Dm[lane] A64: SQRDMLAH Vd.8H, Vn.8H, Vm.H[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int32x4_t vqrdmlahq_laneq_s32 (int32x4_t a, int32x4_t b, int32x4_t v, const int lane) A32: VQRDMLAH.S32 Qd, Qn, Dm[lane] A64: SQRDMLAH Vd.4S, Vn.4S, Vm.S[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int32x4_t vqrdmlahq_lane_s32 (int32x4_t a, int32x4_t b, int32x2_t v, const int lane) A32: VQRDMLAH.S32 Qd, Qn, Dm[lane] A64: SQRDMLAH Vd.4S, Vn.4S, Vm.S[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int16x4_t vqrdmlah_laneq_s16 (int16x4_t a, int16x4_t b, int16x8_t v, const int lane) A32: VQRDMLAH.S16 Dd, Dn, Dm[lane] A64: SQRDMLAH Vd.4H, Vn.4H, Vm.H[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int16x4_t vqrdmlah_lane_s16 (int16x4_t a, int16x4_t b, int16x4_t v, const int lane) A32: VQRDMLAH.S16 Dd, Dn, Dm[lane] A64: SQRDMLAH Vd.4H, Vn.4H, Vm.H[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int32x2_t vqrdmlah_laneq_s32 (int32x2_t a, int32x2_t b, int32x4_t v, const int lane) A32: VQRDMLAH.S32 Dd, Dn, Dm[lane] A64: SQRDMLAH Vd.2S, Vn.2S, Vm.S[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int32x2_t vqrdmlah_lane_s32 (int32x2_t a, int32x2_t b, int32x2_t v, const int lane) A32: VQRDMLAH.S32 Dd, Dn, Dm[lane] A64: SQRDMLAH Vd.2S, Vn.2S, Vm.S[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int16x8_t vqrdmlshq_laneq_s16 (int16x8_t a, int16x8_t b, int16x8_t v, const int lane) A32: VQRDMLSH.S16 Qd, Qn, Dm[lane] A64: SQRDMLSH Vd.8H, Vn.8H, Vm.H[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int16x8_t vqrdmlshq_lane_s16 (int16x8_t a, int16x8_t b, int16x4_t v, const int lane) A32: VQRDMLSH.S16 Qd, Qn, Dm[lane] A64: SQRDMLSH Vd.8H, Vn.8H, Vm.H[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int32x4_t vqrdmlshq_laneq_s32 (int32x4_t a, int32x4_t b, int32x4_t v, const int lane) A32: VQRDMLSH.S32 Qd, Qn, Dm[lane] A64: SQRDMLSH Vd.4S, Vn.4S, Vm.S[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int32x4_t vqrdmlshq_lane_s32 (int32x4_t a, int32x4_t b, int32x2_t v, const int lane) A32: VQRDMLSH.S32 Qd, Qn, Dm[lane] A64: SQRDMLSH Vd.4S, Vn.4S, Vm.S[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int16x4_t vqrdmlsh_laneq_s16 (int16x4_t a, int16x4_t b, int16x8_t v, const int lane) A32: VQRDMLSH.S16 Dd, Dn, Dm[lane] A64: SQRDMLSH Vd.4H, Vn.4H, Vm.H[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int16x4_t vqrdmlsh_lane_s16 (int16x4_t a, int16x4_t b, int16x4_t v, const int lane) A32: VQRDMLSH.S16 Dd, Dn, Dm[lane] A64: SQRDMLSH Vd.4H, Vn.4H, Vm.H[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int32x2_t vqrdmlsh_laneq_s32 (int32x2_t a, int32x2_t b, int32x4_t v, const int lane) A32: VQRDMLSH.S32 Dd, Dn, Dm[lane] A64: SQRDMLSH Vd.2S, Vn.2S, Vm.S[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int32x2_t vqrdmlsh_lane_s32 (int32x2_t a, int32x2_t b, int32x2_t v, const int lane) A32: VQRDMLSH.S32 Dd, Dn, Dm[lane] A64: SQRDMLSH Vd.2S, Vn.2S, Vm.S[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="P:System.Runtime.Intrinsics.Arm.Rdm.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.Arm.Rdm.Arm64" />
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.Arm64.MultiplyRoundedDoublingAndAddSaturateHighScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int16_t vqrdmlahh_s16 (int16_t a, int16_t b, int16_t c) A64: SQRDMLAH Hd, Hn, Hm</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.Arm64.MultiplyRoundedDoublingAndAddSaturateHighScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int32_t vqrdmlahs_s32 (int32_t a, int32_t b, int32_t c) A64: SQRDMLAH Sd, Sn, Sm</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.Arm64.MultiplyRoundedDoublingAndSubtractSaturateHighScalar(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>int16_t vqrdmlshh_s16 (int16_t a, int16_t b, int16_t c) A64: SQRDMLSH Hd, Hn, Hm</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.Arm64.MultiplyRoundedDoublingAndSubtractSaturateHighScalar(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>int32_t vqrdmlshs_s32 (int32_t a, int32_t b, int32_t c) A64: SQRDMLSH Sd, Sn, Sm</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.Arm64.MultiplyRoundedDoublingScalarBySelectedScalarAndAddSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int16_t vqrdmlahh_laneq_s16 (int16_t a, int16_t b, int16x8_t v, const int lane) A64: SQRDMLAH Hd, Hn, Vm.H[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.Arm64.MultiplyRoundedDoublingScalarBySelectedScalarAndAddSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int16_t vqrdmlahh_lane_s16 (int16_t a, int16_t b, int16x4_t v, const int lane) A64: SQRDMLAH Hd, Hn, Vm.H[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.Arm64.MultiplyRoundedDoublingScalarBySelectedScalarAndAddSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int32_t vqrdmlahs_laneq_s32 (int32_t a, int32_t b, int32x4_t v, const int lane) A64: SQRDMLAH Sd, Sn, Vm.S[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.Arm64.MultiplyRoundedDoublingScalarBySelectedScalarAndAddSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int32_t vqrdmlahs_lane_s32 (int32_t a, int32_t b, int32x2_t v, const int lane) A64: SQRDMLAH Sd, Sn, Vm.S[lane]</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.Arm64.MultiplyRoundedDoublingScalarBySelectedScalarAndSubtractSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>int16_t vqrdmlshh_laneq_s16 (int16_t a, int16_t b, int16x8_t v, const int lane) A64: SQRDMLSH Hd, Hn, Vm.H[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.Arm64.MultiplyRoundedDoublingScalarBySelectedScalarAndSubtractSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16},System.Byte)">
      <summary>int16_t vqrdmlshh_lane_s16 (int16_t a, int16_t b, int16x4_t v, const int lane) A64: SQRDMLSH Hd, Hn, Vm.H[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.Arm64.MultiplyRoundedDoublingScalarBySelectedScalarAndSubtractSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int32_t vqrdmlshs_laneq_s32 (int32_t a, int32_t b, int32x4_t v, const int lane) A64: SQRDMLSH Sd, Sn, Vm.S[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Rdm.Arm64.MultiplyRoundedDoublingScalarBySelectedScalarAndSubtractSaturateHigh(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32},System.Byte)">
      <summary>int32_t vqrdmlshs_lane_s32 (int32_t a, int32_t b, int32x2_t v, const int lane) A64: SQRDMLSH Sd, Sn, Vm.S[lane]</summary>
      <param name="minuend" />
      <param name="left" />
      <param name="right" />
      <param name="rightIndex" />
    </member>
    <member name="P:System.Runtime.Intrinsics.Arm.Rdm.Arm64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.Arm.Sha1">
      <summary>This class provides access to the ARM SHA1 hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Sha1.FixedRotate(System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>
        <para>uint32_t vsha1h_u32 (uint32_t hash_e)</para>
        <para>A32: SHA1H.32 Qd, Qm</para>
        <para>A64: SHA1H Sd, Sn</para>
      </summary>
      <param name="hash_e" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Sha1.HashUpdateChoose(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vsha1cq_u32 (uint32x4_t hash_abcd, uint32_t hash_e, uint32x4_t wk)</para>
        <para>A32: SHA1C.32 Qd, Qn, Qm</para>
        <para>A64: SHA1C Qd, Sn, Vm.4S</para>
      </summary>
      <param name="hash_abcd" />
      <param name="hash_e" />
      <param name="wk" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Sha1.HashUpdateMajority(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vsha1mq_u32 (uint32x4_t hash_abcd, uint32_t hash_e, uint32x4_t wk)</para>
        <para>A32: SHA1M.32 Qd, Qn, Qm</para>
        <para>A64: SHA1M Qd, Sn, Vm.4S</para>
      </summary>
      <param name="hash_abcd" />
      <param name="hash_e" />
      <param name="wk" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Sha1.HashUpdateParity(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vsha1pq_u32 (uint32x4_t hash_abcd, uint32_t hash_e, uint32x4_t wk)</para>
        <para>A32: SHA1P.32 Qd, Qn, Qm</para>
        <para>A64: SHA1P Qd, Sn, Vm.4S</para>
      </summary>
      <param name="hash_abcd" />
      <param name="hash_e" />
      <param name="wk" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Sha1.ScheduleUpdate0(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vsha1su0q_u32 (uint32x4_t w0_3, uint32x4_t w4_7, uint32x4_t w8_11)</para>
        <para>A32: SHA1SU0.32 Qd, Qn, Qm</para>
        <para>A64: SHA1SU0 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="w0_3" />
      <param name="w4_7" />
      <param name="w8_11" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Sha1.ScheduleUpdate1(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vsha1su1q_u32 (uint32x4_t tw0_3, uint32x4_t w12_15)</para>
        <para>A32: SHA1SU1.32 Qd, Qm</para>
        <para>A64: SHA1SU1 Vd.4S, Vn.4S</para>
      </summary>
      <param name="tw0_3" />
      <param name="w12_15" />
    </member>
    <member name="P:System.Runtime.Intrinsics.Arm.Sha1.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.Arm.Sha1.Arm64" />
    <member name="P:System.Runtime.Intrinsics.Arm.Sha1.Arm64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.Arm.Sha256">
      <summary>This class provides access to the ARM SHA256 hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Sha256.HashUpdate1(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vsha256hq_u32 (uint32x4_t hash_abcd, uint32x4_t hash_efgh, uint32x4_t wk)</para>
        <para>A32: SHA256H.32 Qd, Qn, Qm</para>
        <para>A64: SHA256H Qd, Qn, Vm.4S</para>
      </summary>
      <param name="hash_abcd" />
      <param name="hash_efgh" />
      <param name="wk" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Sha256.HashUpdate2(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vsha256h2q_u32 (uint32x4_t hash_efgh, uint32x4_t hash_abcd, uint32x4_t wk)</para>
        <para>A32: SHA256H2.32 Qd, Qn, Qm</para>
        <para>A64: SHA256H2 Qd, Qn, Vm.4S</para>
      </summary>
      <param name="hash_efgh" />
      <param name="hash_abcd" />
      <param name="wk" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Sha256.ScheduleUpdate0(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vsha256su0q_u32 (uint32x4_t w0_3, uint32x4_t w4_7)</para>
        <para>A32: SHA256SU0.32 Qd, Qm</para>
        <para>A64: SHA256SU0 Vd.4S, Vn.4S</para>
      </summary>
      <param name="w0_3" />
      <param name="w4_7" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Arm.Sha256.ScheduleUpdate1(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>uint32x4_t vsha256su1q_u32 (uint32x4_t w0_3, uint32x4_t w8_11, uint32x4_t w12_15)</para>
        <para>A32: SHA256SU1.32 Qd, Qn, Qm</para>
        <para>A64: SHA256SU1 Vd.4S, Vn.4S, Vm.4S</para>
      </summary>
      <param name="w0_3" />
      <param name="w8_11" />
      <param name="w12_15" />
    </member>
    <member name="P:System.Runtime.Intrinsics.Arm.Sha256.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.Arm.Sha256.Arm64" />
    <member name="P:System.Runtime.Intrinsics.Arm.Sha256.Arm64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.Vector128" />
    <member name="M:System.Runtime.Intrinsics.Vector128.As``2(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> of type <typeparamref name="T" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> of type <typeparamref name="U" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <typeparam name="U">The type that the vector <paramref name="vector" /> should be reinterpreted as.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) or the type of the target (<typeparamref name="U" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> of type <typeparamref name="U" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsByte``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.Byte" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsDouble``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.Double" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsInt16``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.Int16" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsInt32``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.Int32" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsInt64``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.Int64" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsSByte``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.SByte" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsSingle``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.Single" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsUInt16``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.UInt16" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsUInt32``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.UInt32" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsUInt64``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.UInt64" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector128" /> of type <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsVector``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> as a new <see cref="T:System.Numerics.Vector`1" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <typeparam name="T">The type of the vectors.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="value" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Numerics.Vector`1" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsVector128(System.Numerics.Vector2)">
      <summary>Reinterprets a <see cref="T:System.Numerics.Vector2" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsVector128(System.Numerics.Vector3)">
      <summary>Reinterprets a <see cref="T:System.Numerics.Vector3" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsVector128(System.Numerics.Vector4)">
      <summary>Reinterprets a <see cref="T:System.Numerics.Vector4" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsVector128``1(System.Numerics.Vector{``0})">
      <summary>Reinterprets a <see cref="T:System.Numerics.Vector`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <typeparam name="T">The type of the vectors.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="value" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsVector2(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> as a new <see cref="T:System.Numerics.Vector2" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Numerics.Vector2" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsVector3(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> as a new <see cref="T:System.Numerics.Vector3" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Numerics.Vector3" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsVector4(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> as a new <see cref="T:System.Numerics.Vector4" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Numerics.Vector4" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Byte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <param name="e4">The value that element 4 will be initialized to.</param>
      <param name="e5">The value that element 5 will be initialized to.</param>
      <param name="e6">The value that element 6 will be initialized to.</param>
      <param name="e7">The value that element 7 will be initialized to.</param>
      <param name="e8">The value that element 8 will be initialized to.</param>
      <param name="e9">The value that element 9 will be initialized to.</param>
      <param name="e10">The value that element 10 will be initialized to.</param>
      <param name="e11">The value that element 11 will be initialized to.</param>
      <param name="e12">The value that element 12 will be initialized to.</param>
      <param name="e13">The value that element 13 will be initialized to.</param>
      <param name="e14">The value that element 14 will be initialized to.</param>
      <param name="e15">The value that element 15 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Double)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Double,System.Double)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Int16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <param name="e4">The value that element 4 will be initialized to.</param>
      <param name="e5">The value that element 5 will be initialized to.</param>
      <param name="e6">The value that element 6 will be initialized to.</param>
      <param name="e7">The value that element 7 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Int32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Int64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Int64,System.Int64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instances.</summary>
      <param name="lower">The value that the lower 64-bits will be initialized to.</param>
      <param name="upper">The value that the upper 64-bits will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instances.</summary>
      <param name="lower">The value that the lower 64-bits will be initialized to.</param>
      <param name="upper">The value that the upper 64-bits will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instances.</summary>
      <param name="lower">The value that the lower 64-bits will be initialized to.</param>
      <param name="upper">The value that the upper 64-bits will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instances.</summary>
      <param name="lower">The value that the lower 64-bits will be initialized to.</param>
      <param name="upper">The value that the upper 64-bits will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instances.</summary>
      <param name="lower">The value that the lower 64-bits will be initialized to.</param>
      <param name="upper">The value that the upper 64-bits will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instances.</summary>
      <param name="lower">The value that the lower 64-bits will be initialized to.</param>
      <param name="upper">The value that the upper 64-bits will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instances.</summary>
      <param name="lower">The value that the lower 64-bits will be initialized to.</param>
      <param name="upper">The value that the upper 64-bits will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instances.</summary>
      <param name="lower">The value that the lower 64-bits will be initialized to.</param>
      <param name="upper">The value that the upper 64-bits will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instances.</summary>
      <param name="lower">The value that the lower 64-bits will be initialized to.</param>
      <param name="upper">The value that the upper 64-bits will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instances.</summary>
      <param name="lower">The value that the lower 64-bits will be initialized to.</param>
      <param name="upper">The value that the upper 64-bits will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.SByte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <param name="e4">The value that element 4 will be initialized to.</param>
      <param name="e5">The value that element 5 will be initialized to.</param>
      <param name="e6">The value that element 6 will be initialized to.</param>
      <param name="e7">The value that element 7 will be initialized to.</param>
      <param name="e8">The value that element 8 will be initialized to.</param>
      <param name="e9">The value that element 9 will be initialized to.</param>
      <param name="e10">The value that element 10 will be initialized to.</param>
      <param name="e11">The value that element 11 will be initialized to.</param>
      <param name="e12">The value that element 12 will be initialized to.</param>
      <param name="e13">The value that element 13 will be initialized to.</param>
      <param name="e14">The value that element 14 will be initialized to.</param>
      <param name="e15">The value that element 15 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Single)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.UInt16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <param name="e4">The value that element 4 will be initialized to.</param>
      <param name="e5">The value that element 5 will be initialized to.</param>
      <param name="e6">The value that element 6 will be initialized to.</param>
      <param name="e7">The value that element 7 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.UInt32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.UInt64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.UInt64,System.UInt64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.Byte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.Double)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.Int16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.Int32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.Int64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.SByte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.Single)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.UInt16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.UInt32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.UInt64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.Byte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.Double)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.Int16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.Int32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.Int64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.SByte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.Single)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.UInt16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.UInt32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.UInt64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.GetElement``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)">
      <summary>Gets the element at the specified index.</summary>
      <param name="vector">The vector to get the element from.</param>
      <param name="index">The index of the element to get.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> was less than zero or greater than the number of elements.</exception>
      <returns>The value of the element at <paramref name="index" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.GetLower``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Gets the value of the lower 64-bits as a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</summary>
      <param name="vector">The vector to get the lower 64-bits from.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The value of the lower 64-bits as a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.GetUpper``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Gets the value of the upper 64-bits as a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</summary>
      <param name="vector">The vector to get the upper 64-bits from.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The value of the upper 64-bits as a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.ToScalar``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Converts the given vector to a scalar containing the value of the first element.</summary>
      <param name="vector">The vector to get the first element from.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>A scalar <typeparamref name="T" /> containing the value of the first element.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.ToVector256``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Converts the given vector to a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> with the lower 128-bits set to the value of the given vector and the upper 128-bits initialized to zero.</summary>
      <param name="vector">The vector to extend.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> with the lower 128-bits set to the value of <paramref name="vector" /> and the upper 128-bits initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.ToVector256Unsafe``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Converts the given vector to a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> with the lower 128-bits set to the value of the given vector and the upper 128-bits left uninitialized.</summary>
      <param name="vector">The vector to extend.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> with the lower 128-bits set to the value of <paramref name="vector" /> and the upper 128-bits left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.WithElement``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32,``0)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with the element at the specified index set to the specified value and the remaining elements set to the same value as that in the given vector.</summary>
      <param name="vector">The vector to get the remaining elements from.</param>
      <param name="index">The index of the element to set.</param>
      <param name="value">The value to set the element to.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> was less than zero or greater than the number of elements.</exception>
      <returns>A <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with the value of the element at <paramref name="index" /> set to <paramref name="value" /> and the remaining elements set to the same value as that in <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.WithLower``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with the lower 64-bits set to the specified value and the upper 64-bits set to the same value as that in the given vector.</summary>
      <param name="vector">The vector to get the upper 64-bits from.</param>
      <param name="value">The value of the lower 64-bits as a <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with the lower 64-bits set to the specified value and the upper 64-bits set to the same value as that in <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.WithUpper``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with the upper 64-bits set to the specified value and the lower 64-bits set to the same value as that in the given vector.</summary>
      <param name="vector">The vector to get the lower 64-bits from.</param>
      <param name="value">The upper 64-bits.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with the upper 64-bits set to the specified value and the lower 64-bits set to those in <paramref name="vector" />.</returns>
    </member>
    <member name="T:System.Runtime.Intrinsics.Vector128`1">
      <typeparam name="T" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128`1.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current instance.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> and is equal to the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128`1.Equals(System.Runtime.Intrinsics.Vector128{`0})">
      <summary>Determines whether the specified <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> is equal to the current instance.</summary>
      <param name="other">The <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> to compare with the current instance.</param>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <see langword="true" /> if <paramref name="other" /> is equal to the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128`1.GetHashCode">
      <summary>Gets the hash code for the instance.</summary>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
      <returns>The hash code for the instance.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128`1.ToString">
      <summary>Converts the current instance to an equivalent string representation.</summary>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
      <returns>An equivalent string representation of the current instance.</returns>
    </member>
    <member name="P:System.Runtime.Intrinsics.Vector128`1.AllBitsSet">
      <summary>Gets a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with all bits set to 1.</summary>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
    </member>
    <member name="P:System.Runtime.Intrinsics.Vector128`1.Count">
      <summary>Gets the number of <typeparamref name="T" /> that are in a <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
    </member>
    <member name="P:System.Runtime.Intrinsics.Vector128`1.Zero">
      <summary>Gets a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with all elements initialized to zero.</summary>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
    </member>
    <member name="T:System.Runtime.Intrinsics.Vector256" />
    <member name="M:System.Runtime.Intrinsics.Vector256.As``2(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> of type <typeparamref name="T" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> of type <typeparamref name="U" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <typeparam name="U">The type that the vector <paramref name="vector" /> should be reinterpreted as.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) or the type of the target (<typeparamref name="U" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> of type <typeparamref name="U" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsByte``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.Byte" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsDouble``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.Double" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsInt16``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.Int16" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsInt32``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.Int32" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsInt64``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.Int64" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsSByte``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.SByte" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsSingle``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.Single" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsUInt16``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.UInt16" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsUInt32``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.UInt32" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsUInt64``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.UInt64" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector256" /> of type <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsVector``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> as a new <see cref="T:System.Numerics.Vector`1" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <typeparam name="T">The type of the vectors.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="value" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Numerics.Vector`1" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsVector256``1(System.Numerics.Vector{``0})">
      <summary>Reinterprets a <see cref="T:System.Numerics.Vector`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <typeparam name="T">The type of the vectors.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="value" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Byte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new vector with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <param name="e4">The value that element 4 will be initialized to.</param>
      <param name="e5">The value that element 5 will be initialized to.</param>
      <param name="e6">The value that element 6 will be initialized to.</param>
      <param name="e7">The value that element 7 will be initialized to.</param>
      <param name="e8">The value that element 8 will be initialized to.</param>
      <param name="e9">The value that element 9 will be initialized to.</param>
      <param name="e10">The value that element 10 will be initialized to.</param>
      <param name="e11">The value that element 11 will be initialized to.</param>
      <param name="e12">The value that element 12 will be initialized to.</param>
      <param name="e13">The value that element 13 will be initialized to.</param>
      <param name="e14">The value that element 14 will be initialized to.</param>
      <param name="e15">The value that element 15 will be initialized to.</param>
      <param name="e16">The value that element 16 will be initialized to.</param>
      <param name="e17">The value that element 17 will be initialized to.</param>
      <param name="e18">The value that element 18 will be initialized to.</param>
      <param name="e19">The value that element 19 will be initialized to.</param>
      <param name="e20">The value that element 20 will be initialized to.</param>
      <param name="e21">The value that element 21 will be initialized to.</param>
      <param name="e22">The value that element 22 will be initialized to.</param>
      <param name="e23">The value that element 23 will be initialized to.</param>
      <param name="e24">The value that element 24 will be initialized to.</param>
      <param name="e25">The value that element 25 will be initialized to.</param>
      <param name="e26">The value that element 26 will be initialized to.</param>
      <param name="e27">The value that element 27 will be initialized to.</param>
      <param name="e28">The value that element 28 will be initialized to.</param>
      <param name="e29">The value that element 29 will be initialized to.</param>
      <param name="e30">The value that element 30 will be initialized to.</param>
      <param name="e31">The value that element 31 will be initialized to.</param>
      <returns>A new vector with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Double)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new vector with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Double,System.Double,System.Double,System.Double)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <returns>A new vector with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Int16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new vector with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <param name="e4">The value that element 4 will be initialized to.</param>
      <param name="e5">The value that element 5 will be initialized to.</param>
      <param name="e6">The value that element 6 will be initialized to.</param>
      <param name="e7">The value that element 7 will be initialized to.</param>
      <param name="e8">The value that element 8 will be initialized to.</param>
      <param name="e9">The value that element 9 will be initialized to.</param>
      <param name="e10">The value that element 10 will be initialized to.</param>
      <param name="e11">The value that element 11 will be initialized to.</param>
      <param name="e12">The value that element 12 will be initialized to.</param>
      <param name="e13">The value that element 13 will be initialized to.</param>
      <param name="e14">The value that element 14 will be initialized to.</param>
      <param name="e15">The value that element 15 will be initialized to.</param>
      <returns>A new vector with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Int32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new vector with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <param name="e4">The value that element 4 will be initialized to.</param>
      <param name="e5">The value that element 5 will be initialized to.</param>
      <param name="e6">The value that element 6 will be initialized to.</param>
      <param name="e7">The value that element 7 will be initialized to.</param>
      <returns>A new vector with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Int64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new vector with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Int64,System.Int64,System.Int64,System.Int64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <returns>A new vector with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instances.</summary>
      <param name="lower">The value that the lower 128 bits will be initialized to.</param>
      <param name="upper">The value that the upper 128 bits will be initialized to.</param>
      <returns>A new vector initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instances.</summary>
      <param name="lower">The value that the lower 128 bits will be initialized to.</param>
      <param name="upper">The value that the upper 128 bits will be initialized to.</param>
      <returns>A new vector initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instances.</summary>
      <param name="lower">The value that the lower 128 bits will be initialized to.</param>
      <param name="upper">The value that the upper 128 bits will be initialized to.</param>
      <returns>A new vector initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instances.</summary>
      <param name="lower">The value that the lower 128 bits will be initialized to.</param>
      <param name="upper">The value that the upper 128 bits will be initialized to.</param>
      <returns>A new vector initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instances.</summary>
      <param name="lower">The value that the lower 128 bits will be initialized to.</param>
      <param name="upper">The value that the upper 128 bits will be initialized to.</param>
      <returns>A new vector initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instances.</summary>
      <param name="lower">The value that the lower 128 bits will be initialized to.</param>
      <param name="upper">The value that the upper 128 bits will be initialized to.</param>
      <returns>A new vector initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instances.</summary>
      <param name="lower">The value that the lower 128 bits will be initialized to.</param>
      <param name="upper">The value that the upper 128 bits will be initialized to.</param>
      <returns>A new vector initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instances.</summary>
      <param name="lower">The value that the lower 128 bits will be initialized to.</param>
      <param name="upper">The value that the upper 128 bits will be initialized to.</param>
      <returns>A new vector initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instances.</summary>
      <param name="lower">The value that the lower 128 bits will be initialized to.</param>
      <param name="upper">The value that the upper 128 bits will be initialized to.</param>
      <returns>A new vector initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance from two <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> instances.</summary>
      <param name="lower">The value that the lower 128 bits will be initialized to.</param>
      <param name="upper">The value that the upper 128 bits will be initialized to.</param>
      <returns>A new vector initialized from <paramref name="lower" /> and <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.SByte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new vector with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <param name="e4">The value that element 4 will be initialized to.</param>
      <param name="e5">The value that element 5 will be initialized to.</param>
      <param name="e6">The value that element 6 will be initialized to.</param>
      <param name="e7">The value that element 7 will be initialized to.</param>
      <param name="e8">The value that element 8 will be initialized to.</param>
      <param name="e9">The value that element 9 will be initialized to.</param>
      <param name="e10">The value that element 10 will be initialized to.</param>
      <param name="e11">The value that element 11 will be initialized to.</param>
      <param name="e12">The value that element 12 will be initialized to.</param>
      <param name="e13">The value that element 13 will be initialized to.</param>
      <param name="e14">The value that element 14 will be initialized to.</param>
      <param name="e15">The value that element 15 will be initialized to.</param>
      <param name="e16">The value that element 16 will be initialized to.</param>
      <param name="e17">The value that element 17 will be initialized to.</param>
      <param name="e18">The value that element 18 will be initialized to.</param>
      <param name="e19">The value that element 19 will be initialized to.</param>
      <param name="e20">The value that element 20 will be initialized to.</param>
      <param name="e21">The value that element 21 will be initialized to.</param>
      <param name="e22">The value that element 22 will be initialized to.</param>
      <param name="e23">The value that element 23 will be initialized to.</param>
      <param name="e24">The value that element 24 will be initialized to.</param>
      <param name="e25">The value that element 25 will be initialized to.</param>
      <param name="e26">The value that element 26 will be initialized to.</param>
      <param name="e27">The value that element 27 will be initialized to.</param>
      <param name="e28">The value that element 28 will be initialized to.</param>
      <param name="e29">The value that element 29 will be initialized to.</param>
      <param name="e30">The value that element 30 will be initialized to.</param>
      <param name="e31">The value that element 31 will be initialized to.</param>
      <returns>A new vector with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Single)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new vector with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <param name="e4">The value that element 4 will be initialized to.</param>
      <param name="e5">The value that element 5 will be initialized to.</param>
      <param name="e6">The value that element 6 will be initialized to.</param>
      <param name="e7">The value that element 7 will be initialized to.</param>
      <returns>A new vector with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.UInt16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new vector with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <param name="e4">The value that element 4 will be initialized to.</param>
      <param name="e5">The value that element 5 will be initialized to.</param>
      <param name="e6">The value that element 6 will be initialized to.</param>
      <param name="e7">The value that element 7 will be initialized to.</param>
      <param name="e8">The value that element 8 will be initialized to.</param>
      <param name="e9">The value that element 9 will be initialized to.</param>
      <param name="e10">The value that element 10 will be initialized to.</param>
      <param name="e11">The value that element 11 will be initialized to.</param>
      <param name="e12">The value that element 12 will be initialized to.</param>
      <param name="e13">The value that element 13 will be initialized to.</param>
      <param name="e14">The value that element 14 will be initialized to.</param>
      <param name="e15">The value that element 15 will be initialized to.</param>
      <returns>A new vector with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.UInt32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new vector with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <param name="e4">The value that element 4 will be initialized to.</param>
      <param name="e5">The value that element 5 will be initialized to.</param>
      <param name="e6">The value that element 6 will be initialized to.</param>
      <param name="e7">The value that element 7 will be initialized to.</param>
      <returns>A new vector with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.UInt64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new vector with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <returns>A new vector with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.Byte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.Double)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.Int16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.Int32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.Int64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.SByte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.Single)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.UInt16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.UInt32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.UInt64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.Byte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.Double)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.Int16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.Int32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.Int64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.SByte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.Single)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.UInt16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.UInt32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.UInt64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new vector instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.GetElement``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)">
      <summary>Gets the element at the specified index.</summary>
      <param name="vector">The vector to get the element from.</param>
      <param name="index">The index of the element to get.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> was less than zero or greater than the number of elements.</exception>
      <returns>The value of the element at <paramref name="index" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.GetLower``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Gets the value of the lower 128 bits as a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <param name="vector">The vector to get the lower 128 bits from.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The value of the lower 128 bits as a new vector.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.GetUpper``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Gets the value of the upper 128 bits as a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <param name="vector">The vector to get the upper 128 bits from.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The value of the upper 128 bits as a new vector.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.ToScalar``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Converts the given vector to a scalar containing the value of the first element.</summary>
      <param name="vector">The vector to get the first element from.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>A scalar that contains the value of the first element.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.WithElement``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32,``0)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> with the element at the specified index set to the specified value and the remaining elements set to the same value as that in the given vector.</summary>
      <param name="vector">The vector to get the remaining elements from.</param>
      <param name="index">The index of the element to set.</param>
      <param name="value">The value to set the element to.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> was less than zero or greater than the number of elements.</exception>
      <returns>A vector with the value of the element at <paramref name="index" /> set to <paramref name="value" /> and the remaining elements set to the same value as that in <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.WithLower``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> with the lower 128 bits set to the specified value and the upper 128 bits set to the same value as that in the given vector.</summary>
      <param name="vector">The vector to get the upper 128 bits from.</param>
      <param name="value">The lower 128 bits.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>A new vector with the lower 128 bits set to the specified value and the upper 128 bits set to the same value as that in <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.WithUpper``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> with the upper 128 bits set to the specified value and the lower 128 bits set to the same value as that in the given vector.</summary>
      <param name="vector">The vector to get the lower 128 bits from.</param>
      <param name="value">The upper 128 bits.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>A new vector with the upper 128 bits set to the specified value and the lower 128 bits set to the same value as that in <paramref name="vector" />.</returns>
    </member>
    <member name="T:System.Runtime.Intrinsics.Vector256`1">
      <typeparam name="T" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256`1.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current instance.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> and is equal to the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256`1.Equals(System.Runtime.Intrinsics.Vector256{`0})">
      <summary>Determines whether the specified <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> is equal to the current instance.</summary>
      <param name="other">The <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> to compare with the current instance.</param>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <see langword="true" /> if <paramref name="other" /> is equal to the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256`1.GetHashCode">
      <summary>Gets the hash code for the instance.</summary>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
      <returns>The hash code for the instance.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256`1.ToString">
      <summary>Converts the current instance to an equivalent string representation.</summary>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
      <returns>An equivalent string representation of the current instance.</returns>
    </member>
    <member name="P:System.Runtime.Intrinsics.Vector256`1.AllBitsSet">
      <summary>Gets a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> with all bits set to 1.</summary>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
    </member>
    <member name="P:System.Runtime.Intrinsics.Vector256`1.Count">
      <summary>Gets the number of <typeparamref name="T" /> that are in a <see cref="T:System.Runtime.Intrinsics.Vector256`1" />.</summary>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
    </member>
    <member name="P:System.Runtime.Intrinsics.Vector256`1.Zero">
      <summary>Gets a new <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> with all elements initialized to zero.</summary>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
    </member>
    <member name="T:System.Runtime.Intrinsics.Vector64" />
    <member name="M:System.Runtime.Intrinsics.Vector64.As``2(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> of type <typeparamref name="T" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> of type <typeparamref name="U" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <typeparam name="U">The type that the vector <paramref name="vector" /> should be reinterpreted as.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) or the type of the target (<typeparamref name="U" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> of type <typeparamref name="U" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsByte``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.Byte" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsDouble``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.Double" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsInt16``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.Int16" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsInt32``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.Int32" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsInt64``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.Int64" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsSByte``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.SByte" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsSingle``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.Single" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsUInt16``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.UInt16" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsUInt32``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.UInt32" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsUInt64``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.UInt64" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector64" /> of type <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Byte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <param name="e4">The value that element 4 will be initialized to.</param>
      <param name="e5">The value that element 5 will be initialized to.</param>
      <param name="e6">The value that element 6 will be initialized to.</param>
      <param name="e7">The value that element 7 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Double)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Int16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Int16,System.Int16,System.Int16,System.Int16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Int32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Int32,System.Int32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Int64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.SByte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <param name="e4">The value that element 4 will be initialized to.</param>
      <param name="e5">The value that element 5 will be initialized to.</param>
      <param name="e6">The value that element 6 will be initialized to.</param>
      <param name="e7">The value that element 7 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Single)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Single,System.Single)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.UInt16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <param name="e2">The value that element 2 will be initialized to.</param>
      <param name="e3">The value that element 3 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.UInt32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.UInt32,System.UInt32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with each element initialized to the corresponding specified value.</summary>
      <param name="e0">The value that element 0 will be initialized to.</param>
      <param name="e1">The value that element 1 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with each element initialized to corresponding specified value.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.UInt64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalar(System.Byte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalar(System.Double)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalar(System.Int16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalar(System.Int32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalar(System.Int64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalar(System.SByte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalar(System.Single)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalar(System.UInt16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalar(System.UInt32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalar(System.UInt64)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to the specified value and the remaining elements initialized to zero.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalarUnsafe(System.Byte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalarUnsafe(System.Int16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalarUnsafe(System.Int32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalarUnsafe(System.SByte)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalarUnsafe(System.Single)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalarUnsafe(System.UInt16)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalarUnsafe(System.UInt32)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to the specified value and the remaining elements left uninitialized.</summary>
      <param name="value">The value that element 0 will be initialized to.</param>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> instance with the first element initialized to <paramref name="value" /> and the remaining elements left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.GetElement``1(System.Runtime.Intrinsics.Vector64{``0},System.Int32)">
      <summary>Gets the element at the specified index.</summary>
      <param name="vector">The vector to get the element from.</param>
      <param name="index">The index of the element to get.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> was less than zero or greater than the number of elements.</exception>
      <returns>The value of the element at <paramref name="index" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.ToScalar``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Converts the given vector to a scalar containing the value of the first element.</summary>
      <param name="vector">The vector to get the first element from.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>A scalar <typeparamref name="T" /> containing the value of the first element.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.ToVector128``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Converts the given vector to a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with the lower 64-bits set to the value of the given vector and the upper 64-bits initialized to zero.</summary>
      <param name="vector">The vector to extend.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with the lower 64-bits set to the value of <paramref name="vector" /> and the upper 64-bits initialized to zero.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.ToVector128Unsafe``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Converts the given vector to a new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with the lower 64-bits set to the value of the given vector and the upper 64-bits left uninitialized.</summary>
      <param name="vector">The vector to extend.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>A new <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> with the lower 64-bits set to the value of <paramref name="vector" /> and the upper 64-bits left uninitialized.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.WithElement``1(System.Runtime.Intrinsics.Vector64{``0},System.Int32,``0)">
      <summary>Creates a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with the element at the specified index set to the specified value and the remaining elements set to the same value as that in the given vector.</summary>
      <param name="vector">The vector to get the remaining elements from.</param>
      <param name="index">The index of the element to set.</param>
      <param name="value">The value to set the element to.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> was less than zero or greater than the number of elements.</exception>
      <returns>A <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with the value of the element at <paramref name="index" /> set to <paramref name="value" /> and the remaining elements set to the same value as that in <paramref name="vector" />.</returns>
    </member>
    <member name="T:System.Runtime.Intrinsics.Vector64`1">
      <typeparam name="T" />
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64`1.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current instance.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> and is equal to the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64`1.Equals(System.Runtime.Intrinsics.Vector64{`0})">
      <summary>Determines whether the specified <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> is equal to the current instance.</summary>
      <param name="other">The <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> to compare with the current instance.</param>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <see langword="true" /> if <paramref name="other" /> is equal to the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64`1.GetHashCode">
      <summary>Gets the hash code for the instance.</summary>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
      <returns>The hash code for the instance.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64`1.ToString">
      <summary>Converts the current instance to an equivalent string representation.</summary>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
      <returns>An equivalent string representation of the current instance.</returns>
    </member>
    <member name="P:System.Runtime.Intrinsics.Vector64`1.AllBitsSet">
      <summary>Gets a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with all bits set to 1.</summary>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
    </member>
    <member name="P:System.Runtime.Intrinsics.Vector64`1.Count">
      <summary>Gets the number of <typeparamref name="T" /> that are in a <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</summary>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
    </member>
    <member name="P:System.Runtime.Intrinsics.Vector64`1.Zero">
      <summary>Gets a new <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> with all elements initialized to zero.</summary>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Aes">
      <summary>This class provides access to Intel AES hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Aes.Decrypt(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_aesdec_si128 (__m128i a, __m128i RoundKey)</para>
        <para>AESDEC xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="roundKey" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Aes.DecryptLast(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_aesdeclast_si128 (__m128i a, __m128i RoundKey)</para>
        <para>AESDECLAST xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="roundKey" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Aes.Encrypt(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_aesenc_si128 (__m128i a, __m128i RoundKey)</para>
        <para>AESENC xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="roundKey" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Aes.EncryptLast(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_aesenclast_si128 (__m128i a, __m128i RoundKey)</para>
        <para>AESENCLAST xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="roundKey" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Aes.InverseMixColumns(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_aesimc_si128 (__m128i a)</para>
        <para>AESIMC xmm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Aes.KeygenAssist(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>__m128i _mm_aeskeygenassist_si128 (__m128i a, const int imm8)</para>
        <para>AESKEYGENASSIST xmm, xmm/m128, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Aes.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Aes.X64" />
    <member name="P:System.Runtime.Intrinsics.X86.Aes.X64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Avx">
      <summary>This class provides access to Intel AVX hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Add(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_add_pd (__m256d a, __m256d b)</para>
        <para>VADDPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Add(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_add_ps (__m256 a, __m256 b)</para>
        <para>VADDPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.AddSubtract(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_addsub_pd (__m256d a, __m256d b)</para>
        <para>VADDSUBPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.AddSubtract(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_addsub_ps (__m256 a, __m256 b)</para>
        <para>VADDSUBPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.And(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_and_pd (__m256d a, __m256d b)</para>
        <para>VANDPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.And(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_and_ps (__m256 a, __m256 b)</para>
        <para>VANDPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.AndNot(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_andnot_pd (__m256d a, __m256d b)</para>
        <para>VANDNPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.AndNot(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_andnot_ps (__m256 a, __m256 b)</para>
        <para>VANDNPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Blend(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)">
      <summary>
        <para>__m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8)</para>
        <para>VBLENDPD ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Blend(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)">
      <summary>
        <para>__m256 _mm256_blend_ps (__m256 a, __m256 b, const int imm8)</para>
        <para>VBLENDPS ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.BlendVariable(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_blendv_pd (__m256d a, __m256d b, __m256d mask)</para>
        <para>VBLENDVPD ymm, ymm, ymm/m256, ymm</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.BlendVariable(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_blendv_ps (__m256 a, __m256 b, __m256 mask)</para>
        <para>VBLENDVPS ymm, ymm, ymm/m256, ymm</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.BroadcastScalarToVector128(System.Single*)">
      <summary>
        <para>__m128 _mm_broadcast_ss (float const * mem_addr)</para>
        <para>VBROADCASTSS xmm, m32</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.BroadcastScalarToVector256(System.Double*)">
      <summary>
        <para>__m256d _mm256_broadcast_sd (double const * mem_addr)</para>
        <para>VBROADCASTSD ymm, m64</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.BroadcastScalarToVector256(System.Single*)">
      <summary>
        <para>__m256 _mm256_broadcast_ss (float const * mem_addr)</para>
        <para>VBROADCASTSS ymm, m32</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.BroadcastVector128ToVector256(System.Double*)">
      <summary>
        <para>__m256d _mm256_broadcast_pd (__m128d const * mem_addr)</para>
        <para>VBROADCASTF128, ymm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.BroadcastVector128ToVector256(System.Single*)">
      <summary>
        <para>__m256 _mm256_broadcast_ps (__m128 const * mem_addr)</para>
        <para>VBROADCASTF128, ymm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Ceiling(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_ceil_pd (__m256d a)</para>
        <para>VROUNDPD ymm, ymm/m256, imm8(10)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Ceiling(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_ceil_ps (__m256 a)</para>
        <para>VROUNDPS ymm, ymm/m256, imm8(10)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Compare(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.X86.FloatComparisonMode)">
      <summary>
        <para>__m128d _mm_cmp_pd (__m128d a, __m128d b, const int imm8)</para>
        <para>VCMPPD xmm, xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mode" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Compare(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.X86.FloatComparisonMode)">
      <summary>
        <para>__m128 _mm_cmp_ps (__m128 a, __m128 b, const int imm8)</para>
        <para>VCMPPS xmm, xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mode" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Compare(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.X86.FloatComparisonMode)">
      <summary>
        <para>__m256d _mm256_cmp_pd (__m256d a, __m256d b, const int imm8)</para>
        <para>VCMPPD ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mode" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Compare(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.X86.FloatComparisonMode)">
      <summary>
        <para>__m256 _mm256_cmp_ps (__m256 a, __m256 b, const int imm8)</para>
        <para>VCMPPS ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mode" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareEqual(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_cmpeq_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(0)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareEqual(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_cmpeq_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(0)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareGreaterThan(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_cmpgt_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(14)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareGreaterThan(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_cmpgt_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(14)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_cmpge_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(13)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_cmpge_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(13)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareLessThan(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_cmplt_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(1)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareLessThan(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_cmplt_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(1)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_cmple_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(2)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_cmple_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(2)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareNotEqual(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_cmpneq_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(4)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareNotEqual(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_cmpneq_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(4)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareNotGreaterThan(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_cmpngt_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(10)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareNotGreaterThan(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_cmpngt_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(10)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareNotGreaterThanOrEqual(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_cmpnge_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(9)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareNotGreaterThanOrEqual(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_cmpnge_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(9)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareNotLessThan(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_cmpnlt_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(5)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareNotLessThan(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_cmpnlt_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(5)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareNotLessThanOrEqual(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_cmpnle_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(6)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareNotLessThanOrEqual(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_cmpnle_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(6)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareOrdered(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_cmpord_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(7)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareOrdered(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_cmpord_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(7)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.X86.FloatComparisonMode)">
      <summary>
        <para>__m128d _mm_cmp_sd (__m128d a, __m128d b, const int imm8)</para>
        <para>VCMPSS xmm, xmm, xmm/m32, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mode" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.X86.FloatComparisonMode)">
      <summary>
        <para>__m128 _mm_cmp_ss (__m128 a, __m128 b, const int imm8)</para>
        <para>VCMPSD xmm, xmm, xmm/m64, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mode" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareUnordered(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_cmpunord_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(3)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareUnordered(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_cmpunord_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(3)</para>
        <para>The above native signature does not exist. We provide this additional overload for completeness.</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ConvertToVector128Int32(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m128i _mm256_cvtpd_epi32 (__m256d a)</para>
        <para>VCVTPD2DQ xmm, ymm/m256</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ConvertToVector128Int32WithTruncation(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m128i _mm256_cvttpd_epi32 (__m256d a)</para>
        <para>VCVTTPD2DQ xmm, ymm/m256</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ConvertToVector128Single(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m128 _mm256_cvtpd_ps (__m256d a)</para>
        <para>VCVTPD2PS xmm, ymm/m256</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ConvertToVector256Double(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m256d _mm256_cvtepi32_pd (__m128i a)</para>
        <para>VCVTDQ2PD ymm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ConvertToVector256Double(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m256d _mm256_cvtps_pd (__m128 a)</para>
        <para>VCVTPS2PD ymm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ConvertToVector256Int32(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256i _mm256_cvtps_epi32 (__m256 a)</para>
        <para>VCVTPS2DQ ymm, ymm/m256</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ConvertToVector256Int32WithTruncation(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256i _mm256_cvttps_epi32 (__m256 a)</para>
        <para>VCVTTPS2DQ ymm, ymm/m256</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ConvertToVector256Single(System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256 _mm256_cvtepi32_ps (__m256i a)</para>
        <para>VCVTDQ2PS ymm, ymm/m256</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Divide(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_div_pd (__m256d a, __m256d b)</para>
        <para>VDIVPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Divide(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_div_ps (__m256 a, __m256 b)</para>
        <para>VDIVPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.DotProduct(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)">
      <summary>
        <para>__m256 _mm256_dp_ps (__m256 a, __m256 b, const int imm8)</para>
        <para>VDPPS ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.DuplicateEvenIndexed(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_movedup_pd (__m256d a)</para>
        <para>VMOVDDUP ymm, ymm/m256</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.DuplicateEvenIndexed(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_moveldup_ps (__m256 a)</para>
        <para>VMOVSLDUP ymm, ymm/m256</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.DuplicateOddIndexed(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_movehdup_ps (__m256 a)</para>
        <para>VMOVSHDUP ymm, ymm/m256</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)">
      <summary>
        <para>__m128i _mm256_extractf128_si256 (__m256i a, const int imm8)</para>
        <para>VEXTRACTF128 xmm/m128, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)">
      <summary>
        <para>__m128d _mm256_extractf128_pd (__m256d a, const int imm8)</para>
        <para>VEXTRACTF128 xmm/m128, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>
        <para>__m128i _mm256_extractf128_si256 (__m256i a, const int imm8)</para>
        <para>VEXTRACTF128 xmm/m128, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>
        <para>__m128i _mm256_extractf128_si256 (__m256i a, const int imm8)</para>
        <para>VEXTRACTF128 xmm/m128, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>
        <para>__m128i _mm256_extractf128_si256 (__m256i a, const int imm8)</para>
        <para>VEXTRACTF128 xmm/m128, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)">
      <summary>
        <para>__m128i _mm256_extractf128_si256 (__m256i a, const int imm8)</para>
        <para>VEXTRACTF128 xmm/m128, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)">
      <summary>
        <para>__m128 _mm256_extractf128_ps (__m256 a, const int imm8)</para>
        <para>VEXTRACTF128 xmm/m128, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>
        <para>__m128i _mm256_extractf128_si256 (__m256i a, const int imm8)</para>
        <para>VEXTRACTF128 xmm/m128, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>
        <para>__m128i _mm256_extractf128_si256 (__m256i a, const int imm8)</para>
        <para>VEXTRACTF128 xmm/m128, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>
        <para>__m128i _mm256_extractf128_si256 (__m256i a, const int imm8)</para>
        <para>VEXTRACTF128 xmm/m128, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Floor(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_floor_pd (__m256d a)</para>
        <para>VROUNDPS ymm, ymm/m256, imm8(9)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Floor(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_floor_ps (__m256 a)</para>
        <para>VROUNDPS ymm, ymm/m256, imm8(9)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.HorizontalAdd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_hadd_pd (__m256d a, __m256d b)</para>
        <para>VHADDPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.HorizontalAdd(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_hadd_ps (__m256 a, __m256 b)</para>
        <para>VHADDPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.HorizontalSubtract(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_hsub_pd (__m256d a, __m256d b)</para>
        <para>VHSUBPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.HorizontalSubtract(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_hsub_ps (__m256 a, __m256 b)</para>
        <para>VHSUBPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>__m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8)</para>
        <para>VINSERTF128 ymm, ymm, xmm/m128, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>__m256d _mm256_insertf128_pd (__m256d a, __m128d b, int imm8)</para>
        <para>VINSERTF128 ymm, ymm, xmm/m128, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>__m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8)</para>
        <para>VINSERTF128 ymm, ymm, xmm/m128, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8)</para>
        <para>VINSERTF128 ymm, ymm, xmm/m128, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>__m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8)</para>
        <para>VINSERTF128 ymm, ymm, xmm/m128, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>__m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8)</para>
        <para>VINSERTF128 ymm, ymm, xmm/m128, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>__m256 _mm256_insertf128_ps (__m256 a, __m128 b, int imm8)</para>
        <para>VINSERTF128 ymm, ymm, xmm/m128, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>__m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8)</para>
        <para>VINSERTF128 ymm, ymm, xmm/m128, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>__m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8)</para>
        <para>VINSERTF128 ymm, ymm, xmm/m128, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>__m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8)</para>
        <para>VINSERTF128 ymm, ymm, xmm/m128, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.Byte*)">
      <summary>
        <para>__m256i _mm256_load_si256 (__m256i const * mem_addr)</para>
        <para>VMOVDQA ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.Double*)">
      <summary>
        <para>__m256d _mm256_load_pd (double const * mem_addr)</para>
        <para>VMOVAPD ymm, ymm/m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.Int16*)">
      <summary>
        <para>__m256i _mm256_load_si256 (__m256i const * mem_addr)</para>
        <para>VMOVDQA ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.Int32*)">
      <summary>
        <para>__m256i _mm256_load_si256 (__m256i const * mem_addr)</para>
        <para>VMOVDQA ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.Int64*)">
      <summary>
        <para>__m256i _mm256_load_si256 (__m256i const * mem_addr)</para>
        <para>VMOVDQA ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.SByte*)">
      <summary>
        <para>__m256i _mm256_load_si256 (__m256i const * mem_addr)</para>
        <para>VMOVDQA ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.Single*)">
      <summary>
        <para>__m256 _mm256_load_ps (float const * mem_addr)</para>
        <para>VMOVAPS ymm, ymm/m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.UInt16*)">
      <summary>
        <para>__m256i _mm256_load_si256 (__m256i const * mem_addr)</para>
        <para>VMOVDQA ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.UInt32*)">
      <summary>
        <para>__m256i _mm256_load_si256 (__m256i const * mem_addr)</para>
        <para>VMOVDQA ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.UInt64*)">
      <summary>
        <para>__m256i _mm256_load_si256 (__m256i const * mem_addr)</para>
        <para>VMOVDQA ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadDquVector256(System.Byte*)">
      <summary>
        <para>__m256i _mm256_lddqu_si256 (__m256i const * mem_addr)</para>
        <para>VLDDQU ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadDquVector256(System.Int16*)">
      <summary>
        <para>__m256i _mm256_lddqu_si256 (__m256i const * mem_addr)</para>
        <para>VLDDQU ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadDquVector256(System.Int32*)">
      <summary>
        <para>__m256i _mm256_lddqu_si256 (__m256i const * mem_addr)</para>
        <para>VLDDQU ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadDquVector256(System.Int64*)">
      <summary>
        <para>__m256i _mm256_lddqu_si256 (__m256i const * mem_addr)</para>
        <para>VLDDQU ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadDquVector256(System.SByte*)">
      <summary>
        <para>__m256i _mm256_lddqu_si256 (__m256i const * mem_addr)</para>
        <para>VLDDQU ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadDquVector256(System.UInt16*)">
      <summary>
        <para>__m256i _mm256_lddqu_si256 (__m256i const * mem_addr)</para>
        <para>VLDDQU ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadDquVector256(System.UInt32*)">
      <summary>
        <para>__m256i _mm256_lddqu_si256 (__m256i const * mem_addr)</para>
        <para>VLDDQU ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadDquVector256(System.UInt64*)">
      <summary>
        <para>__m256i _mm256_lddqu_si256 (__m256i const * mem_addr)</para>
        <para>VLDDQU ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.Byte*)">
      <summary>
        <para>__m256i _mm256_loadu_si256 (__m256i const * mem_addr)</para>
        <para>VMOVDQU ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.Double*)">
      <summary>
        <para>__m256d _mm256_loadu_pd (double const * mem_addr)</para>
        <para>VMOVUPD ymm, ymm/m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.Int16*)">
      <summary>
        <para>__m256i _mm256_loadu_si256 (__m256i const * mem_addr)</para>
        <para>VMOVDQU ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.Int32*)">
      <summary>
        <para>__m256i _mm256_loadu_si256 (__m256i const * mem_addr)</para>
        <para>VMOVDQU ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.Int64*)">
      <summary>
        <para>__m256i _mm256_loadu_si256 (__m256i const * mem_addr)</para>
        <para>VMOVDQU ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.SByte*)">
      <summary>
        <para>__m256i _mm256_loadu_si256 (__m256i const * mem_addr)</para>
        <para>VMOVDQU ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.Single*)">
      <summary>
        <para>__m256 _mm256_loadu_ps (float const * mem_addr)</para>
        <para>VMOVUPS ymm, ymm/m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.UInt16*)">
      <summary>
        <para>__m256i _mm256_loadu_si256 (__m256i const * mem_addr)</para>
        <para>VMOVDQU ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.UInt32*)">
      <summary>
        <para>__m256i _mm256_loadu_si256 (__m256i const * mem_addr)</para>
        <para>VMOVDQU ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.UInt64*)">
      <summary>
        <para>__m256i _mm256_loadu_si256 (__m256i const * mem_addr)</para>
        <para>VMOVDQU ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MaskLoad(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_maskload_pd (double const * mem_addr, __m128i mask)</para>
        <para>VMASKMOVPD xmm, xmm, m128</para>
      </summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MaskLoad(System.Double*,System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_maskload_pd (double const * mem_addr, __m256i mask)</para>
        <para>VMASKMOVPD ymm, ymm, m256</para>
      </summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MaskLoad(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_maskload_ps (float const * mem_addr, __m128i mask)</para>
        <para>VMASKMOVPS xmm, xmm, m128</para>
      </summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MaskLoad(System.Single*,System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_maskload_ps (float const * mem_addr, __m256i mask)</para>
        <para>VMASKMOVPS ymm, ymm, m256</para>
      </summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MaskStore(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>void _mm_maskstore_pd (double * mem_addr, __m128i mask, __m128d a)</para>
        <para>VMASKMOVPD m128, xmm, xmm</para>
      </summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MaskStore(System.Double*,System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>void _mm256_maskstore_pd (double * mem_addr, __m256i mask, __m256d a)</para>
        <para>VMASKMOVPD m256, ymm, ymm</para>
      </summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MaskStore(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>void _mm_maskstore_ps (float * mem_addr, __m128i mask, __m128 a)</para>
        <para>VMASKMOVPS m128, xmm, xmm</para>
      </summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MaskStore(System.Single*,System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>void _mm256_maskstore_ps (float * mem_addr, __m256i mask, __m256 a)</para>
        <para>VMASKMOVPS m256, ymm, ymm</para>
      </summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Max(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_max_pd (__m256d a, __m256d b)</para>
        <para>VMAXPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Max(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_max_ps (__m256 a, __m256 b)</para>
        <para>VMAXPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Min(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_min_pd (__m256d a, __m256d b)</para>
        <para>VMINPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Min(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_min_ps (__m256 a, __m256 b)</para>
        <para>VMINPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MoveMask(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>int _mm256_movemask_pd (__m256d a)</para>
        <para>VMOVMSKPD reg, ymm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MoveMask(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>int _mm256_movemask_ps (__m256 a)</para>
        <para>VMOVMSKPS reg, ymm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Multiply(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_mul_pd (__m256d a, __m256d b)</para>
        <para>VMULPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Multiply(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_mul_ps (__m256 a, __m256 b)</para>
        <para>VMULPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Or(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_or_pd (__m256d a, __m256d b)</para>
        <para>VORPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Or(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_or_ps (__m256 a, __m256 b)</para>
        <para>VORPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute(System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>__m128d _mm_permute_pd (__m128d a, int imm8)</para>
        <para>VPERMILPD xmm, xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute(System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>__m128 _mm_permute_ps (__m128 a, int imm8)</para>
        <para>VPERMILPS xmm, xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute(System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)">
      <summary>
        <para>__m256d _mm256_permute_pd (__m256d a, int imm8)</para>
        <para>VPERMILPD ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute(System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)">
      <summary>
        <para>__m256 _mm256_permute_ps (__m256 a, int imm8)</para>
        <para>VPERMILPS ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)">
      <summary>
        <para>__m256i _mm256_permute2f128_si256 (__m256i a, __m256i b, int imm8)</para>
        <para>VPERM2F128 ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)">
      <summary>
        <para>__m256d _mm256_permute2f128_pd (__m256d a, __m256d b, int imm8)</para>
        <para>VPERM2F128 ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>
        <para>__m256i _mm256_permute2f128_si256 (__m256i a, __m256i b, int imm8)</para>
        <para>VPERM2F128 ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>
        <para>__m256i _mm256_permute2f128_si256 (__m256i a, __m256i b, int imm8)</para>
        <para>VPERM2F128 ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>
        <para>__m256i _mm256_permute2f128_si256 (__m256i a, __m256i b, int imm8)</para>
        <para>VPERM2F128 ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)">
      <summary>
        <para>__m256i _mm256_permute2f128_si256 (__m256i a, __m256i b, int imm8)</para>
        <para>VPERM2F128 ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)">
      <summary>
        <para>__m256 _mm256_permute2f128_ps (__m256 a, __m256 b, int imm8)</para>
        <para>VPERM2F128 ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>
        <para>__m256i _mm256_permute2f128_si256 (__m256i a, __m256i b, int imm8)</para>
        <para>VPERM2F128 ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>
        <para>__m256i _mm256_permute2f128_si256 (__m256i a, __m256i b, int imm8)</para>
        <para>VPERM2F128 ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>
        <para>__m256i _mm256_permute2f128_si256 (__m256i a, __m256i b, int imm8)</para>
        <para>VPERM2F128 ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.PermuteVar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m128d _mm_permutevar_pd (__m128d a, __m128i b)</para>
        <para>VPERMILPD xmm, xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.PermuteVar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128 _mm_permutevar_ps (__m128 a, __m128i b)</para>
        <para>VPERMILPS xmm, xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.PermuteVar(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>__m256d _mm256_permutevar_pd (__m256d a, __m256i b)</para>
        <para>VPERMILPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.PermuteVar(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256 _mm256_permutevar_ps (__m256 a, __m256i b)</para>
        <para>VPERMILPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Reciprocal(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_rcp_ps (__m256 a)</para>
        <para>VRCPPS ymm, ymm/m256</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ReciprocalSqrt(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_rsqrt_ps (__m256 a)</para>
        <para>VRSQRTPS ymm, ymm/m256</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundCurrentDirection(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_round_pd (__m256d a, _MM_FROUND_CUR_DIRECTION)</para>
        <para>VROUNDPD ymm, ymm/m256, imm8(4)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundCurrentDirection(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_round_ps (__m256 a, _MM_FROUND_CUR_DIRECTION)</para>
        <para>VROUNDPS ymm, ymm/m256, imm8(4)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundToNearestInteger(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_round_pd (__m256d a, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC)</para>
        <para>VROUNDPD ymm, ymm/m256, imm8(8)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundToNearestInteger(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_round_ps (__m256 a, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC)</para>
        <para>VROUNDPS ymm, ymm/m256, imm8(8)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundToNegativeInfinity(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_round_pd (__m256d a, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC)</para>
        <para>VROUNDPD ymm, ymm/m256, imm8(9)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundToNegativeInfinity(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_round_ps (__m256 a, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC)</para>
        <para>VROUNDPS ymm, ymm/m256, imm8(9)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundToPositiveInfinity(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_round_pd (__m256d a, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC)</para>
        <para>VROUNDPD ymm, ymm/m256, imm8(10)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundToPositiveInfinity(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_round_ps (__m256 a, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC)</para>
        <para>VROUNDPS ymm, ymm/m256, imm8(10)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundToZero(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_round_pd (__m256d a, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC)</para>
        <para>VROUNDPD ymm, ymm/m256, imm8(11)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundToZero(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_round_ps (__m256 a, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC)</para>
        <para>VROUNDPS ymm, ymm/m256, imm8(11)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Shuffle(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)">
      <summary>
        <para>__m256d _mm256_shuffle_pd (__m256d a, __m256d b, const int imm8)</para>
        <para>VSHUFPD ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="value" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Shuffle(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)">
      <summary>
        <para>__m256 _mm256_shuffle_ps (__m256 a, __m256 b, const int imm8)</para>
        <para>VSHUFPS ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="value" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Sqrt(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_sqrt_pd (__m256d a)</para>
        <para>VSQRTPD ymm, ymm/m256</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Sqrt(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_sqrt_ps (__m256 a)</para>
        <para>VSQRTPS ymm, ymm/m256</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.Byte*,System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>void _mm256_storeu_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>MOVDQU m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.Double*,System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>void _mm256_storeu_pd (double * mem_addr, __m256d a)</para>
        <para>MOVUPD m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.Int16*,System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>void _mm256_storeu_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>MOVDQU m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.Int32*,System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>void _mm256_storeu_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>MOVDQU m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.Int64*,System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>void _mm256_storeu_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>MOVDQU m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.SByte*,System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>void _mm256_storeu_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>MOVDQU m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.Single*,System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>void _mm256_storeu_ps (float * mem_addr, __m256 a)</para>
        <para>MOVUPS m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.UInt16*,System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>void _mm256_storeu_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>MOVDQU m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.UInt32*,System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>void _mm256_storeu_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>MOVDQU m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.UInt64*,System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>void _mm256_storeu_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>MOVDQU m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.Byte*,System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>void _mm256_store_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>MOVDQA m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.Double*,System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>void _mm256_store_pd (double * mem_addr, __m256d a)</para>
        <para>VMOVAPD m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.Int16*,System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>void _mm256_store_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>MOVDQA m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.Int32*,System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>void _mm256_store_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>MOVDQA m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.Int64*,System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>void _mm256_store_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>MOVDQA m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.SByte*,System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>void _mm256_store_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>MOVDQA m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.Single*,System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>void _mm256_store_ps (float * mem_addr, __m256 a)</para>
        <para>VMOVAPS m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.UInt16*,System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>void _mm256_store_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>MOVDQA m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.UInt32*,System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>void _mm256_store_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>MOVDQA m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.UInt64*,System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>void _mm256_store_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>MOVDQA m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.Byte*,System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>void _mm256_stream_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>VMOVNTDQ m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.Double*,System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>void _mm256_stream_pd (double * mem_addr, __m256d a)</para>
        <para>MOVNTPD m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.Int16*,System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>void _mm256_stream_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>VMOVNTDQ m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.Int32*,System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>void _mm256_stream_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>VMOVNTDQ m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.Int64*,System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>void _mm256_stream_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>VMOVNTDQ m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.SByte*,System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>void _mm256_stream_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>VMOVNTDQ m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.Single*,System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>void _mm256_stream_ps (float * mem_addr, __m256 a)</para>
        <para>MOVNTPS m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.UInt16*,System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>void _mm256_stream_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>VMOVNTDQ m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.UInt32*,System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>void _mm256_stream_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>VMOVNTDQ m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.UInt64*,System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>void _mm256_stream_si256 (__m256i * mem_addr, __m256i a)</para>
        <para>VMOVNTDQ m256, ymm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Subtract(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_sub_pd (__m256d a, __m256d b)</para>
        <para>VSUBPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Subtract(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_sub_ps (__m256 a, __m256 b)</para>
        <para>VSUBPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int _mm_testc_pd (__m128d a, __m128d b)</para>
        <para>VTESTPD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int _mm_testc_ps (__m128 a, __m128 b)</para>
        <para>VTESTPS xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>int _mm256_testc_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>int _mm256_testc_pd (__m256d a, __m256d b)</para>
        <para>VTESTPS ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>int _mm256_testc_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>int _mm256_testc_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>int _mm256_testc_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>int _mm256_testc_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>int _mm256_testc_ps (__m256 a, __m256 b)</para>
        <para>VTESTPS ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>int _mm256_testc_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>int _mm256_testc_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>int _mm256_testc_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int _mm_testnzc_pd (__m128d a, __m128d b)</para>
        <para>VTESTPD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int _mm_testnzc_ps (__m128 a, __m128 b)</para>
        <para>VTESTPS xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>int _mm256_testnzc_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>int _mm256_testnzc_pd (__m256d a, __m256d b)</para>
        <para>VTESTPD ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>int _mm256_testnzc_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>int _mm256_testnzc_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>int _mm256_testnzc_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>int _mm256_testnzc_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>int _mm256_testnzc_ps (__m256 a, __m256 b)</para>
        <para>VTESTPS ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>int _mm256_testnzc_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>int _mm256_testnzc_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>int _mm256_testnzc_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int _mm_testz_pd (__m128d a, __m128d b)</para>
        <para>VTESTPD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int _mm_testz_ps (__m128 a, __m128 b)</para>
        <para>VTESTPS xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>int _mm256_testz_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>int _mm256_testz_pd (__m256d a, __m256d b)</para>
        <para>VTESTPD ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>int _mm256_testz_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>int _mm256_testz_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>int _mm256_testz_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>int _mm256_testz_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>int _mm256_testz_ps (__m256 a, __m256 b)</para>
        <para>VTESTPS ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>int _mm256_testz_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>int _mm256_testz_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>int _mm256_testz_si256 (__m256i a, __m256i b)</para>
        <para>VPTEST ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_unpackhi_pd (__m256d a, __m256d b)</para>
        <para>VUNPCKHPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_unpackhi_ps (__m256 a, __m256 b)</para>
        <para>VUNPCKHPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.UnpackLow(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_unpacklo_pd (__m256d a, __m256d b)</para>
        <para>VUNPCKLPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.UnpackLow(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_unpacklo_ps (__m256 a, __m256 b)</para>
        <para>VUNPCKLPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Xor(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_xor_pd (__m256d a, __m256d b)</para>
        <para>VXORPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Xor(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_xor_ps (__m256 a, __m256 b)</para>
        <para>VXORPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Avx.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Avx.X64" />
    <member name="P:System.Runtime.Intrinsics.X86.Avx.X64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Avx2">
      <summary>This class provides access to Intel AVX2 hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Abs(System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_abs_epi16 (__m256i a)</para>
        <para>VPABSW ymm, ymm/m256</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Abs(System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_abs_epi32 (__m256i a)</para>
        <para>VPABSD ymm, ymm/m256</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Abs(System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>__m256i _mm256_abs_epi8 (__m256i a)</para>
        <para>VPABSB ymm, ymm/m256</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Add(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>__m256i _mm256_add_epi8 (__m256i a, __m256i b)</para>
        <para>VPADDB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Add(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_add_epi16 (__m256i a, __m256i b)</para>
        <para>VPADDW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Add(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_add_epi32 (__m256i a, __m256i b)</para>
        <para>VPADDD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Add(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>__m256i _mm256_add_epi64 (__m256i a, __m256i b)</para>
        <para>VPADDQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Add(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>__m256i _mm256_add_epi8 (__m256i a, __m256i b)</para>
        <para>VPADDB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Add(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>__m256i _mm256_add_epi16 (__m256i a, __m256i b)</para>
        <para>VPADDW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Add(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_add_epi32 (__m256i a, __m256i b)</para>
        <para>VPADDD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Add(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>__m256i _mm256_add_epi64 (__m256i a, __m256i b)</para>
        <para>VPADDQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AddSaturate(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>__m256i _mm256_adds_epu8 (__m256i a, __m256i b)</para>
        <para>VPADDUSB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AddSaturate(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_adds_epi16 (__m256i a, __m256i b)</para>
        <para>VPADDSW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AddSaturate(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>__m256i _mm256_adds_epi8 (__m256i a, __m256i b)</para>
        <para>VPADDSB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AddSaturate(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>__m256i _mm256_adds_epu16 (__m256i a, __m256i b)</para>
        <para>VPADDUSW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AlignRight(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)">
      <summary>
        <para>__m256i _mm256_alignr_epi8 (__m256i a, __m256i b, const int count)</para>
        <para>VPALIGNR ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AlignRight(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>
        <para>__m256i _mm256_alignr_epi8 (__m256i a, __m256i b, const int count)</para>
        <para>VPALIGNR ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AlignRight(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>
        <para>__m256i _mm256_alignr_epi8 (__m256i a, __m256i b, const int count)</para>
        <para>VPALIGNR ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AlignRight(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>
        <para>__m256i _mm256_alignr_epi8 (__m256i a, __m256i b, const int count)</para>
        <para>VPALIGNR ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AlignRight(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)">
      <summary>
        <para>__m256i _mm256_alignr_epi8 (__m256i a, __m256i b, const int count)</para>
        <para>VPALIGNR ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AlignRight(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>
        <para>__m256i _mm256_alignr_epi8 (__m256i a, __m256i b, const int count)</para>
        <para>VPALIGNR ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AlignRight(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>
        <para>__m256i _mm256_alignr_epi8 (__m256i a, __m256i b, const int count)</para>
        <para>VPALIGNR ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AlignRight(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>
        <para>__m256i _mm256_alignr_epi8 (__m256i a, __m256i b, const int count)</para>
        <para>VPALIGNR ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.And(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>__m256i _mm256_and_si256 (__m256i a, __m256i b)</para>
        <para>VPAND ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.And(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_and_si256 (__m256i a, __m256i b)</para>
        <para>VPAND ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.And(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_and_si256 (__m256i a, __m256i b)</para>
        <para>VPAND ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.And(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>__m256i _mm256_and_si256 (__m256i a, __m256i b)</para>
        <para>VPAND ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.And(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>__m256i _mm256_and_si256 (__m256i a, __m256i b)</para>
        <para>VPAND ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.And(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>__m256i _mm256_and_si256 (__m256i a, __m256i b)</para>
        <para>VPAND ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.And(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_and_si256 (__m256i a, __m256i b)</para>
        <para>VPAND ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.And(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>__m256i _mm256_and_si256 (__m256i a, __m256i b)</para>
        <para>VPAND ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AndNot(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>__m256i _mm256_andnot_si256 (__m256i a, __m256i b)</para>
        <para>VPANDN ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AndNot(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_andnot_si256 (__m256i a, __m256i b)</para>
        <para>VPANDN ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AndNot(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_andnot_si256 (__m256i a, __m256i b)</para>
        <para>VPANDN ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AndNot(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>__m256i _mm256_andnot_si256 (__m256i a, __m256i b)</para>
        <para>VPANDN ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AndNot(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>__m256i _mm256_andnot_si256 (__m256i a, __m256i b)</para>
        <para>VPANDN ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AndNot(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>__m256i _mm256_andnot_si256 (__m256i a, __m256i b)</para>
        <para>VPANDN ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AndNot(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_andnot_si256 (__m256i a, __m256i b)</para>
        <para>VPANDN ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AndNot(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>__m256i _mm256_andnot_si256 (__m256i a, __m256i b)</para>
        <para>VPANDN ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Average(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>__m256i _mm256_avg_epu8 (__m256i a, __m256i b)</para>
        <para>VPAVGB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Average(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>__m256i _mm256_avg_epu16 (__m256i a, __m256i b)</para>
        <para>VPAVGW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Blend(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m128i _mm_blend_epi32 (__m128i a, __m128i b, const int imm8)</para>
        <para>VPBLENDD xmm, xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Blend(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>__m128i _mm_blend_epi32 (__m128i a, __m128i b, const int imm8)</para>
        <para>VPBLENDD xmm, xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Blend(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>
        <para>__m256i _mm256_blend_epi16 (__m256i a, __m256i b, const int imm8)</para>
        <para>VPBLENDW ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Blend(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>
        <para>__m256i _mm256_blend_epi32 (__m256i a, __m256i b, const int imm8)</para>
        <para>VPBLENDD ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Blend(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>
        <para>__m256i _mm256_blend_epi16 (__m256i a, __m256i b, const int imm8)</para>
        <para>VPBLENDW ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Blend(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>
        <para>__m256i _mm256_blend_epi32 (__m256i a, __m256i b, const int imm8)</para>
        <para>VPBLENDD ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BlendVariable(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>__m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask)</para>
        <para>VPBLENDVB ymm, ymm, ymm/m256, ymm</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BlendVariable(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask)</para>
        <para>VPBLENDVB ymm, ymm, ymm/m256, ymm</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BlendVariable(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask)</para>
        <para>VPBLENDVB ymm, ymm, ymm/m256, ymm</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BlendVariable(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>__m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask)</para>
        <para>VPBLENDVB ymm, ymm, ymm/m256, ymm</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BlendVariable(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>__m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask)</para>
        <para>VPBLENDVB ymm, ymm, ymm/m256, ymm</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BlendVariable(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>__m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask)</para>
        <para>VPBLENDVB ymm, ymm, ymm/m256, ymm</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BlendVariable(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask)</para>
        <para>VPBLENDVB ymm, ymm, ymm/m256, ymm</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BlendVariable(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>__m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask)</para>
        <para>VPBLENDVB ymm, ymm, ymm/m256, ymm</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Byte*)">
      <summary>
        <para>__m128i _mm_broadcastb_epi8 (__m128i a)</para>
        <para>VPBROADCASTB xmm, m8</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Int16*)">
      <summary>
        <para>__m128i _mm_broadcastw_epi16 (__m128i a)</para>
        <para>VPBROADCASTW xmm, m16</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Int32*)">
      <summary>
        <para>__m128i _mm_broadcastd_epi32 (__m128i a)</para>
        <para>VPBROADCASTD xmm, m32</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Int64*)">
      <summary>
        <para>__m128i _mm_broadcastq_epi64 (__m128i a)</para>
        <para>VPBROADCASTQ xmm, m64</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_broadcastb_epi8 (__m128i a)</para>
        <para>VPBROADCASTB xmm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_broadcastsd_pd (__m128d a)</para>
        <para>VMOVDDUP xmm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_broadcastw_epi16 (__m128i a)</para>
        <para>VPBROADCASTW xmm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_broadcastd_epi32 (__m128i a)</para>
        <para>VPBROADCASTD xmm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m128i _mm_broadcastq_epi64 (__m128i a)</para>
        <para>VPBROADCASTQ xmm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_broadcastb_epi8 (__m128i a)</para>
        <para>VPBROADCASTB xmm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_broadcastss_ps (__m128 a)</para>
        <para>VBROADCASTSS xmm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_broadcastw_epi16 (__m128i a)</para>
        <para>VPBROADCASTW xmm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_broadcastd_epi32 (__m128i a)</para>
        <para>VPBROADCASTD xmm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m128i _mm_broadcastq_epi64 (__m128i a)</para>
        <para>VPBROADCASTQ xmm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.SByte*)">
      <summary>
        <para>__m128i _mm_broadcastb_epi8 (__m128i a)</para>
        <para>VPBROADCASTB xmm, m8</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.UInt16*)">
      <summary>
        <para>__m128i _mm_broadcastw_epi16 (__m128i a)</para>
        <para>VPBROADCASTW xmm, m16</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.UInt32*)">
      <summary>
        <para>__m128i _mm_broadcastd_epi32 (__m128i a)</para>
        <para>VPBROADCASTD xmm, m32</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.UInt64*)">
      <summary>
        <para>__m128i _mm_broadcastq_epi64 (__m128i a)</para>
        <para>VPBROADCASTQ xmm, m64</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Byte*)">
      <summary>
        <para>__m256i _mm256_broadcastb_epi8 (__m128i a)</para>
        <para>VPBROADCASTB ymm, m8</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Int16*)">
      <summary>
        <para>__m256i _mm256_broadcastw_epi16 (__m128i a)</para>
        <para>VPBROADCASTW ymm, m16</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Int32*)">
      <summary>
        <para>__m256i _mm256_broadcastd_epi32 (__m128i a)</para>
        <para>VPBROADCASTD ymm, m32</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Int64*)">
      <summary>
        <para>__m256i _mm256_broadcastq_epi64 (__m128i a)</para>
        <para>VPBROADCASTQ ymm, m64</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m256i _mm256_broadcastb_epi8 (__m128i a)</para>
        <para>VPBROADCASTB ymm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m256d _mm256_broadcastsd_pd (__m128d a)</para>
        <para>VBROADCASTSD ymm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m256i _mm256_broadcastw_epi16 (__m128i a)</para>
        <para>VPBROADCASTW ymm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m256i _mm256_broadcastd_epi32 (__m128i a)</para>
        <para>VPBROADCASTD ymm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m256i _mm256_broadcastq_epi64 (__m128i a)</para>
        <para>VPBROADCASTQ ymm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m256i _mm256_broadcastb_epi8 (__m128i a)</para>
        <para>VPBROADCASTB ymm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m256 _mm256_broadcastss_ps (__m128 a)</para>
        <para>VBROADCASTSS ymm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m256i _mm256_broadcastw_epi16 (__m128i a)</para>
        <para>VPBROADCASTW ymm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m256i _mm256_broadcastd_epi32 (__m128i a)</para>
        <para>VPBROADCASTD ymm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m256i _mm256_broadcastq_epi64 (__m128i a)</para>
        <para>VPBROADCASTQ ymm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.SByte*)">
      <summary>
        <para>__m256i _mm256_broadcastb_epi8 (__m128i a)</para>
        <para>VPBROADCASTB ymm, m8</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.UInt16*)">
      <summary>
        <para>__m256i _mm256_broadcastw_epi16 (__m128i a)</para>
        <para>VPBROADCASTW ymm, m16</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.UInt32*)">
      <summary>
        <para>__m256i _mm256_broadcastd_epi32 (__m128i a)</para>
        <para>VPBROADCASTD ymm, m32</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.UInt64*)">
      <summary>
        <para>__m256i _mm256_broadcastq_epi64 (__m128i a)</para>
        <para>VPBROADCASTQ ymm, m64</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastVector128ToVector256(System.Byte*)">
      <summary>
        <para>__m256i _mm256_broadcastsi128_si256 (__m128i a)</para>
        <para>VBROADCASTI128 ymm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastVector128ToVector256(System.Int16*)">
      <summary>
        <para>__m256i _mm256_broadcastsi128_si256 (__m128i a)</para>
        <para>VBROADCASTI128 ymm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastVector128ToVector256(System.Int32*)">
      <summary>
        <para>__m256i _mm256_broadcastsi128_si256 (__m128i a)</para>
        <para>VBROADCASTI128 ymm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastVector128ToVector256(System.Int64*)">
      <summary>
        <para>__m256i _mm256_broadcastsi128_si256 (__m128i a)</para>
        <para>VBROADCASTI128 ymm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastVector128ToVector256(System.SByte*)">
      <summary>
        <para>__m256i _mm256_broadcastsi128_si256 (__m128i a)</para>
        <para>VBROADCASTI128 ymm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastVector128ToVector256(System.UInt16*)">
      <summary>
        <para>__m256i _mm256_broadcastsi128_si256 (__m128i a)</para>
        <para>VBROADCASTI128 ymm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastVector128ToVector256(System.UInt32*)">
      <summary>
        <para>__m256i _mm256_broadcastsi128_si256 (__m128i a)</para>
        <para>VBROADCASTI128 ymm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastVector128ToVector256(System.UInt64*)">
      <summary>
        <para>__m256i _mm256_broadcastsi128_si256 (__m128i a)</para>
        <para>VBROADCASTI128 ymm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareEqual(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>__m256i _mm256_cmpeq_epi8 (__m256i a, __m256i b)</para>
        <para>VPCMPEQB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareEqual(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_cmpeq_epi16 (__m256i a, __m256i b)</para>
        <para>VPCMPEQW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareEqual(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_cmpeq_epi32 (__m256i a, __m256i b)</para>
        <para>VPCMPEQD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareEqual(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>__m256i _mm256_cmpeq_epi64 (__m256i a, __m256i b)</para>
        <para>VPCMPEQQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareEqual(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>__m256i _mm256_cmpeq_epi8 (__m256i a, __m256i b)</para>
        <para>VPCMPEQB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareEqual(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>__m256i _mm256_cmpeq_epi16 (__m256i a, __m256i b)</para>
        <para>VPCMPEQW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareEqual(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_cmpeq_epi32 (__m256i a, __m256i b)</para>
        <para>VPCMPEQD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareEqual(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>__m256i _mm256_cmpeq_epi64 (__m256i a, __m256i b)</para>
        <para>VPCMPEQQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareGreaterThan(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_cmpgt_epi16 (__m256i a, __m256i b)</para>
        <para>VPCMPGTW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareGreaterThan(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_cmpgt_epi32 (__m256i a, __m256i b)</para>
        <para>VPCMPGTD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareGreaterThan(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>__m256i _mm256_cmpgt_epi64 (__m256i a, __m256i b)</para>
        <para>VPCMPGTQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareGreaterThan(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>__m256i _mm256_cmpgt_epi8 (__m256i a, __m256i b)</para>
        <para>VPCMPGTB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToInt32(System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>int _mm256_cvtsi256_si32 (__m256i a)</para>
        <para>MOVD reg/m32, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToUInt32(System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>int _mm256_cvtsi256_si32 (__m256i a)</para>
        <para>MOVD reg/m32, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int16(System.Byte*)">
      <summary>VPMOVZXBW ymm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int16(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m256i _mm256_cvtepu8_epi16 (__m128i a)</para>
        <para>VPMOVZXBW ymm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int16(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m256i _mm256_cvtepi8_epi16 (__m128i a)</para>
        <para>VPMOVSXBW ymm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int16(System.SByte*)">
      <summary>VPMOVSXBW ymm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int32(System.Byte*)">
      <summary>VPMOVZXBD ymm, m64</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int32(System.Int16*)">
      <summary>VPMOVSXWD ymm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int32(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m256i _mm256_cvtepu8_epi32 (__m128i a)</para>
        <para>VPMOVZXBD ymm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int32(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m256i _mm256_cvtepi16_epi32 (__m128i a)</para>
        <para>VPMOVSXWD ymm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int32(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m256i _mm256_cvtepi8_epi32 (__m128i a)</para>
        <para>VPMOVSXBD ymm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int32(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m256i _mm256_cvtepu16_epi32 (__m128i a)</para>
        <para>VPMOVZXWD ymm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int32(System.SByte*)">
      <summary>VPMOVSXBD ymm, m64</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int32(System.UInt16*)">
      <summary>VPMOVZXWD ymm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.Byte*)">
      <summary>VPMOVZXBQ ymm, m32</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.Int16*)">
      <summary>VPMOVSXWQ ymm, m64</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.Int32*)">
      <summary>VPMOVSXDQ ymm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m256i _mm256_cvtepu8_epi64 (__m128i a)</para>
        <para>VPMOVZXBQ ymm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m256i _mm256_cvtepi16_epi64 (__m128i a)</para>
        <para>VPMOVSXWQ ymm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m256i _mm256_cvtepi32_epi64 (__m128i a)</para>
        <para>VPMOVSXDQ ymm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m256i _mm256_cvtepi8_epi64 (__m128i a)</para>
        <para>VPMOVSXBQ ymm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m256i _mm256_cvtepu16_epi64 (__m128i a)</para>
        <para>VPMOVZXWQ ymm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m256i _mm256_cvtepu32_epi64 (__m128i a)</para>
        <para>VPMOVZXDQ ymm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.SByte*)">
      <summary>VPMOVSXBQ ymm, m32</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.UInt16*)">
      <summary>VPMOVZXWQ ymm, m64</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.UInt32*)">
      <summary>VPMOVZXDQ ymm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)">
      <summary>
        <para>__m128i _mm256_extracti128_si256 (__m256i a, const int imm8)</para>
        <para>VEXTRACTI128 xmm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>
        <para>__m128i _mm256_extracti128_si256 (__m256i a, const int imm8)</para>
        <para>VEXTRACTI128 xmm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>
        <para>__m128i _mm256_extracti128_si256 (__m256i a, const int imm8)</para>
        <para>VEXTRACTI128 xmm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>
        <para>__m128i _mm256_extracti128_si256 (__m256i a, const int imm8)</para>
        <para>VEXTRACTI128 xmm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)">
      <summary>
        <para>__m128i _mm256_extracti128_si256 (__m256i a, const int imm8)</para>
        <para>VEXTRACTI128 xmm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>
        <para>__m128i _mm256_extracti128_si256 (__m256i a, const int imm8)</para>
        <para>VEXTRACTI128 xmm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>
        <para>__m128i _mm256_extracti128_si256 (__m256i a, const int imm8)</para>
        <para>VEXTRACTI128 xmm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>
        <para>__m128i _mm256_extracti128_si256 (__m256i a, const int imm8)</para>
        <para>VEXTRACTI128 xmm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Double},System.Double*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>__m128d _mm_mask_i32gather_pd (__m128d src, double const* base_addr, __m128i vindex, __m128d mask, const int scale)</para>
        <para>VGATHERDPD xmm, vm32x, xmm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Double},System.Double*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>__m128d _mm_mask_i64gather_pd (__m128d src, double const* base_addr, __m128i vindex, __m128d mask, const int scale)</para>
        <para>VGATHERQPD xmm, vm64x, xmm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Int32},System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m128i _mm_mask_i32gather_epi32 (__m128i src, int const* base_addr, __m128i vindex, __m128i mask, const int scale)</para>
        <para>VPGATHERDD xmm, vm32x, xmm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Int32},System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m128i _mm_mask_i64gather_epi32 (__m128i src, int const* base_addr, __m128i vindex, __m128i mask, const int scale)</para>
        <para>VPGATHERQD xmm, vm64x, xmm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Int32},System.Int32*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m128i _mm256_mask_i64gather_epi32 (__m128i src, int const* base_addr, __m256i vindex, __m128i mask, const int scale)</para>
        <para>VPGATHERQD xmm, vm32y, xmm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Int64},System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>__m128i _mm_mask_i32gather_epi64 (__m128i src, __int64 const* base_addr, __m128i vindex, __m128i mask, const int scale)</para>
        <para>VPGATHERDQ xmm, vm32x, xmm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Int64},System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>__m128i _mm_mask_i64gather_epi64 (__m128i src, __int64 const* base_addr, __m128i vindex, __m128i mask, const int scale)</para>
        <para>VPGATHERQQ xmm, vm64x, xmm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>__m128 _mm_mask_i32gather_ps (__m128 src, float const* base_addr, __m128i vindex, __m128 mask, const int scale)</para>
        <para>VGATHERDPS xmm, vm32x, xmm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>__m128 _mm_mask_i64gather_ps (__m128 src, float const* base_addr, __m128i vindex, __m128 mask, const int scale)</para>
        <para>VGATHERQPS xmm, vm64x, xmm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>__m128 _mm256_mask_i64gather_ps (__m128 src, float const* base_addr, __m256i vindex, __m128 mask, const int scale)</para>
        <para>VGATHERQPS xmm, vm32y, xmm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.UInt32},System.UInt32*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>__m128i _mm_mask_i32gather_epi32 (__m128i src, int const* base_addr, __m128i vindex, __m128i mask, const int scale)</para>
        <para>VPGATHERDD xmm, vm32x, xmm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.UInt32},System.UInt32*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>__m128i _mm_mask_i64gather_epi32 (__m128i src, int const* base_addr, __m128i vindex, __m128i mask, const int scale)</para>
        <para>VPGATHERQD xmm, vm64x, xmm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.UInt32},System.UInt32*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>__m128i _mm256_mask_i64gather_epi32 (__m128i src, int const* base_addr, __m256i vindex, __m128i mask, const int scale)</para>
        <para>VPGATHERQD xmm, vm32y, xmm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.UInt64},System.UInt64*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>__m128i _mm_mask_i32gather_epi64 (__m128i src, __int64 const* base_addr, __m128i vindex, __m128i mask, const int scale)</para>
        <para>VPGATHERDQ xmm, vm32x, xmm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.UInt64},System.UInt64*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>__m128i _mm_mask_i64gather_epi64 (__m128i src, __int64 const* base_addr, __m128i vindex, __m128i mask, const int scale)</para>
        <para>VPGATHERQQ xmm, vm64x, xmm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector256(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)">
      <summary>
        <para>__m256d _mm256_mask_i32gather_pd (__m256d src, double const* base_addr, __m128i vindex, __m256d mask, const int scale)</para>
        <para>VPGATHERDPD ymm, vm32y, ymm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector256(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)">
      <summary>
        <para>__m256d _mm256_mask_i64gather_pd (__m256d src, double const* base_addr, __m256i vindex, __m256d mask, const int scale)</para>
        <para>VGATHERQPD ymm, vm32y, ymm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector256(System.Runtime.Intrinsics.Vector256{System.Int32},System.Int32*,System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>
        <para>__m256i _mm256_mask_i32gather_epi32 (__m256i src, int const* base_addr, __m256i vindex, __m256i mask, const int scale)</para>
        <para>VPGATHERDD ymm, vm32y, ymm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector256(System.Runtime.Intrinsics.Vector256{System.Int64},System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>
        <para>__m256i _mm256_mask_i32gather_epi64 (__m256i src, __int64 const* base_addr, __m128i vindex, __m256i mask, const int scale)</para>
        <para>VPGATHERDQ ymm, vm32y, ymm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector256(System.Runtime.Intrinsics.Vector256{System.Int64},System.Int64*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>
        <para>__m256i _mm256_mask_i64gather_epi64 (__m256i src, __int64 const* base_addr, __m256i vindex, __m256i mask, const int scale)</para>
        <para>VPGATHERQQ ymm, vm32y, ymm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector256(System.Runtime.Intrinsics.Vector256{System.Single},System.Single*,System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)">
      <summary>
        <para>__m256 _mm256_mask_i32gather_ps (__m256 src, float const* base_addr, __m256i vindex, __m256 mask, const int scale)</para>
        <para>VPGATHERDPS ymm, vm32y, ymm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector256(System.Runtime.Intrinsics.Vector256{System.UInt32},System.UInt32*,System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>
        <para>__m256i _mm256_mask_i32gather_epi32 (__m256i src, int const* base_addr, __m256i vindex, __m256i mask, const int scale)</para>
        <para>VPGATHERDD ymm, vm32y, ymm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector256(System.Runtime.Intrinsics.Vector256{System.UInt64},System.UInt64*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>
        <para>__m256i _mm256_mask_i32gather_epi64 (__m256i src, __int64 const* base_addr, __m128i vindex, __m256i mask, const int scale)</para>
        <para>VPGATHERDQ ymm, vm32y, ymm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector256(System.Runtime.Intrinsics.Vector256{System.UInt64},System.UInt64*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>
        <para>__m256i _mm256_mask_i64gather_epi64 (__m256i src, __int64 const* base_addr, __m256i vindex, __m256i mask, const int scale)</para>
        <para>VPGATHERQQ ymm, vm32y, ymm</para>
      </summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Double*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m128d _mm_i32gather_pd (double const* base_addr, __m128i vindex, const int scale)</para>
        <para>VGATHERDPD xmm, vm32x, xmm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Double*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>__m128d _mm_i64gather_pd (double const* base_addr, __m128i vindex, const int scale)</para>
        <para>VGATHERQPD xmm, vm64x, xmm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m128i _mm_i32gather_epi32 (int const* base_addr, __m128i vindex, const int scale)</para>
        <para>VPGATHERDD xmm, vm32x, xmm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>__m128i _mm_i64gather_epi32 (int const* base_addr, __m128i vindex, const int scale)</para>
        <para>VPGATHERQD xmm, vm64x, xmm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Int32*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>
        <para>__m128i _mm256_i64gather_epi32 (int const* base_addr, __m256i vindex, const int scale)</para>
        <para>VPGATHERQD xmm, vm64y, xmm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m128i _mm_i32gather_epi64 (__int64 const* base_addr, __m128i vindex, const int scale)</para>
        <para>VPGATHERDQ xmm, vm32x, xmm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>__m128i _mm_i64gather_epi64 (__int64 const* base_addr, __m128i vindex, const int scale)</para>
        <para>VPGATHERQQ xmm, vm64x, xmm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Single*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m128 _mm_i32gather_ps (float const* base_addr, __m128i vindex, const int scale)</para>
        <para>VGATHERDPS xmm, vm32x, xmm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Single*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>__m128 _mm_i64gather_ps (float const* base_addr, __m128i vindex, const int scale)</para>
        <para>VGATHERQPS xmm, vm64x, xmm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Single*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>
        <para>__m128 _mm256_i64gather_ps (float const* base_addr, __m256i vindex, const int scale)</para>
        <para>VGATHERQPS xmm, vm64y, xmm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m128i _mm_i32gather_epi32 (int const* base_addr, __m128i vindex, const int scale)</para>
        <para>VPGATHERDD xmm, vm32x, xmm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>__m128i _mm_i64gather_epi32 (int const* base_addr, __m128i vindex, const int scale)</para>
        <para>VPGATHERQD xmm, vm64x, xmm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.UInt32*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>
        <para>__m128i _mm256_i64gather_epi32 (int const* base_addr, __m256i vindex, const int scale)</para>
        <para>VPGATHERQD xmm, vm64y, xmm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m128i _mm_i32gather_epi64 (__int64 const* base_addr, __m128i vindex, const int scale)</para>
        <para>VPGATHERDQ xmm, vm32x, xmm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>__m128i _mm_i64gather_epi64 (__int64 const* base_addr, __m128i vindex, const int scale)</para>
        <para>VPGATHERQQ xmm, vm64x, xmm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector256(System.Double*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m256d _mm256_i32gather_pd (double const* base_addr, __m128i vindex, const int scale)</para>
        <para>VGATHERDPD ymm, vm32y, ymm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector256(System.Double*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>
        <para>__m256d _mm256_i64gather_pd (double const* base_addr, __m256i vindex, const int scale)</para>
        <para>VGATHERQPD ymm, vm64y, ymm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector256(System.Int32*,System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>
        <para>__m256i _mm256_i32gather_epi32 (int const* base_addr, __m256i vindex, const int scale)</para>
        <para>VPGATHERDD ymm, vm32y, ymm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector256(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m256i _mm256_i32gather_epi64 (__int64 const* base_addr, __m128i vindex, const int scale)</para>
        <para>VPGATHERDQ ymm, vm32y, ymm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector256(System.Int64*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>
        <para>__m256i _mm256_i64gather_epi64 (__int64 const* base_addr, __m256i vindex, const int scale)</para>
        <para>VPGATHERQQ ymm, vm64y, ymm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector256(System.Single*,System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>
        <para>__m256 _mm256_i32gather_ps (float const* base_addr, __m256i vindex, const int scale)</para>
        <para>VGATHERDPS ymm, vm32y, ymm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector256(System.UInt32*,System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>
        <para>__m256i _mm256_i32gather_epi32 (int const* base_addr, __m256i vindex, const int scale)</para>
        <para>VPGATHERDD ymm, vm32y, ymm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector256(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m256i _mm256_i32gather_epi64 (__int64 const* base_addr, __m128i vindex, const int scale)</para>
        <para>VPGATHERDQ ymm, vm32y, ymm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector256(System.UInt64*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>
        <para>__m256i _mm256_i64gather_epi64 (__int64 const* base_addr, __m256i vindex, const int scale)</para>
        <para>VPGATHERQQ ymm, vm64y, ymm</para>
      </summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
      <exception cref="T:System.ArgumentOutOfRangeException">The scale parameter is not 1, 2, 4 or 8.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.HorizontalAdd(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_hadd_epi16 (__m256i a, __m256i b)</para>
        <para>VPHADDW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.HorizontalAdd(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_hadd_epi32 (__m256i a, __m256i b)</para>
        <para>VPHADDD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.HorizontalAddSaturate(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_hadds_epi16 (__m256i a, __m256i b)</para>
        <para>VPHADDSW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.HorizontalSubtract(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_hsub_epi16 (__m256i a, __m256i b)</para>
        <para>VPHSUBW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.HorizontalSubtract(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_hsub_epi32 (__m256i a, __m256i b)</para>
        <para>VPHSUBD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.HorizontalSubtractSaturate(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_hsubs_epi16 (__m256i a, __m256i b)</para>
        <para>VPHSUBSW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>__m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8)</para>
        <para>VINSERTI128 ymm, ymm, xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>__m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8)</para>
        <para>VINSERTI128 ymm, ymm, xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8)</para>
        <para>VINSERTI128 ymm, ymm, xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>__m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8)</para>
        <para>VINSERTI128 ymm, ymm, xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.InsertVector128(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>__m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8)</para>
        <para>VINSERTI128 ymm, ymm, xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.InsertVector128(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>__m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8)</para>
        <para>VINSERTI128 ymm, ymm, xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.InsertVector128(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>__m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8)</para>
        <para>VINSERTI128 ymm, ymm, xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.InsertVector128(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>__m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8)</para>
        <para>VINSERTI128 ymm, ymm, xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.LoadAlignedVector256NonTemporal(System.Byte*)">
      <summary>
        <para>__m256i _mm256_stream_load_si256 (__m256i const* mem_addr)</para>
        <para>VMOVNTDQA ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.LoadAlignedVector256NonTemporal(System.Int16*)">
      <summary>
        <para>__m256i _mm256_stream_load_si256 (__m256i const* mem_addr)</para>
        <para>VMOVNTDQA ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.LoadAlignedVector256NonTemporal(System.Int32*)">
      <summary>
        <para>__m256i _mm256_stream_load_si256 (__m256i const* mem_addr)</para>
        <para>VMOVNTDQA ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.LoadAlignedVector256NonTemporal(System.Int64*)">
      <summary>
        <para>__m256i _mm256_stream_load_si256 (__m256i const* mem_addr)</para>
        <para>VMOVNTDQA ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.LoadAlignedVector256NonTemporal(System.SByte*)">
      <summary>
        <para>__m256i _mm256_stream_load_si256 (__m256i const* mem_addr)</para>
        <para>VMOVNTDQA ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.LoadAlignedVector256NonTemporal(System.UInt16*)">
      <summary>
        <para>__m256i _mm256_stream_load_si256 (__m256i const* mem_addr)</para>
        <para>VMOVNTDQA ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.LoadAlignedVector256NonTemporal(System.UInt32*)">
      <summary>
        <para>__m256i _mm256_stream_load_si256 (__m256i const* mem_addr)</para>
        <para>VMOVNTDQA ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.LoadAlignedVector256NonTemporal(System.UInt64*)">
      <summary>
        <para>__m256i _mm256_stream_load_si256 (__m256i const* mem_addr)</para>
        <para>VMOVNTDQA ymm, m256</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskLoad(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_maskload_epi32 (int const* mem_addr, __m128i mask)</para>
        <para>VPMASKMOVD xmm, xmm, m128</para>
      </summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskLoad(System.Int32*,System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_maskload_epi32 (int const* mem_addr, __m256i mask)</para>
        <para>VPMASKMOVD ymm, ymm, m256</para>
      </summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskLoad(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m128i _mm_maskload_epi64 (__int64 const* mem_addr, __m128i mask)</para>
        <para>VPMASKMOVQ xmm, xmm, m128</para>
      </summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskLoad(System.Int64*,System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>__m256i _mm256_maskload_epi64 (__int64 const* mem_addr, __m256i mask)</para>
        <para>VPMASKMOVQ ymm, ymm, m256</para>
      </summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskLoad(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_maskload_epi32 (int const* mem_addr, __m128i mask)</para>
        <para>VPMASKMOVD xmm, xmm, m128</para>
      </summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskLoad(System.UInt32*,System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_maskload_epi32 (int const* mem_addr, __m256i mask)</para>
        <para>VPMASKMOVD ymm, ymm, m256</para>
      </summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskLoad(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m128i _mm_maskload_epi64 (__int64 const* mem_addr, __m128i mask)</para>
        <para>VPMASKMOVQ xmm, xmm, m128</para>
      </summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskLoad(System.UInt64*,System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>__m256i _mm256_maskload_epi64 (__int64 const* mem_addr, __m256i mask)</para>
        <para>VPMASKMOVQ ymm, ymm, m256</para>
      </summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskStore(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>void _mm_maskstore_epi32 (int* mem_addr, __m128i mask, __m128i a)</para>
        <para>VPMASKMOVD m128, xmm, xmm</para>
      </summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskStore(System.Int32*,System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>void _mm256_maskstore_epi32 (int* mem_addr, __m256i mask, __m256i a)</para>
        <para>VPMASKMOVD m256, ymm, ymm</para>
      </summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskStore(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>void _mm_maskstore_epi64 (__int64* mem_addr, __m128i mask, __m128i a)</para>
        <para>VPMASKMOVQ m128, xmm, xmm</para>
      </summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskStore(System.Int64*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>void _mm256_maskstore_epi64 (__int64* mem_addr, __m256i mask, __m256i a)</para>
        <para>VPMASKMOVQ m256, ymm, ymm</para>
      </summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskStore(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>void _mm_maskstore_epi32 (int* mem_addr, __m128i mask, __m128i a)</para>
        <para>VPMASKMOVD m128, xmm, xmm</para>
      </summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskStore(System.UInt32*,System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>void _mm256_maskstore_epi32 (int* mem_addr, __m256i mask, __m256i a)</para>
        <para>VPMASKMOVD m256, ymm, ymm</para>
      </summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskStore(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>void _mm_maskstore_epi64 (__int64* mem_addr, __m128i mask, __m128i a)</para>
        <para>VPMASKMOVQ m128, xmm, xmm</para>
      </summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskStore(System.UInt64*,System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>void _mm256_maskstore_epi64 (__int64* mem_addr, __m256i mask, __m256i a)</para>
        <para>VPMASKMOVQ m256, ymm, ymm</para>
      </summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Max(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>__m256i _mm256_max_epu8 (__m256i a, __m256i b)</para>
        <para>VPMAXUB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Max(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_max_epi16 (__m256i a, __m256i b)</para>
        <para>VPMAXSW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Max(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_max_epi32 (__m256i a, __m256i b)</para>
        <para>VPMAXSD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Max(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>__m256i _mm256_max_epi8 (__m256i a, __m256i b)</para>
        <para>VPMAXSB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Max(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>__m256i _mm256_max_epu16 (__m256i a, __m256i b)</para>
        <para>VPMAXUW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Max(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_max_epu32 (__m256i a, __m256i b)</para>
        <para>VPMAXUD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Min(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>__m256i _mm256_min_epu8 (__m256i a, __m256i b)</para>
        <para>VPMINUB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Min(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_min_epi16 (__m256i a, __m256i b)</para>
        <para>VPMINSW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Min(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_min_epi32 (__m256i a, __m256i b)</para>
        <para>VPMINSD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Min(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>__m256i _mm256_min_epi8 (__m256i a, __m256i b)</para>
        <para>VPMINSB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Min(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>__m256i _mm256_min_epu16 (__m256i a, __m256i b)</para>
        <para>VPMINUW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Min(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_min_epu32 (__m256i a, __m256i b)</para>
        <para>VPMINUD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MoveMask(System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>int _mm256_movemask_epi8 (__m256i a)</para>
        <para>VPMOVMSKB reg, ymm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MoveMask(System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>int _mm256_movemask_epi8 (__m256i a)</para>
        <para>VPMOVMSKB reg, ymm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultipleSumAbsoluteDifferences(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)">
      <summary>
        <para>__m256i _mm256_mpsadbw_epu8 (__m256i a, __m256i b, const int imm8)</para>
        <para>VMPSADBW ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Multiply(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_mul_epi32 (__m256i a, __m256i b)</para>
        <para>VPMULDQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Multiply(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_mul_epu32 (__m256i a, __m256i b)</para>
        <para>VPMULUDQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultiplyAddAdjacent(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>__m256i _mm256_maddubs_epi16 (__m256i a, __m256i b)</para>
        <para>VPMADDUBSW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultiplyAddAdjacent(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_madd_epi16 (__m256i a, __m256i b)</para>
        <para>VPMADDWD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultiplyHigh(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_mulhi_epi16 (__m256i a, __m256i b)</para>
        <para>VPMULHW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultiplyHigh(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>__m256i _mm256_mulhi_epu16 (__m256i a, __m256i b)</para>
        <para>VPMULHUW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultiplyHighRoundScale(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_mulhrs_epi16 (__m256i a, __m256i b)</para>
        <para>VPMULHRSW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultiplyLow(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_mullo_epi16 (__m256i a, __m256i b)</para>
        <para>VPMULLW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultiplyLow(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_mullo_epi32 (__m256i a, __m256i b)</para>
        <para>VPMULLD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultiplyLow(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>__m256i _mm256_mullo_epi16 (__m256i a, __m256i b)</para>
        <para>VPMULLW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultiplyLow(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_mullo_epi32 (__m256i a, __m256i b)</para>
        <para>VPMULLD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Or(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>__m256i _mm256_or_si256 (__m256i a, __m256i b)</para>
        <para>VPOR ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Or(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_or_si256 (__m256i a, __m256i b)</para>
        <para>VPOR ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Or(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_or_si256 (__m256i a, __m256i b)</para>
        <para>VPOR ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Or(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>__m256i _mm256_or_si256 (__m256i a, __m256i b)</para>
        <para>VPOR ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Or(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>__m256i _mm256_or_si256 (__m256i a, __m256i b)</para>
        <para>VPOR ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Or(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>__m256i _mm256_or_si256 (__m256i a, __m256i b)</para>
        <para>VPOR ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Or(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_or_si256 (__m256i a, __m256i b)</para>
        <para>VPOR ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Or(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>__m256i _mm256_or_si256 (__m256i a, __m256i b)</para>
        <para>VPOR ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.PackSignedSaturate(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_packs_epi16 (__m256i a, __m256i b)</para>
        <para>VPACKSSWB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.PackSignedSaturate(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_packs_epi32 (__m256i a, __m256i b)</para>
        <para>VPACKSSDW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.PackUnsignedSaturate(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_packus_epi16 (__m256i a, __m256i b)</para>
        <para>VPACKUSWB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.PackUnsignedSaturate(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_packus_epi32 (__m256i a, __m256i b)</para>
        <para>VPACKUSDW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)">
      <summary>
        <para>__m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8)</para>
        <para>VPERM2I128 ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>
        <para>__m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8)</para>
        <para>VPERM2I128 ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>
        <para>__m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8)</para>
        <para>VPERM2I128 ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>
        <para>__m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8)</para>
        <para>VPERM2I128 ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute2x128(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)">
      <summary>
        <para>__m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8)</para>
        <para>VPERM2I128 ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute2x128(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>
        <para>__m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8)</para>
        <para>VPERM2I128 ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute2x128(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>
        <para>__m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8)</para>
        <para>VPERM2I128 ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute2x128(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>
        <para>__m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8)</para>
        <para>VPERM2I128 ymm, ymm, ymm/m256, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute4x64(System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)">
      <summary>
        <para>__m256d _mm256_permute4x64_pd (__m256d a, const int imm8)</para>
        <para>VPERMPD ymm, ymm/m256, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute4x64(System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>
        <para>__m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8)</para>
        <para>VPERMQ ymm, ymm/m256, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute4x64(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>
        <para>__m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8)</para>
        <para>VPERMQ ymm, ymm/m256, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.PermuteVar8x32(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_permutevar8x32_epi32 (__m256i a, __m256i idx)</para>
        <para>VPERMD ymm, ymm/m256, ymm</para>
      </summary>
      <param name="left" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.PermuteVar8x32(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256 _mm256_permutevar8x32_ps (__m256 a, __m256i idx)</para>
        <para>VPERMPS ymm, ymm/m256, ymm</para>
      </summary>
      <param name="left" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.PermuteVar8x32(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_permutevar8x32_epi32 (__m256i a, __m256i idx)</para>
        <para>VPERMD ymm, ymm/m256, ymm</para>
      </summary>
      <param name="left" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>
        <para>__m256i _mm256_slli_epi16 (__m256i a, int imm8)</para>
        <para>VPSLLW ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m256i _mm256_sll_epi16 (__m256i a, __m128i count)</para>
        <para>VPSLLW ymm, ymm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>
        <para>__m256i _mm256_slli_epi32 (__m256i a, int imm8)</para>
        <para>VPSLLD ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m256i _mm256_sll_epi32 (__m256i a, __m128i count)</para>
        <para>VPSLLD ymm, ymm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>
        <para>__m256i _mm256_slli_epi64 (__m256i a, int imm8)</para>
        <para>VPSLLQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m256i _mm256_sll_epi64 (__m256i a, __m128i count)</para>
        <para>VPSLLQ ymm, ymm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>
        <para>__m256i _mm256_slli_epi16 (__m256i a, int imm8)</para>
        <para>VPSLLW ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m256i _mm256_sll_epi16 (__m256i a, __m128i count)</para>
        <para>VPSLLW ymm, ymm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>
        <para>__m256i _mm256_slli_epi32 (__m256i a, int imm8)</para>
        <para>VPSLLD ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m256i _mm256_sll_epi32 (__m256i a, __m128i count)</para>
        <para>VPSLLD ymm, ymm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>
        <para>__m256i _mm256_slli_epi64 (__m256i a, int imm8)</para>
        <para>VPSLLQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m256i _mm256_sll_epi64 (__m256i a, __m128i count)</para>
        <para>VPSLLQ ymm, ymm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)">
      <summary>
        <para>__m256i _mm256_bslli_epi128 (__m256i a, const int imm8)</para>
        <para>VPSLLDQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>
        <para>__m256i _mm256_bslli_epi128 (__m256i a, const int imm8)</para>
        <para>VPSLLDQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>
        <para>__m256i _mm256_bslli_epi128 (__m256i a, const int imm8)</para>
        <para>VPSLLDQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>
        <para>__m256i _mm256_bslli_epi128 (__m256i a, const int imm8)</para>
        <para>VPSLLDQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)">
      <summary>
        <para>__m256i _mm256_bslli_epi128 (__m256i a, const int imm8)</para>
        <para>VPSLLDQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>
        <para>__m256i _mm256_bslli_epi128 (__m256i a, const int imm8)</para>
        <para>VPSLLDQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>
        <para>__m256i _mm256_bslli_epi128 (__m256i a, const int imm8)</para>
        <para>VPSLLDQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>
        <para>__m256i _mm256_bslli_epi128 (__m256i a, const int imm8)</para>
        <para>VPSLLDQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_sllv_epi32 (__m128i a, __m128i count)</para>
        <para>VPSLLVD xmm, ymm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m128i _mm_sllv_epi64 (__m128i a, __m128i count)</para>
        <para>VPSLLVQ xmm, ymm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_sllv_epi32 (__m128i a, __m128i count)</para>
        <para>VPSLLVD xmm, ymm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m128i _mm_sllv_epi64 (__m128i a, __m128i count)</para>
        <para>VPSLLVQ xmm, ymm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_sllv_epi32 (__m256i a, __m256i count)</para>
        <para>VPSLLVD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>__m256i _mm256_sllv_epi64 (__m256i a, __m256i count)</para>
        <para>VPSLLVQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_sllv_epi32 (__m256i a, __m256i count)</para>
        <para>VPSLLVD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>__m256i _mm256_sllv_epi64 (__m256i a, __m256i count)</para>
        <para>VPSLLVQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>
        <para>__m256i _mm256_srai_epi16 (__m256i a, int imm8)</para>
        <para>VPSRAW ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>_mm256_sra_epi16 (__m256i a, __m128i count)</para>
        <para>VPSRAW ymm, ymm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>
        <para>__m256i _mm256_srai_epi32 (__m256i a, int imm8)</para>
        <para>VPSRAD ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>_mm256_sra_epi32 (__m256i a, __m128i count)</para>
        <para>VPSRAD ymm, ymm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightArithmeticVariable(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_srav_epi32 (__m128i a, __m128i count)</para>
        <para>VPSRAVD xmm, xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightArithmeticVariable(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_srav_epi32 (__m256i a, __m256i count)</para>
        <para>VPSRAVD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>
        <para>__m256i _mm256_srli_epi16 (__m256i a, int imm8)</para>
        <para>VPSRLW ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m256i _mm256_srl_epi16 (__m256i a, __m128i count)</para>
        <para>VPSRLW ymm, ymm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>
        <para>__m256i _mm256_srli_epi32 (__m256i a, int imm8)</para>
        <para>VPSRLD ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m256i _mm256_srl_epi32 (__m256i a, __m128i count)</para>
        <para>VPSRLD ymm, ymm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>
        <para>__m256i _mm256_srli_epi64 (__m256i a, int imm8)</para>
        <para>VPSRLQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m256i _mm256_srl_epi64 (__m256i a, __m128i count)</para>
        <para>VPSRLQ ymm, ymm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>
        <para>__m256i _mm256_srli_epi16 (__m256i a, int imm8)</para>
        <para>VPSRLW ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m256i _mm256_srl_epi16 (__m256i a, __m128i count)</para>
        <para>VPSRLW ymm, ymm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>
        <para>__m256i _mm256_srli_epi32 (__m256i a, int imm8)</para>
        <para>VPSRLD ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m256i _mm256_srl_epi32 (__m256i a, __m128i count)</para>
        <para>VPSRLD ymm, ymm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>
        <para>__m256i _mm256_srli_epi64 (__m256i a, int imm8)</para>
        <para>VPSRLQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m256i _mm256_srl_epi64 (__m256i a, __m128i count)</para>
        <para>VPSRLQ ymm, ymm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)">
      <summary>
        <para>__m256i _mm256_bsrli_epi128 (__m256i a, const int imm8)</para>
        <para>VPSRLDQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>
        <para>__m256i _mm256_bsrli_epi128 (__m256i a, const int imm8)</para>
        <para>VPSRLDQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>
        <para>__m256i _mm256_bsrli_epi128 (__m256i a, const int imm8)</para>
        <para>VPSRLDQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>
        <para>__m256i _mm256_bsrli_epi128 (__m256i a, const int imm8)</para>
        <para>VPSRLDQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)">
      <summary>
        <para>__m256i _mm256_bsrli_epi128 (__m256i a, const int imm8)</para>
        <para>VPSRLDQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>
        <para>__m256i _mm256_bsrli_epi128 (__m256i a, const int imm8)</para>
        <para>VPSRLDQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>
        <para>__m256i _mm256_bsrli_epi128 (__m256i a, const int imm8)</para>
        <para>VPSRLDQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>
        <para>__m256i _mm256_bsrli_epi128 (__m256i a, const int imm8)</para>
        <para>VPSRLDQ ymm, ymm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_srlv_epi32 (__m128i a, __m128i count)</para>
        <para>VPSRLVD xmm, xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m128i _mm_srlv_epi64 (__m128i a, __m128i count)</para>
        <para>VPSRLVQ xmm, xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_srlv_epi32 (__m128i a, __m128i count)</para>
        <para>VPSRLVD xmm, xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m128i _mm_srlv_epi64 (__m128i a, __m128i count)</para>
        <para>VPSRLVQ xmm, xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_srlv_epi32 (__m256i a, __m256i count)</para>
        <para>VPSRLVD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>__m256i _mm256_srlv_epi64 (__m256i a, __m256i count)</para>
        <para>VPSRLVQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_srlv_epi32 (__m256i a, __m256i count)</para>
        <para>VPSRLVD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>__m256i _mm256_srlv_epi64 (__m256i a, __m256i count)</para>
        <para>VPSRLVQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Shuffle(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>__m256i _mm256_shuffle_epi8 (__m256i a, __m256i b)</para>
        <para>VPSHUFB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Shuffle(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>
        <para>__m256i _mm256_shuffle_epi32 (__m256i a, const int imm8)</para>
        <para>VPSHUFD ymm, ymm/m256, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Shuffle(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>__m256i _mm256_shuffle_epi8 (__m256i a, __m256i b)</para>
        <para>VPSHUFB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Shuffle(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>
        <para>__m256i _mm256_shuffle_epi32 (__m256i a, const int imm8)</para>
        <para>VPSHUFD ymm, ymm/m256, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShuffleHigh(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>
        <para>__m256i _mm256_shufflehi_epi16 (__m256i a, const int imm8)</para>
        <para>VPSHUFHW ymm, ymm/m256, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShuffleHigh(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>
        <para>__m256i _mm256_shufflehi_epi16 (__m256i a, const int imm8)</para>
        <para>VPSHUFHW ymm, ymm/m256, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShuffleLow(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>
        <para>__m256i _mm256_shufflelo_epi16 (__m256i a, const int imm8)</para>
        <para>VPSHUFLW ymm, ymm/m256, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShuffleLow(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>
        <para>__m256i _mm256_shufflelo_epi16 (__m256i a, const int imm8)</para>
        <para>VPSHUFLW ymm, ymm/m256, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Sign(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_sign_epi16 (__m256i a, __m256i b)</para>
        <para>VPSIGNW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Sign(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_sign_epi32 (__m256i a, __m256i b)</para>
        <para>VPSIGND ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Sign(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>__m256i _mm256_sign_epi8 (__m256i a, __m256i b)</para>
        <para>VPSIGNB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Subtract(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>__m256i _mm256_sub_epi8 (__m256i a, __m256i b)</para>
        <para>VPSUBB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Subtract(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_sub_epi16 (__m256i a, __m256i b)</para>
        <para>VPSUBW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Subtract(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_sub_epi32 (__m256i a, __m256i b)</para>
        <para>VPSUBD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Subtract(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>__m256i _mm256_sub_epi64 (__m256i a, __m256i b)</para>
        <para>VPSUBQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Subtract(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>__m256i _mm256_sub_epi8 (__m256i a, __m256i b)</para>
        <para>VPSUBB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Subtract(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>__m256i _mm256_sub_epi16 (__m256i a, __m256i b)</para>
        <para>VPSUBW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Subtract(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_sub_epi32 (__m256i a, __m256i b)</para>
        <para>VPSUBD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Subtract(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>__m256i _mm256_sub_epi64 (__m256i a, __m256i b)</para>
        <para>VPSUBQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.SubtractSaturate(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>__m256i _mm256_subs_epu8 (__m256i a, __m256i b)</para>
        <para>VPSUBUSB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.SubtractSaturate(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_subs_epi16 (__m256i a, __m256i b)</para>
        <para>VPSUBSW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.SubtractSaturate(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>__m256i _mm256_subs_epi8 (__m256i a, __m256i b)</para>
        <para>VPSUBSB ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.SubtractSaturate(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>__m256i _mm256_subs_epu16 (__m256i a, __m256i b)</para>
        <para>VPSUBUSW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.SumAbsoluteDifferences(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>__m256i _mm256_sad_epu8 (__m256i a, __m256i b)</para>
        <para>VPSADBW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>__m256i _mm256_unpackhi_epi8 (__m256i a, __m256i b)</para>
        <para>VPUNPCKHBW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_unpackhi_epi16 (__m256i a, __m256i b)</para>
        <para>VPUNPCKHWD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_unpackhi_epi32 (__m256i a, __m256i b)</para>
        <para>VPUNPCKHDQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>__m256i _mm256_unpackhi_epi64 (__m256i a, __m256i b)</para>
        <para>VPUNPCKHQDQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>__m256i _mm256_unpackhi_epi8 (__m256i a, __m256i b)</para>
        <para>VPUNPCKHBW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>__m256i _mm256_unpackhi_epi16 (__m256i a, __m256i b)</para>
        <para>VPUNPCKHWD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_unpackhi_epi32 (__m256i a, __m256i b)</para>
        <para>VPUNPCKHDQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>__m256i _mm256_unpackhi_epi64 (__m256i a, __m256i b)</para>
        <para>VPUNPCKHQDQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackLow(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>__m256i _mm256_unpacklo_epi8 (__m256i a, __m256i b)</para>
        <para>VPUNPCKLBW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackLow(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_unpacklo_epi16 (__m256i a, __m256i b)</para>
        <para>VPUNPCKLWD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackLow(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_unpacklo_epi32 (__m256i a, __m256i b)</para>
        <para>VPUNPCKLDQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackLow(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>__m256i _mm256_unpacklo_epi64 (__m256i a, __m256i b)</para>
        <para>VPUNPCKLQDQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackLow(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>__m256i _mm256_unpacklo_epi8 (__m256i a, __m256i b)</para>
        <para>VPUNPCKLBW ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackLow(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>__m256i _mm256_unpacklo_epi16 (__m256i a, __m256i b)</para>
        <para>VPUNPCKLWD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackLow(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_unpacklo_epi32 (__m256i a, __m256i b)</para>
        <para>VPUNPCKLDQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackLow(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>__m256i _mm256_unpacklo_epi64 (__m256i a, __m256i b)</para>
        <para>VPUNPCKLQDQ ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Xor(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>
        <para>__m256i _mm256_xor_si256 (__m256i a, __m256i b)</para>
        <para>VPXOR ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Xor(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>
        <para>__m256i _mm256_xor_si256 (__m256i a, __m256i b)</para>
        <para>VPXOR ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Xor(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>
        <para>__m256i _mm256_xor_si256 (__m256i a, __m256i b)</para>
        <para>VPXOR ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Xor(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>
        <para>__m256i _mm256_xor_si256 (__m256i a, __m256i b)</para>
        <para>VPXOR ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Xor(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>
        <para>__m256i _mm256_xor_si256 (__m256i a, __m256i b)</para>
        <para>VPXOR ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Xor(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>
        <para>__m256i _mm256_xor_si256 (__m256i a, __m256i b)</para>
        <para>VPXOR ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Xor(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>
        <para>__m256i _mm256_xor_si256 (__m256i a, __m256i b)</para>
        <para>VPXOR ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Xor(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>
        <para>__m256i _mm256_xor_si256 (__m256i a, __m256i b)</para>
        <para>VPXOR ymm, ymm, ymm/m256</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Avx2.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Avx2.X64" />
    <member name="P:System.Runtime.Intrinsics.X86.Avx2.X64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.AvxVnni" />
    <member name="M:System.Runtime.Intrinsics.X86.AvxVnni.MultiplyWideningAndAdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_dpbusd_epi32 (__m128i src, __m128i a, __m128i b) VPDPBUSD xmm, xmm, xmm/m128</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.AvxVnni.MultiplyWideningAndAdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_dpwssd_epi32 (__m128i src, __m128i a, __m128i b) VPDPWSSD xmm, xmm, xmm/m128</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.AvxVnni.MultiplyWideningAndAdd(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_dpbusd_epi32 (__m256i src, __m256i a, __m256i b) VPDPBUSD ymm, ymm, ymm/m256</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.AvxVnni.MultiplyWideningAndAdd(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_dpwssd_epi32 (__m256i src, __m256i a, __m256i b) VPDPWSSD ymm, ymm, ymm/m256</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.AvxVnni.MultiplyWideningAndAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_dpbusds_epi32 (__m128i src, __m128i a, __m128i b) VPDPBUSDS xmm, xmm, xmm/m128</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.AvxVnni.MultiplyWideningAndAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_dpwssds_epi32 (__m128i src, __m128i a, __m128i b) VPDPWSSDS xmm, xmm, xmm/m128</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.AvxVnni.MultiplyWideningAndAddSaturate(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_dpbusds_epi32 (__m256i src, __m256i a, __m256i b) VPDPBUSDS ymm, ymm, ymm/m256</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.AvxVnni.MultiplyWideningAndAddSaturate(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_dpwssds_epi32 (__m256i src, __m256i a, __m256i b) VPDPWSSDS ymm, ymm, ymm/m256</summary>
      <param name="addend" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.AvxVnni.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.AvxVnni.X64" />
    <member name="P:System.Runtime.Intrinsics.X86.AvxVnni.X64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Bmi1">
      <summary>This class provides access to Intel BMI1 hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.AndNot(System.UInt32,System.UInt32)">
      <summary>
        <para>unsigned int _andn_u32 (unsigned int a, unsigned int b)</para>
        <para>ANDN r32a, r32b, reg/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.BitFieldExtract(System.UInt32,System.Byte,System.Byte)">
      <summary>
        <para>unsigned int _bextr_u32 (unsigned int a, unsigned int start, unsigned int len)</para>
        <para>BEXTR r32a, reg/m32, r32b</para>
      </summary>
      <param name="value" />
      <param name="start" />
      <param name="length" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.BitFieldExtract(System.UInt32,System.UInt16)">
      <summary>
        <para>unsigned int _bextr2_u32 (unsigned int a, unsigned int control)</para>
        <para>BEXTR r32a, reg/m32, r32b</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.ExtractLowestSetBit(System.UInt32)">
      <summary>
        <para>unsigned int _blsi_u32 (unsigned int a)</para>
        <para>BLSI reg, reg/m32</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.GetMaskUpToLowestSetBit(System.UInt32)">
      <summary>
        <para>unsigned int _blsmsk_u32 (unsigned int a)</para>
        <para>BLSMSK reg, reg/m32</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.ResetLowestSetBit(System.UInt32)">
      <summary>
        <para>unsigned int _blsr_u32 (unsigned int a)</para>
        <para>BLSR reg, reg/m32</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.TrailingZeroCount(System.UInt32)">
      <summary>
        <para>int _mm_tzcnt_32 (unsigned int a)</para>
        <para>TZCNT reg, reg/m32</para>
      </summary>
      <param name="value" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Bmi1.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Bmi1.X64" />
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.X64.AndNot(System.UInt64,System.UInt64)">
      <summary>
        <para>unsigned __int64 _andn_u64 (unsigned __int64 a, unsigned __int64 b)</para>
        <para>ANDN r64a, r64b, reg/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.X64.BitFieldExtract(System.UInt64,System.Byte,System.Byte)">
      <summary>
        <para>unsigned __int64 _bextr_u64 (unsigned __int64 a, unsigned int start, unsigned int len)</para>
        <para>BEXTR r64a, reg/m64, r64b</para>
      </summary>
      <param name="value" />
      <param name="start" />
      <param name="length" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.X64.BitFieldExtract(System.UInt64,System.UInt16)">
      <summary>
        <para>unsigned __int64 _bextr2_u64 (unsigned __int64 a, unsigned __int64 control)</para>
        <para>BEXTR r64a, reg/m64, r64b</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.X64.ExtractLowestSetBit(System.UInt64)">
      <summary>
        <para>unsigned __int64 _blsi_u64 (unsigned __int64 a)</para>
        <para>BLSI reg, reg/m64</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.X64.GetMaskUpToLowestSetBit(System.UInt64)">
      <summary>
        <para>unsigned __int64 _blsmsk_u64 (unsigned __int64 a)</para>
        <para>BLSMSK reg, reg/m64</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.X64.ResetLowestSetBit(System.UInt64)">
      <summary>
        <para>unsigned __int64 _blsr_u64 (unsigned __int64 a)</para>
        <para>BLSR reg, reg/m64</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.X64.TrailingZeroCount(System.UInt64)">
      <summary>
        <para>__int64 _mm_tzcnt_64 (unsigned __int64 a)</para>
        <para>TZCNT reg, reg/m64</para>
      </summary>
      <param name="value" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Bmi1.X64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Bmi2">
      <summary>This class provides access to Intel BMI2 hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.MultiplyNoFlags(System.UInt32,System.UInt32)">
      <summary>
        <para>unsigned int _mulx_u32 (unsigned int a, unsigned int b, unsigned int* hi)</para>
        <para>MULX r32a, r32b, reg/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.MultiplyNoFlags(System.UInt32,System.UInt32,System.UInt32*)">
      <summary>
        <para>unsigned int _mulx_u32 (unsigned int a, unsigned int b, unsigned int* hi)</para>
        <para>MULX r32a, r32b, reg/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="low" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.ParallelBitDeposit(System.UInt32,System.UInt32)">
      <summary>
        <para>unsigned int _pdep_u32 (unsigned int a, unsigned int mask)</para>
        <para>PDEP r32a, r32b, reg/m32</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.ParallelBitExtract(System.UInt32,System.UInt32)">
      <summary>
        <para>unsigned int _pext_u32 (unsigned int a, unsigned int mask)</para>
        <para>PEXT r32a, r32b, reg/m32</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.ZeroHighBits(System.UInt32,System.UInt32)">
      <summary>
        <para>unsigned int _bzhi_u32 (unsigned int a, unsigned int index)</para>
        <para>BZHI r32a, reg/m32, r32b</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Bmi2.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Bmi2.X64" />
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.X64.MultiplyNoFlags(System.UInt64,System.UInt64)">
      <summary>
        <para>unsigned __int64 _mulx_u64 (unsigned __int64 a, unsigned __int64 b, unsigned __int64* hi)</para>
        <para>MULX r64a, r64b, reg/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.X64.MultiplyNoFlags(System.UInt64,System.UInt64,System.UInt64*)">
      <summary>
        <para>unsigned __int64 _mulx_u64 (unsigned __int64 a, unsigned __int64 b, unsigned __int64* hi)</para>
        <para>MULX r64a, r64b, reg/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="low" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.X64.ParallelBitDeposit(System.UInt64,System.UInt64)">
      <summary>
        <para>unsigned __int64 _pdep_u64 (unsigned __int64 a, unsigned __int64 mask)</para>
        <para>PDEP r64a, r64b, reg/m64</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.X64.ParallelBitExtract(System.UInt64,System.UInt64)">
      <summary>
        <para>unsigned __int64 _pext_u64 (unsigned __int64 a, unsigned __int64 mask)</para>
        <para>PEXT r64a, r64b, reg/m64</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.X64.ZeroHighBits(System.UInt64,System.UInt64)">
      <summary>
        <para>unsigned __int64 _bzhi_u64 (unsigned __int64 a, unsigned int index)</para>
        <para>BZHI r64a, reg/m32, r64b</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Bmi2.X64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.FloatComparisonMode" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedEqualNonSignaling">
      <summary>_CMP_EQ_OQ.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedEqualSignaling">
      <summary>_CMP_EQ_OS.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedFalseNonSignaling">
      <summary>_CMP_FALSE_OQ.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedFalseSignaling">
      <summary>_CMP_FALSE_OS.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedGreaterThanNonSignaling">
      <summary>_CMP_GT_OQ.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedGreaterThanOrEqualNonSignaling">
      <summary>_CMP_GE_OQ.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedGreaterThanOrEqualSignaling">
      <summary>_CMP_GE_OS.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedGreaterThanSignaling">
      <summary>_CMP_GT_OS.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedLessThanNonSignaling">
      <summary>_CMP_LT_OQ.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedLessThanOrEqualNonSignaling">
      <summary>_CMP_LE_OQ.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedLessThanOrEqualSignaling">
      <summary>_CMP_LE_OS.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedLessThanSignaling">
      <summary>_CMP_LT_OS.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedNonSignaling">
      <summary>_CMP_ORD_Q.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedNotEqualNonSignaling">
      <summary>_CMP_NEQ_OQ.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedNotEqualSignaling">
      <summary>_CMP_NEQ_OS.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedSignaling">
      <summary>_CMP_ORD_S.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedEqualNonSignaling">
      <summary>_CMP_EQ_UQ.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedEqualSignaling">
      <summary>_CMP_EQ_US.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNonSignaling">
      <summary>_CMP_UNORD_Q.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotEqualNonSignaling">
      <summary>_CMP_NEQ_UQ.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotEqualSignaling">
      <summary>_CMP_NEQ_US.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotGreaterThanNonSignaling">
      <summary>_CMP_NGT_UQ.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotGreaterThanOrEqualNonSignaling">
      <summary>_CMP_NGE_UQ.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotGreaterThanOrEqualSignaling">
      <summary>_CMP_NGE_US.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotGreaterThanSignaling">
      <summary>_CMP_NGT_US.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotLessThanNonSignaling">
      <summary>_CMP_NLT_UQ.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotLessThanOrEqualNonSignaling">
      <summary>_CMP_NLE_UQ.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotLessThanOrEqualSignaling">
      <summary>_CMP_NLE_US.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotLessThanSignaling">
      <summary>_CMP_NLT_US.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedSignaling">
      <summary>_CMP_UNORD_S.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedTrueNonSignaling">
      <summary>_CMP_TRUE_UQ.</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedTrueSignaling">
      <summary>_CMP_TRUE_US.</summary>
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Fma">
      <summary>This class provides access to Intel FMA hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAdd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_fmadd_pd (__m128d a, __m128d b, __m128d c)</para>
        <para>VFMADDPD xmm, xmm, xmm/m128</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_fmadd_ps (__m128 a, __m128 b, __m128 c)</para>
        <para>VFMADDPS xmm, xmm, xmm/m128</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAdd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_fmadd_pd (__m256d a, __m256d b, __m256d c)</para>
        <para>VFMADDPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAdd(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_fmadd_ps (__m256 a, __m256 b, __m256 c)</para>
        <para>VFMADDPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddNegated(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_fnmadd_pd (__m128d a, __m128d b, __m128d c)</para>
        <para>VFNMADDPD xmm, xmm, xmm/m128</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddNegated(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_fnmadd_ps (__m128 a, __m128 b, __m128 c)</para>
        <para>VFNMADDPS xmm, xmm, xmm/m128</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddNegated(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_fnmadd_pd (__m256d a, __m256d b, __m256d c)</para>
        <para>VFNMADDPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddNegated(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_fnmadd_ps (__m256 a, __m256 b, __m256 c)</para>
        <para>VFNMADDPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddNegatedScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_fnmadd_sd (__m128d a, __m128d b, __m128d c)</para>
        <para>VFNMADDSD xmm, xmm, xmm/m64</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddNegatedScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_fnmadd_ss (__m128 a, __m128 b, __m128 c)</para>
        <para>VFNMADDSS xmm, xmm, xmm/m32</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_fmadd_sd (__m128d a, __m128d b, __m128d c)</para>
        <para>VFMADDSS xmm, xmm, xmm/m64</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_fmadd_ss (__m128 a, __m128 b, __m128 c)</para>
        <para>VFMADDSS xmm, xmm, xmm/m32</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddSubtract(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_fmaddsub_pd (__m128d a, __m128d b, __m128d c)</para>
        <para>VFMADDSUBPD xmm, xmm, xmm/m128</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddSubtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_fmaddsub_ps (__m128 a, __m128 b, __m128 c)</para>
        <para>VFMADDSUBPS xmm, xmm, xmm/m128</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddSubtract(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_fmaddsub_pd (__m256d a, __m256d b, __m256d c)</para>
        <para>VFMADDSUBPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddSubtract(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_fmaddsub_ps (__m256 a, __m256 b, __m256 c)</para>
        <para>VFMADDSUBPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtract(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_fmsub_pd (__m128d a, __m128d b, __m128d c)</para>
        <para>VFMSUBPS xmm, xmm, xmm/m128</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_fmsub_ps (__m128 a, __m128 b, __m128 c)</para>
        <para>VFMSUBPS xmm, xmm, xmm/m128</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtract(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_fmsub_pd (__m256d a, __m256d b, __m256d c)</para>
        <para>VFMSUBPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtract(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_fmsub_ps (__m256 a, __m256 b, __m256 c)</para>
        <para>VFMSUBPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractAdd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_fmsubadd_pd (__m128d a, __m128d b, __m128d c)</para>
        <para>VFMSUBADDPD xmm, xmm, xmm/m128</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_fmsubadd_ps (__m128 a, __m128 b, __m128 c)</para>
        <para>VFMSUBADDPS xmm, xmm, xmm/m128</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractAdd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_fmsubadd_pd (__m256d a, __m256d b, __m256d c)</para>
        <para>VFMSUBADDPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractAdd(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_fmsubadd_ps (__m256 a, __m256 b, __m256 c)</para>
        <para>VFMSUBADDPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractNegated(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_fnmsub_pd (__m128d a, __m128d b, __m128d c)</para>
        <para>VFNMSUBPD xmm, xmm, xmm/m128</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractNegated(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_fnmsub_ps (__m128 a, __m128 b, __m128 c)</para>
        <para>VFNMSUBPS xmm, xmm, xmm/m128</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractNegated(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>
        <para>__m256d _mm256_fnmsub_pd (__m256d a, __m256d b, __m256d c)</para>
        <para>VFNMSUBPD ymm, ymm, ymm/m256</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractNegated(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>
        <para>__m256 _mm256_fnmsub_ps (__m256 a, __m256 b, __m256 c)</para>
        <para>VFNMSUBPS ymm, ymm, ymm/m256</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractNegatedScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_fnmsub_sd (__m128d a, __m128d b, __m128d c)</para>
        <para>VFNMSUBSD xmm, xmm, xmm/m64</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractNegatedScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_fnmsub_ss (__m128 a, __m128 b, __m128 c)</para>
        <para>VFNMSUBSS xmm, xmm, xmm/m32</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_fmsub_sd (__m128d a, __m128d b, __m128d c)</para>
        <para>VFMSUBSD xmm, xmm, xmm/m64</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_fmsub_ss (__m128 a, __m128 b, __m128 c)</para>
        <para>VFMSUBSS xmm, xmm, xmm/m32</para>
      </summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Fma.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Fma.X64" />
    <member name="P:System.Runtime.Intrinsics.X86.Fma.X64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Lzcnt">
      <summary>This class provides access to Intel LZCNT hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Lzcnt.LeadingZeroCount(System.UInt32)">
      <summary>
        <para>unsigned int _lzcnt_u32 (unsigned int a)</para>
        <para>LZCNT reg, reg/m32</para>
      </summary>
      <param name="value" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Lzcnt.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Lzcnt.X64" />
    <member name="M:System.Runtime.Intrinsics.X86.Lzcnt.X64.LeadingZeroCount(System.UInt64)">
      <summary>
        <para>unsigned __int64 _lzcnt_u64 (unsigned __int64 a)</para>
        <para>LZCNT reg, reg/m64</para>
      </summary>
      <param name="value" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Lzcnt.X64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Pclmulqdq">
      <summary>This class provides access to Intel PCLMULQDQ hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Pclmulqdq.CarrylessMultiply(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>__m128i _mm_clmulepi64_si128 (__m128i a, __m128i b, const int imm8)</para>
        <para>PCLMULQDQ xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Pclmulqdq.CarrylessMultiply(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>__m128i _mm_clmulepi64_si128 (__m128i a, __m128i b, const int imm8)</para>
        <para>PCLMULQDQ xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Pclmulqdq.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Pclmulqdq.X64" />
    <member name="P:System.Runtime.Intrinsics.X86.Pclmulqdq.X64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Popcnt">
      <summary>This class provides access to Intel POPCNT hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Popcnt.PopCount(System.UInt32)">
      <summary>
        <para>int _mm_popcnt_u32 (unsigned int a)</para>
        <para>POPCNT reg, reg/m32</para>
      </summary>
      <param name="value" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Popcnt.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Popcnt.X64" />
    <member name="M:System.Runtime.Intrinsics.X86.Popcnt.X64.PopCount(System.UInt64)">
      <summary>
        <para>__int64 _mm_popcnt_u64 (unsigned __int64 a)</para>
        <para>POPCNT reg64, reg/m64</para>
      </summary>
      <param name="value" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Popcnt.X64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Sse">
      <summary>This class provides access to Intel SSE hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Add(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_add_ps (__m128 a,  __m128 b)</para>
        <para>ADDPS xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.AddScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_add_ss (__m128 a,  __m128 b)</para>
        <para>ADDSS xmm, xmm/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.And(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_and_ps (__m128 a, __m128 b)</para>
        <para>ANDPS xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.AndNot(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_andnot_ps (__m128 a, __m128 b)</para>
        <para>ANDNPS xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpeq_ps (__m128 a,  __m128 b)</para>
        <para>CMPPS xmm, xmm/m128, imm8(0)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpgt_ps (__m128 a,  __m128 b)</para>
        <para>CMPPS xmm, xmm/m128, imm8(6)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpge_ps (__m128 a,  __m128 b)</para>
        <para>CMPPS xmm, xmm/m128, imm8(5)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmplt_ps (__m128 a,  __m128 b)</para>
        <para>CMPPS xmm, xmm/m128, imm8(1)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmple_ps (__m128 a,  __m128 b)</para>
        <para>CMPPS xmm, xmm/m128, imm8(2)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareNotEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpneq_ps (__m128 a,  __m128 b)</para>
        <para>CMPPS xmm, xmm/m128, imm8(4)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareNotGreaterThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpngt_ps (__m128 a,  __m128 b)</para>
        <para>CMPPS xmm, xmm/m128, imm8(2)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareNotGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpnge_ps (__m128 a,  __m128 b)</para>
        <para>CMPPS xmm, xmm/m128, imm8(1)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareNotLessThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpnlt_ps (__m128 a,  __m128 b)</para>
        <para>CMPPS xmm, xmm/m128, imm8(5)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareNotLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpnle_ps (__m128 a,  __m128 b)</para>
        <para>CMPPS xmm, xmm/m128, imm8(6)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareOrdered(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpord_ps (__m128 a,  __m128 b)</para>
        <para>CMPPS xmm, xmm/m128, imm8(7)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpeq_ss (__m128 a,  __m128 b)</para>
        <para>CMPSS xmm, xmm/m32, imm8(0)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarGreaterThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpgt_ss (__m128 a,  __m128 b)</para>
        <para>CMPSS xmm, xmm/m32, imm8(6)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpge_ss (__m128 a,  __m128 b)</para>
        <para>CMPPS xmm, xmm/m32, imm8(5)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarLessThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmplt_ss (__m128 a,  __m128 b)</para>
        <para>CMPSS xmm, xmm/m32, imm8(1)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmple_ss (__m128 a,  __m128 b)</para>
        <para>CMPSS xmm, xmm/m32, imm8(2)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarNotEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpneq_ss (__m128 a,  __m128 b)</para>
        <para>CMPSS xmm, xmm/m32, imm8(4)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarNotGreaterThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpngt_ss (__m128 a,  __m128 b)</para>
        <para>CMPSS xmm, xmm/m32, imm8(2)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarNotGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpnge_ss (__m128 a,  __m128 b)</para>
        <para>CMPSS xmm, xmm/m32, imm8(1)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarNotLessThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpnlt_ss (__m128 a,  __m128 b)</para>
        <para>CMPSS xmm, xmm/m32, imm8(5)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarNotLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpnle_ss (__m128 a,  __m128 b)</para>
        <para>CMPSS xmm, xmm/m32, imm8(6)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarOrdered(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpord_ss (__m128 a,  __m128 b)</para>
        <para>CMPSS xmm, xmm/m32, imm8(7)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarOrderedEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int _mm_comieq_ss (__m128 a, __m128 b)</para>
        <para>COMISS xmm, xmm/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarOrderedGreaterThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int _mm_comigt_ss (__m128 a, __m128 b)</para>
        <para>COMISS xmm, xmm/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarOrderedGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int _mm_comige_ss (__m128 a, __m128 b)</para>
        <para>COMISS xmm, xmm/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarOrderedLessThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int _mm_comilt_ss (__m128 a, __m128 b)</para>
        <para>COMISS xmm, xmm/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarOrderedLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int _mm_comile_ss (__m128 a, __m128 b)</para>
        <para>COMISS xmm, xmm/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarOrderedNotEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int _mm_comineq_ss (__m128 a, __m128 b)</para>
        <para>COMISS xmm, xmm/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarUnordered(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpunord_ss (__m128 a,  __m128 b)</para>
        <para>CMPSS xmm, xmm/m32, imm8(3)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarUnorderedEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int _mm_ucomieq_ss (__m128 a, __m128 b)</para>
        <para>UCOMISS xmm, xmm/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarUnorderedGreaterThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int _mm_ucomigt_ss (__m128 a, __m128 b)</para>
        <para>UCOMISS xmm, xmm/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarUnorderedGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int _mm_ucomige_ss (__m128 a, __m128 b)</para>
        <para>UCOMISS xmm, xmm/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarUnorderedLessThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int _mm_ucomilt_ss (__m128 a, __m128 b)</para>
        <para>UCOMISS xmm, xmm/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarUnorderedLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int _mm_ucomile_ss (__m128 a, __m128 b)</para>
        <para>UCOMISS xmm, xmm/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarUnorderedNotEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int _mm_ucomineq_ss (__m128 a, __m128 b)</para>
        <para>UCOMISS xmm, xmm/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareUnordered(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_cmpunord_ps (__m128 a,  __m128 b)</para>
        <para>CMPPS xmm, xmm/m128, imm8(3)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.ConvertScalarToVector128Single(System.Runtime.Intrinsics.Vector128{System.Single},System.Int32)">
      <summary>
        <para>__m128 _mm_cvtsi32_ss (__m128 a, int b)</para>
        <para>CVTSI2SS xmm, reg/m32</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.ConvertToInt32(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int _mm_cvtss_si32 (__m128 a)</para>
        <para>CVTSS2SI r32, xmm/m32</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.ConvertToInt32WithTruncation(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int _mm_cvttss_si32 (__m128 a)</para>
        <para>CVTTSS2SI r32, xmm/m32</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Divide(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_div_ps (__m128 a,  __m128 b)</para>
        <para>DIVPS xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.DivideScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_div_ss (__m128 a,  __m128 b)</para>
        <para>DIVSS xmm, xmm/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.LoadAlignedVector128(System.Single*)">
      <summary>
        <para>__m128 _mm_load_ps (float const* mem_address)</para>
        <para>MOVAPS xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.LoadHigh(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)">
      <summary>
        <para>__m128 _mm_loadh_pi (__m128 a, __m64 const* mem_addr)</para>
        <para>MOVHPS xmm, m64</para>
      </summary>
      <param name="lower" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.LoadLow(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)">
      <summary>
        <para>__m128 _mm_loadl_pi (__m128 a, __m64 const* mem_addr)</para>
        <para>MOVLPS xmm, m64</para>
      </summary>
      <param name="upper" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.LoadScalarVector128(System.Single*)">
      <summary>
        <para>__m128 _mm_load_ss (float const* mem_address)</para>
        <para>MOVSS xmm, m32</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.LoadVector128(System.Single*)">
      <summary>
        <para>__m128 _mm_loadu_ps (float const* mem_address)</para>
        <para>MOVUPS xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Max(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_max_ps (__m128 a,  __m128 b)</para>
        <para>MAXPS xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.MaxScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_max_ss (__m128 a,  __m128 b)</para>
        <para>MAXSS xmm, xmm/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Min(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_min_ps (__m128 a,  __m128 b)</para>
        <para>MINPS xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.MinScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_min_ss (__m128 a,  __m128 b)</para>
        <para>MINSS xmm, xmm/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.MoveHighToLow(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_movehl_ps (__m128 a,  __m128 b)</para>
        <para>MOVHLPS xmm, xmm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.MoveLowToHigh(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_movelh_ps (__m128 a,  __m128 b)</para>
        <para>MOVLHPS xmm, xmm</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.MoveMask(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>int _mm_movemask_ps (__m128 a)</para>
        <para>MOVMSKPS reg, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.MoveScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_move_ss (__m128 a, __m128 b)</para>
        <para>MOVSS xmm, xmm</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Multiply(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_mul_ps (__m128 a, __m128 b)</para>
        <para>MULPS xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.MultiplyScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_mul_ss (__m128 a, __m128 b)</para>
        <para>MULPS xmm, xmm/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Or(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_or_ps (__m128 a,  __m128 b)</para>
        <para>ORPS xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Prefetch0(System.Void*)">
      <summary>
        <para>void _mm_prefetch(char* p, int i)</para>
        <para>PREFETCHT0 m8</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Prefetch1(System.Void*)">
      <summary>
        <para>void _mm_prefetch(char* p, int i)</para>
        <para>PREFETCHT1 m8</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Prefetch2(System.Void*)">
      <summary>
        <para>void _mm_prefetch(char* p, int i)</para>
        <para>PREFETCHT2 m8</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.PrefetchNonTemporal(System.Void*)">
      <summary>
        <para>void _mm_prefetch(char* p, int i)</para>
        <para>PREFETCHNTA m8</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Reciprocal(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_rcp_ps (__m128 a)</para>
        <para>RCPPS xmm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.ReciprocalScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_rcp_ss (__m128 a)</para>
        <para>RCPSS xmm, xmm/m32</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.ReciprocalScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_rcp_ss (__m128 a, __m128 b)</para>
        <para>RCPSS xmm, xmm/m32</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.ReciprocalSqrt(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_rsqrt_ps (__m128 a)</para>
        <para>RSQRTPS xmm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.ReciprocalSqrtScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_rsqrt_ss (__m128 a)</para>
        <para>RSQRTSS xmm, xmm/m32</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.ReciprocalSqrtScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_rsqrt_ss (__m128 a, __m128 b)</para>
        <para>RSQRTSS xmm, xmm/m32</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Shuffle(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>__m128 _mm_shuffle_ps (__m128 a,  __m128 b, unsigned int control)</para>
        <para>SHUFPS xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Sqrt(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_sqrt_ps (__m128 a)</para>
        <para>SQRTPS xmm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.SqrtScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_sqrt_ss (__m128 a)</para>
        <para>SQRTSS xmm, xmm/m32</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.SqrtScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_sqrt_ss (__m128 a, __m128 b)</para>
        <para>SQRTSS xmm, xmm/m32</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Store(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>void _mm_storeu_ps (float* mem_addr, __m128 a)</para>
        <para>MOVUPS m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.StoreAligned(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>void _mm_store_ps (float* mem_addr, __m128 a)</para>
        <para>MOVAPS m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.StoreAlignedNonTemporal(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>void _mm_stream_ps (float* mem_addr, __m128 a)</para>
        <para>MOVNTPS m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.StoreFence">
      <summary>
        <para>void _mm_sfence(void)</para>
        <para>SFENCE</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.StoreHigh(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>void _mm_storeh_pi (__m64* mem_addr, __m128 a)</para>
        <para>MOVHPS m64, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.StoreLow(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>void _mm_storel_pi (__m64* mem_addr, __m128 a)</para>
        <para>MOVLPS m64, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.StoreScalar(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>void _mm_store_ss (float* mem_addr, __m128 a)</para>
        <para>MOVSS m32, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Subtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128d _mm_sub_ps (__m128d a, __m128d b)</para>
        <para>SUBPS xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.SubtractScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_sub_ss (__m128 a, __m128 b)</para>
        <para>SUBSS xmm, xmm/m32</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_unpackhi_ps (__m128 a,  __m128 b)</para>
        <para>UNPCKHPS xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.UnpackLow(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_unpacklo_ps (__m128 a,  __m128 b)</para>
        <para>UNPCKLPS xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Xor(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_xor_ps (__m128 a,  __m128 b)</para>
        <para>XORPS xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Sse.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Sse.X64" />
    <member name="M:System.Runtime.Intrinsics.X86.Sse.X64.ConvertScalarToVector128Single(System.Runtime.Intrinsics.Vector128{System.Single},System.Int64)">
      <summary>
        <para>__m128 _mm_cvtsi64_ss (__m128 a, __int64 b)</para>
        <para>CVTSI2SS xmm, reg/m64</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.X64.ConvertToInt64(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__int64 _mm_cvtss_si64 (__m128 a)</para>
        <para>CVTSS2SI r64, xmm/m32</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.X64.ConvertToInt64WithTruncation(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__int64 _mm_cvttss_si64 (__m128 a)</para>
        <para>CVTTSS2SI r64, xmm/m32</para>
      </summary>
      <param name="value" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Sse.X64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Sse2">
      <summary>This class provides access to Intel SSE2 hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Add(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_add_epi8 (__m128i a,  __m128i b)</para>
        <para>PADDB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Add(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_add_pd (__m128d a,  __m128d b)</para>
        <para>ADDPD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Add(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_add_epi16 (__m128i a,  __m128i b)</para>
        <para>PADDW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Add(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_add_epi32 (__m128i a,  __m128i b)</para>
        <para>PADDD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Add(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m128i _mm_add_epi64 (__m128i a,  __m128i b)</para>
        <para>PADDQ xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Add(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_add_epi8 (__m128i a,  __m128i b)</para>
        <para>PADDB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Add(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_add_epi16 (__m128i a,  __m128i b)</para>
        <para>PADDW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Add(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_add_epi32 (__m128i a,  __m128i b)</para>
        <para>PADDD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Add(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m128i _mm_add_epi64 (__m128i a,  __m128i b)</para>
        <para>PADDQ xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AddSaturate(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_adds_epu8 (__m128i a,  __m128i b)</para>
        <para>PADDUSB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AddSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_adds_epi16 (__m128i a,  __m128i b)</para>
        <para>PADDSW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AddSaturate(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_adds_epi8 (__m128i a,  __m128i b)</para>
        <para>PADDSB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AddSaturate(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_adds_epu16 (__m128i a,  __m128i b)</para>
        <para>PADDUSW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AddScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_add_sd (__m128d a,  __m128d b)</para>
        <para>ADDSD xmm, xmm/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.And(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_and_si128 (__m128i a,  __m128i b)</para>
        <para>PAND xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.And(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_and_pd (__m128d a, __m128d b)</para>
        <para>ANDPD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.And(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_and_si128 (__m128i a,  __m128i b)</para>
        <para>PAND xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.And(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_and_si128 (__m128i a,  __m128i b)</para>
        <para>PAND xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.And(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m128i _mm_and_si128 (__m128i a,  __m128i b)</para>
        <para>PAND xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.And(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_and_si128 (__m128i a,  __m128i b)</para>
        <para>PAND xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.And(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_and_si128 (__m128i a,  __m128i b)</para>
        <para>PAND xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.And(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_and_si128 (__m128i a,  __m128i b)</para>
        <para>PAND xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.And(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m128i _mm_and_si128 (__m128i a,  __m128i b)</para>
        <para>PAND xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AndNot(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_andnot_si128 (__m128i a,  __m128i b)</para>
        <para>PANDN xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AndNot(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_andnot_pd (__m128d a, __m128d b)</para>
        <para>ADDNPD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AndNot(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_andnot_si128 (__m128i a,  __m128i b)</para>
        <para>PANDN xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AndNot(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_andnot_si128 (__m128i a,  __m128i b)</para>
        <para>PANDN xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AndNot(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m128i _mm_andnot_si128 (__m128i a,  __m128i b)</para>
        <para>PANDN xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AndNot(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_andnot_si128 (__m128i a,  __m128i b)</para>
        <para>PANDN xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AndNot(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_andnot_si128 (__m128i a,  __m128i b)</para>
        <para>PANDN xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AndNot(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_andnot_si128 (__m128i a,  __m128i b)</para>
        <para>PANDN xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AndNot(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m128i _mm_andnot_si128 (__m128i a,  __m128i b)</para>
        <para>PANDN xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Average(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_avg_epu8 (__m128i a,  __m128i b)</para>
        <para>PAVGB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Average(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_avg_epu16 (__m128i a,  __m128i b)</para>
        <para>PAVGW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_cmpeq_epi8 (__m128i a,  __m128i b)</para>
        <para>PCMPEQB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpeq_pd (__m128d a,  __m128d b)</para>
        <para>CMPPD xmm, xmm/m128, imm8(0)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_cmpeq_epi16 (__m128i a,  __m128i b)</para>
        <para>PCMPEQW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_cmpeq_epi32 (__m128i a,  __m128i b)</para>
        <para>PCMPEQD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareEqual(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_cmpeq_epi8 (__m128i a,  __m128i b)</para>
        <para>PCMPEQB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareEqual(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_cmpeq_epi16 (__m128i a,  __m128i b)</para>
        <para>PCMPEQW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareEqual(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_cmpeq_epi32 (__m128i a,  __m128i b)</para>
        <para>PCMPEQD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpgt_pd (__m128d a,  __m128d b)</para>
        <para>CMPPD xmm, xmm/m128, imm8(6)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_cmpgt_epi16 (__m128i a,  __m128i b)</para>
        <para>PCMPGTW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_cmpgt_epi32 (__m128i a,  __m128i b)</para>
        <para>PCMPGTD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_cmpgt_epi8 (__m128i a,  __m128i b)</para>
        <para>PCMPGTB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpge_pd (__m128d a,  __m128d b)</para>
        <para>CMPPD xmm, xmm/m128, imm8(5)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmplt_pd (__m128d a,  __m128d b)</para>
        <para>CMPPD xmm, xmm/m128, imm8(1)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_cmplt_epi16 (__m128i a,  __m128i b)</para>
        <para>PCMPGTW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_cmplt_epi32 (__m128i a,  __m128i b)</para>
        <para>PCMPGTD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_cmplt_epi8 (__m128i a,  __m128i b)</para>
        <para>PCMPGTB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmple_pd (__m128d a,  __m128d b)</para>
        <para>CMPPD xmm, xmm/m128, imm8(2)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareNotEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpneq_pd (__m128d a,  __m128d b)</para>
        <para>CMPPD xmm, xmm/m128, imm8(4)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareNotGreaterThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpngt_pd (__m128d a,  __m128d b)</para>
        <para>CMPPD xmm, xmm/m128, imm8(2)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareNotGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpnge_pd (__m128d a,  __m128d b)</para>
        <para>CMPPD xmm, xmm/m128, imm8(1)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareNotLessThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpnlt_pd (__m128d a,  __m128d b)</para>
        <para>CMPPD xmm, xmm/m128, imm8(5)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareNotLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpnle_pd (__m128d a,  __m128d b)</para>
        <para>CMPPD xmm, xmm/m128, imm8(6)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareOrdered(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpord_pd (__m128d a,  __m128d b)</para>
        <para>CMPPD xmm, xmm/m128, imm8(7)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpeq_sd (__m128d a,  __m128d b)</para>
        <para>CMPSD xmm, xmm/m64, imm8(0)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarGreaterThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpgt_sd (__m128d a,  __m128d b)</para>
        <para>CMPSD xmm, xmm/m64, imm8(6)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpge_sd (__m128d a,  __m128d b)</para>
        <para>CMPSD xmm, xmm/m64, imm8(5)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarLessThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmplt_sd (__m128d a,  __m128d b)</para>
        <para>CMPSD xmm, xmm/m64, imm8(1)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmple_sd (__m128d a,  __m128d b)</para>
        <para>CMPSD xmm, xmm/m64, imm8(2)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarNotEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpneq_sd (__m128d a,  __m128d b)</para>
        <para>CMPSD xmm, xmm/m64, imm8(4)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarNotGreaterThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpngt_sd (__m128d a,  __m128d b)</para>
        <para>CMPSD xmm, xmm/m64, imm8(2)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarNotGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpnge_sd (__m128d a,  __m128d b)</para>
        <para>CMPSD xmm, xmm/m64, imm8(1)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarNotLessThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpnlt_sd (__m128d a,  __m128d b)</para>
        <para>CMPSD xmm, xmm/m64, imm8(5)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarNotLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpnle_sd (__m128d a,  __m128d b)</para>
        <para>CMPSD xmm, xmm/m64, imm8(6)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarOrdered(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpord_sd (__m128d a,  __m128d b)</para>
        <para>CMPSD xmm, xmm/m64, imm8(7)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarOrderedEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int _mm_comieq_sd (__m128d a, __m128d b)</para>
        <para>COMISD xmm, xmm/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarOrderedGreaterThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int _mm_comigt_sd (__m128d a, __m128d b)</para>
        <para>COMISD xmm, xmm/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarOrderedGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int _mm_comige_sd (__m128d a, __m128d b)</para>
        <para>COMISD xmm, xmm/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarOrderedLessThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int _mm_comilt_sd (__m128d a, __m128d b)</para>
        <para>COMISD xmm, xmm/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarOrderedLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int _mm_comile_sd (__m128d a, __m128d b)</para>
        <para>COMISD xmm, xmm/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarOrderedNotEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int _mm_comineq_sd (__m128d a, __m128d b)</para>
        <para>COMISD xmm, xmm/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarUnordered(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpunord_sd (__m128d a,  __m128d b)</para>
        <para>CMPSD xmm, xmm/m64, imm8(3)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarUnorderedEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int _mm_ucomieq_sd (__m128d a, __m128d b)</para>
        <para>UCOMISD xmm, xmm/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarUnorderedGreaterThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int _mm_ucomigt_sd (__m128d a, __m128d b)</para>
        <para>UCOMISD xmm, xmm/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarUnorderedGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int _mm_ucomige_sd (__m128d a, __m128d b)</para>
        <para>UCOMISD xmm, xmm/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarUnorderedLessThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int _mm_ucomilt_sd (__m128d a, __m128d b)</para>
        <para>UCOMISD xmm, xmm/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarUnorderedLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int _mm_ucomile_sd (__m128d a, __m128d b)</para>
        <para>UCOMISD xmm, xmm/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarUnorderedNotEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int _mm_ucomineq_sd (__m128d a, __m128d b)</para>
        <para>UCOMISD xmm, xmm/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareUnordered(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_cmpunord_pd (__m128d a,  __m128d b)</para>
        <para>CMPPD xmm, xmm/m128, imm8(3)</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertScalarToVector128Double(System.Runtime.Intrinsics.Vector128{System.Double},System.Int32)">
      <summary>
        <para>__m128d _mm_cvtsi32_sd (__m128d a, int b)</para>
        <para>CVTSI2SD xmm, reg/m32</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertScalarToVector128Double(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128d _mm_cvtss_sd (__m128d a, __m128 b)</para>
        <para>CVTSS2SD xmm, xmm/m32</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertScalarToVector128Int32(System.Int32)">
      <summary>
        <para>__m128i _mm_cvtsi32_si128 (int a)</para>
        <para>MOVD xmm, reg/m32</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertScalarToVector128Single(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128 _mm_cvtsd_ss (__m128 a, __m128d b)</para>
        <para>CVTSD2SS xmm, xmm/m64</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertScalarToVector128UInt32(System.UInt32)">
      <summary>
        <para>__m128i _mm_cvtsi32_si128 (int a)</para>
        <para>MOVD xmm, reg/m32</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToInt32(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int _mm_cvtsd_si32 (__m128d a)</para>
        <para>CVTSD2SI r32, xmm/m64</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToInt32(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>int _mm_cvtsi128_si32 (__m128i a)</para>
        <para>MOVD reg/m32, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToInt32WithTruncation(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int _mm_cvttsd_si32 (__m128d a)</para>
        <para>CVTTSD2SI reg, xmm/m64</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToUInt32(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>int _mm_cvtsi128_si32 (__m128i a)</para>
        <para>MOVD reg/m32, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToVector128Double(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128d _mm_cvtepi32_pd (__m128i a)</para>
        <para>CVTDQ2PD xmm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToVector128Double(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128d _mm_cvtps_pd (__m128 a)</para>
        <para>CVTPS2PD xmm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToVector128Int32(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128i _mm_cvtpd_epi32 (__m128d a)</para>
        <para>CVTPD2DQ xmm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToVector128Int32(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128i _mm_cvtps_epi32 (__m128 a)</para>
        <para>CVTPS2DQ xmm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToVector128Int32WithTruncation(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128i _mm_cvttpd_epi32 (__m128d a)</para>
        <para>CVTTPD2DQ xmm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToVector128Int32WithTruncation(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128i _mm_cvttps_epi32 (__m128 a)</para>
        <para>CVTTPS2DQ xmm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToVector128Single(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128 _mm_cvtpd_ps (__m128d a)</para>
        <para>CVTPD2PS xmm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToVector128Single(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128 _mm_cvtepi32_ps (__m128i a)</para>
        <para>CVTDQ2PS xmm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Divide(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_div_pd (__m128d a,  __m128d b)</para>
        <para>DIVPD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.DivideScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_div_sd (__m128d a,  __m128d b)</para>
        <para>DIVSD xmm, xmm/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Extract(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>int _mm_extract_epi16 (__m128i a,  int immediate)</para>
        <para>PEXTRW reg, xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Insert(System.Runtime.Intrinsics.Vector128{System.Int16},System.Int16,System.Byte)">
      <summary>
        <para>__m128i _mm_insert_epi16 (__m128i a,  int i, int immediate)</para>
        <para>PINSRW xmm, reg/m16, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Insert(System.Runtime.Intrinsics.Vector128{System.UInt16},System.UInt16,System.Byte)">
      <summary>
        <para>__m128i _mm_insert_epi16 (__m128i a,  int i, int immediate)</para>
        <para>PINSRW xmm, reg/m16, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadAlignedVector128(System.Byte*)">
      <summary>
        <para>__m128i _mm_load_si128 (__m128i const* mem_address)</para>
        <para>MOVDQA xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadAlignedVector128(System.Double*)">
      <summary>
        <para>__m128d _mm_load_pd (double const* mem_address)</para>
        <para>MOVAPD xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadAlignedVector128(System.Int16*)">
      <summary>
        <para>__m128i _mm_load_si128 (__m128i const* mem_address)</para>
        <para>MOVDQA xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadAlignedVector128(System.Int32*)">
      <summary>
        <para>__m128i _mm_load_si128 (__m128i const* mem_address)</para>
        <para>MOVDQA xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadAlignedVector128(System.Int64*)">
      <summary>
        <para>__m128i _mm_load_si128 (__m128i const* mem_address)</para>
        <para>MOVDQA xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadAlignedVector128(System.SByte*)">
      <summary>
        <para>__m128i _mm_load_si128 (__m128i const* mem_address)</para>
        <para>MOVDQA xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadAlignedVector128(System.UInt16*)">
      <summary>
        <para>__m128i _mm_load_si128 (__m128i const* mem_address)</para>
        <para>MOVDQA xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadAlignedVector128(System.UInt32*)">
      <summary>
        <para>__m128i _mm_load_si128 (__m128i const* mem_address)</para>
        <para>MOVDQA xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadAlignedVector128(System.UInt64*)">
      <summary>
        <para>__m128i _mm_load_si128 (__m128i const* mem_address)</para>
        <para>MOVDQA xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadFence">
      <summary>
        <para>void _mm_lfence(void)</para>
        <para>LFENCE</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadHigh(System.Runtime.Intrinsics.Vector128{System.Double},System.Double*)">
      <summary>
        <para>__m128d _mm_loadh_pd (__m128d a, double const* mem_addr)</para>
        <para>MOVHPD xmm, m64</para>
      </summary>
      <param name="lower" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadLow(System.Runtime.Intrinsics.Vector128{System.Double},System.Double*)">
      <summary>
        <para>__m128d _mm_loadl_pd (__m128d a, double const* mem_addr)</para>
        <para>MOVLPD xmm, m64</para>
      </summary>
      <param name="upper" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadScalarVector128(System.Double*)">
      <summary>
        <para>__m128d _mm_load_sd (double const* mem_address)</para>
        <para>MOVSD xmm, m64</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadScalarVector128(System.Int32*)">
      <summary>
        <para>__m128i _mm_loadl_epi32 (__m128i const* mem_addr)</para>
        <para>MOVD xmm, reg/m32</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadScalarVector128(System.Int64*)">
      <summary>
        <para>__m128i _mm_loadl_epi64 (__m128i const* mem_addr)</para>
        <para>MOVQ xmm, reg/m64</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadScalarVector128(System.UInt32*)">
      <summary>
        <para>__m128i _mm_loadl_epi32 (__m128i const* mem_addr)</para>
        <para>MOVD xmm, reg/m32</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadScalarVector128(System.UInt64*)">
      <summary>
        <para>__m128i _mm_loadl_epi64 (__m128i const* mem_addr)</para>
        <para>MOVQ xmm, reg/m64</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadVector128(System.Byte*)">
      <summary>
        <para>__m128i _mm_loadu_si128 (__m128i const* mem_address)</para>
        <para>MOVDQU xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadVector128(System.Double*)">
      <summary>
        <para>__m128d _mm_loadu_pd (double const* mem_address)</para>
        <para>MOVUPD xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadVector128(System.Int16*)">
      <summary>
        <para>__m128i _mm_loadu_si128 (__m128i const* mem_address)</para>
        <para>MOVDQU xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadVector128(System.Int32*)">
      <summary>
        <para>__m128i _mm_loadu_si128 (__m128i const* mem_address)</para>
        <para>MOVDQU xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadVector128(System.Int64*)">
      <summary>
        <para>__m128i _mm_loadu_si128 (__m128i const* mem_address)</para>
        <para>MOVDQU xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadVector128(System.SByte*)">
      <summary>
        <para>__m128i _mm_loadu_si128 (__m128i const* mem_address)</para>
        <para>MOVDQU xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadVector128(System.UInt16*)">
      <summary>
        <para>__m128i _mm_loadu_si128 (__m128i const* mem_address)</para>
        <para>MOVDQU xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadVector128(System.UInt32*)">
      <summary>
        <para>__m128i _mm_loadu_si128 (__m128i const* mem_address)</para>
        <para>MOVDQU xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadVector128(System.UInt64*)">
      <summary>
        <para>__m128i _mm_loadu_si128 (__m128i const* mem_address)</para>
        <para>MOVDQU xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MaskMove(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte*)">
      <summary>
        <para>void _mm_maskmoveu_si128 (__m128i a,  __m128i mask, char* mem_address)</para>
        <para>MASKMOVDQU xmm, xmm</para>
      </summary>
      <param name="source" />
      <param name="mask" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MaskMove(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.SByte*)">
      <summary>
        <para>void _mm_maskmoveu_si128 (__m128i a,  __m128i mask, char* mem_address)</para>
        <para>MASKMOVDQU xmm, xmm</para>
      </summary>
      <param name="source" />
      <param name="mask" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Max(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_max_epu8 (__m128i a,  __m128i b)</para>
        <para>PMAXUB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Max(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_max_pd (__m128d a,  __m128d b)</para>
        <para>MAXPD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Max(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_max_epi16 (__m128i a,  __m128i b)</para>
        <para>PMAXSW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MaxScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_max_sd (__m128d a,  __m128d b)</para>
        <para>MAXSD xmm, xmm/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MemoryFence">
      <summary>
        <para>void _mm_mfence(void)</para>
        <para>MFENCE</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Min(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_min_epu8 (__m128i a,  __m128i b)</para>
        <para>PMINUB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Min(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_min_pd (__m128d a,  __m128d b)</para>
        <para>MINPD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Min(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_min_epi16 (__m128i a,  __m128i b)</para>
        <para>PMINSW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MinScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_min_sd (__m128d a,  __m128d b)</para>
        <para>MINSD xmm, xmm/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MoveMask(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>int _mm_movemask_epi8 (__m128i a)</para>
        <para>PMOVMSKB reg, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MoveMask(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>int _mm_movemask_pd (__m128d a)</para>
        <para>MOVMSKPD reg, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MoveMask(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int _mm_movemask_epi8 (__m128i a)</para>
        <para>PMOVMSKB reg, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MoveScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_move_sd (__m128d a, __m128d b)</para>
        <para>MOVSD xmm, xmm</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MoveScalar(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m128i _mm_move_epi64 (__m128i a)</para>
        <para>MOVQ xmm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MoveScalar(System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m128i _mm_move_epi64 (__m128i a)</para>
        <para>MOVQ xmm, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Multiply(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_mul_pd (__m128d a,  __m128d b)</para>
        <para>MULPD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Multiply(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_mul_epu32 (__m128i a,  __m128i b)</para>
        <para>PMULUDQ xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MultiplyAddAdjacent(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_madd_epi16 (__m128i a,  __m128i b)</para>
        <para>PMADDWD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MultiplyHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_mulhi_epi16 (__m128i a,  __m128i b)</para>
        <para>PMULHW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MultiplyHigh(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_mulhi_epu16 (__m128i a,  __m128i b)</para>
        <para>PMULHUW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MultiplyLow(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_mullo_epi16 (__m128i a,  __m128i b)</para>
        <para>PMULLW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MultiplyLow(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_mullo_epi16 (__m128i a,  __m128i b)</para>
        <para>PMULLW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MultiplyScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_mul_sd (__m128d a,  __m128d b)</para>
        <para>MULSD xmm, xmm/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Or(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_or_si128 (__m128i a,  __m128i b)</para>
        <para>POR xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Or(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_or_pd (__m128d a,  __m128d b)</para>
        <para>ORPD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Or(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_or_si128 (__m128i a,  __m128i b)</para>
        <para>POR xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Or(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_or_si128 (__m128i a,  __m128i b)</para>
        <para>POR xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Or(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m128i _mm_or_si128 (__m128i a,  __m128i b)</para>
        <para>POR xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Or(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_or_si128 (__m128i a,  __m128i b)</para>
        <para>POR xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Or(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_or_si128 (__m128i a,  __m128i b)</para>
        <para>POR xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Or(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_or_si128 (__m128i a,  __m128i b)</para>
        <para>POR xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Or(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m128i _mm_or_si128 (__m128i a,  __m128i b)</para>
        <para>POR xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.PackSignedSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_packs_epi16 (__m128i a,  __m128i b)</para>
        <para>PACKSSWB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.PackSignedSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_packs_epi32 (__m128i a,  __m128i b)</para>
        <para>PACKSSDW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.PackUnsignedSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_packus_epi16 (__m128i a,  __m128i b)</para>
        <para>PACKUSWB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>__m128i _mm_slli_epi16 (__m128i a,  int immediate)</para>
        <para>PSLLW xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_sll_epi16 (__m128i a, __m128i count)</para>
        <para>PSLLW xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m128i _mm_slli_epi32 (__m128i a,  int immediate)</para>
        <para>PSLLD xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_sll_epi32 (__m128i a, __m128i count)</para>
        <para>PSLLD xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>__m128i _mm_slli_epi64 (__m128i a,  int immediate)</para>
        <para>PSLLQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m128i _mm_sll_epi64 (__m128i a, __m128i count)</para>
        <para>PSLLQ xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>__m128i _mm_slli_epi16 (__m128i a,  int immediate)</para>
        <para>PSLLW xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_sll_epi16 (__m128i a,  __m128i count)</para>
        <para>PSLLW xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>__m128i _mm_slli_epi32 (__m128i a,  int immediate)</para>
        <para>PSLLD xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_sll_epi32 (__m128i a, __m128i count)</para>
        <para>PSLLD xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>__m128i _mm_slli_epi64 (__m128i a,  int immediate)</para>
        <para>PSLLQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m128i _mm_sll_epi64 (__m128i a, __m128i count)</para>
        <para>PSLLQ xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>__m128i _mm_bslli_si128 (__m128i a, int imm8)</para>
        <para>PSLLDQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>__m128i _mm_bslli_si128 (__m128i a, int imm8)</para>
        <para>PSLLDQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m128i _mm_bslli_si128 (__m128i a, int imm8)</para>
        <para>PSLLDQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>__m128i _mm_bslli_si128 (__m128i a, int imm8)</para>
        <para>PSLLDQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>__m128i _mm_bslli_si128 (__m128i a, int imm8)</para>
        <para>PSLLDQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>__m128i _mm_bslli_si128 (__m128i a, int imm8)</para>
        <para>PSLLDQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>__m128i _mm_bslli_si128 (__m128i a, int imm8)</para>
        <para>PSLLDQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>__m128i _mm_bslli_si128 (__m128i a, int imm8)</para>
        <para>PSLLDQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>__m128i _mm_srai_epi16 (__m128i a,  int immediate)</para>
        <para>PSRAW xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_sra_epi16 (__m128i a, __m128i count)</para>
        <para>PSRAW xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m128i _mm_srai_epi32 (__m128i a,  int immediate)</para>
        <para>PSRAD xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_sra_epi32 (__m128i a, __m128i count)</para>
        <para>PSRAD xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>__m128i _mm_srli_epi16 (__m128i a,  int immediate)</para>
        <para>PSRLW xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_srl_epi16 (__m128i a, __m128i count)</para>
        <para>PSRLW xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m128i _mm_srli_epi32 (__m128i a,  int immediate)</para>
        <para>PSRLD xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_srl_epi32 (__m128i a, __m128i count)</para>
        <para>PSRLD xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>__m128i _mm_srli_epi64 (__m128i a,  int immediate)</para>
        <para>PSRLQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m128i _mm_srl_epi64 (__m128i a, __m128i count)</para>
        <para>PSRLQ xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>__m128i _mm_srli_epi16 (__m128i a,  int immediate)</para>
        <para>PSRLW xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_srl_epi16 (__m128i a, __m128i count)</para>
        <para>PSRLW xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>__m128i _mm_srli_epi32 (__m128i a,  int immediate)</para>
        <para>PSRLD xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_srl_epi32 (__m128i a, __m128i count)</para>
        <para>PSRLD xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>__m128i _mm_srli_epi64 (__m128i a,  int immediate)</para>
        <para>PSRLQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m128i _mm_srl_epi64 (__m128i a, __m128i count)</para>
        <para>PSRLQ xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>__m128i _mm_bsrli_si128 (__m128i a, int imm8)</para>
        <para>PSRLDQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>__m128i _mm_bsrli_si128 (__m128i a, int imm8)</para>
        <para>PSRLDQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m128i _mm_bsrli_si128 (__m128i a, int imm8)</para>
        <para>PSRLDQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>__m128i _mm_bsrli_si128 (__m128i a, int imm8)</para>
        <para>PSRLDQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>__m128i _mm_bsrli_si128 (__m128i a, int imm8)</para>
        <para>PSRLDQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>__m128i _mm_bsrli_si128 (__m128i a, int imm8)</para>
        <para>PSRLDQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>__m128i _mm_bsrli_si128 (__m128i a, int imm8)</para>
        <para>PSRLDQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>__m128i _mm_bsrli_si128 (__m128i a, int imm8)</para>
        <para>PSRLDQ xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Shuffle(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>__m128d _mm_shuffle_pd (__m128d a,  __m128d b, int immediate)</para>
        <para>SHUFPD xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Shuffle(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m128i _mm_shuffle_epi32 (__m128i a,  int immediate)</para>
        <para>PSHUFD xmm, xmm/m128, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Shuffle(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>__m128i _mm_shuffle_epi32 (__m128i a,  int immediate)</para>
        <para>PSHUFD xmm, xmm/m128, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShuffleHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>__m128i _mm_shufflehi_epi16 (__m128i a,  int immediate)</para>
        <para>PSHUFHW xmm, xmm/m128, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShuffleHigh(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>__m128i _mm_shufflehi_epi16 (__m128i a,  int control)</para>
        <para>PSHUFHW xmm, xmm/m128, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShuffleLow(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>__m128i _mm_shufflelo_epi16 (__m128i a,  int control)</para>
        <para>PSHUFLW xmm, xmm/m128, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShuffleLow(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>__m128i _mm_shufflelo_epi16 (__m128i a,  int control)</para>
        <para>PSHUFLW xmm, xmm/m128, imm8</para>
      </summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Sqrt(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_sqrt_pd (__m128d a)</para>
        <para>SQRTPD xmm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.SqrtScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_sqrt_sd (__m128d a)</para>
        <para>SQRTSD xmm, xmm/64</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.SqrtScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_sqrt_sd (__m128d a, __m128d b)</para>
        <para>SQRTSD xmm, xmm/64</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Store(System.Byte*,System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>void _mm_storeu_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVDQU m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Store(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>void _mm_storeu_pd (double* mem_addr, __m128d a)</para>
        <para>MOVUPD m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Store(System.Int16*,System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>void _mm_storeu_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVDQU m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Store(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>void _mm_storeu_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVDQU m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Store(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>void _mm_storeu_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVDQU m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Store(System.SByte*,System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>void _mm_storeu_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVDQU m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Store(System.UInt16*,System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>void _mm_storeu_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVDQU m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Store(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>void _mm_storeu_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVDQU m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Store(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>void _mm_storeu_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVDQU m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAligned(System.Byte*,System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>void _mm_store_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVDQA m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAligned(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>void _mm_store_pd (double* mem_addr, __m128d a)</para>
        <para>MOVAPD m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAligned(System.Int16*,System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>void _mm_store_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVDQA m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAligned(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>void _mm_store_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVDQA m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAligned(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>void _mm_store_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVDQA m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAligned(System.SByte*,System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>void _mm_store_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVDQA m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAligned(System.UInt16*,System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>void _mm_store_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVDQA m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAligned(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>void _mm_store_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVDQA m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAligned(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>void _mm_store_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVDQA m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAlignedNonTemporal(System.Byte*,System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>void _mm_stream_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVNTDQ m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAlignedNonTemporal(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>void _mm_stream_pd (double* mem_addr, __m128d a)</para>
        <para>MOVNTPD m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAlignedNonTemporal(System.Int16*,System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>void _mm_stream_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVNTDQ m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAlignedNonTemporal(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>void _mm_stream_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVNTDQ m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAlignedNonTemporal(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>void _mm_stream_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVNTDQ m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAlignedNonTemporal(System.SByte*,System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>void _mm_stream_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVNTDQ m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAlignedNonTemporal(System.UInt16*,System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>void _mm_stream_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVNTDQ m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAlignedNonTemporal(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>void _mm_stream_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVNTDQ m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAlignedNonTemporal(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>void _mm_stream_si128 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVNTDQ m128, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreHigh(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>void _mm_storeh_pd (double* mem_addr, __m128d a)</para>
        <para>MOVHPD m64, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreLow(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>void _mm_storel_pd (double* mem_addr, __m128d a)</para>
        <para>MOVLPD m64, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreNonTemporal(System.Int32*,System.Int32)">
      <summary>
        <para>void _mm_stream_si32(int *p, int a)</para>
        <para>MOVNTI m32, r32</para>
      </summary>
      <param name="address" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreNonTemporal(System.UInt32*,System.UInt32)">
      <summary>
        <para>void _mm_stream_si32(int *p, int a)</para>
        <para>MOVNTI m32, r32</para>
      </summary>
      <param name="address" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreScalar(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>void _mm_store_sd (double* mem_addr, __m128d a)</para>
        <para>MOVSD m64, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreScalar(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>void _mm_storeu_si32 (void* mem_addr, __m128i a) MOVD m32, xmm.</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreScalar(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>void _mm_storel_epi64 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVQ m64, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreScalar(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>void _mm_storeu_si32 (void* mem_addr, __m128i a) MOVD m32, xmm.</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreScalar(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>void _mm_storel_epi64 (__m128i* mem_addr, __m128i a)</para>
        <para>MOVQ m64, xmm</para>
      </summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Subtract(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_sub_epi8 (__m128i a,  __m128i b)</para>
        <para>PSUBB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Subtract(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_sub_pd (__m128d a, __m128d b)</para>
        <para>SUBPD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Subtract(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_sub_epi16 (__m128i a,  __m128i b)</para>
        <para>PSUBW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Subtract(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_sub_epi32 (__m128i a,  __m128i b)</para>
        <para>PSUBD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Subtract(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m128i _mm_sub_epi64 (__m128i a,  __m128i b)</para>
        <para>PSUBQ xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Subtract(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_sub_epi8 (__m128i a,  __m128i b)</para>
        <para>PSUBB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Subtract(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_sub_epi16 (__m128i a,  __m128i b)</para>
        <para>PSUBW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Subtract(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_sub_epi32 (__m128i a,  __m128i b)</para>
        <para>PSUBD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Subtract(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m128i _mm_sub_epi64 (__m128i a,  __m128i b)</para>
        <para>PSUBQ xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.SubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_subs_epu8 (__m128i a,  __m128i b)</para>
        <para>PSUBUSB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.SubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_subs_epi16 (__m128i a,  __m128i b)</para>
        <para>PSUBSW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.SubtractSaturate(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_subs_epi8 (__m128i a,  __m128i b)</para>
        <para>PSUBSB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.SubtractSaturate(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_subs_epu16 (__m128i a,  __m128i b)</para>
        <para>PSUBUSW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.SubtractScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_sub_sd (__m128d a, __m128d b)</para>
        <para>SUBSD xmm, xmm/m64</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.SumAbsoluteDifferences(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_sad_epu8 (__m128i a,  __m128i b)</para>
        <para>PSADBW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_unpackhi_epi8 (__m128i a,  __m128i b)</para>
        <para>PUNPCKHBW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_unpackhi_pd (__m128d a,  __m128d b)</para>
        <para>UNPCKHPD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_unpackhi_epi16 (__m128i a,  __m128i b)</para>
        <para>PUNPCKHWD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_unpackhi_epi32 (__m128i a,  __m128i b)</para>
        <para>PUNPCKHDQ xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m128i _mm_unpackhi_epi64 (__m128i a,  __m128i b)</para>
        <para>PUNPCKHQDQ xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_unpackhi_epi8 (__m128i a,  __m128i b)</para>
        <para>PUNPCKHBW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_unpackhi_epi16 (__m128i a,  __m128i b)</para>
        <para>PUNPCKHWD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_unpackhi_epi32 (__m128i a,  __m128i b)</para>
        <para>PUNPCKHDQ xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m128i _mm_unpackhi_epi64 (__m128i a,  __m128i b)</para>
        <para>PUNPCKHQDQ xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackLow(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_unpacklo_epi8 (__m128i a,  __m128i b)</para>
        <para>PUNPCKLBW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackLow(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_unpacklo_pd (__m128d a,  __m128d b)</para>
        <para>UNPCKLPD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackLow(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_unpacklo_epi16 (__m128i a,  __m128i b)</para>
        <para>PUNPCKLWD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackLow(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_unpacklo_epi32 (__m128i a,  __m128i b)</para>
        <para>PUNPCKLDQ xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackLow(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m128i _mm_unpacklo_epi64 (__m128i a,  __m128i b)</para>
        <para>PUNPCKLQDQ xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackLow(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_unpacklo_epi8 (__m128i a,  __m128i b)</para>
        <para>PUNPCKLBW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackLow(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_unpacklo_epi16 (__m128i a,  __m128i b)</para>
        <para>PUNPCKLWD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackLow(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_unpacklo_epi32 (__m128i a,  __m128i b)</para>
        <para>PUNPCKLDQ xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackLow(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m128i _mm_unpacklo_epi64 (__m128i a,  __m128i b)</para>
        <para>PUNPCKLQDQ xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Xor(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_xor_si128 (__m128i a,  __m128i b)</para>
        <para>PXOR xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Xor(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_xor_pd (__m128d a,  __m128d b)</para>
        <para>XORPD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Xor(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_xor_si128 (__m128i a,  __m128i b)</para>
        <para>PXOR xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Xor(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_xor_si128 (__m128i a,  __m128i b)</para>
        <para>PXOR xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Xor(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m128i _mm_xor_si128 (__m128i a,  __m128i b)</para>
        <para>PXOR xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Xor(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_xor_si128 (__m128i a,  __m128i b)</para>
        <para>PXOR xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Xor(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_xor_si128 (__m128i a,  __m128i b)</para>
        <para>PXOR xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Xor(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_xor_si128 (__m128i a,  __m128i b)</para>
        <para>PXOR xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Xor(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m128i _mm_xor_si128 (__m128i a,  __m128i b)</para>
        <para>PXOR xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Sse2.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Sse2.X64" />
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.X64.ConvertScalarToVector128Double(System.Runtime.Intrinsics.Vector128{System.Double},System.Int64)">
      <summary>
        <para>__m128d _mm_cvtsi64_sd (__m128d a, __int64 b)</para>
        <para>CVTSI2SD xmm, reg/m64</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.X64.ConvertScalarToVector128Int64(System.Int64)">
      <summary>
        <para>__m128i _mm_cvtsi64_si128 (__int64 a)</para>
        <para>MOVQ xmm, reg/m64</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.X64.ConvertScalarToVector128UInt64(System.UInt64)">
      <summary>
        <para>__m128i _mm_cvtsi64_si128 (__int64 a)</para>
        <para>MOVQ xmm, reg/m64</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.X64.ConvertToInt64(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__int64 _mm_cvtsd_si64 (__m128d a)</para>
        <para>CVTSD2SI r64, xmm/m64</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.X64.ConvertToInt64(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__int64 _mm_cvtsi128_si64 (__m128i a)</para>
        <para>MOVQ reg/m64, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.X64.ConvertToInt64WithTruncation(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__int64 _mm_cvttsd_si64 (__m128d a)</para>
        <para>CVTTSD2SI reg, xmm/m64</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.X64.ConvertToUInt64(System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__int64 _mm_cvtsi128_si64 (__m128i a)</para>
        <para>MOVQ reg/m64, xmm</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.X64.StoreNonTemporal(System.Int64*,System.Int64)">
      <summary>
        <para>void _mm_stream_si64(__int64 *p, __int64 a)</para>
        <para>MOVNTI m64, r64</para>
      </summary>
      <param name="address" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.X64.StoreNonTemporal(System.UInt64*,System.UInt64)">
      <summary>
        <para>void _mm_stream_si64(__int64 *p, __int64 a)</para>
        <para>MOVNTI m64, r64</para>
      </summary>
      <param name="address" />
      <param name="value" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Sse2.X64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Sse3">
      <summary>This class provides access to Intel SSE3 hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.AddSubtract(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_addsub_pd (__m128d a, __m128d b)</para>
        <para>ADDSUBPD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.AddSubtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_addsub_ps (__m128 a, __m128 b)</para>
        <para>ADDSUBPS xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_hadd_pd (__m128d a, __m128d b)</para>
        <para>HADDPD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_hadd_ps (__m128 a, __m128 b)</para>
        <para>HADDPS xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.HorizontalSubtract(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_hsub_pd (__m128d a, __m128d b)</para>
        <para>HSUBPD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.HorizontalSubtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_hsub_ps (__m128 a, __m128 b)</para>
        <para>HSUBPS xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.LoadAndDuplicateToVector128(System.Double*)">
      <summary>
        <para>__m128d _mm_loaddup_pd (double const* mem_addr)</para>
        <para>MOVDDUP xmm, m64</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.LoadDquVector128(System.Byte*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.LoadDquVector128(System.Int16*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.LoadDquVector128(System.Int32*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.LoadDquVector128(System.Int64*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.LoadDquVector128(System.SByte*)">
      <summary>
        <para>__m128i _mm_lddqu_si128 (__m128i const* mem_addr)</para>
        <para>LDDQU xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.LoadDquVector128(System.UInt16*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.LoadDquVector128(System.UInt32*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.LoadDquVector128(System.UInt64*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.MoveAndDuplicate(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_movedup_pd (__m128d a)</para>
        <para>MOVDDUP xmm, xmm/m64</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.MoveHighAndDuplicate(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_movehdup_ps (__m128 a)</para>
        <para>MOVSHDUP xmm, xmm/m128</para>
      </summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.MoveLowAndDuplicate(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_moveldup_ps (__m128 a)</para>
        <para>MOVSLDUP xmm, xmm/m128</para>
      </summary>
      <param name="source" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Sse3.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Sse3.X64" />
    <member name="P:System.Runtime.Intrinsics.X86.Sse3.X64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Sse41">
      <summary>This class provides access to Intel SSE4.1 hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Blend(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>__m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8)</para>
        <para>BLENDPD xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Blend(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>__m128i _mm_blend_epi16 (__m128i a, __m128i b, const int imm8)</para>
        <para>PBLENDW xmm, xmm/m128 imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Blend(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>__m128 _mm_blend_ps (__m128 a, __m128 b, const int imm8)</para>
        <para>BLENDPS xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Blend(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>__m128i _mm_blend_epi16 (__m128i a, __m128i b, const int imm8)</para>
        <para>PBLENDW xmm, xmm/m128 imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask)</para>
        <para>PBLENDVB xmm, xmm/m128, xmm</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_blendv_pd (__m128d a, __m128d b, __m128d mask)</para>
        <para>BLENDVPD xmm, xmm/m128, xmm0</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask)</para>
        <para>PBLENDVB xmm, xmm/m128, xmm</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask)</para>
        <para>PBLENDVB xmm, xmm/m128, xmm</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask)</para>
        <para>PBLENDVB xmm, xmm/m128, xmm</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask)</para>
        <para>PBLENDVB xmm, xmm/m128, xmm</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_blendv_ps (__m128 a, __m128 b, __m128 mask)</para>
        <para>BLENDVPS xmm, xmm/m128, xmm0</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask)</para>
        <para>PBLENDVB xmm, xmm/m128, xmm</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask)</para>
        <para>PBLENDVB xmm, xmm/m128, xmm</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask)</para>
        <para>PBLENDVB xmm, xmm/m128, xmm</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Ceiling(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_ceil_pd (__m128d a)</para>
        <para>ROUNDPD xmm, xmm/m128, imm8(10)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Ceiling(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_ceil_ps (__m128 a)</para>
        <para>ROUNDPS xmm, xmm/m128, imm8(10)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.CeilingScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_ceil_sd (__m128d a)</para>
        <para>ROUNDSD xmm, xmm/m128, imm8(10)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.CeilingScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_ceil_sd (__m128d a, __m128d b)</para>
        <para>ROUNDSD xmm, xmm/m128, imm8(10)</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.CeilingScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_ceil_ss (__m128 a)</para>
        <para>ROUNDSD xmm, xmm/m128, imm8(10)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.CeilingScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_ceil_ss (__m128 a, __m128 b)</para>
        <para>ROUNDSS xmm, xmm/m128, imm8(10)</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m128i _mm_cmpeq_epi64 (__m128i a, __m128i b)</para>
        <para>PCMPEQQ xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.CompareEqual(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>
        <para>__m128i _mm_cmpeq_epi64 (__m128i a, __m128i b)</para>
        <para>PCMPEQQ xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int16(System.Byte*)">
      <summary>PMOVZXBW xmm, m64</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int16(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_cvtepu8_epi16 (__m128i a)</para>
        <para>PMOVZXBW xmm, xmm/m64</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int16(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_cvtepi8_epi16 (__m128i a)</para>
        <para>PMOVSXBW xmm, xmm/m64</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int16(System.SByte*)">
      <summary>PMOVSXBW xmm, m64</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int32(System.Byte*)">
      <summary>PMOVZXBD xmm, m32</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int32(System.Int16*)">
      <summary>PMOVSXWD xmm, m64</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int32(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_cvtepu8_epi32 (__m128i a)</para>
        <para>PMOVZXBD xmm, xmm/m32</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int32(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_cvtepi16_epi32 (__m128i a)</para>
        <para>PMOVSXWD xmm, xmm/m64</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int32(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_cvtepi8_epi32 (__m128i a)</para>
        <para>PMOVSXBD xmm, xmm/m32</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int32(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_cvtepu16_epi32 (__m128i a)</para>
        <para>PMOVZXWD xmm, xmm/m64</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int32(System.SByte*)">
      <summary>PMOVSXBD xmm, m32</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int32(System.UInt16*)">
      <summary>PMOVZXWD xmm, m64</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.Byte*)">
      <summary>PMOVZXBQ xmm, m16</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.Int16*)">
      <summary>PMOVSXWQ xmm, m32</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.Int32*)">
      <summary>PMOVSXDQ xmm, m64</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_cvtepu8_epi64 (__m128i a)</para>
        <para>PMOVZXBQ xmm, xmm/m16</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_cvtepi16_epi64 (__m128i a)</para>
        <para>PMOVSXWQ xmm, xmm/m32</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_cvtepi32_epi64 (__m128i a)</para>
        <para>PMOVSXDQ xmm, xmm/m64</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_cvtepi8_epi64 (__m128i a)</para>
        <para>PMOVSXBQ xmm, xmm/m16</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_cvtepu16_epi64 (__m128i a)</para>
        <para>PMOVZXWQ xmm, xmm/m32</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_cvtepu32_epi64 (__m128i a)</para>
        <para>PMOVZXDQ xmm, xmm/m64</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.SByte*)">
      <summary>PMOVSXBQ xmm, m16</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.UInt16*)">
      <summary>PMOVZXWQ xmm, m32</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.UInt32*)">
      <summary>PMOVZXDQ xmm, m64</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.DotProduct(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>
        <para>__m128d _mm_dp_pd (__m128d a, __m128d b, const int imm8)</para>
        <para>DPPD xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.DotProduct(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>__m128 _mm_dp_ps (__m128 a, __m128 b, const int imm8)</para>
        <para>DPPS xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Extract(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>int _mm_extract_epi8 (__m128i a, const int imm8)</para>
        <para>PEXTRB reg/m8, xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Extract(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>int _mm_extract_epi32 (__m128i a, const int imm8)</para>
        <para>PEXTRD reg/m32, xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Extract(System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>int _mm_extract_ps (__m128 a, const int imm8)</para>
        <para>EXTRACTPS xmm, xmm/m32, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Extract(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>int _mm_extract_epi32 (__m128i a, const int imm8)</para>
        <para>PEXTRD reg/m32, xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Floor(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_floor_pd (__m128d a)</para>
        <para>ROUNDPD xmm, xmm/m128, imm8(9)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Floor(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_floor_ps (__m128 a)</para>
        <para>ROUNDPS xmm, xmm/m128, imm8(9)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.FloorScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_floor_sd (__m128d a)</para>
        <para>ROUNDSD xmm, xmm/m128, imm8(9)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.FloorScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_floor_sd (__m128d a, __m128d b)</para>
        <para>ROUNDSD xmm, xmm/m128, imm8(9)</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.FloorScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_floor_ss (__m128 a)</para>
        <para>ROUNDSS xmm, xmm/m128, imm8(9)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.FloorScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_floor_ss (__m128 a, __m128 b)</para>
        <para>ROUNDSS xmm, xmm/m128, imm8(9)</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Insert(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte,System.Byte)">
      <summary>
        <para>__m128i _mm_insert_epi8 (__m128i a, int i, const int imm8)</para>
        <para>PINSRB xmm, reg/m8, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Insert(System.Runtime.Intrinsics.Vector128{System.Int32},System.Int32,System.Byte)">
      <summary>
        <para>__m128i _mm_insert_epi32 (__m128i a, int i, const int imm8)</para>
        <para>PINSRD xmm, reg/m32, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Insert(System.Runtime.Intrinsics.Vector128{System.SByte},System.SByte,System.Byte)">
      <summary>
        <para>__m128i _mm_insert_epi8 (__m128i a, int i, const int imm8)</para>
        <para>PINSRB xmm, reg/m8, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Insert(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>
        <para>__m128 _mm_insert_ps (__m128 a, __m128 b, const int imm8)</para>
        <para>INSERTPS xmm, xmm/m32, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Insert(System.Runtime.Intrinsics.Vector128{System.UInt32},System.UInt32,System.Byte)">
      <summary>
        <para>__m128i _mm_insert_epi32 (__m128i a, int i, const int imm8)</para>
        <para>PINSRD xmm, reg/m32, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.LoadAlignedVector128NonTemporal(System.Byte*)">
      <summary>
        <para>__m128i _mm_stream_load_si128 (const __m128i* mem_addr)</para>
        <para>MOVNTDQA xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.LoadAlignedVector128NonTemporal(System.Int16*)">
      <summary>
        <para>__m128i _mm_stream_load_si128 (const __m128i* mem_addr)</para>
        <para>MOVNTDQA xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.LoadAlignedVector128NonTemporal(System.Int32*)">
      <summary>
        <para>__m128i _mm_stream_load_si128 (const __m128i* mem_addr)</para>
        <para>MOVNTDQA xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.LoadAlignedVector128NonTemporal(System.Int64*)">
      <summary>
        <para>__m128i _mm_stream_load_si128 (const __m128i* mem_addr)</para>
        <para>MOVNTDQA xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.LoadAlignedVector128NonTemporal(System.SByte*)">
      <summary>
        <para>__m128i _mm_stream_load_si128 (const __m128i* mem_addr)</para>
        <para>MOVNTDQA xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.LoadAlignedVector128NonTemporal(System.UInt16*)">
      <summary>
        <para>__m128i _mm_stream_load_si128 (const __m128i* mem_addr)</para>
        <para>MOVNTDQA xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.LoadAlignedVector128NonTemporal(System.UInt32*)">
      <summary>
        <para>__m128i _mm_stream_load_si128 (const __m128i* mem_addr)</para>
        <para>MOVNTDQA xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.LoadAlignedVector128NonTemporal(System.UInt64*)">
      <summary>
        <para>__m128i _mm_stream_load_si128 (const __m128i* mem_addr)</para>
        <para>MOVNTDQA xmm, m128</para>
      </summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Max(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_max_epi32 (__m128i a, __m128i b)</para>
        <para>PMAXSD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Max(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_max_epi8 (__m128i a, __m128i b)</para>
        <para>PMAXSB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Max(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_max_epu16 (__m128i a, __m128i b)</para>
        <para>PMAXUW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Max(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_max_epu32 (__m128i a, __m128i b)</para>
        <para>PMAXUD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Min(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_min_epi32 (__m128i a, __m128i b)</para>
        <para>PMINSD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Min(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_min_epi8 (__m128i a, __m128i b)</para>
        <para>PMINSB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Min(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_min_epu16 (__m128i a, __m128i b)</para>
        <para>PMINUW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Min(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_min_epu32 (__m128i a, __m128i b)</para>
        <para>PMINUD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.MinHorizontal(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>
        <para>__m128i _mm_minpos_epu16 (__m128i a)</para>
        <para>PHMINPOSUW xmm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.MultipleSumAbsoluteDifferences(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>__m128i _mm_mpsadbw_epu8 (__m128i a, __m128i b, const int imm8)</para>
        <para>MPSADBW xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Multiply(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_mul_epi32 (__m128i a, __m128i b)</para>
        <para>PMULDQ xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.MultiplyLow(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_mullo_epi32 (__m128i a, __m128i b)</para>
        <para>PMULLD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.MultiplyLow(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>
        <para>__m128i _mm_mullo_epi32 (__m128i a, __m128i b)</para>
        <para>PMULLD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.PackUnsignedSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_packus_epi32 (__m128i a, __m128i b)</para>
        <para>PACKUSDW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundCurrentDirection(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>_m128d _mm_round_pd (__m128d a, _MM_FROUND_CUR_DIRECTION)</para>
        <para>ROUNDPD xmm, xmm/m128, imm8(4)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundCurrentDirection(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_round_ps (__m128 a, _MM_FROUND_CUR_DIRECTION)</para>
        <para>ROUNDPS xmm, xmm/m128, imm8(4)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundCurrentDirectionScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_round_sd (__m128d a, _MM_FROUND_CUR_DIRECTION)</para>
        <para>ROUNDSD xmm, xmm/m128, imm8(4)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundCurrentDirectionScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_round_sd (__m128d a, __m128d b, _MM_FROUND_CUR_DIRECTION)</para>
        <para>ROUNDSD xmm, xmm/m128, imm8(4)</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundCurrentDirectionScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_round_ss (__m128 a, _MM_FROUND_CUR_DIRECTION)</para>
        <para>ROUNDSS xmm, xmm/m128, imm8(4)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundCurrentDirectionScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_round_ss (__m128 a, __m128 b, _MM_FROUND_CUR_DIRECTION)</para>
        <para>ROUNDSS xmm, xmm/m128, imm8(4)</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNearestInteger(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_round_pd (__m128d a, int rounding)</para>
        <para>ROUNDPD xmm, xmm/m128, imm8(8)
            _MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNearestInteger(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_round_ps (__m128 a, int rounding)</para>
        <para>ROUNDPS xmm, xmm/m128, imm8(8)
            _MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNearestIntegerScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_round_sd (__m128d a, _MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC)</para>
        <para>ROUNDSD xmm, xmm/m128, imm8(8)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNearestIntegerScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_round_sd (__m128d a, __m128d b, _MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC)</para>
        <para>ROUNDSD xmm, xmm/m128, imm8(8)</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNearestIntegerScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_round_ss (__m128 a, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC)</para>
        <para>ROUNDSS xmm, xmm/m128, imm8(8)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNearestIntegerScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_round_ss (__m128 a, __m128 b, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC)</para>
        <para>ROUNDSS xmm, xmm/m128, imm8(8)</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNegativeInfinity(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_round_pd (__m128d a, _MM_FROUND_TO_NEG_INF |_MM_FROUND_NO_EXC)</para>
        <para>ROUNDPD xmm, xmm/m128, imm8(9)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNegativeInfinity(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_round_ps (__m128 a, _MM_FROUND_TO_NEG_INF |_MM_FROUND_NO_EXC)</para>
        <para>ROUNDPS xmm, xmm/m128, imm8(9)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNegativeInfinityScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_round_sd (__m128d a, _MM_FROUND_TO_NEG_INF |_MM_FROUND_NO_EXC)</para>
        <para>ROUNDSD xmm, xmm/m128, imm8(9)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNegativeInfinityScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_round_sd (__m128d a, __m128d b, _MM_FROUND_TO_NEG_INF |_MM_FROUND_NO_EXC)</para>
        <para>ROUNDSD xmm, xmm/m128, imm8(9)</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNegativeInfinityScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_round_ss (__m128 a, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC)</para>
        <para>ROUNDSS xmm, xmm/m128, imm8(9)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNegativeInfinityScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_round_ss (__m128 a, __m128 b, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC)</para>
        <para>ROUNDSS xmm, xmm/m128, imm8(9)</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToPositiveInfinity(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_round_pd (__m128d a, _MM_FROUND_TO_POS_INF |_MM_FROUND_NO_EXC)</para>
        <para>ROUNDPD xmm, xmm/m128, imm8(10)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToPositiveInfinity(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_round_ps (__m128 a, _MM_FROUND_TO_POS_INF |_MM_FROUND_NO_EXC)</para>
        <para> ROUNDPS xmm, xmm/m128, imm8(10)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToPositiveInfinityScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_round_sd (__m128d a, _MM_FROUND_TO_POS_INF |_MM_FROUND_NO_EXC)</para>
        <para>ROUNDSD xmm, xmm/m128, imm8(10)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToPositiveInfinityScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_round_sd (__m128d a, __m128d b, _MM_FROUND_TO_POS_INF |_MM_FROUND_NO_EXC)</para>
        <para>ROUNDSD xmm, xmm/m128, imm8(10)</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToPositiveInfinityScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_round_ss (__m128 a, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC)</para>
        <para>ROUNDSS xmm, xmm/m128, imm8(10)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToPositiveInfinityScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_round_ss (__m128 a, __m128 b, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC)</para>
        <para>ROUNDSS xmm, xmm/m128, imm8(10)</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToZero(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_round_pd (__m128d a, _MM_FROUND_TO_ZERO |_MM_FROUND_NO_EXC)</para>
        <para>ROUNDPD xmm, xmm/m128, imm8(11)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToZero(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_round_ps (__m128 a, _MM_FROUND_TO_ZERO |_MM_FROUND_NO_EXC)</para>
        <para>ROUNDPS xmm, xmm/m128, imm8(11)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToZeroScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_round_sd (__m128d a, _MM_FROUND_TO_ZERO |_MM_FROUND_NO_EXC)</para>
        <para>ROUNDSD xmm, xmm/m128, imm8(11)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToZeroScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>
        <para>__m128d _mm_round_sd (__m128d a, __m128d b, _MM_FROUND_TO_ZERO |_MM_FROUND_NO_EXC)</para>
        <para>ROUNDSD xmm, xmm/m128, imm8(11)</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToZeroScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_round_ss (__m128 a, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC)</para>
        <para>ROUNDSS xmm, xmm/m128, imm8(11)</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToZeroScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>
        <para>__m128 _mm_round_ss (__m128 a, __m128 b, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC)</para>
        <para>ROUNDSS xmm, xmm/m128, imm8(11)</para>
      </summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestC(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestC(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestC(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestC(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestC(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int _mm_testc_si128 (__m128i a, __m128i b)</para>
        <para>PTEST xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestC(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestC(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestC(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int _mm_testnzc_si128 (__m128i a, __m128i b)</para>
        <para>PTEST xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestZ(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestZ(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestZ(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestZ(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestZ(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>int _mm_testz_si128 (__m128i a, __m128i b)</para>
        <para>PTEST xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestZ(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestZ(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestZ(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Sse41.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Sse41.X64" />
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.X64.Extract(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>__int64 _mm_extract_epi64 (__m128i a, const int imm8)</para>
        <para>PEXTRQ reg/m64, xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.X64.Extract(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>__int64 _mm_extract_epi64 (__m128i a, const int imm8)</para>
        <para>PEXTRQ reg/m64, xmm, imm8</para>
      </summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.X64.Insert(System.Runtime.Intrinsics.Vector128{System.Int64},System.Int64,System.Byte)">
      <summary>
        <para>__m128i _mm_insert_epi64 (__m128i a, __int64 i, const int imm8)</para>
        <para>PINSRQ xmm, reg/m64, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.X64.Insert(System.Runtime.Intrinsics.Vector128{System.UInt64},System.UInt64,System.Byte)">
      <summary>
        <para>__m128i _mm_insert_epi64 (__m128i a, __int64 i, const int imm8)</para>
        <para>PINSRQ xmm, reg/m64, imm8</para>
      </summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Sse41.X64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Sse42">
      <summary>This class provides access to Intel SSE4.2 hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse42.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>
        <para>__m128i _mm_cmpgt_epi64 (__m128i a, __m128i b)</para>
        <para>PCMPGTQ xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse42.Crc32(System.UInt32,System.Byte)">
      <summary>
        <para>unsigned int _mm_crc32_u8 (unsigned int crc, unsigned char v)</para>
        <para>CRC32 reg, reg/m8</para>
      </summary>
      <param name="crc" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse42.Crc32(System.UInt32,System.UInt16)">
      <summary>
        <para>unsigned int _mm_crc32_u16 (unsigned int crc, unsigned short v)</para>
        <para>CRC32 reg, reg/m16</para>
      </summary>
      <param name="crc" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse42.Crc32(System.UInt32,System.UInt32)">
      <summary>
        <para>unsigned int _mm_crc32_u32 (unsigned int crc, unsigned int v)</para>
        <para>CRC32 reg, reg/m32</para>
      </summary>
      <param name="crc" />
      <param name="data" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Sse42.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Sse42.X64" />
    <member name="M:System.Runtime.Intrinsics.X86.Sse42.X64.Crc32(System.UInt64,System.UInt64)">
      <summary>
        <para>unsigned __int64 _mm_crc32_u64 (unsigned __int64 crc, unsigned __int64 v)</para>
        <para>CRC32 reg, reg/m64</para>
      </summary>
      <param name="crc" />
      <param name="data" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Sse42.X64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Ssse3">
      <summary>This class provides access to Intel SSSE3 hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.Abs(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_abs_epi16 (__m128i a)</para>
        <para>PABSW xmm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.Abs(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_abs_epi32 (__m128i a)</para>
        <para>PABSD xmm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.Abs(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_abs_epi8 (__m128i a)</para>
        <para>PABSB xmm, xmm/m128</para>
      </summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.AlignRight(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>
        <para>__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int count)</para>
        <para>PALIGNR xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.AlignRight(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>
        <para>__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int count)</para>
        <para>PALIGNR xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.AlignRight(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>
        <para>__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int count)</para>
        <para>PALIGNR xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.AlignRight(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>
        <para>__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int count)</para>
        <para>PALIGNR xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.AlignRight(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>
        <para>__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int count)</para>
        <para>PALIGNR xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.AlignRight(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>
        <para>__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int count)</para>
        <para>PALIGNR xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.AlignRight(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>
        <para>__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int count)</para>
        <para>PALIGNR xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.AlignRight(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>
        <para>__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int count)</para>
        <para>PALIGNR xmm, xmm/m128, imm8</para>
      </summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_hadd_epi16 (__m128i a, __m128i b)</para>
        <para>PHADDW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_hadd_epi32 (__m128i a, __m128i b)</para>
        <para>PHADDD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.HorizontalAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_hadds_epi16 (__m128i a, __m128i b)</para>
        <para>PHADDSW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.HorizontalSubtract(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_hsub_epi16 (__m128i a, __m128i b)</para>
        <para>PHSUBW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.HorizontalSubtract(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_hsub_epi32 (__m128i a, __m128i b)</para>
        <para>PHSUBD xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.HorizontalSubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_hsubs_epi16 (__m128i a, __m128i b)</para>
        <para>PHSUBSW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.MultiplyAddAdjacent(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_maddubs_epi16 (__m128i a, __m128i b)</para>
        <para>PMADDUBSW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.MultiplyHighRoundScale(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_mulhrs_epi16 (__m128i a, __m128i b)</para>
        <para>PMULHRSW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.Shuffle(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>
        <para>__m128i _mm_shuffle_epi8 (__m128i a, __m128i b)</para>
        <para>PSHUFB xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.Shuffle(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_shuffle_epi8 (__m128i a, __m128i b)</para>
        <para>PSHUFB xmm, xmm/m128</para>
      </summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.Sign(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>
        <para>__m128i _mm_sign_epi16 (__m128i a, __m128i b)</para>
        <para>PSIGNW xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.Sign(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>
        <para>__m128i _mm_sign_epi32 (__m128i a, __m128i b)</para>
        <para>PSIGND xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.Sign(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>
        <para>__m128i _mm_sign_epi8 (__m128i a, __m128i b)</para>
        <para>PSIGNB xmm, xmm/m128</para>
      </summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Ssse3.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Ssse3.X64" />
    <member name="P:System.Runtime.Intrinsics.X86.Ssse3.X64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.X86Base">
      <summary>Provides access to the x86 base hardware instructions via intrinsics.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.X86Base.CpuId(System.Int32,System.Int32)">
      <summary>void __cpuidex(int cpuInfo[4], int function_id, int subfunction_id); CPUID</summary>
      <param name="functionId" />
      <param name="subFunctionId" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.X86Base.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.X86Base.X64" />
    <member name="P:System.Runtime.Intrinsics.X86.X86Base.X64.IsSupported" />
  </members>
</doc>