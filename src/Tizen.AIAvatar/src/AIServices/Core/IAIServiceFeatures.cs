/*
 * Copyright(c) 2024 Samsung Electronics Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Threading.Tasks;


namespace Tizen.AIAvatar
{
    /// <summary>
    /// Interface for a Text-to-Speech service.
    /// </summary>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public interface ITextToSpeechService
    {
        /// <summary>
        /// Occurs when the Text-to-Speech service starts processing.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Never)]
        event EventHandler<ttsStreamingEventArgs> OnTtsStart;

        /// <summary>
        /// Occurs when the Text-to-Speech service is receiving data.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Never)]
        event EventHandler<ttsStreamingEventArgs> OnTtsReceiving;

        /// <summary>
        /// Occurs when the Text-to-Speech service finishes processing.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Never)]
        event EventHandler<ttsStreamingEventArgs> OnTtsFinish;

        /// <summary>
        /// Converts the given text to speech asynchronously and returns the audio data.
        /// </summary>
        /// <param name="text">The text to be converted to speech.</param>
        /// <param name="voice">Optional parameter to specify the voice type.</param>
        /// <param name="options">Optional parameters for customizing speech output.</param>
        /// <returns>A task representing the asynchronous operation, with a byte array of the generated audio data.</returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        Task<byte[]> TextToSpeechAsync(
            string text,
            string voice = null,
            Dictionary<string, object> options = null);

        /// <summary>
        /// Streams the given text as speech asynchronously.
        /// </summary>
        /// <param name="text">The text to be converted to speech.</param>
        /// <param name="voice">Optional parameter to specify the voice type.</param>
        /// <param name="options">Optional parameters for customizing speech output.</param>
        /// <returns>A task representing the asynchronous operation.</returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        Task TextToSpeechStreamAsync(
            string text,
            string voice = null,
            Dictionary<string, object> options = null);
    }

    /// <summary>
    /// Interface for a Speech-to-Text service.
    /// </summary>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public interface ISpeechToTextService
    {
        /// <summary>
        /// Converts the given audio data to text asynchronously.
        /// </summary>
        /// <param name="audioData">The audio data to be converted to text.</param>
        /// <param name="options">Optional parameters for customizing the transcription.</param>
        /// <returns>A task representing the asynchronous operation, with the resulting transcribed text.</returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        Task<string> SpeechToTextAsync(
            byte[] audioData,
            Dictionary<string, object> options = null);

        /// <summary>
        /// Streams the given audio data to text asynchronously.
        /// </summary>
        /// <param name="audioStream">The audio stream to be converted to text.</param>
        /// <param name="options">Optional parameters for customizing the transcription.</param>
        /// <returns>A task representing the asynchronous operation.</returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        Task StreamSpeechToTextAsync(
            Stream audioStream,
            Dictionary<string, object> options = null);
    }

    /// <summary>
    /// Interface for a Large Language Model (LLM) service.
    /// </summary>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public interface ILLMService
    {
        /// <summary>
        /// Occurs when a response is generated by the LLM service.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Never)]
        event EventHandler<llmResponseEventArgs> ResponseHandler;

        /// <summary>
        /// Generates a response to the given message asynchronously.
        /// </summary>
        /// <param name="message">The input message to be processed by the LLM.</param>
        /// <param name="options">Optional parameters for customizing the LLM output.</param>
        /// <returns>A task representing the asynchronous operation.</returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        Task GenerateTextAsync(string message, Dictionary<string, object> options = null);
    }
}
