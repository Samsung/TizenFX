<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Memory</name>
  </assembly>
  <members>
    <member name="T:System.Buffers.Binary.BinaryPrimitives" />
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt16BigEndian(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt16LittleEndian(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt32BigEndian(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt32LittleEndian(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt64BigEndian(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt64LittleEndian(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt16BigEndian(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt16LittleEndian(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt32BigEndian(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt32LittleEndian(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt64BigEndian(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt64LittleEndian(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Byte)">
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int16)">
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int32)">
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int64)">
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.SByte)">
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt16)">
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt32)">
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt64)">
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt16BigEndian(System.ReadOnlySpan{System.Byte},System.Int16@)">
      <param name="source" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt16LittleEndian(System.ReadOnlySpan{System.Byte},System.Int16@)">
      <param name="source" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt32BigEndian(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <param name="source" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt32LittleEndian(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <param name="source" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt64BigEndian(System.ReadOnlySpan{System.Byte},System.Int64@)">
      <param name="source" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt64LittleEndian(System.ReadOnlySpan{System.Byte},System.Int64@)">
      <param name="source" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt16BigEndian(System.ReadOnlySpan{System.Byte},System.UInt16@)">
      <param name="source" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt16LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt16@)">
      <param name="source" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt32BigEndian(System.ReadOnlySpan{System.Byte},System.UInt32@)">
      <param name="source" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt32LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt32@)">
      <param name="source" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt64BigEndian(System.ReadOnlySpan{System.Byte},System.UInt64@)">
      <param name="source" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt64LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt64@)">
      <param name="source" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt16BigEndian(System.Span{System.Byte},System.Int16)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt16LittleEndian(System.Span{System.Byte},System.Int16)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt32BigEndian(System.Span{System.Byte},System.Int32)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt32LittleEndian(System.Span{System.Byte},System.Int32)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt64BigEndian(System.Span{System.Byte},System.Int64)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt64LittleEndian(System.Span{System.Byte},System.Int64)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16BigEndian(System.Span{System.Byte},System.UInt16)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16LittleEndian(System.Span{System.Byte},System.UInt16)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32BigEndian(System.Span{System.Byte},System.UInt32)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32LittleEndian(System.Span{System.Byte},System.UInt32)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64BigEndian(System.Span{System.Byte},System.UInt64)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64LittleEndian(System.Span{System.Byte},System.UInt64)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt16BigEndian(System.Span{System.Byte},System.Int16)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt16LittleEndian(System.Span{System.Byte},System.Int16)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt32BigEndian(System.Span{System.Byte},System.Int32)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt32LittleEndian(System.Span{System.Byte},System.Int32)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt64BigEndian(System.Span{System.Byte},System.Int64)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt64LittleEndian(System.Span{System.Byte},System.Int64)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt16BigEndian(System.Span{System.Byte},System.UInt16)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt16LittleEndian(System.Span{System.Byte},System.UInt16)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt32BigEndian(System.Span{System.Byte},System.UInt32)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt32LittleEndian(System.Span{System.Byte},System.UInt32)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt64BigEndian(System.Span{System.Byte},System.UInt64)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt64LittleEndian(System.Span{System.Byte},System.UInt64)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="T:System.Buffers.BuffersExtensions">
      <summary>Provides extension methods for <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.CopyTo``1(System.Buffers.ReadOnlySequence{``0},System.Span{``0})">
      <summary>Copies the <see cref="T:System.Buffers.ReadOnlySequence`1" /> to the specified <see cref="T:System.Span`1" />.</summary>
      <param name="source">The source <see cref="T:System.Buffers.ReadOnlySequence`1" />.</param>
      <param name="destination">The destination <see cref="T:System.Span`1" />.</param>
      <typeparam name="T">The type of the items in the <see cref="T:System.Buffers.ReadOnlySequence`1" />.</typeparam>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.PositionOf``1(System.Buffers.ReadOnlySequence{``0},``0)">
      <summary>Returns the position of the first occurrence of <paramref name="item" /> in the <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
      <param name="source">The source <see cref="T:System.Buffers.ReadOnlySequence`1" />.</param>
      <param name="value">The item to find in the <see cref="T:System.Buffers.ReadOnlySequence`1" />.</param>
      <typeparam name="T">The type of the items in the <see cref="T:System.Buffers.ReadOnlySequence`1" />.</typeparam>
      <returns>An object whose <see cref="M:System.SequencePosition.GetInteger" /> method returns the position of the first occurrence of <paramref name="item" />, or an object whose <see langword="Nullable&lt;SequencePosition&gt;.HasValue" /> property is <see langword="false" /> .</returns>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.ToArray``1(System.Buffers.ReadOnlySequence{``0})">
      <summary>Converts the <see cref="T:System.Buffers.ReadOnlySequence`1" /> to an array.</summary>
      <param name="sequence">The read-only sequence to convert to an array.</param>
      <typeparam name="T">The type of the items in the <see cref="T:System.Buffers.ReadOnlySequence`1" />.</typeparam>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.Write``1(System.Buffers.IBufferWriter{``0},System.ReadOnlySpan{``0})">
      <summary>Writes the contents of <paramref name="value" /> to <paramref name="writer" />.</summary>
      <param name="writer">The buffer writer to which to write <paramref name="value" />.</param>
      <param name="value">The read-only span to be written to <paramref name="writer" />.</param>
      <typeparam name="T">The type of the items in the <see cref="T:System.ReadOnlySpan`1" />.</typeparam>
    </member>
    <member name="T:System.Buffers.IBufferWriter`1">
      <summary>Represents a <typeparamref name="T" /> sink.</summary>
      <typeparam name="T">The type of the items in the <see cref="T:System.Buffers.IBufferWriter`1" />.</typeparam>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.Advance(System.Int32)">
      <summary>Notifies the <see cref="T:System.Buffers.IBufferWriter`1" /> that <paramref name="count" /> data items were written to the <see cref="T:System.Span`1" /> or <see cref="T:System.Memory`1" />.</summary>
      <param name="count">The number of data items written to the <see cref="T:System.Span`1" /> or <see cref="T:System.Memory`1" />.</param>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.GetMemory(System.Int32)">
      <summary>Requests a <see cref="T:System.Memory`1" /> that is at least <paramref name="sizeHint" /> in size if possible.</summary>
      <param name="sizeHint">The size of the <see cref="T:System.Memory`1" /> requested. If 0, requests currently available memory.</param>
      <returns>A <see cref="T:System.Memory`1" /> of size <paramref name="sizeHint" />, if it's available; otherwise, a <see cref="T:System.Memory`1" /> with the maximum available memory. If <paramref name="sizeHint" /> is 0, returns currently available memory.</returns>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.GetSpan(System.Int32)">
      <summary>Requests a span that is at least <paramref name="sizeHint" /> in size if possible.</summary>
      <param name="sizeHint">The size of the memory span requested. If 0, requests currently available memory.</param>
      <returns>A span of size <paramref name="sizeHint" />, if it's available; otherwise, a memory span with the maximum available memory. If <paramref name="sizeHint" /> is 0, returns currently available memory.</returns>
    </member>
    <member name="T:System.Buffers.MemoryPool`1">
      <summary>Represents a pool of memory blocks.</summary>
      <typeparam name="T">The type of the items in the memory pool.</typeparam>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.#ctor">
      <summary>Constructs a new instance of a memory pool.</summary>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Dispose">
      <summary>Frees all resources used by the memory pool.</summary>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Dispose(System.Boolean)">
      <summary>Frees the unmanaged resources used by the memory pool and optionally releases the managed resources.</summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;  to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Buffers.MemoryPool`1.MaxBufferSize">
      <summary>Gets the maximum buffer size supported by this pool.</summary>
      <returns>The maximum buffer size supported by this pool.</returns>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Rent(System.Int32)">
      <summary>Returns a memory block capable of holding at least <paramref name="minBufferSize" /> elements of T.</summary>
      <param name="minBufferSize">The minimum number of elements of <typeparamref name="T" /> that the memory pool can hold. A value of -1 returns a memory pool set to the default size for the pool.</param>
      <returns>A memory block capable of holding at least <paramref name="minBufferSize" /> elements of T.</returns>
    </member>
    <member name="P:System.Buffers.MemoryPool`1.Shared">
      <summary>Gets a singleton instance of a memory pool based on arrays.</summary>
      <returns>A singleton instance of a memory pool.</returns>
    </member>
    <member name="T:System.Buffers.OperationStatus">
      <summary>Defines the values that can be returned from span-based operations that support processing of input contained in multiple discontiguous buffers.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.DestinationTooSmall">
      <summary>The input is partially processed, up to what could fit into the destination buffer. The caller can enlarge the destination buffer, slice the buffers appropriately, and retry.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.Done">
      <summary>The entire input buffer has been processed and the operation is complete.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.InvalidData">
      <summary>The input contained invalid bytes which could not be processed. If the input is partially processed, the destination contains the partial result. This guarantees that no additional data appended to the input will make the invalid sequence valid.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.NeedMoreData">
      <summary>The input is partially processed, up to the last valid chunk of the input that could be consumed. The caller can stitch the remaining unprocessed input with more data, slice the buffers appropriately, and retry.</summary>
    </member>
    <member name="T:System.Buffers.ReadOnlySequence`1">
      <summary>Represents a sequence that can read a sequential series of <typeparam name="T" />.</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(`0[])">
      <summary>Creates an instance of <see cref="T:System.Buffers.ReadOnlySequence`1" /> from the <paramref name="array" />.</summary>
      <param name="array">The array from which to create a read-only sequence.</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>Creates an instance of a <see cref="T:System.Buffers.ReadOnlySequence`1" /> from a section of an array.</summary>
      <param name="array">The array from which to create the read-only sequence.</param>
      <param name="start">The zero-based index of the first element in the array to include in the read-only sequence.</param>
      <param name="length">The number of elements to include in the read-only sequence.</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(System.Buffers.ReadOnlySequenceSegment{`0},System.Int32,System.Buffers.ReadOnlySequenceSegment{`0},System.Int32)">
      <summary>Creates an instance of a <see cref="T:System.Buffers.ReadOnlySequence`1" /> from a linked memory list represented by start and end segments and the corresponding indexes in them.</summary>
      <param name="startSegment" />
      <param name="startIndex" />
      <param name="endSegment" />
      <param name="endIndex" />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(System.ReadOnlyMemory{`0})">
      <summary>Creates an instance of <see cref="T:System.Buffers.ReadOnlySequence`1" /> from a <see cref="T:System.ReadOnlyMemory`1" />.</summary>
      <param name="memory" />
    </member>
    <member name="F:System.Buffers.ReadOnlySequence`1.Empty">
      <summary>Returns an empty <see cref="T:System.Buffers.ReadOnlySequence`1" /></summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.End">
      <summary>Gets the position at the end of the <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
    </member>
    <member name="T:System.Buffers.ReadOnlySequence`1.Enumerator">
      <summary>Represents an enumerator over a <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Enumerator.#ctor(System.Buffers.ReadOnlySequence{`0}@)">
      <summary>Initializes the enumerator.</summary>
      <param name="sequence">The <see cref="T:System.Buffers.ReadOnlySequence`1" /> to enumerate.</param>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Enumerator.Current">
      <summary>Gets the current <see cref="T:System.ReadOnlyMemory`1" />.</summary>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Enumerator.MoveNext">
      <summary>Moves to the next <see cref="T:System.ReadOnlyMemory`1" /> in the <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.First">
      <summary>Gets the <see cref="T:System.ReadOnlyMemory`1" /> from the first segment.</summary>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetEnumerator">
      <summary>Returns an enumerator over the <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
      <returns>Returns an enumerator over the <see cref="T:System.Buffers.ReadOnlySequence`1" />.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetPosition(System.Int64)">
      <summary>Returns a new <see cref="T:System.SequencePosition" /> at an <paramref name="offset" /> from the start of the sequence.</summary>
      <param name="offset" />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetPosition(System.Int64,System.SequencePosition)">
      <summary>Returns a new <see cref="T:System.SequencePosition" /> at an <paramref name="offset" /> from the <paramref name="origin" />.</summary>
      <param name="offset" />
      <param name="origin" />
      <returns>A new object that starts at the <paramref name="offset" /> position of the original object.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.IsEmpty">
      <summary>Gets a value that indicates whether the <see cref="T:System.Buffers.ReadOnlySequence`1" /> is empty.</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.IsSingleSegment">
      <summary>Gets a value that indicates whether the <see cref="T:System.Buffers.ReadOnlySequence`1" /> contains a single <see cref="T:System.ReadOnlyMemory`1" /> segment.</summary>
      <returns>
        <see langword="true" /> if the read-only sequence is empty; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Length">
      <summary>Gets the length of the <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
      <returns>The length of the read-only sequence.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int32,System.Int32)">
      <summary>Forms a slice out of the given <see cref="T:System.Buffers.ReadOnlySequence`1" />, beginning at <paramref name="start" />, with <paramref name="length" /> items.</summary>
      <param name="start">The index at which to begin this slice.</param>
      <param name="length">The length of the slice</param>
      <returns>A slice that consists of <paramref name="length" /> elements from the current instance starting at index <paramref name="start" />.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int32,System.SequencePosition)">
      <summary>Forms a slice out of the given <see cref="T:System.Buffers.ReadOnlySequence`1" />, beginning at <paramref name="start" />, ending at <paramref name="end" /> (inclusive).</summary>
      <param name="start">The index at which to begin this slice.</param>
      <param name="end">The end (inclusive) of the slice.</param>
      <returns>A slice that consists of items from the <paramref name="start" /> sequence position to the <paramref name="end" /> sequence position in the current read-only sequence.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64)">
      <summary>Forms a slice out of the current <see cref="T:System.Buffers.ReadOnlySequence`1" /> , beginning at a specified index and continuing to the end of the read-only sequence.</summary>
      <param name="start">The start index at which to begin this slice.</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64,System.Int64)">
      <summary>Forms a slice out of the given <see cref="T:System.Buffers.ReadOnlySequence`1" />, beginning at <paramref name="start" />, with <paramref name="length" /> items.</summary>
      <param name="start">The index at which to begin this slice.</param>
      <param name="length">The length of the slice.</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64,System.SequencePosition)">
      <summary>Forms a slice out of the given <see cref="T:System.Buffers.ReadOnlySequence`1" />, beginning at <paramref name="start" />, ending at <paramref name="end" /> (inclusive).</summary>
      <param name="start">The index at which to begin this slice.</param>
      <param name="end">The end (inclusive) of the slice.</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition)">
      <summary>Forms a slice out of the current <see cref="T:System.Buffers.ReadOnlySequence`1" /> that begins at a specified starting sequence position and continues to its end.</summary>
      <param name="start">The starting (inclusive) <see cref="T:System.SequencePosition" /> at which to begin this slice.</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.Int32)">
      <summary>Forms a slice out of the given <see cref="T:System.Buffers.ReadOnlySequence`1" />, beginning at '<paramref name="start" />, with <paramref name="length" /> items.</summary>
      <param name="start">The starting (inclusive) <see cref="T:System.SequencePosition" /> at which to begin this slice.</param>
      <param name="length">The length of the slice.</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.Int64)">
      <summary>Forms a slice out of the given <see cref="T:System.Buffers.ReadOnlySequence`1" />, beginning at <paramref name="start" />, with <paramref name="length" /> items.</summary>
      <param name="start">The starting (inclusive) <see cref="T:System.SequencePosition" /> at which to begin this slice.</param>
      <param name="length">The length of the slice.</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.SequencePosition)">
      <summary>Forms a slice out of the given <see cref="T:System.Buffers.ReadOnlySequence`1" />, beginning at <paramref name="start" />, ending at <paramref name="end" /> (inclusive).</summary>
      <param name="start">The starting (inclusive) <see cref="T:System.SequencePosition" /> at which to begin this slice.</param>
      <param name="end">The ending (inclusive) <see cref="T:System.SequencePosition" /> of the slice.</param>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Start">
      <summary>Gets the position to the start of the <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.ToString" />
    <member name="M:System.Buffers.ReadOnlySequence`1.TryGet(System.SequencePosition@,System.ReadOnlyMemory{`0}@,System.Boolean)">
      <summary>Tries to retrieve the next segment after <paramref name="position" /> and returns a value that indicates whether the operation succeeded.</summary>
      <param name="position">The current sequence position.</param>
      <param name="memory">A read-only memory span that contains the next segment after <paramref name="position" />.</param>
      <param name="advance">
        <see langword="true" /> if <paramref name="position" /> should to the beginning of next segment; otherwise, <see langword="false" />.</param>
      <returns>Returns <see langword="true" /> if the method returned the next segment, or <see langword="false" /> if the end of the read-only sequence was reached.</returns>
    </member>
    <member name="T:System.Buffers.ReadOnlySequenceSegment`1">
      <summary>Represents a linked list of <see cref="T:System.ReadOnlyMemory`1" /> nodes.</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Buffers.ReadOnlySequenceSegment`1.#ctor" />
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.Memory">
      <summary>Gets or sets a <see cref="T:System.ReadOnlyMemory`1" /> value for the current node.</summary>
      <returns>A <see cref="T:System.ReadOnlyMemory`1" /> value for the current node.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.Next">
      <summary>Gets or sets the next node.</summary>
      <returns>The next node.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.RunningIndex">
      <summary>Gets or sets the sum of node lengths before the current node.</summary>
      <returns>The sum of node lengths before the current node.</returns>
    </member>
    <member name="T:System.Buffers.StandardFormat" />
    <member name="M:System.Buffers.StandardFormat.#ctor(System.Char,System.Byte)">
      <param name="symbol" />
      <param name="precision" />
    </member>
    <member name="M:System.Buffers.StandardFormat.Equals(System.Buffers.StandardFormat)">
      <param name="other" />
    </member>
    <member name="M:System.Buffers.StandardFormat.Equals(System.Object)">
      <param name="obj" />
    </member>
    <member name="M:System.Buffers.StandardFormat.GetHashCode" />
    <member name="P:System.Buffers.StandardFormat.HasPrecision" />
    <member name="P:System.Buffers.StandardFormat.IsDefault" />
    <member name="F:System.Buffers.StandardFormat.MaxPrecision" />
    <member name="F:System.Buffers.StandardFormat.NoPrecision" />
    <member name="M:System.Buffers.StandardFormat.op_Equality(System.Buffers.StandardFormat,System.Buffers.StandardFormat)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Implicit(System.Char)~System.Buffers.StandardFormat">
      <param name="symbol" />
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Inequality(System.Buffers.StandardFormat,System.Buffers.StandardFormat)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Buffers.StandardFormat.Parse(System.ReadOnlySpan{System.Char})">
      <param name="format" />
    </member>
    <member name="M:System.Buffers.StandardFormat.Parse(System.String)">
      <param name="format" />
    </member>
    <member name="P:System.Buffers.StandardFormat.Precision" />
    <member name="P:System.Buffers.StandardFormat.Symbol" />
    <member name="M:System.Buffers.StandardFormat.ToString" />
    <member name="T:System.Buffers.Text.Base64">
      <summary>Converts between binary data and UTF-8 encoded text that is represented in base 64.</summary>
    </member>
    <member name="M:System.Buffers.Text.Base64.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)">
      <summary>Decodes the span of UTF-8 encoded text represented as base 64 into binary data. If the input is not a multiple of 4, it will decode as much as it can, to the closest multiple of 4.</summary>
      <param name="utf8">The input span that contains UTF-8 encoded text in base 64 that needs to be decoded.</param>
      <param name="bytes">The output span that contains the result of the operation, that is, the decoded binary data.</param>
      <param name="bytesConsumed">The number of input bytes consumed during the operation. This can be used to slice the input for subsequent calls, if necessary.</param>
      <param name="bytesWritten">The number of bytes written into the output span. This can be used to slice the output for subsequent calls, if necessary.</param>
      <param name="isFinalBlock">
        <see langword="true" /> (default) if the input span contains the entire data to decode. <see langword="false" /> if the input span contains partial data with more data to follow.</param>
      <returns>One of the enumeration values that indicates the status of the decoding operation.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.DecodeFromUtf8InPlace(System.Span{System.Byte},System.Int32@)">
      <summary>Decodes the span of UTF-8 encoded text in base 64 (in-place) into binary data. The decoded binary output is smaller than the text data contained in the input (the operation deflates the data). If the input is not a multiple of 4, the method will not decode any data.</summary>
      <param name="buffer">The input span that contains the base-64 text data that needs to be decoded.</param>
      <param name="bytesWritten">The number of bytes written into the buffer.</param>
      <returns>One of the enumeration values that indicates the status of the decoding operation.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.EncodeToUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)">
      <summary>Encodes the span of binary data into UTF-8 encoded text represented as base 64.</summary>
      <param name="bytes">The input span that contains binary data that needs to be encoded.</param>
      <param name="utf8">The output span that contains the result of the operation, that is, the UTF-8 encoded text in base 64.</param>
      <param name="bytesConsumed">The number of input bytes consumed during the operation. This can be used to slice the input for subsequent calls, if necessary.</param>
      <param name="bytesWritten">The number of bytes written into the output span. This can be used to slice the output for subsequent calls, if necessary.</param>
      <param name="isFinalBlock">
        <see langword="true" /> (the default) if the input span contains the entire data to encode. <see langword="false" /> if the input span contains partial data with more data to follow.</param>
      <returns>One of the enumeration values that indicates the status of the encoding operation.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.EncodeToUtf8InPlace(System.Span{System.Byte},System.Int32,System.Int32@)">
      <summary>Encodes the span of binary data (in-place) into UTF-8 encoded text represented as base 64. The encoded text output is larger than the binary data contained in the input (the operation inflates the data).</summary>
      <param name="buffer">The input span that contains binary data that needs to be encoded. Because the method performs an in-place conversion, it needs to be large enough to store the result of the operation.</param>
      <param name="dataLength">The number of bytes of binary data contained within the buffer that needs to be encoded. This value must be smaller than the buffer length.</param>
      <param name="bytesWritten">The number of bytes written into the buffer.</param>
      <returns>One of the enumeration values that indicates the status of the encoding operation.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.GetMaxDecodedFromUtf8Length(System.Int32)">
      <summary>Returns the maximum length (in bytes) of the result if you were to decode base-64 encoded text within a byte span of size <paramref name="length" />.</summary>
      <param name="length" />
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than 0.</exception>
    </member>
    <member name="M:System.Buffers.Text.Base64.GetMaxEncodedToUtf8Length(System.Int32)">
      <summary>Returns the maximum length (in bytes) of the result if you were to encode binary data within a byte span of size <paramref name="length" />.</summary>
      <param name="length" />
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than 0 or larger than 1610612733 (since encode inflates the data by 4/3).</exception>
    </member>
    <member name="T:System.Buffers.Text.Utf8Formatter" />
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Boolean,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <param name="value" />
      <param name="destination" />
      <param name="bytesWritten" />
      <param name="format" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Byte,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <param name="value" />
      <param name="destination" />
      <param name="bytesWritten" />
      <param name="format" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.DateTime,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <param name="value" />
      <param name="destination" />
      <param name="bytesWritten" />
      <param name="format" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.DateTimeOffset,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <param name="value" />
      <param name="destination" />
      <param name="bytesWritten" />
      <param name="format" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Decimal,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <param name="value" />
      <param name="destination" />
      <param name="bytesWritten" />
      <param name="format" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Double,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <param name="value" />
      <param name="destination" />
      <param name="bytesWritten" />
      <param name="format" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Guid,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <param name="value" />
      <param name="destination" />
      <param name="bytesWritten" />
      <param name="format" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int16,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <param name="value" />
      <param name="destination" />
      <param name="bytesWritten" />
      <param name="format" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int32,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <param name="value" />
      <param name="destination" />
      <param name="bytesWritten" />
      <param name="format" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int64,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <param name="value" />
      <param name="destination" />
      <param name="bytesWritten" />
      <param name="format" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.SByte,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <param name="value" />
      <param name="destination" />
      <param name="bytesWritten" />
      <param name="format" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Single,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <param name="value" />
      <param name="destination" />
      <param name="bytesWritten" />
      <param name="format" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.TimeSpan,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <param name="value" />
      <param name="destination" />
      <param name="bytesWritten" />
      <param name="format" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt16,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <param name="value" />
      <param name="destination" />
      <param name="bytesWritten" />
      <param name="format" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt32,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <param name="value" />
      <param name="destination" />
      <param name="bytesWritten" />
      <param name="format" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt64,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <param name="value" />
      <param name="destination" />
      <param name="bytesWritten" />
      <param name="format" />
    </member>
    <member name="T:System.Buffers.Text.Utf8Parser" />
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Boolean@,System.Int32@,System.Char)">
      <param name="source" />
      <param name="value" />
      <param name="bytesConsumed" />
      <param name="standardFormat" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Byte@,System.Int32@,System.Char)">
      <param name="source" />
      <param name="value" />
      <param name="bytesConsumed" />
      <param name="standardFormat" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTime@,System.Int32@,System.Char)">
      <param name="source" />
      <param name="value" />
      <param name="bytesConsumed" />
      <param name="standardFormat" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@,System.Int32@,System.Char)">
      <param name="source" />
      <param name="value" />
      <param name="bytesConsumed" />
      <param name="standardFormat" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Decimal@,System.Int32@,System.Char)">
      <param name="source" />
      <param name="value" />
      <param name="bytesConsumed" />
      <param name="standardFormat" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Double@,System.Int32@,System.Char)">
      <param name="source" />
      <param name="value" />
      <param name="bytesConsumed" />
      <param name="standardFormat" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Guid@,System.Int32@,System.Char)">
      <param name="source" />
      <param name="value" />
      <param name="bytesConsumed" />
      <param name="standardFormat" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int16@,System.Int32@,System.Char)">
      <param name="source" />
      <param name="value" />
      <param name="bytesConsumed" />
      <param name="standardFormat" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32@,System.Char)">
      <param name="source" />
      <param name="value" />
      <param name="bytesConsumed" />
      <param name="standardFormat" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int64@,System.Int32@,System.Char)">
      <param name="source" />
      <param name="value" />
      <param name="bytesConsumed" />
      <param name="standardFormat" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.SByte@,System.Int32@,System.Char)">
      <param name="source" />
      <param name="value" />
      <param name="bytesConsumed" />
      <param name="standardFormat" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Single@,System.Int32@,System.Char)">
      <param name="source" />
      <param name="value" />
      <param name="bytesConsumed" />
      <param name="standardFormat" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.TimeSpan@,System.Int32@,System.Char)">
      <param name="source" />
      <param name="value" />
      <param name="bytesConsumed" />
      <param name="standardFormat" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@,System.Int32@,System.Char)">
      <param name="source" />
      <param name="value" />
      <param name="bytesConsumed" />
      <param name="standardFormat" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@,System.Int32@,System.Char)">
      <param name="source" />
      <param name="value" />
      <param name="bytesConsumed" />
      <param name="standardFormat" />
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@,System.Int32@,System.Char)">
      <param name="source" />
      <param name="value" />
      <param name="bytesConsumed" />
      <param name="standardFormat" />
    </member>
    <member name="T:System.MemoryExtensions" />
    <member name="M:System.MemoryExtensions.AsMemory(System.String)">
      <param name="text" />
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Int32)">
      <param name="text" />
      <param name="start" />
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Int32,System.Int32)">
      <param name="text" />
      <param name="start" />
      <param name="length" />
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[])">
      <param name="array" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32)">
      <param name="array" />
      <param name="start" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32,System.Int32)">
      <param name="array" />
      <param name="start" />
      <param name="length" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0})">
      <param name="segment" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32)">
      <param name="segment" />
      <param name="start" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32,System.Int32)">
      <param name="segment" />
      <param name="start" />
      <param name="length" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String)">
      <param name="text" />
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String,System.Int32)">
      <param name="text" />
      <param name="start" />
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String,System.Int32,System.Int32)">
      <param name="text" />
      <param name="start" />
      <param name="length" />
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[])">
      <param name="array" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32)">
      <param name="array" />
      <param name="start" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32,System.Int32)">
      <param name="array" />
      <param name="start" />
      <param name="length" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0})">
      <param name="segment" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32)">
      <param name="segment" />
      <param name="start" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32,System.Int32)">
      <param name="segment" />
      <param name="start" />
      <param name="length" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``1(System.ReadOnlySpan{``0},System.IComparable{``0})">
      <param name="span" />
      <param name="comparable" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``1(System.Span{``0},System.IComparable{``0})">
      <param name="span" />
      <param name="comparable" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``0,``1)">
      <param name="span" />
      <param name="value" />
      <param name="comparer" />
      <typeparam name="T" />
      <typeparam name="TComparer" />
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``1)">
      <param name="span" />
      <param name="comparable" />
      <typeparam name="T" />
      <typeparam name="TComparable" />
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``0,``1)">
      <param name="span" />
      <param name="value" />
      <param name="comparer" />
      <typeparam name="T" />
      <typeparam name="TComparer" />
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``1)">
      <param name="span" />
      <param name="comparable" />
      <typeparam name="T" />
      <typeparam name="TComparable" />
    </member>
    <member name="M:System.MemoryExtensions.CompareTo(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <param name="span" />
      <param name="other" />
      <param name="comparisonType" />
    </member>
    <member name="M:System.MemoryExtensions.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <param name="span" />
      <param name="value" />
      <param name="comparisonType" />
    </member>
    <member name="M:System.MemoryExtensions.CopyTo``1(``0[],System.Memory{``0})">
      <param name="source" />
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.CopyTo``1(``0[],System.Span{``0})">
      <param name="source" />
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <param name="span" />
      <param name="value" />
      <param name="comparisonType" />
    </member>
    <member name="M:System.MemoryExtensions.EndsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <param name="span" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.EndsWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <param name="span" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.Equals(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <param name="span" />
      <param name="other" />
      <param name="comparisonType" />
    </member>
    <member name="M:System.MemoryExtensions.IndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <param name="span" />
      <param name="value" />
      <param name="comparisonType" />
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0)">
      <param name="span" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <param name="span" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},``0)">
      <param name="span" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <param name="span" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)">
      <param name="span" />
      <param name="value0" />
      <param name="value1" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)">
      <param name="span" />
      <param name="value0" />
      <param name="value1" />
      <param name="value2" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <param name="span" />
      <param name="values" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0)">
      <param name="span" />
      <param name="value0" />
      <param name="value1" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0,``0)">
      <param name="span" />
      <param name="value0" />
      <param name="value1" />
      <param name="value2" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <param name="span" />
      <param name="values" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.IsWhiteSpace(System.ReadOnlySpan{System.Char})">
      <param name="span" />
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},``0)">
      <param name="span" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <param name="span" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},``0)">
      <param name="span" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <param name="span" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)">
      <param name="span" />
      <param name="value0" />
      <param name="value1" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)">
      <param name="span" />
      <param name="value0" />
      <param name="value1" />
      <param name="value2" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <param name="span" />
      <param name="values" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0)">
      <param name="span" />
      <param name="value0" />
      <param name="value1" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0,``0)">
      <param name="span" />
      <param name="value0" />
      <param name="value1" />
      <param name="value2" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <param name="span" />
      <param name="values" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <param name="span" />
      <param name="other" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Int32@)">
      <param name="span" />
      <param name="other" />
      <param name="elementOffset" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <param name="span" />
      <param name="other" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)">
      <param name="span" />
      <param name="other" />
      <param name="elementOffset" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.Reverse``1(System.Span{``0})">
      <param name="span" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.SequenceCompareTo``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <param name="span" />
      <param name="other" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.SequenceCompareTo``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <param name="span" />
      <param name="other" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <param name="span" />
      <param name="other" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <param name="span" />
      <param name="other" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <param name="span" />
      <param name="value" />
      <param name="comparisonType" />
    </member>
    <member name="M:System.MemoryExtensions.StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <param name="span" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <param name="span" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.MemoryExtensions.ToLower(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)">
      <param name="source" />
      <param name="destination" />
      <param name="culture" />
    </member>
    <member name="M:System.MemoryExtensions.ToLowerInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
      <param name="source" />
      <param name="destination" />
    </member>
    <member name="M:System.MemoryExtensions.ToUpper(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)">
      <param name="source" />
      <param name="destination" />
      <param name="culture" />
    </member>
    <member name="M:System.MemoryExtensions.ToUpperInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
      <param name="source" />
      <param name="destination" />
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char})">
      <param name="span" />
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.Char)">
      <param name="span" />
      <param name="trimChar" />
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <param name="span" />
      <param name="trimChars" />
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char})">
      <param name="span" />
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.Char)">
      <param name="span" />
      <param name="trimChar" />
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <param name="span" />
      <param name="trimChars" />
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char})">
      <param name="span" />
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.Char)">
      <param name="span" />
      <param name="trimChar" />
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <param name="span" />
      <param name="trimChars" />
    </member>
    <member name="T:System.Runtime.InteropServices.MemoryMarshal">
      <summary>Provides methods to interoperate with <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />,  <see cref="T:System.Span`1" />, and  <see cref="T:System.ReadOnlySpan`1" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})">
      <summary>Casts a <see cref="T:System.ReadOnlySpan`1" /> of one primitive type, <paramref name="T" />, to a <see langword="ReadOnlySpan&lt;Byte&gt;" />.</summary>
      <param name="span">The source slice to convert.</param>
      <typeparam name="T">The type of items in the read-only span.</typeparam>
      <returns>A read-only span of type <see cref="T:System.Byte" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> contains references or pointers.</exception>
      <exception cref="T:System.OverflowException">The <see cref="P:System.ReadOnlySpan`1.Length" /> property of the new <see cref="T:System.ReadOnlySpan`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})">
      <summary>Casts a <see cref="T:System.Span`1" /> of one primitive type, <paramref name="T" />, to a <see langword="Span&lt;Byte&gt;" />.</summary>
      <param name="span">The source slice to convert.</param>
      <typeparam name="T">The type of items in the span.</typeparam>
      <returns>A span of type <see cref="T:System.Byte" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> contains references or pointers.</exception>
      <exception cref="T:System.OverflowException">The <see cref="P:System.Span`1.Length" /> property of the new <see cref="T:System.Span`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})">
      <summary>Creates a <see cref="T:System.Memory`1" /> instance from a <see cref="T:System.ReadOnlyMemory`1" />.</summary>
      <param name="memory">The read-only memory buffer.</param>
      <typeparam name="T">The type of items in the read-only memory buffer.</typeparam>
      <returns>A memory block that represetns the same memory as the <see cref="T:System.ReadOnlyMemory`1" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})">
      <summary>Casts a read-only span of one primitive type to a read-only span of another primitive type.</summary>
      <param name="span">The source slice to convert.</param>
      <typeparam name="TFrom">The type of the source span.</typeparam>
      <typeparam name="TTo">The type of the target span.</typeparam>
      <returns>The converted read-only span.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})">
      <summary>Casts a span of one primitive type to a span of another primitive type.</summary>
      <param name="span">The source slice to convert.</param>
      <typeparam name="TFrom">The type of the source span.</typeparam>
      <typeparam name="TTo">The type of the target span.</typeparam>
      <returns>The converted span.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)">
      <summary>Creates a new memory buffer over the portion of the pre-pinned target array beginning at the <paramref name="start" /> index and consisting of <paramref name="length" /> items.</summary>
      <param name="array">The pre-pinned source array.</param>
      <param name="start">The index of <paramref name="array" /> at which to begin the memory block.</param>
      <param name="length">The number of items to include in the memory block.</param>
      <typeparam name="T">The type of the array.</typeparam>
      <returns>A block of memory over the specified elements of <paramref name="array" />. If <paramref name="array" /> is <see langword="null" />, or if <paramref name="start" /> and <paramref name="length" /> are 0, the method returns a <see cref="T:System.Memory`1" /> instance of <see cref="P:System.Memory`1.Length" /> zero.</returns>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="array" /> is covariant, and the type of <paramref name="array" /> is not exactly <paramref name="T[]" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="start" /> or the end index is not in the range of 0 to <see cref="P:System.Array.Length" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan``1(``0@,System.Int32)">
      <summary>Creates a new read-only span over a portion of a regular managed object.</summary>
      <param name="reference">A reference to data.</param>
      <param name="length">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</param>
      <typeparam name="T">The type of the data items.</typeparam>
      <returns>A read-only span.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateSpan``1(``0@,System.Int32)">
      <summary>Creates a new span over a portion of a regular managed object.</summary>
      <param name="reference">A reference to data.</param>
      <param name="length">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</param>
      <typeparam name="T">The type of the data items.</typeparam>
      <returns>A span.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})">
      <summary>Returns a reference to the element of the read-only span at index 0.</summary>
      <param name="span">The read-only span from which the reference is retrieved.</param>
      <typeparam name="T">The type of items in the span.</typeparam>
      <returns>A reference to the element at index 0.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})">
      <summary>Returns a reference to the element of the span at index 0.</summary>
      <param name="span">The span from which the reference is retrieved.</param>
      <typeparam name="T">The type of items in the span.</typeparam>
      <returns>A reference to the element at index 0.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})">
      <summary>Reads a structure of type <param name="T" /> out of a read-only span of bytes.</summary>
      <param name="source">A read-only span.</param>
      <typeparam name="T">The type of the item to retrieve from the read-only span.</typeparam>
      <returns>The structure retrieved from the read-only span.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> contains references or pointers.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" /> is smaller than <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})">
      <summary>Creates an <see cref="T:System.Collections.Generic.IEnumerable`1" /> view of the given read-only memory buffer.</summary>
      <param name="memory">A read-only memory buffer.</param>
      <typeparam name="T">The type of the items in the read-only memory buffer.</typeparam>
      <returns>An enumerable view of <paramref name="memory" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)">
      <summary>Tries to get an array segment from the underlying memory buffer. The return value indicates the success of the operation.</summary>
      <param name="memory">A read-only memory buffer.</param>
      <param name="segment">When this method returns, contains the array segment retrieved from the underlying read-only memory buffer. If the method fails, the method returns a default array segment.</param>
      <typeparam name="T">The type of items in the read-only memory buffer.</typeparam>
      <returns>
        <see langword="true" /> if the method call succeeds; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)">
      <summary>Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" /> from the underlying read-only memory buffer.</summary>
      <param name="memory">The read-only memory buffer for which to get the memory manager.</param>
      <param name="manager">When the method returns, the manager of <paramref name="memory" />.</param>
      <typeparam name="T">The type of the items in the read-only memory buffer.</typeparam>
      <typeparam name="TManager">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</typeparam>
      <returns>
        <see langword="true" /> if the method retrieved the memory manager; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)">
      <summary>Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" />, start index, and length from the underlying read-only memory buffer.</summary>
      <param name="memory">The read-only memory buffer for which to get the memory manager.</param>
      <param name="manager">When the method returns, the manager of <paramref name="memory" />.</param>
      <param name="start">When the method returns, the offset from the start of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</param>
      <param name="length">When the method returns, the length of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</param>
      <typeparam name="T">The type of the items in the read-only memory buffer.</typeparam>
      <typeparam name="TManager">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</typeparam>
      <returns>
        <see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)">
      <summary>Tries to get the underlying string from a <see langword="System.ReadOnlyMemory&lt;Char&gt;" />.</summary>
      <param name="memory">Read-only memory containing a block of characters.</param>
      <param name="text">When the method returns, the string contained in the memory buffer.</param>
      <param name="start">The starting location in <paramref name="text" />.</param>
      <param name="length">The number of characters in <paramref name="text" />.</param>
      <returns>
        <see langword="true" /> if the method successfully retrieves the underlying string; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)">
      <summary>Tries to read a structure of type <paramref name="T" /> from a read-only span of bytes.</summary>
      <param name="source">A read-only span of bytes.</param>
      <param name="value">When the method returns, an instance of <paramref name="T" />.</param>
      <typeparam name="T">The type of the structure to retrieve.</typeparam>
      <returns>
        <see langword="true" /> if the method succeeds in retrieving an instance of the structure; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> contains references or pointers.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)">
      <summary>Tries to writes a structure of type <paramref name="T" /> into a span of bytes.</summary>
      <param name="destination">The span of bytes to contain the structure.</param>
      <param name="value">The structure to be written to the span.</param>
      <typeparam name="T">The type of the structure.</typeparam>
      <returns>
        <see langword="true" /> if the write operation succeeded; otherwise, <see langword="false" />. The method returns <see langword="false" /> if the span is too small to contain <paramref name="T" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)">
      <summary>Writes a structure of type <paramref name="T" /> into a span of bytes.</summary>
      <param name="destination">The span of bytes to contain the structure.</param>
      <param name="value">The structure to be written to the span.</param>
      <typeparam name="T">The type of the structure.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> contains references or pointers.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="destination" /> is too small to contain <paramref name="value" />.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.SequenceMarshal" />
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetArray``1(System.Buffers.ReadOnlySequence{``0},System.ArraySegment{``0}@)">
      <param name="sequence" />
      <param name="segment" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlyMemory``1(System.Buffers.ReadOnlySequence{``0},System.ReadOnlyMemory{``0}@)">
      <param name="sequence" />
      <param name="memory" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlySequenceSegment``1(System.Buffers.ReadOnlySequence{``0},System.Buffers.ReadOnlySequenceSegment{``0}@,System.Int32@,System.Buffers.ReadOnlySequenceSegment{``0}@,System.Int32@)">
      <param name="sequence" />
      <param name="startSegment" />
      <param name="startIndex" />
      <param name="endSegment" />
      <param name="endIndex" />
      <typeparam name="T" />
    </member>
    <member name="T:System.SequencePosition" />
    <member name="M:System.SequencePosition.#ctor(System.Object,System.Int32)">
      <param name="object" />
      <param name="integer" />
    </member>
    <member name="M:System.SequencePosition.Equals(System.Object)">
      <param name="obj" />
    </member>
    <member name="M:System.SequencePosition.Equals(System.SequencePosition)">
      <param name="other" />
    </member>
    <member name="M:System.SequencePosition.GetHashCode" />
    <member name="M:System.SequencePosition.GetInteger" />
    <member name="M:System.SequencePosition.GetObject" />
  </members>
</doc>