<?xml version="1.0" encoding="utf-8"?><span>
<doc>
  <assembly>
    <name>System.Xml.XDocument</name>
  </assembly>
  <members>
    <member name="T:System.Xml.Linq.Extensions">
      <summary>Contains the LINQ to XML extension methods.</summary>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of elements that contains the ancestors of every node in the source collection.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XNode"></see> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:System.Xml.Linq.XNode"></see>.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contains the ancestors of every node in the source collection.</returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contains the ancestors of every node in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XNode"></see> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName"></see> to match.</param>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:System.Xml.Linq.XNode"></see>.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contains the ancestors of every node in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>Returns a collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contains every element in the source collection, and the ancestors of every element in the source collection.</returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName"></see> to match.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contains every element in the source collection, and the ancestors of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>Returns a collection of the attributes of every element in the source collection.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XAttribute"></see> that contains the attributes of every element in the source collection.</returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the attributes of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName"></see> to match.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XAttribute"></see> that contains a filtered collection of the attributes of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of the descendant nodes of every document and element in the source collection.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XContainer"></see> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:System.Xml.Linq.XContainer"></see>.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XNode"></see> of the descendant nodes of every document and element in the source collection.</returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>Returns a collection of nodes that contains every element in the source collection, and the descendant nodes of every element in the source collection.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XNode"></see> that contains every element in the source collection, and the descendant nodes of every element in the source collection.</returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contains the descendant elements of every element and document in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XContainer"></see> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName"></see> to match.</param>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:System.Xml.Linq.XContainer"></see>.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contains the descendant elements of every element and document in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of elements that contains the descendant elements of every element and document in the source collection.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XContainer"></see> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:System.Xml.Linq.XContainer"></see>.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contains the descendant elements of every element and document in the source collection.</returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>Returns a collection of elements that contains every element in the source collection, and the descendent elements of every element in the source collection.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contains every element in the source collection, and the descendent elements of every element in the source collection.</returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contains every element in the source collection, and the descendents of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName"></see> to match.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contains every element in the source collection, and the descendents of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of the child elements of every element and document in the source collection.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:System.Xml.Linq.XContainer"></see>.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> of the child elements of every element or document in the source collection.</returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the child elements of every element and document in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName"></see> to match.</param>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:System.Xml.Linq.XContainer"></see>.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> of the child elements of every element and document in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of nodes that contains all nodes in the source collection, sorted in document order.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XNode"></see> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:System.Xml.Linq.XNode"></see>.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XNode"></see> that contains all nodes in the source collection, sorted in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of the child nodes of every document and element in the source collection.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XNode"></see> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:System.Xml.Linq.XContainer"></see>.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XNode"></see> of the child nodes of every document and element in the source collection.</returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})">
      <summary>Removes every attribute in the source collection from its parent element.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XAttribute"></see> that contains the source collection.</param>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Removes every node in the source collection from its parent node.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XNode"></see> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:System.Xml.Linq.XNode"></see>.</typeparam>
    </member>
    <member name="T:System.Xml.Linq.LoadOptions">
      <summary>Specifies load options when parsing XML.</summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.None">
      <summary>Does not preserve insignificant white space or load base URI and line information.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.PreserveWhitespace">
      <summary>Preserves insignificant white space while parsing.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.SetBaseUri">
      <summary>Requests the base URI information from the <see cref="T:System.Xml.XmlReader"></see>, and makes it available via the <see cref="P:System.Xml.Linq.XObject.BaseUri"></see> property.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.SetLineInfo">
      <summary>Requests the line information from the <see cref="T:System.Xml.XmlReader"></see> and makes it available via properties on <see cref="T:System.Xml.Linq.XObject"></see>.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Xml.Linq.ReaderOptions">
      <summary>Specifies whether to omit duplicate namespaces when loading an <see cref="T:System.Xml.Linq.XDocument"></see> with an <see cref="T:System.Xml.XmlReader"></see>.</summary>
    </member>
    <member name="F:System.Xml.Linq.ReaderOptions.None">
      <summary>No reader options specified.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Xml.Linq.ReaderOptions.OmitDuplicateNamespaces">
      <summary>Omit duplicate namespaces when loading the <see cref="T:System.Xml.Linq.XDocument"></see>.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Xml.Linq.SaveOptions">
      <summary>Specifies serialization options.</summary>
    </member>
    <member name="F:System.Xml.Linq.SaveOptions.DisableFormatting">
      <summary>Preserve all insignificant white space while serializing.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Xml.Linq.SaveOptions.None">
      <summary>Format (indent) the XML while serializing.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces">
      <summary>Remove the duplicate namespace declarations while serializing.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Xml.Linq.XAttribute">
      <summary>Represents an XML attribute.</summary>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XAttribute"></see> class from another <see cref="T:System.Xml.Linq.XAttribute"></see> object.</summary>
      <param name="other">An <see cref="T:System.Xml.Linq.XAttribute"></see> object to copy from.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="other">other</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XName,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XAttribute"></see> class from the specified name and value.</summary>
      <param name="name">The <see cref="T:System.Xml.Linq.XName"></see> of the attribute.</param>
      <param name="value">An <see cref="T:System.Object"></see> containing the value of the attribute.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name">name</paramref> or <paramref name="value">value</paramref> parameter is null.</exception>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.EmptySequence">
      <summary>Gets an empty collection of attributes.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XAttribute"></see> containing an empty collection.</returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.IsNamespaceDeclaration">
      <summary>Determines if this attribute is a namespace declaration.</summary>
      <returns>true if this attribute is a namespace declaration; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.Name">
      <summary>Gets the expanded name of this attribute.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName"></see> containing the name of this attribute.</returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.NextAttribute">
      <summary>Gets the next attribute of the parent element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute"></see> containing the next attribute of the parent element.</returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XAttribute"></see> objects, this value is <see cref="F:System.Xml.XmlNodeType.Attribute"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.Nullable{System.Int64})">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.Nullable{System.Single})">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.Nullable{System.TimeSpan})">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.Nullable{System.UInt32})">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.Nullable{System.UInt64})">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.TimeSpan)">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.String)">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.Nullable{System.Int32})">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.UInt32)">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.UInt64)">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.Single)">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.Nullable{System.Guid})">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.Nullable{System.Decimal})">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.Decimal)">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.Nullable{System.DateTimeOffset})">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.Nullable{System.DateTime})">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.Nullable{System.Boolean})">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.Int64)">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.Int32)">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.Guid)">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.Double)">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.Nullable{System.Double})">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.DateTimeOffset)">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.DateTime)">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute to System.Boolean)">
      <param name="attribute"></param>
      <returns></returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.PreviousAttribute">
      <summary>Gets the previous attribute of the parent element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute"></see> containing the previous attribute of the parent element.</returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.Remove">
      <summary>Removes this attribute from its parent element.</summary>
      <exception cref="T:System.InvalidOperationException">The parent element is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.SetValue(System.Object)">
      <summary>Sets the value of this attribute.</summary>
      <param name="value">The value to assign to this attribute.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value">value</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="value">value</paramref> is an <see cref="T:System.Xml.Linq.XObject"></see>.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.ToString">
      <summary>Converts the current <see cref="T:System.Xml.Linq.XAttribute"></see> object to a string representation.</summary>
      <returns>A <see cref="T:System.String"></see> containing the XML text representation of an attribute and its value.</returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.Value">
      <summary>Gets or sets the value of this attribute.</summary>
      <returns>A <see cref="T:System.String"></see> containing the value of this attribute.</returns>
      <exception cref="T:System.ArgumentNullException">When setting, the <paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="T:System.Xml.Linq.XCData">
      <summary>Represents a text node that contains CDATA.</summary>
    </member>
    <member name="M:System.Xml.Linq.XCData.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XCData"></see> class.</summary>
      <param name="value">A string that contains the value of the <see cref="T:System.Xml.Linq.XCData"></see> node.</param>
    </member>
    <member name="M:System.Xml.Linq.XCData.#ctor(System.Xml.Linq.XCData)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XCData"></see> class.</summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XCData"></see> node to copy from.</param>
    </member>
    <member name="P:System.Xml.Linq.XCData.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XCData"></see> objects, this value is <see cref="F:System.Xml.XmlNodeType.CDATA"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XCData.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this CDATA object to an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter"></see> into which this method will write.</param>
    </member>
    <member name="M:System.Xml.Linq.XCData.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="T:System.Xml.Linq.XComment">
      <summary>Represents an XML comment.</summary>
    </member>
    <member name="M:System.Xml.Linq.XComment.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XComment"></see> class with the specified string content.</summary>
      <param name="value">A string that contains the contents of the new <see cref="T:System.Xml.Linq.XComment"></see> object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value">value</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XComment.#ctor(System.Xml.Linq.XComment)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XComment"></see> class from an existing comment node.</summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XComment"></see> node to copy from.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="other">other</paramref> parameter is null.</exception>
    </member>
    <member name="P:System.Xml.Linq.XComment.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XComment"></see> objects, this value is <see cref="F:System.Xml.XmlNodeType.Comment"></see>.</returns>
    </member>
    <member name="P:System.Xml.Linq.XComment.Value">
      <summary>Gets or sets the string value of this comment.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the string value of this comment.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XComment.WriteTo(System.Xml.XmlWriter)">
      <summary>Write this comment to an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter"></see> into which this method will write.</param>
    </member>
    <member name="M:System.Xml.Linq.XComment.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="T:System.Xml.Linq.XContainer">
      <summary>Represents a node that can contain other nodes.</summary>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Add(System.Object)">
      <summary>Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer"></see>.</summary>
      <param name="content">A content object containing simple content or a collection of content objects to be added.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Add(System.Object[])">
      <summary>Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer"></see>.</summary>
      <param name="content">A parameter list of content objects.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.AddFirst(System.Object)">
      <summary>Adds the specified content as the first children of this document or element.</summary>
      <param name="content">A content object containing simple content or a collection of content objects to be added.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.AddFirst(System.Object[])">
      <summary>Adds the specified content as the first children of this document or element.</summary>
      <param name="content">A parameter list of content objects.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XContainer.CreateWriter">
      <summary>Creates an <see cref="T:System.Xml.XmlWriter"></see> that can be used to add nodes to the <see cref="T:System.Xml.Linq.XContainer"></see>.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter"></see> that is ready to have content written to it.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.DescendantNodes">
      <summary>Returns a collection of the descendant nodes for this document or element, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XNode"></see> containing the descendant nodes of the <see cref="T:System.Xml.Linq.XContainer"></see>, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Descendants">
      <summary>Returns a collection of the descendant elements for this document or element, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the descendant elements for this document or element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</summary>
      <param name="name">The <see cref="T:System.Xml.Linq.XName"></see> to match.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer"></see> that match the specified <see cref="T:System.Xml.Linq.XName"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)">
      <summary>Gets the first (in document order) child element with the specified <see cref="T:System.Xml.Linq.XName"></see>.</summary>
      <param name="name">The <see cref="T:System.Xml.Linq.XName"></see> to match.</param>
      <returns>A <see cref="T:System.Xml.Linq.XElement"></see> that matches the specified <see cref="T:System.Xml.Linq.XName"></see>, or null.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Elements">
      <summary>Returns a collection of the child elements of this element or document, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> containing the child elements of this <see cref="T:System.Xml.Linq.XContainer"></see>, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the child elements of this element or document, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</summary>
      <param name="name">The <see cref="T:System.Xml.Linq.XName"></see> to match.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> containing the children of the <see cref="T:System.Xml.Linq.XContainer"></see> that have a matching <see cref="T:System.Xml.Linq.XName"></see>, in document order.</returns>
    </member>
    <member name="P:System.Xml.Linq.XContainer.FirstNode">
      <summary>Get the first child node of this node.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNode"></see> containing the first child node of the <see cref="T:System.Xml.Linq.XContainer"></see>.</returns>
    </member>
    <member name="P:System.Xml.Linq.XContainer.LastNode">
      <summary>Get the last child node of this node.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNode"></see> containing the last child node of the <see cref="T:System.Xml.Linq.XContainer"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Nodes">
      <summary>Returns a collection of the child nodes of this element or document, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XNode"></see> containing the contents of this <see cref="T:System.Xml.Linq.XContainer"></see>, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.RemoveNodes">
      <summary>Removes the child nodes from this document or element.</summary>
    </member>
    <member name="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object)">
      <summary>Replaces the children nodes of this document or element with the specified content.</summary>
      <param name="content">A content object containing simple content or a collection of content objects that replace the children nodes.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])">
      <summary>Replaces the children nodes of this document or element with the specified content.</summary>
      <param name="content">A parameter list of content objects.</param>
    </member>
    <member name="T:System.Xml.Linq.XDeclaration">
      <summary>Represents an XML declaration.</summary>
    </member>
    <member name="M:System.Xml.Linq.XDeclaration.#ctor(System.Xml.Linq.XDeclaration)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDeclaration"></see> class from another <see cref="T:System.Xml.Linq.XDeclaration"></see> object.</summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XDeclaration"></see> used to initialize this <see cref="T:System.Xml.Linq.XDeclaration"></see> object.</param>
    </member>
    <member name="M:System.Xml.Linq.XDeclaration.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDeclaration"></see> class with the specified version, encoding, and standalone status.</summary>
      <param name="version">The version of the XML, usually &quot;1.0&quot;.</param>
      <param name="encoding">The encoding for the XML document.</param>
      <param name="standalone">A string containing &quot;yes&quot; or &quot;no&quot; that specifies whether the XML is standalone or requires external entities to be resolved.</param>
    </member>
    <member name="P:System.Xml.Linq.XDeclaration.Encoding">
      <summary>Gets or sets the encoding for this document.</summary>
      <returns>A <see cref="T:System.String"></see> containing the code page name for this document.</returns>
    </member>
    <member name="P:System.Xml.Linq.XDeclaration.Standalone">
      <summary>Gets or sets the standalone property for this document.</summary>
      <returns>A <see cref="T:System.String"></see> containing the standalone property for this document.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDeclaration.ToString">
      <summary>Provides the declaration as a formatted string.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the formatted XML string.</returns>
    </member>
    <member name="P:System.Xml.Linq.XDeclaration.Version">
      <summary>Gets or sets the version property for this document.</summary>
      <returns>A <see cref="T:System.String"></see> containing the version property for this document.</returns>
    </member>
    <member name="T:System.Xml.Linq.XDocument">
      <summary>Represents an XML document. For the components and usage of an <see cref="T:System.Xml.Linq.XDocument"></see> object, see <see cref="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">XDocument Class Overview</see>.</summary>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument"></see> class.</summary>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument"></see> class with the specified content.</summary>
      <param name="content">A parameter list of content objects to add to this document.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument"></see> class from an existing <see cref="T:System.Xml.Linq.XDocument"></see> object.</summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XDocument"></see> object that will be copied.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument"></see> class with the specified <see cref="T:System.Xml.Linq.XDeclaration"></see> and content.</summary>
      <param name="declaration">An <see cref="T:System.Xml.Linq.XDeclaration"></see> for the document.</param>
      <param name="content">The content of the document.</param>
    </member>
    <member name="P:System.Xml.Linq.XDocument.Declaration">
      <summary>Gets or sets the XML declaration for this document.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDeclaration"></see> that contains the XML declaration for this document.</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocument.DocumentType">
      <summary>Gets the Document Type Definition (DTD) for this document.</summary>
      <returns>A <see cref="T:System.Xml.Linq.XDocumentType"></see> that contains the DTD for this document.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument"></see> instance by using the specified stream.</summary>
      <param name="stream">The stream that contains the XML data.</param>
      <returns>An <see cref="T:System.Xml.Linq.XDocument"></see> object that reads the data that is contained in the stream.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument"></see> from a <see cref="T:System.IO.TextReader"></see>.</summary>
      <param name="textReader">A <see cref="T:System.IO.TextReader"></see> that contains the content for the <see cref="T:System.Xml.Linq.XDocument"></see>.</param>
      <returns>An <see cref="T:System.Xml.Linq.XDocument"></see> that contains the contents of the specified <see cref="T:System.IO.TextReader"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.String)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument"></see> from a file.</summary>
      <param name="uri">A URI string that references the file to load into a new <see cref="T:System.Xml.Linq.XDocument"></see>.</param>
      <returns>An <see cref="T:System.Xml.Linq.XDocument"></see> that contains the contents of the specified file.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument"></see> from an <see cref="T:System.Xml.XmlReader"></see>.</summary>
      <param name="reader">A <see cref="T:System.Xml.XmlReader"></see> that contains the content for the <see cref="T:System.Xml.Linq.XDocument"></see>.</param>
      <returns>An <see cref="T:System.Xml.Linq.XDocument"></see> that contains the contents of the specified <see cref="T:System.Xml.XmlReader"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument"></see> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <param name="stream">The stream containing the XML data.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions"></see> that specifies whether to load base URI and line information.</param>
      <returns>An <see cref="T:System.Xml.Linq.XDocument"></see> object that reads the data that is contained in the stream.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument"></see> from a <see cref="T:System.IO.TextReader"></see>, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <param name="textReader">A <see cref="T:System.IO.TextReader"></see> that contains the content for the <see cref="T:System.Xml.Linq.XDocument"></see>.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions"></see> that specifies white space behavior, and whether to load base URI and line information.</param>
      <returns>An <see cref="T:System.Xml.Linq.XDocument"></see> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument"></see> from a file, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <param name="uri">A URI string that references the file to load into a new <see cref="T:System.Xml.Linq.XDocument"></see>.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions"></see> that specifies white space behavior, and whether to load base URI and line information.</param>
      <returns>An <see cref="T:System.Xml.Linq.XDocument"></see> that contains the contents of the specified file.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XDocument"></see> from an <see cref="T:System.Xml.XmlReader"></see>, optionally setting the base URI, and retaining line information.</summary>
      <param name="reader">A <see cref="T:System.Xml.XmlReader"></see> that will be read for the content of the <see cref="T:System.Xml.Linq.XDocument"></see>.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions"></see> that specifies whether to load base URI and line information.</param>
      <returns>An <see cref="T:System.Xml.Linq.XDocument"></see> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
      <param name="textReader"></param>
      <param name="options"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
      <param name="reader"></param>
      <param name="options"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
      <param name="stream"></param>
      <param name="options"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="P:System.Xml.Linq.XDocument.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XDocument"></see> objects, this value is <see cref="F:System.Xml.XmlNodeType.Document"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Parse(System.String)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument"></see> from a string.</summary>
      <param name="text">A string that contains XML.</param>
      <returns>An <see cref="T:System.Xml.Linq.XDocument"></see> populated from the string that contains XML.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument"></see> from a string, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <param name="text">A string that contains XML.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions"></see> that specifies white space behavior, and whether to load base URI and line information.</param>
      <returns>An <see cref="T:System.Xml.Linq.XDocument"></see> populated from the string that contains XML.</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocument.Root">
      <summary>Gets the root element of the XML Tree for this document.</summary>
      <returns>The root <see cref="T:System.Xml.Linq.XElement"></see> of the XML tree.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)">
      <summary>Serialize this <see cref="T:System.Xml.Linq.XDocument"></see> to an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter"></see> that the <see cref="T:System.Xml.Linq.XDocument"></see> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XDocument"></see> to the specified <see cref="T:System.IO.Stream"></see>.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XDocument"></see> to.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
      <summary>Serialize this <see cref="T:System.Xml.Linq.XDocument"></see> to a <see cref="T:System.IO.TextWriter"></see>.</summary>
      <param name="textWriter">A <see cref="T:System.IO.TextWriter"></see> that the <see cref="T:System.Xml.Linq.XDocument"></see> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.String)">
      <summary>Serialize this <see cref="T:System.Xml.Linq.XDocument"></see> to a file, overwriting an existing file, if it exists.</summary>
      <param name="fileName">A string that contains the name of the file.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XDocument"></see> to the specified <see cref="T:System.IO.Stream"></see>, optionally specifying formatting behavior.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XDocument"></see> to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions"></see> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this <see cref="T:System.Xml.Linq.XDocument"></see> to a <see cref="T:System.IO.TextWriter"></see>, optionally disabling formatting.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter"></see> to output the XML to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions"></see> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this <see cref="T:System.Xml.Linq.XDocument"></see> to a file, optionally disabling formatting.</summary>
      <param name="fileName">A string that contains the name of the file.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions"></see> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
      <param name="stream"></param>
      <param name="options"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
      <param name="textWriter"></param>
      <param name="options"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)">
      <summary>Write this document to an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter"></see> into which this method will write.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="T:System.Xml.Linq.XDocumentType">
      <summary>Represents an XML Document Type Definition (DTD).</summary>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.#ctor(System.Xml.Linq.XDocumentType)">
      <summary>Initializes an instance of the <see cref="T:System.Xml.Linq.XDocumentType"></see> class from another <see cref="T:System.Xml.Linq.XDocumentType"></see> object.</summary>
      <param name="other">An <see cref="T:System.Xml.Linq.XDocumentType"></see> object to copy from.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Xml.Linq.XDocumentType"></see> class.</summary>
      <param name="name">A <see cref="T:System.String"></see> that contains the qualified name of the DTD, which is the same as the qualified name of the root element of the XML document.</param>
      <param name="publicId">A <see cref="T:System.String"></see> that contains the public identifier of an external public DTD.</param>
      <param name="systemId">A <see cref="T:System.String"></see> that contains the system identifier of an external private DTD.</param>
      <param name="internalSubset">A <see cref="T:System.String"></see> that contains the internal subset for an internal DTD.</param>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.InternalSubset">
      <summary>Gets or sets the internal subset for this Document Type Definition (DTD).</summary>
      <returns>A <see cref="T:System.String"></see> that contains the internal subset for this Document Type Definition (DTD).</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.Name">
      <summary>Gets or sets the name for this Document Type Definition (DTD).</summary>
      <returns>A <see cref="T:System.String"></see> that contains the name for this Document Type Definition (DTD).</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XDocumentType"></see> objects, this value is <see cref="F:System.Xml.XmlNodeType.DocumentType"></see>.</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.PublicId">
      <summary>Gets or sets the public identifier for this Document Type Definition (DTD).</summary>
      <returns>A <see cref="T:System.String"></see> that contains the public identifier for this Document Type Definition (DTD).</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.SystemId">
      <summary>Gets or sets the system identifier for this Document Type Definition (DTD).</summary>
      <returns>A <see cref="T:System.String"></see> that contains the system identifier for this Document Type Definition (DTD).</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.WriteTo(System.Xml.XmlWriter)">
      <summary>Write this <see cref="T:System.Xml.Linq.XDocumentType"></see> to an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter"></see> into which this method will write.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="T:System.Xml.Linq.XElement">
      <summary>Represents an XML element.  See <see cref="http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec">XElement Class Overview</see> and the Remarks section on this page for usage information and examples.</summary>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement"></see> class from another <see cref="T:System.Xml.Linq.XElement"></see> object.</summary>
      <param name="other">An <see cref="T:System.Xml.Linq.XElement"></see> object to copy from.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement"></see> class with the specified name.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName"></see> that contains the name of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement"></see> class from an <see cref="T:System.Xml.Linq.XStreamingElement"></see> object.</summary>
      <param name="other">An <see cref="T:System.Xml.Linq.XStreamingElement"></see> that contains unevaluated queries that will be iterated for the contents of this <see cref="T:System.Xml.Linq.XElement"></see>.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement"></see> class with the specified name and content.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName"></see> that contains the element name.</param>
      <param name="content">The contents of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement"></see> class with the specified name and content.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName"></see> that contains the element name.</param>
      <param name="content">The initial content of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.AncestorsAndSelf">
      <summary>Returns a collection of elements that contain this element, and the ancestors of this element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> of elements that contain this element, and the ancestors of this element.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contain this element, and the ancestors of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</summary>
      <param name="name">The <see cref="T:System.Xml.Linq.XName"></see> to match.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contain this element, and the ancestors of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
      <summary>Returns the <see cref="T:System.Xml.Linq.XAttribute"></see> of this <see cref="T:System.Xml.Linq.XElement"></see> that has the specified <see cref="T:System.Xml.Linq.XName"></see>.</summary>
      <param name="name">The <see cref="T:System.Xml.Linq.XName"></see> of the <see cref="T:System.Xml.Linq.XAttribute"></see> to get.</param>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute"></see> that has the specified <see cref="T:System.Xml.Linq.XName"></see>; null if there is no attribute with the specified name.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Attributes">
      <summary>Returns a collection of attributes of this element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XAttribute"></see> of attributes of this element.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of attributes of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</summary>
      <param name="name">The <see cref="T:System.Xml.Linq.XName"></see> to match.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XAttribute"></see> that contains the attributes of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.DescendantNodesAndSelf">
      <summary>Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XNode"></see> that contain this element, and all descendant nodes of this element, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</summary>
      <param name="name">The <see cref="T:System.Xml.Linq.XName"></see> to match.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.DescendantsAndSelf">
      <summary>Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> of elements that contain this element, and all descendant elements of this element, in document order.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.EmptySequence">
      <summary>Gets an empty collection of elements.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> that contains an empty collection.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.FirstAttribute">
      <summary>Gets the first attribute of this element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute"></see> that contains the first attribute of this element.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.GetDefaultNamespace">
      <summary>Gets the default <see cref="T:System.Xml.Linq.XNamespace"></see> of this <see cref="T:System.Xml.Linq.XElement"></see>.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNamespace"></see> that contains the default namespace of this <see cref="T:System.Xml.Linq.XElement"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)">
      <summary>Gets the namespace associated with a particular prefix for this <see cref="T:System.Xml.Linq.XElement"></see>.</summary>
      <param name="prefix">A string that contains the namespace prefix to look up.</param>
      <returns>An <see cref="T:System.Xml.Linq.XNamespace"></see> for the namespace associated with the prefix for this <see cref="T:System.Xml.Linq.XElement"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)">
      <summary>Gets the prefix associated with a namespace for this <see cref="T:System.Xml.Linq.XElement"></see>.</summary>
      <param name="ns">An <see cref="T:System.Xml.Linq.XNamespace"></see> to look up.</param>
      <returns>A <see cref="T:System.String"></see> that contains the namespace prefix.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.HasAttributes">
      <summary>Gets a value indicating whether this element has at least one attribute.</summary>
      <returns>true if this element has at least one attribute; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.HasElements">
      <summary>Gets a value indicating whether this element has at least one child element.</summary>
      <returns>true if this element has at least one child element; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.IsEmpty">
      <summary>Gets a value indicating whether this element contains no content.</summary>
      <returns>true if this element contains no content; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.LastAttribute">
      <summary>Gets the last attribute of this element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute"></see> that contains the last attribute of this element.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement"></see> from a <see cref="T:System.IO.TextReader"></see>, optionally preserving white space and retaining line information.</summary>
      <param name="textReader">A <see cref="T:System.IO.TextReader"></see> that will be read for the <see cref="T:System.Xml.Linq.XElement"></see> content.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions"></see> that specifies white space behavior, and whether to load base URI and line information.</param>
      <returns>An <see cref="T:System.Xml.Linq.XElement"></see> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement"></see> from an <see cref="T:System.Xml.XmlReader"></see>, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <param name="reader">A <see cref="T:System.Xml.XmlReader"></see> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement"></see>.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions"></see> that specifies white space behavior, and whether to load base URI and line information.</param>
      <returns>An <see cref="T:System.Xml.Linq.XElement"></see> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement"></see> from a file, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <param name="uri">A URI string referencing the file to load into an <see cref="T:System.Xml.Linq.XElement"></see>.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions"></see> that specifies white space behavior, and whether to load base URI and line information.</param>
      <returns>An <see cref="T:System.Xml.Linq.XElement"></see> that contains the contents of the specified file.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XElement"></see> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <param name="stream">The stream containing the XML data.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions"></see> object that specifies whether to load base URI and line information.</param>
      <returns>An <see cref="T:System.Xml.Linq.XElement"></see> object used to read the data that the stream contains.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement"></see> from a <see cref="T:System.IO.TextReader"></see>.</summary>
      <param name="textReader">A <see cref="T:System.IO.TextReader"></see> that will be read for the <see cref="T:System.Xml.Linq.XElement"></see> content.</param>
      <returns>An <see cref="T:System.Xml.Linq.XElement"></see> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.String)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement"></see> from a file.</summary>
      <param name="uri">A URI string referencing the file to load into a new <see cref="T:System.Xml.Linq.XElement"></see>.</param>
      <returns>An <see cref="T:System.Xml.Linq.XElement"></see> that contains the contents of the specified file.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.Stream)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XElement"></see> instance by using the specified stream.</summary>
      <param name="stream">The stream that contains the XML data.</param>
      <returns>An <see cref="T:System.Xml.Linq.XElement"></see> object used to read the data that is contained in the stream.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement"></see> from an <see cref="T:System.Xml.XmlReader"></see>.</summary>
      <param name="reader">A <see cref="T:System.Xml.XmlReader"></see> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement"></see>.</param>
      <returns>An <see cref="T:System.Xml.Linq.XElement"></see> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
      <param name="stream"></param>
      <param name="options"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
      <param name="textReader"></param>
      <param name="options"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
      <param name="reader"></param>
      <param name="options"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.Name">
      <summary>Gets or sets the name of this element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName"></see> that contains the name of this element.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XElement"></see> objects, this value is <see cref="F:System.Xml.XmlNodeType.Element"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Int64})">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Single})">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.TimeSpan})">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.UInt32})">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.UInt64})">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.UInt32)">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.String)">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.TimeSpan)">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.UInt64)">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Int32})">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Single)">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Guid})">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Boolean})">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Decimal})">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Boolean)">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.DateTime)">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.DateTimeOffset)">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Double)">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Guid)">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Decimal)">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Int64)">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Double})">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.DateTime})">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.DateTimeOffset})">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Int32)">
      <param name="element"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Parse(System.String)">
      <summary>Load an <see cref="T:System.Xml.Linq.XElement"></see> from a string that contains XML.</summary>
      <param name="text">A <see cref="T:System.String"></see> that contains XML.</param>
      <returns>An <see cref="T:System.Xml.Linq.XElement"></see> populated from the string that contains XML.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
      <summary>Load an <see cref="T:System.Xml.Linq.XElement"></see> from a string that contains XML, optionally preserving white space and retaining line information.</summary>
      <param name="text">A <see cref="T:System.String"></see> that contains XML.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions"></see> that specifies white space behavior, and whether to load base URI and line information.</param>
      <returns>An <see cref="T:System.Xml.Linq.XElement"></see> populated from the string that contains XML.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.RemoveAll">
      <summary>Removes nodes and attributes from this <see cref="T:System.Xml.Linq.XElement"></see>.</summary>
    </member>
    <member name="M:System.Xml.Linq.XElement.RemoveAttributes">
      <summary>Removes the attributes of this <see cref="T:System.Xml.Linq.XElement"></see>.</summary>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)">
      <summary>Replaces the child nodes and the attributes of this element with the specified content.</summary>
      <param name="content">The content that will replace the child nodes and attributes of this element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])">
      <summary>Replaces the child nodes and the attributes of this element with the specified content.</summary>
      <param name="content">A parameter list of content objects.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])">
      <summary>Replaces the attributes of this element with the specified content.</summary>
      <param name="content">A parameter list of content objects.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)">
      <summary>Replaces the attributes of this element with the specified content.</summary>
      <param name="content">The content that will replace the attributes of this element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.Stream)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XElement"></see> to the specified <see cref="T:System.IO.Stream"></see>.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XElement"></see> to.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)">
      <summary>Serialize this element to a <see cref="T:System.IO.TextWriter"></see>.</summary>
      <param name="textWriter">A <see cref="T:System.IO.TextWriter"></see> that the <see cref="T:System.Xml.Linq.XElement"></see> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.String)">
      <summary>Serialize this element to a file.</summary>
      <param name="fileName">A <see cref="T:System.String"></see> that contains the name of the file.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)">
      <summary>Serialize this element to an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter"></see> that the <see cref="T:System.Xml.Linq.XElement"></see> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XElement"></see> to the specified <see cref="T:System.IO.Stream"></see>, optionally specifying formatting behavior.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XElement"></see> to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions"></see> object that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this element to a <see cref="T:System.IO.TextWriter"></see>, optionally disabling formatting.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter"></see> to output the XML to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions"></see> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this element to a file, optionally disabling formatting.</summary>
      <param name="fileName">A <see cref="T:System.String"></see> that contains the name of the file.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions"></see> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
      <param name="stream"></param>
      <param name="options"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
      <param name="textWriter"></param>
      <param name="options"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
      <summary>Sets the value of an attribute, adds an attribute, or removes an attribute.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName"></see> that contains the name of the attribute to change.</param>
      <param name="value">The value to assign to the attribute. The attribute is removed if the value is null. Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XAttribute.Value"></see> property of the attribute.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="value">value</paramref> is an instance of <see cref="T:System.Xml.Linq.XObject"></see>.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
      <summary>Sets the value of a child element, adds a child element, or removes a child element.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName"></see> that contains the name of the child element to change.</param>
      <param name="value">The value to assign to the child element. The child element is removed if the value is null. Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value"></see> property of the child element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="value">value</paramref> is an instance of <see cref="T:System.Xml.Linq.XObject"></see>.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.SetValue(System.Object)">
      <summary>Sets the value of this element.</summary>
      <param name="value">The value to assign to this element. The value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value"></see> property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="value">value</paramref> is an <see cref="T:System.Xml.Linq.XObject"></see>.</exception>
    </member>
    <member name="P:System.Xml.Linq.XElement.Value">
      <summary>Gets or sets the concatenated text contents of this element.</summary>
      <returns>A <see cref="T:System.String"></see> that contains all of the text content of this element. If there are multiple text nodes, they will be concatenated.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)">
      <summary>Write this element to an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter"></see> into which this method will write.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Gets an XML schema definition that describes the XML representation of this object.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchema"></see> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"></see> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"></see> method.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Generates an object from its XML representation.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader"></see> from which the object is deserialized.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Converts an object into its XML representation.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter"></see> to which this object is serialized.</param>
    </member>
    <member name="T:System.Xml.Linq.XName">
      <summary>Represents a name of an XML element or attribute.</summary>
    </member>
    <member name="M:System.Xml.Linq.XName.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Xml.Linq.XName"></see> is equal to this <see cref="T:System.Xml.Linq.XName"></see>.</summary>
      <param name="obj">The <see cref="T:System.Xml.Linq.XName"></see> to compare to the current <see cref="T:System.Xml.Linq.XName"></see>.</param>
      <returns>true if the specified <see cref="T:System.Xml.Linq.XName"></see> is equal to the current <see cref="T:System.Xml.Linq.XName"></see>; otherwise false.</returns>
    </member>
    <member name="M:System.Xml.Linq.XName.Get(System.String)">
      <summary>Gets an <see cref="T:System.Xml.Linq.XName"></see> object from an expanded name.</summary>
      <param name="expandedName">A <see cref="T:System.String"></see> that contains an expanded XML name in the format {namespace}localname.</param>
      <returns>An <see cref="T:System.Xml.Linq.XName"></see> object constructed from the expanded name.</returns>
    </member>
    <member name="M:System.Xml.Linq.XName.Get(System.String,System.String)">
      <summary>Gets an <see cref="T:System.Xml.Linq.XName"></see> object from a local name and a namespace.</summary>
      <param name="localName">A local (unqualified) name.</param>
      <param name="namespaceName">An XML namespace.</param>
      <returns>An <see cref="T:System.Xml.Linq.XName"></see> object created from the specified local name and namespace.</returns>
    </member>
    <member name="M:System.Xml.Linq.XName.GetHashCode">
      <summary>Gets a hash code for this <see cref="T:System.Xml.Linq.XName"></see>.</summary>
      <returns>An <see cref="T:System.Int32"></see> that contains the hash code for the <see cref="T:System.Xml.Linq.XName"></see>.</returns>
    </member>
    <member name="P:System.Xml.Linq.XName.LocalName">
      <summary>Gets the local (unqualified) part of the name.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the local (unqualified) part of the name.</returns>
    </member>
    <member name="P:System.Xml.Linq.XName.Namespace">
      <summary>Gets the namespace part of the fully qualified name.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNamespace"></see> that contains the namespace part of the name.</returns>
    </member>
    <member name="P:System.Xml.Linq.XName.NamespaceName">
      <summary>Returns the URI of the <see cref="T:System.Xml.Linq.XNamespace"></see> for this <see cref="T:System.Xml.Linq.XName"></see>.</summary>
      <returns>The URI of the <see cref="T:System.Xml.Linq.XNamespace"></see> for this <see cref="T:System.Xml.Linq.XName"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName"></see> are equal.</summary>
      <param name="left">The first <see cref="T:System.Xml.Linq.XName"></see> to compare.</param>
      <param name="right">The second <see cref="T:System.Xml.Linq.XName"></see> to compare.</param>
      <returns>true if <paramref name="left">left</paramref> and <paramref name="right">right</paramref> are equal; otherwise false.</returns>
    </member>
    <member name="M:System.Xml.Linq.XName.op_Implicit(System.String to System.Xml.Linq.XName)">
      <param name="expandedName"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName"></see> are not equal.</summary>
      <param name="left">The first <see cref="T:System.Xml.Linq.XName"></see> to compare.</param>
      <param name="right">The second <see cref="T:System.Xml.Linq.XName"></see> to compare.</param>
      <returns>true if <paramref name="left">left</paramref> and <paramref name="right">right</paramref> are not equal; otherwise false.</returns>
    </member>
    <member name="M:System.Xml.Linq.XName.ToString">
      <summary>Returns the expanded XML name in the format {namespace}localname.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the expanded XML name in the format {namespace}localname.</returns>
    </member>
    <member name="M:System.Xml.Linq.XName.System#IEquatable{System#Xml#Linq#XName}#Equals(System.Xml.Linq.XName)">
      <summary>Indicates whether the current <see cref="T:System.Xml.Linq.XName"></see> is equal to the specified <see cref="T:System.Xml.Linq.XName"></see>.</summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XName"></see> to compare with this <see cref="T:System.Xml.Linq.XName"></see>.</param>
      <returns>true if this <see cref="T:System.Xml.Linq.XName"></see> is equal to the specified <see cref="T:System.Xml.Linq.XName"></see>, otherwise false.</returns>
    </member>
    <member name="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data required to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this serialization.</param>
    </member>
    <member name="T:System.Xml.Linq.XNamespace">
      <summary>Represents an XML namespace. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Xml.Linq.XNamespace"></see> is equal to the current <see cref="T:System.Xml.Linq.XNamespace"></see>.</summary>
      <param name="obj">The <see cref="T:System.Xml.Linq.XNamespace"></see> to compare to the current <see cref="T:System.Xml.Linq.XNamespace"></see>.</param>
      <returns>A <see cref="T:System.Boolean"></see> that indicates whether the specified <see cref="T:System.Xml.Linq.XNamespace"></see> is equal to the current <see cref="T:System.Xml.Linq.XNamespace"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.Get(System.String)">
      <summary>Gets an <see cref="T:System.Xml.Linq.XNamespace"></see> for the specified Uniform Resource Identifier (URI).</summary>
      <param name="namespaceName">A <see cref="T:System.String"></see> that contains a namespace URI.</param>
      <returns>An <see cref="T:System.Xml.Linq.XNamespace"></see> created from the specified URI.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.GetHashCode">
      <summary>Gets a hash code for this <see cref="T:System.Xml.Linq.XNamespace"></see>.</summary>
      <returns>An <see cref="T:System.Int32"></see> that contains the hash code for the <see cref="T:System.Xml.Linq.XNamespace"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.GetName(System.String)">
      <summary>Returns an <see cref="T:System.Xml.Linq.XName"></see> object created from this <see cref="T:System.Xml.Linq.XNamespace"></see> and the specified local name.</summary>
      <param name="localName">A <see cref="T:System.String"></see> that contains a local name.</param>
      <returns>An <see cref="T:System.Xml.Linq.XName"></see> created from this <see cref="T:System.Xml.Linq.XNamespace"></see> and the specified local name.</returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.NamespaceName">
      <summary>Gets the Uniform Resource Identifier (URI) of this namespace.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the URI of the namespace.</returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.None">
      <summary>Gets the <see cref="T:System.Xml.Linq.XNamespace"></see> object that corresponds to no namespace.</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNamespace"></see> that corresponds to no namespace.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
      <summary>Combines an <see cref="T:System.Xml.Linq.XNamespace"></see> object with a local name to create an <see cref="T:System.Xml.Linq.XName"></see>.</summary>
      <param name="ns">An <see cref="T:System.Xml.Linq.XNamespace"></see> that contains the namespace.</param>
      <param name="localName">A <see cref="T:System.String"></see> that contains the local name.</param>
      <returns>The new <see cref="T:System.Xml.Linq.XName"></see> constructed from the namespace and local name.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace"></see> are equal.</summary>
      <param name="left">The first <see cref="T:System.Xml.Linq.XNamespace"></see> to compare.</param>
      <param name="right">The second <see cref="T:System.Xml.Linq.XNamespace"></see> to compare.</param>
      <returns>A <see cref="T:System.Boolean"></see> that indicates whether <paramref name="left">left</paramref> and <paramref name="right">right</paramref> are equal.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Implicit(System.String to System.Xml.Linq.XNamespace)">
      <param name="namespaceName"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace"></see> are not equal.</summary>
      <param name="left">The first <see cref="T:System.Xml.Linq.XNamespace"></see> to compare.</param>
      <param name="right">The second <see cref="T:System.Xml.Linq.XNamespace"></see> to compare.</param>
      <returns>A <see cref="T:System.Boolean"></see> that indicates whether <paramref name="left">left</paramref> and <paramref name="right">right</paramref> are not equal.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.ToString">
      <summary>Returns the URI of this <see cref="T:System.Xml.Linq.XNamespace"></see>.</summary>
      <returns>The URI of this <see cref="T:System.Xml.Linq.XNamespace"></see>.</returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.Xml">
      <summary>Gets the <see cref="T:System.Xml.Linq.XNamespace"></see> object that corresponds to the XML URI (<see cref="http://www.w3.org/XML/1998/namespace">http://www.w3.org/XML/1998/namespace</see>).</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNamespace"></see> that corresponds to the XML URI (<see cref="http://www.w3.org/XML/1998/namespace">http://www.w3.org/XML/1998/namespace</see>).</returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.Xmlns">
      <summary>Gets the <see cref="T:System.Xml.Linq.XNamespace"></see> object that corresponds to the xmlns URI (<see cref="http://www.w3.org/2000/xmlns/">http://www.w3.org/2000/xmlns/</see>).</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNamespace"></see> that corresponds to the xmlns URI (<see cref="http://www.w3.org/2000/xmlns/">http://www.w3.org/2000/xmlns/</see>).</returns>
    </member>
    <member name="T:System.Xml.Linq.XNode">
      <summary>Represents the abstract concept of a node (element, comment, document type, processing instruction, or text node) in the XML tree.</summary>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object)">
      <summary>Adds the specified content immediately after this node.</summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added after this node.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object[])">
      <summary>Adds the specified content immediately after this node.</summary>
      <param name="content">A parameter list of content objects.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object)">
      <summary>Adds the specified content immediately before this node.</summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added before this node.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])">
      <summary>Adds the specified content immediately before this node.</summary>
      <param name="content">A parameter list of content objects.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.Ancestors">
      <summary>Returns a collection of the ancestor elements of this node.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> of the ancestor elements of this node.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the ancestor elements of this node. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</summary>
      <param name="name">The <see cref="T:System.Xml.Linq.XName"></see> to match.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> of the ancestor elements of this node. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.   The nodes in the returned collection are in reverse document order.   This method uses deferred execution.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>Compares two nodes to determine their relative XML document order.</summary>
      <param name="n1">First <see cref="T:System.Xml.Linq.XNode"></see> to compare.</param>
      <param name="n2">Second <see cref="T:System.Xml.Linq.XNode"></see> to compare.</param>
      <returns>An int containing 0 if the nodes are equal; -1 if <paramref name="n1">n1</paramref> is before <paramref name="n2">n2</paramref>; 1 if <paramref name="n1">n1</paramref> is after <paramref name="n2">n2</paramref>.</returns>
      <exception cref="T:System.InvalidOperationException">The two nodes do not share a common ancestor.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.CreateReader">
      <summary>Creates an <see cref="T:System.Xml.XmlReader"></see> for this node.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader"></see> that can be used to read this node and its descendants.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)">
      <summary>Creates an <see cref="T:System.Xml.XmlReader"></see> with the options specified by the <paramref name="readerOptions">readerOptions</paramref> parameter.</summary>
      <param name="readerOptions">A <see cref="T:System.Xml.Linq.ReaderOptions"></see> object that specifies whether to omit duplicate namespaces.</param>
      <returns>An <see cref="T:System.Xml.XmlReader"></see> object.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>Compares the values of two nodes, including the values of all descendant nodes.</summary>
      <param name="n1">The first <see cref="T:System.Xml.Linq.XNode"></see> to compare.</param>
      <param name="n2">The second <see cref="T:System.Xml.Linq.XNode"></see> to compare.</param>
      <returns>true if the nodes are equal; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XNode.DocumentOrderComparer">
      <summary>Gets a comparer that can compare the relative position of two nodes.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNodeDocumentOrderComparer"></see> that can compare the relative position of two nodes.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsAfterSelf">
      <summary>Returns a collection of the sibling elements after this node, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> of the sibling elements after this node, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the sibling elements after this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</summary>
      <param name="name">The <see cref="T:System.Xml.Linq.XName"></see> to match.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> of the sibling elements after this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsBeforeSelf">
      <summary>Returns a collection of the sibling elements before this node, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> of the sibling elements before this node, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the sibling elements before this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</summary>
      <param name="name">The <see cref="T:System.Xml.Linq.XName"></see> to match.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XElement"></see> of the sibling elements before this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"></see> are included in the collection.</returns>
    </member>
    <member name="P:System.Xml.Linq.XNode.EqualityComparer">
      <summary>Gets a comparer that can compare two nodes for value equality.</summary>
      <returns>A <see cref="T:System.Xml.Linq.XNodeEqualityComparer"></see> that can compare two nodes for value equality.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)">
      <summary>Determines if the current node appears after a specified node in terms of document order.</summary>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode"></see> to compare for document order.</param>
      <returns>true if this node appears after the specified node; otherwise false.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)">
      <summary>Determines if the current node appears before a specified node in terms of document order.</summary>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode"></see> to compare for document order.</param>
      <returns>true if this node appears before the specified node; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XNode.NextNode">
      <summary>Gets the next sibling node of this node.</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNode"></see> that contains the next sibling node.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.NodesAfterSelf">
      <summary>Returns a collection of the sibling nodes after this node, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XNode"></see> of the sibling nodes after this node, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.NodesBeforeSelf">
      <summary>Returns a collection of the sibling nodes before this node, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Xml.Linq.XNode"></see> of the sibling nodes before this node, in document order.</returns>
    </member>
    <member name="P:System.Xml.Linq.XNode.PreviousNode">
      <summary>Gets the previous sibling node of this node.</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNode"></see> that contains the previous sibling node.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)">
      <summary>Creates an <see cref="T:System.Xml.Linq.XNode"></see> from an <see cref="T:System.Xml.XmlReader"></see>.</summary>
      <param name="reader">An <see cref="T:System.Xml.XmlReader"></see> positioned at the node to read into this <see cref="T:System.Xml.Linq.XNode"></see>.</param>
      <returns>An <see cref="T:System.Xml.Linq.XNode"></see> that contains the node and its descendant nodes that were read from the reader. The runtime type of the node is determined by the node type (<see cref="P:System.Xml.Linq.XObject.NodeType"></see>) of the first node encountered in the reader.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on a recognized node type.</exception>
      <exception cref="T:System.Xml.XmlException">The underlying <see cref="T:System.Xml.XmlReader"></see> throws an exception.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)">
      <param name="reader"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.Remove">
      <summary>Removes this node from its parent.</summary>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReplaceWith(System.Object)">
      <summary>Replaces this node with the specified content.</summary>
      <param name="content">Content that replaces this node.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReplaceWith(System.Object[])">
      <summary>Replaces this node with the specified content.</summary>
      <param name="content">A parameter list of the new content.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.ToString">
      <summary>Returns the indented XML for this node.</summary>
      <returns>A <see cref="T:System.String"></see> containing the indented XML.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)">
      <summary>Returns the XML for this node, optionally disabling formatting.</summary>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions"></see> that specifies formatting behavior.</param>
      <returns>A <see cref="T:System.String"></see> containing the XML.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this node to an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter"></see> into which this method will write.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="T:System.Xml.Linq.XNodeDocumentOrderComparer">
      <summary>Contains functionality to compare nodes for their document order. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeDocumentOrderComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XNodeDocumentOrderComparer"></see> class.</summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeDocumentOrderComparer.Compare(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>Compares two nodes to determine their relative document order.</summary>
      <param name="x">The first <see cref="T:System.Xml.Linq.XNode"></see> to compare.</param>
      <param name="y">The second <see cref="T:System.Xml.Linq.XNode"></see> to compare.</param>
      <returns>An <see cref="T:System.Int32"></see> that contains 0 if the nodes are equal; -1 if <paramref name="x">x</paramref> is before <paramref name="y">y</paramref>; 1 if <paramref name="x">x</paramref> is after <paramref name="y">y</paramref>.</returns>
      <exception cref="T:System.InvalidOperationException">The two nodes do not share a common ancestor.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNodeDocumentOrderComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary>Compares two nodes to determine their relative document order.</summary>
      <param name="x">The first <see cref="T:System.Xml.Linq.XNode"></see> to compare.</param>
      <param name="y">The second <see cref="T:System.Xml.Linq.XNode"></see> to compare.</param>
      <returns>An <see cref="T:System.Int32"></see> that contains 0 if the nodes are equal; -1 if <paramref name="x">x</paramref> is before <paramref name="y">y</paramref>; 1 if <paramref name="x">x</paramref> is after <paramref name="y">y</paramref>.</returns>
      <exception cref="T:System.InvalidOperationException">The two nodes do not share a common ancestor.</exception>
      <exception cref="T:System.ArgumentException">The two nodes are not derived from <see cref="T:System.Xml.Linq.XNode"></see>.</exception>
    </member>
    <member name="T:System.Xml.Linq.XNodeEqualityComparer">
      <summary>Compares nodes to determine whether they are equal. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XNodeEqualityComparer"></see> class.</summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.Equals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>Compares the values of two nodes.</summary>
      <param name="x">The first <see cref="T:System.Xml.Linq.XNode"></see> to compare.</param>
      <param name="y">The second <see cref="T:System.Xml.Linq.XNode"></see> to compare.</param>
      <returns>A <see cref="T:System.Boolean"></see> indicating if the nodes are equal.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.GetHashCode(System.Xml.Linq.XNode)">
      <summary>Returns a hash code based on an <see cref="T:System.Xml.Linq.XNode"></see>.</summary>
      <param name="obj">The <see cref="T:System.Xml.Linq.XNode"></see> to hash.</param>
      <returns>A <see cref="T:System.Int32"></see> that contains a value-based hash code for the node.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <summary>Compares the values of two nodes.</summary>
      <param name="x">The first <see cref="T:System.Xml.Linq.XNode"></see> to compare.</param>
      <param name="y">The second <see cref="T:System.Xml.Linq.XNode"></see> to compare.</param>
      <returns>true if the nodes are equal; otherwise false.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <summary>Returns a hash code based on the value of a node.</summary>
      <param name="obj">The node to hash.</param>
      <returns>A <see cref="T:System.Int32"></see> that contains a value-based hash code for the node.</returns>
    </member>
    <member name="T:System.Xml.Linq.XObject">
      <summary>Represents a node or an attribute in an XML tree.</summary>
    </member>
    <member name="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
      <summary>Adds an object to the annotation list of this <see cref="T:System.Xml.Linq.XObject"></see>.</summary>
      <param name="annotation">An <see cref="T:System.Object"></see> that contains the annotation to add.</param>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotation(System.Type)">
      <summary>Gets the first annotation object of the specified type from this <see cref="T:System.Xml.Linq.XObject"></see>.</summary>
      <param name="type">The <see cref="T:System.Type"></see> of the annotation to retrieve.</param>
      <returns>The <see cref="T:System.Object"></see> that contains the first annotation object that matches the specified type, or null if no annotation is of the specified type.</returns>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotation``1">
      <summary>Get the first annotation object of the specified type from this <see cref="T:System.Xml.Linq.XObject"></see>.</summary>
      <typeparam name="T">The type of the annotation to retrieve.</typeparam>
      <returns>The first annotation object that matches the specified type, or null if no annotation is of the specified type.</returns>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotations(System.Type)">
      <summary>Gets a collection of annotations of the specified type for this <see cref="T:System.Xml.Linq.XObject"></see>.</summary>
      <param name="type">The <see cref="T:System.Type"></see> of the annotations to retrieve.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Object"></see> that contains the annotations that match the specified type for this <see cref="T:System.Xml.Linq.XObject"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotations``1">
      <summary>Gets a collection of annotations of the specified type for this <see cref="T:System.Xml.Linq.XObject"></see>.</summary>
      <typeparam name="T">The type of the annotations to retrieve.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that contains the annotations for this <see cref="T:System.Xml.Linq.XObject"></see>.</returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.BaseUri">
      <summary>Gets the base URI for this <see cref="T:System.Xml.Linq.XObject"></see>.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the base URI for this <see cref="T:System.Xml.Linq.XObject"></see>.</returns>
    </member>
    <member name="E:System.Xml.Linq.XObject.Changed">
      <summary>Raised when this <see cref="T:System.Xml.Linq.XObject"></see> or any of its descendants have changed.</summary>
      <returns></returns>
    </member>
    <member name="E:System.Xml.Linq.XObject.Changing">
      <summary>Raised when this <see cref="T:System.Xml.Linq.XObject"></see> or any of its descendants are about to change.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.Document">
      <summary>Gets the <see cref="T:System.Xml.Linq.XDocument"></see> for this <see cref="T:System.Xml.Linq.XObject"></see>.</summary>
      <returns>The <see cref="T:System.Xml.Linq.XDocument"></see> for this <see cref="T:System.Xml.Linq.XObject"></see>.</returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.NodeType">
      <summary>Gets the node type for this <see cref="T:System.Xml.Linq.XObject"></see>.</summary>
      <returns>The node type for this <see cref="T:System.Xml.Linq.XObject"></see>.</returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.Parent">
      <summary>Gets the parent <see cref="T:System.Xml.Linq.XElement"></see> of this <see cref="T:System.Xml.Linq.XObject"></see>.</summary>
      <returns>The parent <see cref="T:System.Xml.Linq.XElement"></see> of this <see cref="T:System.Xml.Linq.XObject"></see>.</returns>
    </member>
    <member name="M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)">
      <summary>Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject"></see>.</summary>
      <param name="type">The <see cref="T:System.Type"></see> of annotations to remove.</param>
    </member>
    <member name="M:System.Xml.Linq.XObject.RemoveAnnotations``1">
      <summary>Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject"></see>.</summary>
      <typeparam name="T">The type of annotations to remove.</typeparam>
    </member>
    <member name="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
      <summary>Gets a value indicating whether or not this <see cref="T:System.Xml.Linq.XObject"></see> has line information.</summary>
      <returns>true if the <see cref="T:System.Xml.Linq.XObject"></see> has line information, otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
      <summary>Gets the line number that the underlying <see cref="T:System.Xml.XmlReader"></see> reported for this <see cref="T:System.Xml.Linq.XObject"></see>.</summary>
      <returns>An <see cref="T:System.Int32"></see> that contains the line number reported by the <see cref="T:System.Xml.XmlReader"></see> for this <see cref="T:System.Xml.Linq.XObject"></see>.</returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
      <summary>Gets the line position that the underlying <see cref="T:System.Xml.XmlReader"></see> reported for this <see cref="T:System.Xml.Linq.XObject"></see>.</summary>
      <returns>An <see cref="T:System.Int32"></see> that contains the line position reported by the <see cref="T:System.Xml.XmlReader"></see> for this <see cref="T:System.Xml.Linq.XObject"></see>.</returns>
    </member>
    <member name="T:System.Xml.Linq.XObjectChange">
      <summary>Specifies the event type when an event is raised for an <see cref="T:System.Xml.Linq.XObject"></see>.</summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Add">
      <summary>An <see cref="T:System.Xml.Linq.XObject"></see> has been or will be added to an <see cref="T:System.Xml.Linq.XContainer"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Name">
      <summary>An <see cref="T:System.Xml.Linq.XObject"></see> has been or will be renamed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Remove">
      <summary>An <see cref="T:System.Xml.Linq.XObject"></see> has been or will be removed from an <see cref="T:System.Xml.Linq.XContainer"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Value">
      <summary>The value of an <see cref="T:System.Xml.Linq.XObject"></see> has been or will be changed. In addition, a change in the serialization of an empty element (either from an empty tag to start/end tag pair or vice versa) raises this event.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Xml.Linq.XObjectChangeEventArgs">
      <summary>Provides data for the <see cref="E:System.Xml.Linq.XObject.Changing"></see> and <see cref="E:System.Xml.Linq.XObject.Changed"></see> events.</summary>
    </member>
    <member name="M:System.Xml.Linq.XObjectChangeEventArgs.#ctor(System.Xml.Linq.XObjectChange)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XObjectChangeEventArgs"></see> class.</summary>
      <param name="objectChange">An <see cref="T:System.Xml.Linq.XObjectChange"></see> that contains the event arguments for LINQ to XML events.</param>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Add">
      <summary>Event argument for an <see cref="F:System.Xml.Linq.XObjectChange.Add"></see> change event.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Name">
      <summary>Event argument for a <see cref="F:System.Xml.Linq.XObjectChange.Name"></see> change event.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Xml.Linq.XObjectChangeEventArgs.ObjectChange">
      <summary>Gets the type of change.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XObjectChange"></see> that contains the type of change.</returns>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Remove">
      <summary>Event argument for a <see cref="F:System.Xml.Linq.XObjectChange.Remove"></see> change event.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Value">
      <summary>Event argument for a <see cref="F:System.Xml.Linq.XObjectChange.Value"></see> change event.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Xml.Linq.XProcessingInstruction">
      <summary>Represents an XML processing instruction.</summary>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.#ctor(System.Xml.Linq.XProcessingInstruction)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XProcessingInstruction"></see> class.</summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XProcessingInstruction"></see> node to copy from.</param>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XProcessingInstruction"></see> class.</summary>
      <param name="target">A <see cref="T:System.String"></see> containing the target application for this <see cref="T:System.Xml.Linq.XProcessingInstruction"></see>.</param>
      <param name="data">The string data for this <see cref="T:System.Xml.Linq.XProcessingInstruction"></see>.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="target">target</paramref> or <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> does not follow the constraints of an XML name.</exception>
    </member>
    <member name="P:System.Xml.Linq.XProcessingInstruction.Data">
      <summary>Gets or sets the string value of this processing instruction.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the string value of this processing instruction.</returns>
      <exception cref="T:System.ArgumentNullException">The string <paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="P:System.Xml.Linq.XProcessingInstruction.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XProcessingInstruction"></see> objects, this value is <see cref="F:System.Xml.XmlNodeType.ProcessingInstruction"></see>.</returns>
    </member>
    <member name="P:System.Xml.Linq.XProcessingInstruction.Target">
      <summary>Gets or sets a string containing the target application for this processing instruction.</summary>
      <returns>A <see cref="T:System.String"></see> containing the target application for this processing instruction.</returns>
      <exception cref="T:System.ArgumentNullException">The string <paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> does not follow the constraints of an XML name.</exception>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this processing instruction to an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter"></see> to write this processing instruction to.</param>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="T:System.Xml.Linq.XStreamingElement">
      <summary>Represents elements in an XML tree that supports deferred streaming output.</summary>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement"></see> class from the specified <see cref="T:System.Xml.Linq.XName"></see>.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName"></see> that contains the name of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XStreamingElement"></see> class with the specified name and content.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName"></see> that contains the element name.</param>
      <param name="content">The contents of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XStreamingElement"></see> class with the specified name and content.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName"></see> that contains the element name.</param>
      <param name="content">The contents of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
      <summary>Adds the specified content as children to this <see cref="T:System.Xml.Linq.XStreamingElement"></see>.</summary>
      <param name="content">Content to be added to the streaming element.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
      <summary>Adds the specified content as children to this <see cref="T:System.Xml.Linq.XStreamingElement"></see>.</summary>
      <param name="content">Content to be added to the streaming element.</param>
    </member>
    <member name="P:System.Xml.Linq.XStreamingElement.Name">
      <summary>Gets or sets the name of this streaming element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName"></see> that contains the name of this streaming element.</returns>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XStreamingElement"></see> to the specified <see cref="T:System.IO.Stream"></see>.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XDocument"></see> to.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
      <summary>Serialize this streaming element to a <see cref="T:System.IO.TextWriter"></see>.</summary>
      <param name="textWriter">A <see cref="T:System.IO.TextWriter"></see> that the <see cref="T:System.Xml.Linq.XStreamingElement"></see> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
      <summary>Serialize this streaming element to a file.</summary>
      <param name="fileName">A <see cref="T:System.String"></see> that contains the name of the file.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)">
      <summary>Serialize this streaming element to an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter"></see> that the <see cref="T:System.Xml.Linq.XElement"></see> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XStreamingElement"></see> to the specified <see cref="T:System.IO.Stream"></see>, optionally specifying formatting behavior.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XDocument"></see> to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions"></see> object that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this streaming element to a <see cref="T:System.IO.TextWriter"></see>, optionally disabling formatting.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter"></see> to output the XML to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions"></see> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this streaming element to a file, optionally disabling formatting.</summary>
      <param name="fileName">A <see cref="T:System.String"></see> that contains the name of the file.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions"></see> object that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.ToString">
      <summary>Returns the formatted (indented) XML for this streaming element.</summary>
      <returns>A <see cref="T:System.String"></see> containing the indented XML.</returns>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
      <summary>Returns the XML for this streaming element, optionally disabling formatting.</summary>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions"></see> that specifies formatting behavior.</param>
      <returns>A <see cref="T:System.String"></see> containing the XML.</returns>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this streaming element to an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter"></see> into which this method will write.</param>
    </member>
    <member name="T:System.Xml.Linq.XText">
      <summary>Represents a text node.</summary>
    </member>
    <member name="M:System.Xml.Linq.XText.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XText"></see> class.</summary>
      <param name="value">The <see cref="T:System.String"></see> that contains the value of the <see cref="T:System.Xml.Linq.XText"></see> node.</param>
    </member>
    <member name="M:System.Xml.Linq.XText.#ctor(System.Xml.Linq.XText)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XText"></see> class from another <see cref="T:System.Xml.Linq.XText"></see> object.</summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XText"></see> node to copy from.</param>
    </member>
    <member name="P:System.Xml.Linq.XText.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XText"></see> objects, this value is <see cref="F:System.Xml.XmlNodeType.Text"></see>.</returns>
    </member>
    <member name="P:System.Xml.Linq.XText.Value">
      <summary>Gets or sets the value of this node.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the value of this node.</returns>
    </member>
    <member name="M:System.Xml.Linq.XText.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this node to an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter"></see> into which this method will write.</param>
    </member>
    <member name="M:System.Xml.Linq.XText.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer"></param>
      <param name="cancellationToken"></param>
      <returns></returns>
    </member>
    <member name="T:System.Xml.Schema.Extensions">
      <summary>This class contains the LINQ to XML extension methods for XSD validation.</summary>
    </member>
    <member name="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute)">
      <summary>Gets the post-schema-validation infoset (PSVI) of a validated attribute.</summary>
      <param name="source">An <see cref="T:System.Xml.Linq.XAttribute"></see> that has been previously validated.</param>
      <returns>A <see cref="T:System.Xml.Schema.IXmlSchemaInfo"></see> that contains the post-schema-validation infoset for an <see cref="T:System.Xml.Linq.XAttribute"></see>.</returns>
    </member>
    <member name="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement)">
      <summary>Gets the post-schema-validation infoset (PSVI) of a validated element.</summary>
      <param name="source">An <see cref="T:System.Xml.Linq.XElement"></see> that has been previously validated.</param>
      <returns>A <see cref="T:System.Xml.Schema.IXmlSchemaInfo"></see> that contains the post-schema-validation infoset (PSVI) for an <see cref="T:System.Xml.Linq.XElement"></see>.</returns>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary>This method validates that an <see cref="T:System.Xml.Linq.XDocument"></see> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</summary>
      <param name="source">The <see cref="T:System.Xml.Linq.XDocument"></see> to validate.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> to validate against.</param>
      <param name="validationEventHandler">A <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> for an event that occurs when the reader encounters validation errors. If null, throws an exception upon validation errors.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Thrown for XML Schema Definition Language (XSD) validation errors.</exception>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary>This method validates that an <see cref="T:System.Xml.Linq.XAttribute"></see> conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> and an <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</summary>
      <param name="source">The <see cref="T:System.Xml.Linq.XAttribute"></see> to validate.</param>
      <param name="partialValidationType">An <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> that specifies the sub-tree to validate.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> to validate against.</param>
      <param name="validationEventHandler">A <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> for an event that occurs when the reader encounters validation errors. If null, throws an exception upon validation errors.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Thrown for XML Schema Definition Language (XSD) validation errors.</exception>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)">
      <summary>Validates that an <see cref="T:System.Xml.Linq.XDocument"></see> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</summary>
      <param name="source">The <see cref="T:System.Xml.Linq.XDocument"></see> to validate.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> to validate against.</param>
      <param name="validationEventHandler">A <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> for an event that occurs when the reader encounters validation errors. If null, throws an exception upon validation errors.</param>
      <param name="addSchemaInfo">A <see cref="T:System.Boolean"></see> indicating whether to populate the post-schema-validation infoset (PSVI).</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Thrown for XML Schema Definition Language (XSD) validation errors.</exception>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary>This method validates that an <see cref="T:System.Xml.Linq.XElement"></see> sub-tree conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> and an <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</summary>
      <param name="source">The <see cref="T:System.Xml.Linq.XElement"></see> to validate.</param>
      <param name="partialValidationType">An <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> that specifies the sub-tree to validate.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> to validate against.</param>
      <param name="validationEventHandler">A <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> for an event that occurs when the reader encounters validation errors. If null, throws an exception upon validation errors.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Thrown for XML Schema Definition Language (XSD) validation errors.</exception>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)">
      <summary>Validates that an <see cref="T:System.Xml.Linq.XAttribute"></see> conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> and an <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</summary>
      <param name="source">The <see cref="T:System.Xml.Linq.XAttribute"></see> to validate.</param>
      <param name="partialValidationType">An <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> that specifies the sub-tree to validate.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> to validate against.</param>
      <param name="validationEventHandler">A <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> for an event that occurs when the reader encounters validation errors. If null, throws an exception upon validation errors.</param>
      <param name="addSchemaInfo">A <see cref="T:System.Boolean"></see> indicating whether to populate the post-schema-validation infoset (PSVI).</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Thrown for XML Schema Definition Language (XSD) validation errors.</exception>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)">
      <summary>Validates that an <see cref="T:System.Xml.Linq.XElement"></see> sub-tree conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> and an <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</summary>
      <param name="source">The <see cref="T:System.Xml.Linq.XElement"></see> to validate.</param>
      <param name="partialValidationType">An <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> that specifies the sub-tree to validate.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> to validate against.</param>
      <param name="validationEventHandler">A <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> for an event that occurs when the reader encounters validation errors. If null, throws an exception upon validation errors.</param>
      <param name="addSchemaInfo">A <see cref="T:System.Boolean"></see> indicating whether to populate the post-schema-validation infoset (PSVI).</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Thrown for XML Schema Definition Language (XSD) validation errors.</exception>
    </member>
  </members>
</doc></span>