<?xml version="1.0" encoding="utf-8"?><span>
<doc>
  <assembly>
    <name>System.Reflection.Emit</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.AssemblyBuilder">
      <summary>Defines and represents a dynamic assembly.</summary>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.DefinedTypes">
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
      <summary>Defines a dynamic assembly that has the specified name and access rights.</summary>
      <param name="name">The name of the assembly.</param>
      <param name="access">The access rights of the assembly.</param>
      <returns>An object that represents the new assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
      <summary>Defines a new assembly that has the specified name, access rights, and attributes.</summary>
      <param name="name">The name of the assembly.</param>
      <param name="access">The access rights of the assembly.</param>
      <param name="assemblyAttributes">A collection that contains the attributes of the assembly.</param>
      <returns>An object that represents the new assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)">
      <summary>Defines a named transient dynamic module in this assembly.</summary>
      <param name="name">The name of the dynamic module. Must be less than 260 characters in length.</param>
      <returns>A <see cref="T:System.Reflection.Emit.ModuleBuilder"></see> representing the defined dynamic module.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="name">name</paramref> begins with white space.   -or-   The length of <paramref name="name">name</paramref> is zero.   -or-   The length of <paramref name="name">name</paramref> is greater than or equal to 260.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ExecutionEngineException">The assembly for default symbol writer cannot be loaded.   -or-   The type that implements the default symbol writer interface cannot be found.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to the specified object.</summary>
      <param name="obj">An object to compare with this instance, or null.</param>
      <returns>true if <paramref name="obj">obj</paramref> equals the type and value of this instance; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.FullName">
      <summary>Gets the display name of the current dynamic assembly.</summary>
      <returns>The display name of the dynamic assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)">
      <summary>Returns the dynamic module with the specified name.</summary>
      <param name="name">The name of the requested dynamic module.</param>
      <returns>A ModuleBuilder object representing the requested dynamic module.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name">name</paramref> is zero.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)">
      <summary>Returns information about how the given resource has been persisted.</summary>
      <param name="resourceName">The name of the resource.</param>
      <returns><see cref="T:System.Reflection.ManifestResourceInfo"></see> populated with information about the resource's topology, or null if the resource is not found.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames">
      <summary>Loads the specified manifest resource from this assembly.</summary>
      <returns>An array of type String containing the names of all the resources.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported on a dynamic assembly. To get the manifest resource names, use <see cref="M:System.Reflection.Assembly.GetManifestResourceNames"></see>.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)">
      <summary>Loads the specified manifest resource from this assembly.</summary>
      <param name="name">The name of the manifest resource being requested.</param>
      <returns>A <see cref="T:System.IO.Stream"></see> representing this manifest resource.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.IsDynamic">
      <summary>Gets a value that indicates that the current assembly is a dynamic assembly.</summary>
      <returns>Always true.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ManifestModule">
      <summary>Gets the module in the current <see cref="T:System.Reflection.Emit.AssemblyBuilder"></see> that contains the assembly manifest.</summary>
      <returns>The manifest module.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.Modules">
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Set a custom attribute on this assembly using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="con">con</paramref> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Set a custom attribute on this assembly using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute.</param>
      <param name="binaryAttribute">A byte blob representing the attributes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="con">con</paramref> or <paramref name="binaryAttribute">binaryAttribute</paramref> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="con">con</paramref> is not a RuntimeConstructorInfo object.</exception>
    </member>
    <member name="T:System.Reflection.Emit.AssemblyBuilderAccess">
      <summary>Defines the access modes for a dynamic assembly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.Run">
      <summary>The dynamic assembly can be executed, but not saved.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.RunAndCollect">
      <summary>The dynamic assembly will be automatically unloaded and its memory reclaimed, when it's no longer accessible.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Reflection.Emit.ConstructorBuilder">
      <summary>Defines and represents a constructor of a dynamic class.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Attributes">
      <summary>Retrieves the attributes for this constructor.</summary>
      <returns>Returns the attributes for this constructor.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.CallingConvention">
      <summary>Gets a <see cref="T:System.Reflection.CallingConventions"></see> value that depends on whether the declaring type is generic.</summary>
      <returns><see cref="F:System.Reflection.CallingConventions.HasThis"></see> if the declaring type is generic; otherwise, <see cref="F:System.Reflection.CallingConventions.Standard"></see>.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.DeclaringType">
      <summary>Retrieves a reference to the <see cref="T:System.Type"></see> object for the type that declares this member.</summary>
      <returns>Returns the <see cref="T:System.Type"></see> object for the type that declares this member.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>Defines a parameter of this constructor.</summary>
      <param name="iSequence">The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.</param>
      <param name="attributes">The attributes of the parameter.</param>
      <param name="strParamName">The name of the parameter. The name can be the null string.</param>
      <returns>Returns a ParameterBuilder object that represents the new parameter of this constructor.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="iSequence">iSequence</paramref> is less than 0 (zero), or it is greater than the number of parameters of the constructor.</exception>
      <exception cref="T:System.InvalidOperationException">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for this constructor.</summary>
      <param name="inherit">Controls inheritance of custom attributes from base classes. This parameter is ignored.</param>
      <returns>Returns an array of objects representing all the custom attributes of the constructor represented by this <see cref="T:System.Reflection.Emit.ConstructorBuilder"></see> instance.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns the custom attributes identified by the given type.</summary>
      <param name="attributeType">The custom attribute type.</param>
      <param name="inherit">Controls inheritance of custom attributes from base classes. This parameter is ignored.</param>
      <returns>Returns an array of type <see cref="T:System.Object"></see> representing the attributes of this constructor.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
      <summary>Gets an <see cref="T:System.Reflection.Emit.ILGenerator"></see> object, with the specified MSIL stream size, that can be used to build a method body for this constructor.</summary>
      <param name="streamSize">The size of the MSIL stream, in bytes.</param>
      <returns>An <see cref="T:System.Reflection.Emit.ILGenerator"></see> for this constructor.</returns>
      <exception cref="T:System.InvalidOperationException">The constructor is a default constructor.   -or-   The constructor has <see cref="T:System.Reflection.MethodAttributes"></see> or <see cref="T:System.Reflection.MethodImplAttributes"></see> flags indicating that it should not have a method body.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
      <summary>Gets an <see cref="T:System.Reflection.Emit.ILGenerator"></see> for this constructor.</summary>
      <returns>Returns an <see cref="T:System.Reflection.Emit.ILGenerator"></see> object for this constructor.</returns>
      <exception cref="T:System.InvalidOperationException">The constructor is a default constructor.   -or-   The constructor has <see cref="T:System.Reflection.MethodAttributes"></see> or <see cref="T:System.Reflection.MethodImplAttributes"></see> flags indicating that it should not have a method body.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags">
      <summary>Returns the method implementation flags for this constructor.</summary>
      <returns>The method implementation flags for this constructor.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
      <summary>Returns the parameters of this constructor.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.ParameterInfo"></see> objects that represent the parameters of this constructor.</returns>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see> has not been called on this constructor's type, in the .NET Framework versions 1.0 and 1.1.</exception>
      <exception cref="T:System.NotSupportedException"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see> has not been called on this constructor's type, in the .NET Framework version 2.0.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.InitLocals">
      <summary>Gets or sets whether the local variables in this constructor should be zero-initialized.</summary>
      <returns>Read/write. Gets or sets whether the local variables in this constructor should be zero-initialized.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes the constructor dynamically reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.</summary>
      <param name="invokeAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see>, such as InvokeMethod, NonPublic, and so on.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects using reflection. If binder is null, the default binder is used. See <see cref="T:System.Reflection.Binder"></see>.</param>
      <param name="parameters">An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters this should be null.</param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo"></see> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo"></see> for the current thread is used. (For example, this is necessary to convert a <see cref="T:System.String"></see> that represents 1000 to a <see cref="T:System.Double"></see> value, since 1000 is represented differently by different cultures.)</param>
      <returns>Returns an <see cref="T:System.Object"></see> that is the return value of the invoked constructor.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. You can retrieve the constructor using <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])"></see> and call <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)"></see> on the returned <see cref="T:System.Reflection.ConstructorInfo"></see>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Dynamically invokes the constructor reflected by this instance with the specified arguments, under the constraints of the specified Binder.</summary>
      <param name="obj">The object that needs to be reinitialized.</param>
      <param name="invokeAttr">One of the BindingFlags values that specifies the type of binding that is desired.</param>
      <param name="binder">A Binder that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If binder is null, then Binder.DefaultBinding is used.</param>
      <param name="parameters">An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters, this should be a null reference (Nothing in Visual Basic).</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo"></see> for the current thread is used.</param>
      <returns>An instance of the class associated with the constructor.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. You can retrieve the constructor using <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])"></see> and call <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)"></see> on the returned <see cref="T:System.Reflection.ConstructorInfo"></see>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Checks if the specified custom attribute type is defined.</summary>
      <param name="attributeType">A custom attribute type.</param>
      <param name="inherit">Controls inheritance of custom attributes from base classes. This parameter is ignored.</param>
      <returns>true if the specified custom attribute type is defined; otherwise, false.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. You can retrieve the constructor using <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])"></see> and call <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)"></see> on the returned <see cref="T:System.Reflection.ConstructorInfo"></see>.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
      <summary>Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.</summary>
      <returns>Returns the internal handle for the method. Use this handle to access the underlying metadata handle.</returns>
      <exception cref="T:System.NotSupportedException">This property is not supported on this class.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.MethodImplementationFlags">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Module">
      <summary>Gets the dynamic module in which this constructor is defined.</summary>
      <returns>A <see cref="T:System.Reflection.Module"></see> object that represents the dynamic module in which this constructor is defined.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Name">
      <summary>Retrieves the name of this constructor.</summary>
      <returns>Returns the name of this constructor.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
      <summary>Holds a reference to the <see cref="T:System.Type"></see> object from which this object was obtained.</summary>
      <returns>Returns the Type object from which this object was obtained.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Set a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="customBuilder">customBuilder</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Set a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute.</param>
      <param name="binaryAttribute">A byte blob representing the attributes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="con">con</paramref> or <paramref name="binaryAttribute">binaryAttribute</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary>Sets the method implementation flags for this constructor.</summary>
      <param name="attributes">The method implementation flags.</param>
      <exception cref="T:System.InvalidOperationException">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.ToString">
      <summary>Returns this <see cref="T:System.Reflection.Emit.ConstructorBuilder"></see> instance as a <see cref="T:System.String"></see>.</summary>
      <returns>Returns a <see cref="T:System.String"></see> containing the name, attributes, and exceptions of this constructor, followed by the current Microsoft intermediate language (MSIL) stream.</returns>
    </member>
    <member name="T:System.Reflection.Emit.EnumBuilder">
      <summary>Describes and represents an enumeration type.</summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Assembly">
      <summary>Retrieves the dynamic assembly that contains this enum definition.</summary>
      <returns>Read-only. The dynamic assembly that contains this enum definition.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
      <summary>Returns the full path of this enum qualified by the display name of the parent assembly.</summary>
      <returns>Read-only. The full path of this enum qualified by the display name of the parent assembly.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Attributes">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.BaseType">
      <summary>Returns the parent <see cref="T:System.Type"></see> of this type which is always <see cref="T:System.Enum"></see>.</summary>
      <returns>Read-only. The parent <see cref="T:System.Type"></see> of this type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.ContainsGenericParameters">
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.CreateTypeInfo">
      <summary>Gets a <see cref="T:System.Reflection.TypeInfo"></see> object that represents this enumeration.</summary>
      <returns>An object that represents this enumeration.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.DeclaringMethod">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
      <summary>Returns the type that declared this <see cref="T:System.Reflection.Emit.EnumBuilder"></see>.</summary>
      <returns>Read-only. The type that declared this <see cref="T:System.Reflection.Emit.EnumBuilder"></see>.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
      <summary>Defines the named static field in an enumeration type with the specified constant value.</summary>
      <param name="literalName">The name of the static field.</param>
      <param name="literalValue">The constant value of the literal.</param>
      <returns>The defined field.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.FullName">
      <summary>Returns the full path of this enum.</summary>
      <returns>Read-only. The full path of this enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.GenericParameterAttributes">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.GenericParameterPosition">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.GenericTypeArguments">
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetArrayRank">
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.ConstructorInfo"></see> objects representing the public and non-public constructors defined for this class, as specified.</summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see> : InvokeMethod, NonPublic, and so on.</param>
      <returns>Returns an array of <see cref="T:System.Reflection.ConstructorInfo"></see> objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns the custom attributes identified by the given type.</summary>
      <param name="attributeType">The Type object to which the custom attributes are applied.</param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>Returns an array of objects representing the attributes of this constructor that are of <see cref="T:System.Type"></see><paramref name="attributeType">attributeType</paramref>.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for this constructor.</summary>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>Returns an array of objects representing all the custom attributes of the constructor represented by this <see cref="T:System.Reflection.Emit.ConstructorBuilder"></see> instance.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetElementType">
      <summary>Calling this method always throws <see cref="T:System.NotSupportedException"></see>.</summary>
      <returns>This method is not supported. No value is returned.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType">
      <summary>Returns the underlying integer type of the current enumeration, which is set when the enumeration builder is defined.</summary>
      <returns>The underlying type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the event with the specified name.</summary>
      <param name="name">The name of the event to get.</param>
      <param name="bindingAttr">This invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see> : InvokeMethod, NonPublic, and so on.</param>
      <returns>Returns an <see cref="T:System.Reflection.EventInfo"></see> object representing the event declared or inherited by this type with the specified name. If there are no matches, null is returned.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents">
      <summary>Returns the events for the public events declared or inherited by this type.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.EventInfo"></see> objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public events that are declared by this type.</summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see>, such as InvokeMethod, NonPublic, and so on.</param>
      <returns>Returns an array of <see cref="T:System.Reflection.EventInfo"></see> objects representing the public and non-public events declared or inherited by this type. An empty array is returned if there are no events, as specified.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the field specified by the given name.</summary>
      <param name="name">The name of the field to get.</param>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see> : InvokeMethod, NonPublic, and so on.</param>
      <returns>Returns the <see cref="T:System.Reflection.FieldInfo"></see> object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches, then null is returned.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public fields that are declared by this type.</summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see>, such as InvokeMethod, NonPublic, and so on.</param>
      <returns>Returns an array of <see cref="T:System.Reflection.FieldInfo"></see> objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetGenericParameterConstraints">
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetGenericTypeDefinition">
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
      <summary>Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.</summary>
      <param name="name">The name of the interface.</param>
      <param name="ignoreCase">If true, the search is case-insensitive. If false, the search is case-sensitive.</param>
      <returns>Returns a <see cref="T:System.Type"></see> object representing the implemented interface. Returns null if no interface matching name is found.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
      <summary>Returns an interface mapping for the interface requested.</summary>
      <param name="interfaceType">The type of the interface for which the interface mapping is to be retrieved.</param>
      <returns>The requested interface mapping.</returns>
      <exception cref="T:System.ArgumentException">The type does not implement the interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
      <summary>Returns an array of all the interfaces implemented on this a class and its base classes.</summary>
      <returns>Returns an array of <see cref="T:System.Type"></see> objects representing the implemented interfaces. If none are defined, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Returns all members with the specified name, type, and binding that are declared or inherited by this type.</summary>
      <param name="name">The name of the member.</param>
      <param name="type">The type of member that is to be returned.</param>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see> : InvokeMethod, NonPublic, and so on.</param>
      <returns>Returns an array of <see cref="T:System.Reflection.MemberInfo"></see> objects representing the public and non-public members defined on this type if <paramref name="nonPublic">nonPublic</paramref> is used; otherwise, only the public members are returned.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>Returns the specified members declared or inherited by this type,.</summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see> : InvokeMethod, NonPublic, and so on.</param>
      <returns>Returns an array of <see cref="T:System.Reflection.MemberInfo"></see> objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>Returns all the public and non-public methods declared or inherited by this type, as specified.</summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see>, such as InvokeMethod, NonPublic, and so on.</param>
      <returns>Returns an array of <see cref="T:System.Reflection.MethodInfo"></see> objects representing the public and non-public methods defined on this type if <paramref name="nonPublic">nonPublic</paramref> is used; otherwise, only the public methods are returned.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the specified nested type that is declared by this type.</summary>
      <param name="name">The <see cref="T:System.String"></see> containing the name of the nested type to get.</param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"></see> that specify how the search is conducted.   -or-   Zero, to conduct a case-sensitive search for public methods.</param>
      <returns>A <see cref="T:System.Type"></see> object representing the nested type that matches the specified requirements, if found; otherwise, null.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public nested types that are declared or inherited by this type.</summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see>, such as InvokeMethod, NonPublic, and so on.</param>
      <returns>An array of <see cref="T:System.Type"></see> objects representing all the types nested within the current <see cref="T:System.Type"></see> that match the specified binding constraints.   An empty array of type <see cref="T:System.Type"></see>, if no types are nested within the current <see cref="T:System.Type"></see>, or if none of the nested types match the binding constraints.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>Returns all the public and non-public properties declared or inherited by this type, as specified.</summary>
      <param name="bindingAttr">This invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see> : InvokeMethod, NonPublic, and so on.</param>
      <returns>Returns an array of <see cref="T:System.Reflection.PropertyInfo"></see> objects representing the public and non-public properties defined on this type if <paramref name="nonPublic">nonPublic</paramref> is used; otherwise, only the public properties are returned.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.GUID">
      <summary>Returns the GUID of this enum.</summary>
      <returns>Read-only. The GUID of this enum.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the contraints of the specified binder and invocation attributes.</summary>
      <param name="name">The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.</param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from BindingFlags.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects using reflection. If binder is null, the default binder is used. See <see cref="T:System.Reflection.Binder"></see>.</param>
      <param name="target">The object on which to invoke the specified member. If the member is static, this parameter is ignored.</param>
      <param name="args">An argument list. This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.</param>
      <param name="modifiers">An array of the same length as args with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for details such as this.</param>
      <param name="culture">An instance of CultureInfo used to govern the coercion of types. If this is null, the CultureInfo for the current thread is used. (Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.)</param>
      <param name="namedParameters">Each parameter in the namedParameters array gets the value in the corresponding element in the args array. If the length of args is greater than the length of namedParameters, the remaining argument values are passed in order.</param>
      <returns>Returns the return value of the invoked member.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
      <summary>Gets a value that indicates whether a specified <see cref="T:System.Reflection.TypeInfo"></see> object can be assigned to this object.</summary>
      <param name="typeInfo">The object to test.</param>
      <returns>true if <paramref name="typeInfo">typeInfo</paramref> can be assigned to this object; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsConstructedGenericType">
      <summary>Gets a value that indicates whether this object represents a constructed generic type.</summary>
      <returns>true if this object represents a constructed generic type; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Checks if the specified custom attribute type is defined.</summary>
      <param name="attributeType">The Type object to which the custom attributes are applied.</param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>true if one or more instance of <paramref name="attributeType">attributeType</paramref> is defined on this member; otherwise, false.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsEnum">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsGenericParameter">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsGenericType">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsGenericTypeDefinition">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsSerializable">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsSZArray">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsTypeDefinition">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsVariableBoundArray">
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType">
      <summary>Returns a <see cref="T:System.Type"></see> object representing a one-dimensional array of the current type, with a lower bound of zero.</summary>
      <returns>A <see cref="T:System.Type"></see> object representing a one-dimensional array of the current type, with a lower bound of zero.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
      <summary>Returns a <see cref="T:System.Type"></see> object representing an array of the current type, with the specified number of dimensions.</summary>
      <param name="rank">The number of dimensions for the array. This number must be less than or equal to 32.</param>
      <returns>An object representing an array of the current type, with the specified number of dimensions.</returns>
      <exception cref="T:System.IndexOutOfRangeException"><paramref name="rank">rank</paramref> is less than 1.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeByRefType">
      <summary>Returns a <see cref="T:System.Type"></see> object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).</summary>
      <returns>A <see cref="T:System.Type"></see> object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeGenericType(System.Type[])">
      <param name="typeArguments"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakePointerType">
      <summary>Returns a <see cref="T:System.Type"></see> object that represents a pointer to the current type.</summary>
      <returns>A <see cref="T:System.Type"></see> object that represents a pointer to the current type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Module">
      <summary>Retrieves the dynamic module that contains this <see cref="T:System.Reflection.Emit.EnumBuilder"></see> definition.</summary>
      <returns>Read-only. The dynamic module that contains this <see cref="T:System.Reflection.Emit.EnumBuilder"></see> definition.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Name">
      <summary>Returns the name of this enum.</summary>
      <returns>Read-only. The name of this enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Namespace">
      <summary>Returns the namespace of this enum.</summary>
      <returns>Read-only. The namespace of this enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
      <summary>Returns the type that was used to obtain this <see cref="T:System.Reflection.Emit.EnumBuilder"></see>.</summary>
      <returns>Read-only. The type that was used to obtain this <see cref="T:System.Reflection.Emit.EnumBuilder"></see>.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Sets a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="con">con</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Sets a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute.</param>
      <param name="binaryAttribute">A byte blob representing the attributes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="con">con</paramref> or <paramref name="binaryAttribute">binaryAttribute</paramref> is null.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
      <summary>Retrieves the internal handle for this enum.</summary>
      <returns>Read-only. The internal handle for this enum.</returns>
      <exception cref="T:System.NotSupportedException">This property is not currently supported.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
      <summary>Returns the underlying field for this enum.</summary>
      <returns>Read-only. The underlying field for this enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
      <summary>Returns the underlying system type for this enum.</summary>
      <returns>Read-only. Returns the underlying system type.</returns>
    </member>
    <member name="T:System.Reflection.Emit.EventBuilder">
      <summary>Defines events for a class.</summary>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Adds one of the &quot;other&quot; methods associated with this event. &quot;Other&quot; methods are methods other than the &quot;on&quot; and &quot;raise&quot; methods associated with an event. This function can be called many times to add as many &quot;other&quot; methods.</summary>
      <param name="mdBuilder">A MethodBuilder object that represents the other method.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="mdBuilder">mdBuilder</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see> has been called on the enclosing type.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetAddOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Sets the method used to subscribe to this event.</summary>
      <param name="mdBuilder">A MethodBuilder object that represents the method used to subscribe to this event.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="mdBuilder">mdBuilder</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see> has been called on the enclosing type.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Sets a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to describe the custom attribute.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="con">con</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see> has been called on the enclosing type.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Set a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute.</param>
      <param name="binaryAttribute">A byte blob representing the attributes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="con">con</paramref> or <paramref name="binaryAttribute">binaryAttribute</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see> has been called on the enclosing type.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRaiseMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Sets the method used to raise this event.</summary>
      <param name="mdBuilder">A MethodBuilder object that represents the method used to raise this event.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="mdBuilder">mdBuilder</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see> has been called on the enclosing type.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Sets the method used to unsubscribe to this event.</summary>
      <param name="mdBuilder">A MethodBuilder object that represents the method used to unsubscribe to this event.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="mdBuilder">mdBuilder</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see> has been called on the enclosing type.</exception>
    </member>
    <member name="T:System.Reflection.Emit.FieldBuilder">
      <summary>Defines and represents a field. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Attributes">
      <summary>Indicates the attributes of this field. This property is read-only.</summary>
      <returns>The attributes of this field.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.DeclaringType">
      <summary>Indicates a reference to the <see cref="T:System.Type"></see> object for the type that declares this field. This property is read-only.</summary>
      <returns>A reference to the <see cref="T:System.Type"></see> object for the type that declares this field.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldHandle">
      <summary>Indicates the internal metadata handle for this field. This property is read-only.</summary>
      <returns>The internal metadata handle for this field.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldType">
      <summary>Indicates the <see cref="T:System.Type"></see> object that represents the type of this field. This property is read-only.</summary>
      <returns>The <see cref="T:System.Type"></see> object that represents the type of this field.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for this field.</summary>
      <param name="inherit">Controls inheritance of custom attributes from base classes.</param>
      <returns>An array of type <see cref="T:System.Object"></see> representing all the custom attributes of the constructor represented by this <see cref="T:System.Reflection.Emit.FieldBuilder"></see> instance.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns all the custom attributes defined for this field identified by the given type.</summary>
      <param name="attributeType">The custom attribute type.</param>
      <param name="inherit">Controls inheritance of custom attributes from base classes.</param>
      <returns>An array of type <see cref="T:System.Object"></see> representing all the custom attributes of the constructor represented by this <see cref="T:System.Reflection.Emit.FieldBuilder"></see> instance.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetValue(System.Object)">
      <summary>Retrieves the value of the field supported by the given object.</summary>
      <param name="obj">The object on which to access the field.</param>
      <returns>An <see cref="T:System.Object"></see> containing the value of the field reflected by this instance.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether an attribute having the specified type is defined on a field.</summary>
      <param name="attributeType">The type of the attribute.</param>
      <param name="inherit">Controls inheritance of custom attributes from base classes.</param>
      <returns>true if one or more instance of <paramref name="attributeType">attributeType</paramref> is defined on this field; otherwise, false.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the field using <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)"></see> and call <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)"></see> on the returned <see cref="T:System.Reflection.FieldInfo"></see>.</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Name">
      <summary>Indicates the name of this field. This property is read-only.</summary>
      <returns>A <see cref="T:System.String"></see> containing the name of this field.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.ReflectedType">
      <summary>Indicates the reference to the <see cref="T:System.Type"></see> object from which this object was obtained. This property is read-only.</summary>
      <returns>A reference to the <see cref="T:System.Type"></see> object from which this instance was obtained.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)">
      <summary>Sets the default value of this field.</summary>
      <param name="defaultValue">The new default value for this field.</param>
      <exception cref="T:System.InvalidOperationException">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.</exception>
      <exception cref="T:System.ArgumentException">The field is not one of the supported types.   -or-   The type of <paramref name="defaultValue">defaultValue</paramref> does not match the type of the field.   -or-   The field is of type <see cref="T:System.Object"></see> or other reference type, <paramref name="defaultValue">defaultValue</paramref> is not null, and the value cannot be assigned to the reference type.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Sets a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="con">con</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The parent type of this field is complete.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Sets a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute.</param>
      <param name="binaryAttribute">A byte blob representing the attributes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="con">con</paramref> or <paramref name="binaryAttribute">binaryAttribute</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The parent type of this field is complete.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)">
      <summary>Specifies the field layout.</summary>
      <param name="iOffset">The offset of the field within the type containing this field.</param>
      <exception cref="T:System.InvalidOperationException">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="iOffset">iOffset</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>Sets the value of the field supported by the given object.</summary>
      <param name="obj">The object on which to access the field.</param>
      <param name="val">The value to assign to the field.</param>
      <param name="invokeAttr">A member of IBinder that specifies the type of binding that is desired (for example, IBinder.CreateInstance, IBinder.ExactBinding).</param>
      <param name="binder">A set of properties and enabling for binding, coercion of argument types, and invocation of members using reflection. If binder is null, then IBinder.DefaultBinding is used.</param>
      <param name="culture">The software preferences of a particular culture.</param>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="T:System.Reflection.Emit.GenericTypeParameterBuilder">
      <summary>Defines and creates generic type parameters for dynamically defined generic types and methods. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly">
      <summary>Gets an <see cref="T:System.Reflection.Assembly"></see> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly"></see> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
      <summary>Gets null in all cases.</summary>
      <returns>A null reference (Nothing in Visual Basic) in all cases.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Attributes">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
      <summary>Gets the base type constraint of the current generic type parameter.</summary>
      <returns>A <see cref="T:System.Type"></see> object that represents the base type constraint of the generic type parameter, or null if the type parameter has no base type constraint.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
      <summary>Gets true in all cases.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
      <summary>Gets a <see cref="T:System.Reflection.MethodInfo"></see> that represents the declaring method, if the current <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"></see> represents a type parameter of a generic method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo"></see> that represents the declaring method, if the current <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"></see> represents a type parameter of a generic method; otherwise, null.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
      <summary>Gets the generic type definition or generic method definition to which the generic type parameter belongs.</summary>
      <returns>If the type parameter belongs to a generic type, a <see cref="T:System.Type"></see> object representing that generic type; if the type parameter belongs to a generic method, a <see cref="T:System.Type"></see> object representing that type that declared that generic method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
      <summary>Tests whether the given object is an instance of EventToken and is equal to the current instance.</summary>
      <param name="o">The object to be compared with the current instance.</param>
      <returns>Returns true if <paramref name="o">o</paramref> is an instance of EventToken and equals the current instance; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
      <summary>Gets null in all cases.</summary>
      <returns>A null reference (Nothing in Visual Basic) in all cases.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes">
      <summary>Gets a combination of <see cref="T:System.Reflection.GenericParameterAttributes"></see> flags that describe the covariance and special constraints of the current generic type parameter.</summary>
      <returns>A bitwise combination of values that describes the covariance and special constraints of the current generic type parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition">
      <summary>Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.</summary>
      <returns>The position of the type parameter in the type parameter list of the generic type or method that declared the parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericTypeArguments">
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetArrayRank">
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <param name="bindingAttr">Not supported.</param>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
      <summary>Throws a <see cref="T:System.NotSupportedException"></see> in all cases.</summary>
      <returns>The type referred to by the current array type, pointer type, or ByRef type; or null if the current type is not an array type, is not a pointer type, and is not passed by reference.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <param name="name">Not supported.</param>
      <param name="bindingAttr">Not supported.</param>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <param name="bindingAttr">Not supported.</param>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <param name="name">Not supported.</param>
      <param name="bindingAttr">Not supported.</param>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <param name="bindingAttr">Not supported.</param>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
      <summary>Not valid for generic type parameters.</summary>
      <returns>Not valid for generic type parameters.</returns>
      <exception cref="T:System.InvalidOperationException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericParameterConstraints">
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
      <summary>Not valid for generic type parameters.</summary>
      <returns>Not valid for generic type parameters.</returns>
      <exception cref="T:System.InvalidOperationException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode">
      <summary>Returns a 32-bit integer hash code for the current instance.</summary>
      <returns>A 32-bit integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <param name="name">The name of the interface.</param>
      <param name="ignoreCase">true to search without regard for case; false to make a case-sensitive search.</param>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <param name="interfaceType">A <see cref="T:System.Type"></see> object that represents the interface type for which the mapping is to be retrieved.</param>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <param name="name">Not supported.</param>
      <param name="type">Not supported.</param>
      <param name="bindingAttr">Not supported.</param>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <param name="bindingAttr">Not supported.</param>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <param name="bindingAttr">Not supported.</param>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <param name="name">Not supported.</param>
      <param name="bindingAttr">Not supported.</param>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <param name="bindingAttr">Not supported.</param>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <param name="bindingAttr">Not supported.</param>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <param name="name">Not supported.</param>
      <param name="invokeAttr">Not supported.</param>
      <param name="binder">Not supported.</param>
      <param name="target">Not supported.</param>
      <param name="args">Not supported.</param>
      <param name="modifiers">Not supported.</param>
      <param name="culture">Not supported.</param>
      <param name="namedParameters">Not supported.</param>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
      <summary>Throws a <see cref="T:System.NotSupportedException"></see> exception in all cases.</summary>
      <param name="typeInfo">The object to test.</param>
      <returns>Throws a <see cref="T:System.NotSupportedException"></see> exception in all cases.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
      <summary>Throws a <see cref="T:System.NotSupportedException"></see> exception in all cases.</summary>
      <param name="c">The object to test.</param>
      <returns>Throws a <see cref="T:System.NotSupportedException"></see> exception in all cases.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType">
      <summary>Gets a value that indicates whether this object represents a constructed generic type.</summary>
      <returns>true if this object represents a constructed generic type; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <param name="attributeType">Not supported.</param>
      <param name="inherit">Not supported.</param>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsEnum">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter">
      <summary>Gets true in all cases.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
      <summary>Returns false in all cases.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
      <summary>Gets false in all cases.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsSerializable">
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <param name="c">Not supported.</param>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray">
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
      <summary>Returns the type of a one-dimensional array whose element type is the generic type parameter.</summary>
      <returns>A <see cref="T:System.Type"></see> object that represents the type of a one-dimensional array whose element type is the generic type parameter.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
      <summary>Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.</summary>
      <param name="rank">The number of dimensions for the array.</param>
      <returns>A <see cref="T:System.Type"></see> object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions.</returns>
      <exception cref="T:System.IndexOutOfRangeException"><paramref name="rank">rank</paramref> is not a valid number of dimensions. For example, its value is less than 1.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
      <summary>Returns a <see cref="T:System.Type"></see> object that represents the current generic type parameter when passed as a reference parameter.</summary>
      <returns>A <see cref="T:System.Type"></see> object that represents the current generic type parameter when passed as a reference parameter.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
      <summary>Not valid for incomplete generic type parameters.</summary>
      <param name="typeArguments">An array of type arguments.</param>
      <returns>This method is invalid for incomplete generic type parameters.</returns>
      <exception cref="T:System.InvalidOperationException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
      <summary>Returns a <see cref="T:System.Type"></see> object that represents a pointer to the current generic type parameter.</summary>
      <returns>A <see cref="T:System.Type"></see> object that represents a pointer to the current generic type parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Module">
      <summary>Gets the dynamic module that contains the generic type parameter.</summary>
      <returns>A <see cref="T:System.Reflection.Module"></see> object that represents the dynamic module that contains the generic type parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Name">
      <summary>Gets the name of the generic type parameter.</summary>
      <returns>The name of the generic type parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace">
      <summary>Gets null in all cases.</summary>
      <returns>A null reference (Nothing in Visual Basic) in all cases.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType">
      <summary>Gets the <see cref="T:System.Type"></see> object that was used to obtain the <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"></see>.</summary>
      <returns>The <see cref="T:System.Type"></see> object that was used to obtain the <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"></see>.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
      <summary>Sets the base type that a type must inherit in order to be substituted for the type parameter.</summary>
      <param name="baseTypeConstraint">The <see cref="T:System.Type"></see> that must be inherited by any type that is to be substituted for the type parameter.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Set a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class that defines the custom attribute.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="customBuilder">customBuilder</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Sets a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute.</param>
      <param name="binaryAttribute">A byte blob representing the attribute.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="con">con</paramref> is null.   -or-  <paramref name="binaryAttribute">binaryAttribute</paramref> is a null reference.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
      <summary>Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.</summary>
      <param name="genericParameterAttributes">A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes"></see> values that represent the variance characteristics and special constraints of the generic type parameter.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
      <summary>Sets the interfaces a type must implement in order to be substituted for the type parameter.</summary>
      <param name="interfaceConstraints">An array of <see cref="T:System.Type"></see> objects that represent the interfaces a type must implement in order to be substituted for the type parameter.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString">
      <summary>Returns a string representation of the current generic type parameter.</summary>
      <returns>A string that contains the name of the generic type parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType">
      <summary>Gets the current generic type parameter.</summary>
      <returns>The current <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"></see> object.</returns>
    </member>
    <member name="T:System.Reflection.Emit.MethodBuilder">
      <summary>Defines and represents a method (or constructor) on a dynamic class.</summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Attributes">
      <summary>Retrieves the attributes for this method.</summary>
      <returns>Read-only. Retrieves the MethodAttributes for this method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.CallingConvention">
      <summary>Returns the calling convention of the method.</summary>
      <returns>Read-only. The calling convention of the method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
      <summary>Not supported for this type.</summary>
      <returns>Not supported.</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.DeclaringType">
      <summary>Returns the type that declares this method.</summary>
      <returns>Read-only. The type that declares this method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
      <summary>Sets the number of generic type parameters for the current method, specifies their names, and returns an array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"></see> objects that can be used to define their constraints.</summary>
      <param name="names">An array of strings that represent the names of the generic type parameters.</param>
      <returns>An array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"></see> objects representing the type parameters of the generic method.</returns>
      <exception cref="T:System.InvalidOperationException">Generic type parameters have already been defined for this method.   -or-   The method has been completed already.   -or-   The <see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)"></see> method has been called for the current method.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="names">names</paramref> is null.   -or-   An element of <paramref name="names">names</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="names">names</paramref> is an empty array.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method. Returns a ParameterBuilder that can be used to apply custom attributes.</summary>
      <param name="position">The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method.</param>
      <param name="attributes">The parameter attributes of the parameter.</param>
      <param name="strParamName">The name of the parameter. The name can be the null string.</param>
      <returns>Returns a ParameterBuilder object that represents a parameter of this method or the return value of this method.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The method has no parameters.   -or-  <paramref name="position">position</paramref> is less than zero.   -or-  <paramref name="position">position</paramref> is greater than the number of the method's parameters.</exception>
      <exception cref="T:System.InvalidOperationException">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.   -or-   For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"></see> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"></see> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)">
      <summary>Determines whether the given object is equal to this instance.</summary>
      <param name="obj">The object to compare with this MethodBuilder instance.</param>
      <returns>true if <paramref name="obj">obj</paramref> is an instance of MethodBuilder and is equal to this object; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition">
      <summary>Return the base implementation for a method.</summary>
      <returns>The base implementation of this method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns the custom attributes identified by the given type.</summary>
      <param name="attributeType">The custom attribute type.</param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the custom attributes.</param>
      <returns>Returns an array of objects representing the attributes of this method that are of type <paramref name="attributeType">attributeType</paramref>.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])"></see> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)"></see> on the returned <see cref="T:System.Reflection.MethodInfo"></see>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for this method.</summary>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the custom attributes.</param>
      <returns>Returns an array of objects representing all the custom attributes of this method.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])"></see> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)"></see> on the returned <see cref="T:System.Reflection.MethodInfo"></see>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments">
      <summary>Returns an array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"></see> objects that represent the type parameters of the method, if it is generic.</summary>
      <returns>An array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"></see> objects representing the type parameters, if the method is generic, or null if the method is not generic.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
      <summary>Returns this method.</summary>
      <returns>The current instance of <see cref="T:System.Reflection.Emit.MethodBuilder"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">The current method is not generic. That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"></see> property returns false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetHashCode">
      <summary>Gets the hash code for this method.</summary>
      <returns>The hash code for this method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
      <summary>Returns an ILGenerator for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.</summary>
      <returns>Returns an ILGenerator object for this method.</returns>
      <exception cref="T:System.InvalidOperationException">The method should not have a body because of its <see cref="T:System.Reflection.MethodAttributes"></see> or <see cref="T:System.Reflection.MethodImplAttributes"></see> flags, for example because it has the <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl"></see> flag.   -or-   The method is a generic method, but not a generic method definition. That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"></see> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"></see> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
      <summary>Returns an ILGenerator for this method with the specified Microsoft intermediate language (MSIL) stream size.</summary>
      <param name="size">The size of the MSIL stream, in bytes.</param>
      <returns>Returns an ILGenerator object for this method.</returns>
      <exception cref="T:System.InvalidOperationException">The method should not have a body because of its <see cref="T:System.Reflection.MethodAttributes"></see> or <see cref="T:System.Reflection.MethodImplAttributes"></see> flags, for example because it has the <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl"></see> flag.   -or-   The method is a generic method, but not a generic method definition. That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"></see> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"></see> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags">
      <summary>Returns the implementation flags for the method.</summary>
      <returns>Returns the implementation flags for the method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetParameters">
      <summary>Returns the parameters of this method.</summary>
      <returns>An array of ParameterInfo objects that represent the parameters of the method.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])"></see> and call GetParameters on the returned <see cref="T:System.Reflection.MethodInfo"></see>.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.InitLocals">
      <summary>Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized. The default value of this property is true.</summary>
      <returns>true if the local variables in this method should be zero initialized; otherwise false.</returns>
      <exception cref="T:System.InvalidOperationException">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"></see> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"></see> property is false. (Get or set.)</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Dynamically invokes the method reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.</summary>
      <param name="obj">The object on which to invoke the specified method. If the method is static, this parameter is ignored.</param>
      <param name="invokeAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see> : InvokeMethod, NonPublic, and so on.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is null, the default binder is used. For more details, see <see cref="T:System.Reflection.Binder"></see>.</param>
      <param name="parameters">An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this should be null.</param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo"></see> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo"></see> for the current thread is used. (Note that this is necessary to, for example, convert a <see cref="T:System.String"></see> that represents 1000 to a <see cref="T:System.Double"></see> value, since 1000 is represented differently by different cultures.)</param>
      <returns>Returns an object containing the return value of the invoked method.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])"></see> and call <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"></see> on the returned <see cref="T:System.Reflection.MethodInfo"></see>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Checks if the specified custom attribute type is defined.</summary>
      <param name="attributeType">The custom attribute type.</param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the custom attributes.</param>
      <returns>true if the specified custom attribute type is defined; otherwise, false.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])"></see> and call <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)"></see> on the returned <see cref="T:System.Reflection.MethodInfo"></see>.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
      <summary>Gets a value indicating whether the method is a generic method.</summary>
      <returns>true if the method is generic; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
      <summary>Gets a value indicating whether the current <see cref="T:System.Reflection.Emit.MethodBuilder"></see> object represents the definition of a generic method.</summary>
      <returns>true if the current <see cref="T:System.Reflection.Emit.MethodBuilder"></see> object represents the definition of a generic method; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
      <summary>Returns a generic method constructed from the current generic method definition using the specified generic type arguments.</summary>
      <param name="typeArguments">An array of <see cref="T:System.Type"></see> objects that represent the type arguments for the generic method.</param>
      <returns>A <see cref="T:System.Reflection.MethodInfo"></see> representing the generic method constructed from the current generic method definition using the specified generic type arguments.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
      <summary>Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.</summary>
      <returns>Read-only. The internal handle for the method. Use this handle to access the underlying metadata handle.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])"></see> and call <see cref="P:System.Reflection.MethodBase.MethodHandle"></see> on the returned <see cref="T:System.Reflection.MethodInfo"></see>.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.MethodImplementationFlags">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Module">
      <summary>Gets the module in which the current method is being defined.</summary>
      <returns>The <see cref="T:System.Reflection.Module"></see> in which the member represented by the current <see cref="T:System.Reflection.MemberInfo"></see> is being defined.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Name">
      <summary>Retrieves the name of this method.</summary>
      <returns>Read-only. Retrieves a string containing the simple name of this method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReflectedType">
      <summary>Retrieves the class that was used in reflection to obtain this object.</summary>
      <returns>Read-only. The type used to obtain this method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnParameter">
      <summary>Gets a <see cref="T:System.Reflection.ParameterInfo"></see> object that contains information about the return type of the method, such as whether the return type has custom modifiers.</summary>
      <returns>A <see cref="T:System.Reflection.ParameterInfo"></see> object that contains information about the return type.</returns>
      <exception cref="T:System.InvalidOperationException">The declaring type has not been created.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnType">
      <summary>Gets the return type of the method represented by this <see cref="T:System.Reflection.Emit.MethodBuilder"></see>.</summary>
      <returns>The return type of the method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
      <summary>Returns the custom attributes of the method's return type.</summary>
      <returns>Read-only. The custom attributes of the method's return type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Sets a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute.</param>
      <param name="binaryAttribute">A byte blob representing the attributes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="con">con</paramref> or <paramref name="binaryAttribute">binaryAttribute</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"></see> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"></see> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Sets a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to describe the custom attribute.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="customBuilder">customBuilder</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"></see> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"></see> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary>Sets the implementation flags for this method.</summary>
      <param name="attributes">The implementation flags to set.</param>
      <exception cref="T:System.InvalidOperationException">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.   -or-   For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"></see> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"></see> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
      <summary>Sets the number and types of parameters for a method.</summary>
      <param name="parameterTypes">An array of <see cref="T:System.Type"></see> objects representing the parameter types.</param>
      <exception cref="T:System.InvalidOperationException">The current method is generic, but is not a generic method definition. That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"></see> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"></see> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
      <summary>Sets the return type of the method.</summary>
      <param name="returnType">A <see cref="T:System.Type"></see> object that represents the return type of the method.</param>
      <exception cref="T:System.InvalidOperationException">The current method is generic, but is not a generic method definition. That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"></see> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"></see> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.</summary>
      <param name="returnType">The return type of the method.</param>
      <param name="returnTypeRequiredCustomModifiers">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see>, for the return type of the method. If the return type has no required custom modifiers, specify null.</param>
      <param name="returnTypeOptionalCustomModifiers">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see>, for the return type of the method. If the return type has no optional custom modifiers, specify null.</param>
      <param name="parameterTypes">The types of the parameters of the method.</param>
      <param name="parameterTypeRequiredCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see>. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="parameterTypeOptionalCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see>. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.</param>
      <exception cref="T:System.InvalidOperationException">The current method is generic, but is not a generic method definition. That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod"></see> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"></see> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.ToString">
      <summary>Returns this MethodBuilder instance as a string.</summary>
      <returns>Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.</returns>
    </member>
    <member name="T:System.Reflection.Emit.ModuleBuilder">
      <summary>Defines and represents a module in a dynamic assembly.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Assembly">
      <summary>Gets the dynamic assembly that defined this instance of <see cref="T:System.Reflection.Emit.ModuleBuilder"></see>.</summary>
      <returns>The dynamic assembly that defined the current dynamic module.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions">
      <summary>Completes the global function definitions and global data definitions for this dynamic module.</summary>
      <exception cref="T:System.InvalidOperationException">This method was called previously.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>Defines an enumeration type that is a value type with a single non-static field called <paramref name="value__">value__</paramref> of the specified type.</summary>
      <param name="name">The full path of the enumeration type. name cannot contain embedded nulls.</param>
      <param name="visibility">The type attributes for the enumeration. The attributes are any bits defined by <see cref="F:System.Reflection.TypeAttributes.VisibilityMask"></see>.</param>
      <param name="underlyingType">The underlying type for the enumeration. This must be a built-in integer type.</param>
      <returns>The defined enumeration.</returns>
      <exception cref="T:System.ArgumentException">Attributes other than visibility attributes are provided.   -or-   An enumeration with the given name exists in the parent assembly of this module.   -or-   The visibility attributes do not match the scope of the enumeration. For example, <see cref="F:System.Reflection.TypeAttributes.NestedPublic"></see> is specified for <paramref name="visibility">visibility</paramref>, but the enumeration is not a nested type.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary>Defines a global method with the specified name, attributes, return type, and parameter types.</summary>
      <param name="name">The name of the method. name cannot contain embedded nulls.</param>
      <param name="attributes">The attributes of the method. attributes must include <see cref="F:System.Reflection.MethodAttributes.Static"></see>.</param>
      <param name="returnType">The return type of the method.</param>
      <param name="parameterTypes">The types of the method's parameters.</param>
      <returns>The defined global method.</returns>
      <exception cref="T:System.ArgumentException">The method is not static. That is, <paramref name="attributes">attributes</paramref> does not include <see cref="F:System.Reflection.MethodAttributes.Static"></see>.   -or-   The length of <paramref name="name">name</paramref> is zero   -or-   An element in the <see cref="T:System.Type"></see> array is null.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions"></see> has been previously called.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>Defines a global method with the specified name, attributes, calling convention, return type, and parameter types.</summary>
      <param name="name">The name of the method. name cannot contain embedded nulls.</param>
      <param name="attributes">The attributes of the method. attributes must include <see cref="F:System.Reflection.MethodAttributes.Static"></see>.</param>
      <param name="callingConvention">The calling convention for the method.</param>
      <param name="returnType">The return type of the method.</param>
      <param name="parameterTypes">The types of the method's parameters.</param>
      <returns>The defined global method.</returns>
      <exception cref="T:System.ArgumentException">The method is not static. That is, <paramref name="attributes">attributes</paramref> does not include <see cref="F:System.Reflection.MethodAttributes.Static"></see>.   -or-   An element in the <see cref="T:System.Type"></see> array is null.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions"></see> has been previously called.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Defines a global method with the specified name, attributes, calling convention, return type, custom modifiers for the return type, parameter types, and custom modifiers for the parameter types.</summary>
      <param name="name">The name of the method. name cannot contain embedded null characters.</param>
      <param name="attributes">The attributes of the method. attributes must include <see cref="F:System.Reflection.MethodAttributes.Static"></see>.</param>
      <param name="callingConvention">The calling convention for the method.</param>
      <param name="returnType">The return type of the method.</param>
      <param name="requiredReturnTypeCustomModifiers">An array of types representing the required custom modifiers for the return type, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see> or <see cref="T:System.Runtime.CompilerServices.IsBoxed"></see>. If the return type has no required custom modifiers, specify null.</param>
      <param name="optionalReturnTypeCustomModifiers">An array of types representing the optional custom modifiers for the return type, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see> or <see cref="T:System.Runtime.CompilerServices.IsBoxed"></see>. If the return type has no optional custom modifiers, specify null.</param>
      <param name="parameterTypes">The types of the method's parameters.</param>
      <param name="requiredParameterTypeCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter of the global method. If a particular argument has no required custom modifiers, specify null instead of an array of types. If the global method has no arguments, or if none of the arguments have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="optionalParameterTypeCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter. If a particular argument has no optional custom modifiers, specify null instead of an array of types. If the global method has no arguments, or if none of the arguments have optional custom modifiers, specify null instead of an array of arrays.</param>
      <returns>The defined global method.</returns>
      <exception cref="T:System.ArgumentException">The method is not static. That is, <paramref name="attributes">attributes</paramref> does not include <see cref="F:System.Reflection.MethodAttributes.Static"></see>.   -or-   An element in the <see cref="T:System.Type"></see> array is null.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions"></see> method has been previously called.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary>Defines an initialized data field in the .sdata section of the portable executable (PE) file.</summary>
      <param name="name">The name used to refer to the data. name cannot contain embedded nulls.</param>
      <param name="data">The binary large object (BLOB) of data.</param>
      <param name="attributes">The attributes for the field. The default is Static.</param>
      <returns>A field to reference the data.</returns>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name">name</paramref> is zero.   -or-   The size of <paramref name="data">data</paramref> is less than or equal to zero or greater than or equal to 0x3f0000.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> or <paramref name="data">data</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions"></see> has been previously called.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary>Constructs a TypeBuilder given the type name, attributes, the type that the defined type extends, the packing size of the defined type, and the total size of the defined type.</summary>
      <param name="name">The full path of the type. name cannot contain embedded nulls.</param>
      <param name="attr">The attributes of the defined type.</param>
      <param name="parent">The type that the defined type extends.</param>
      <param name="packingSize">The packing size of the type.</param>
      <param name="typesize">The total size of the type.</param>
      <returns>A TypeBuilder created with all of the requested attributes.</returns>
      <exception cref="T:System.ArgumentException">A type with the given name exists in the parent assembly of this module.   -or-   Nested type attributes are set on a type that is not nested.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary>Constructs a TypeBuilder given the type name, attributes, the type that the defined type extends, and the interfaces that the defined type implements.</summary>
      <param name="name">The full path of the type. name cannot contain embedded nulls.</param>
      <param name="attr">The attributes to be associated with the type.</param>
      <param name="parent">The type that the defined type extends.</param>
      <param name="interfaces">The list of interfaces that the type implements.</param>
      <returns>A TypeBuilder created with all of the requested attributes.</returns>
      <exception cref="T:System.ArgumentException">A type with the given name exists in the parent assembly of this module.   -or-   Nested type attributes are set on a type that is not nested.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary>Constructs a TypeBuilder given the type name, the attributes, the type that the defined type extends, and the total size of the type.</summary>
      <param name="name">The full path of the type. name cannot contain embedded nulls.</param>
      <param name="attr">The attributes of the defined type.</param>
      <param name="parent">The type that the defined type extends.</param>
      <param name="typesize">The total size of the type.</param>
      <returns>A TypeBuilder object.</returns>
      <exception cref="T:System.ArgumentException">A type with the given name exists in the parent assembly of this module.   -or-   Nested type attributes are set on a type that is not nested.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary>Constructs a TypeBuilder given the type name, the attributes, the type that the defined type extends, and the packing size of the type.</summary>
      <param name="name">The full path of the type. name cannot contain embedded nulls.</param>
      <param name="attr">The attributes of the defined type.</param>
      <param name="parent">The type that the defined type extends.</param>
      <param name="packsize">The packing size of the type.</param>
      <returns>A TypeBuilder object.</returns>
      <exception cref="T:System.ArgumentException">A type with the given name exists in the parent assembly of this module.   -or-   Nested type attributes are set on a type that is not nested.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)">
      <summary>Constructs a TypeBuilder given the type name and the type attributes.</summary>
      <param name="name">The full path of the type. name cannot contain embedded nulls.</param>
      <param name="attr">The attributes of the defined type.</param>
      <returns>A TypeBuilder created with all of the requested attributes.</returns>
      <exception cref="T:System.ArgumentException">A type with the given name exists in the parent assembly of this module.   -or-   Nested type attributes are set on a type that is not nested.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)">
      <summary>Constructs a TypeBuilder for a private type with the specified name in this module.</summary>
      <param name="name">The full path of the type, including the namespace. name cannot contain embedded nulls.</param>
      <returns>A private type with the specified name.</returns>
      <exception cref="T:System.ArgumentException">A type with the given name exists in the parent assembly of this module.   -or-   Nested type attributes are set on a type that is not nested.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>Constructs a TypeBuilder given type name, its attributes, and the type that the defined type extends.</summary>
      <param name="name">The full path of the type. name cannot contain embedded nulls.</param>
      <param name="attr">The attribute to be associated with the type.</param>
      <param name="parent">The type that the defined type extends.</param>
      <returns>A TypeBuilder created with all of the requested attributes.</returns>
      <exception cref="T:System.ArgumentException">A type with the given name exists in the parent assembly of this module.   -or-   Nested type attributes are set on a type that is not nested.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary>Defines an uninitialized data field in the .sdata section of the portable executable (PE) file.</summary>
      <param name="name">The name used to refer to the data. name cannot contain embedded nulls.</param>
      <param name="size">The size of the data field.</param>
      <param name="attributes">The attributes for the field.</param>
      <returns>A field to reference the data.</returns>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name">name</paramref> is zero.   -or-  <paramref name="size">size</paramref> is less than or equal to zero, or greater than or equal to 0x003f0000.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions"></see> has been previously called.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to the specified object.</summary>
      <param name="obj">An object to compare with this instance, or null.</param>
      <returns>true if <paramref name="obj">obj</paramref> equals the type and value of this instance; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.FullyQualifiedName">
      <summary>Gets a String representing the fully qualified name and path to this module.</summary>
      <returns>The fully qualified module name.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>Returns the named method on an array class.</summary>
      <param name="arrayClass">An array class.</param>
      <param name="methodName">The name of a method on the array class.</param>
      <param name="callingConvention">The method's calling convention.</param>
      <param name="returnType">The return type of the method.</param>
      <param name="parameterTypes">The types of the method's parameters.</param>
      <returns>The named method on an array class.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="arrayClass">arrayClass</paramref> is not an array.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="arrayClass">arrayClass</paramref> or <paramref name="methodName">methodName</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Name">
      <summary>A string that indicates that this is an in-memory module.</summary>
      <returns>Text that indicates that this is an in-memory module.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Applies a custom attribute to this module by using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class that specifies the custom attribute to apply.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="customBuilder">customBuilder</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Applies a custom attribute to this module by using a specified binary large object (BLOB) that represents the attribute.</summary>
      <param name="con">The constructor for the custom attribute.</param>
      <param name="binaryAttribute">A byte BLOB representing the attribute.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="con">con</paramref> or <paramref name="binaryAttribute">binaryAttribute</paramref> is null.</exception>
    </member>
    <member name="T:System.Reflection.Emit.PropertyBuilder">
      <summary>Defines the properties for a type.</summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Adds one of the other methods associated with this property.</summary>
      <param name="mdBuilder">A MethodBuilder object that represents the other method.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="mdBuilder">mdBuilder</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see> has been called on the enclosing type.</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Attributes">
      <summary>Gets the attributes for this property.</summary>
      <returns>Attributes of this property.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanRead">
      <summary>Gets a value indicating whether the property can be read.</summary>
      <returns>true if this property can be read; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
      <summary>Gets a value indicating whether the property can be written to.</summary>
      <returns>true if this property can be written to; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
      <summary>Gets the class that declares this member.</summary>
      <returns>The Type object for the class that declares this member.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
      <summary>Returns an array of the public and non-public get and set accessors on this property.</summary>
      <param name="nonPublic">Indicates whether non-public methods should be returned in the MethodInfo array. true if non-public methods are to be included; otherwise, false.</param>
      <returns>An array of type MethodInfo containing the matching public or non-public accessors, or an empty array if matching accessors do not exist on this property.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of all the custom attributes for this property.</summary>
      <param name="inherit">If true, walks up this property's inheritance chain to find the custom attributes</param>
      <returns>An array of all the custom attributes.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes identified by <see cref="T:System.Type"></see>.</summary>
      <param name="attributeType">An array of custom attributes identified by type.</param>
      <param name="inherit">If true, walks up this property's inheritance chain to find the custom attributes.</param>
      <returns>An array of custom attributes defined on this reflected member, or null if no attributes are defined on this member.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
      <summary>Returns the public and non-public get accessor for this property.</summary>
      <param name="nonPublic">Indicates whether non-public get accessors should be returned. true if non-public methods are to be included; otherwise, false.</param>
      <returns>A MethodInfo object representing the get accessor for this property, if <paramref name="nonPublic">nonPublic</paramref> is true. Returns null if <paramref name="nonPublic">nonPublic</paramref> is false and the get accessor is non-public, or if <paramref name="nonPublic">nonPublic</paramref> is true but no get accessors exist.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
      <summary>Returns an array of all the index parameters for the property.</summary>
      <returns>An array of type ParameterInfo containing the parameters for the indexes.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
      <summary>Returns the set accessor for this property.</summary>
      <param name="nonPublic">Indicates whether the accessor should be returned if it is non-public. true if non-public methods are to be included; otherwise, false.</param>
      <returns><p sourcefile="System.Reflection.Emit.yml" sourcestartlinenumber="1" sourceendlinenumber="2"><p sourcefile="System.Reflection.Emit.yml" sourcestartlinenumber="1" sourceendlinenumber="1">The property&amp;#39;s <code>Set</code> method, or <code>null</code>, as shown in the following table.  </p>
 <table><thead><tr><th> Value  <p>
<p sourcefile="System.Reflection.Emit.yml" sourcestartlinenumber="4" sourceendlinenumber="4"> </th><th> Condition  <p>
<p sourcefile="System.Reflection.Emit.yml" sourcestartlinenumber="6" sourceendlinenumber="6"> </th></tr></thead><tbody><tr><td> A <xref href="System.Reflection.MethodInfo"></xref> object representing the Set method for this property.  <p>
<p sourcefile="System.Reflection.Emit.yml" sourcestartlinenumber="8" sourceendlinenumber="8"> </td><td> The set accessor is public.  <p>
<p sourcefile="System.Reflection.Emit.yml" sourcestartlinenumber="10" sourceendlinenumber="10"> <code data-dev-comment-type="paramref">nonPublic</code> is true and non-public methods can be returned.  </p>
<p sourcefile="System.Reflection.Emit.yml" sourcestartlinenumber="12" sourceendlinenumber="12"> </td></tr><tr><td> null  <p>
<p sourcefile="System.Reflection.Emit.yml" sourcestartlinenumber="14" sourceendlinenumber="14"> </td><td><code data-dev-comment-type="paramref">nonPublic</code> is true, but the property is read-only.  <p>
<p sourcefile="System.Reflection.Emit.yml" sourcestartlinenumber="16" sourceendlinenumber="16"> <code data-dev-comment-type="paramref">nonPublic</code> is false and the set accessor is non-public.  </p>
<p sourcefile="System.Reflection.Emit.yml" sourcestartlinenumber="18" sourceendlinenumber="18"> </td></tr></tbody></table></p>
</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
      <summary>Gets the value of the indexed property by calling the property's getter method.</summary>
      <param name="obj">The object whose property value will be returned.</param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties.</param>
      <returns>The value of the specified indexed property.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Gets the value of a property having the specified binding, index, and CultureInfo.</summary>
      <param name="obj">The object whose property value will be returned.</param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from BindingFlags : InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty. A suitable invocation attribute must be specified. If a static member is to be invoked, the Static flag of BindingFlags must be set.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects using reflection. If binder is null, the default binder is used.</param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties.</param>
      <param name="culture">The CultureInfo object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the CultureInfo.Parent method will be called successively in search of a match. If this value is null, the CultureInfo is obtained from the CultureInfo.CurrentUICulture property.</param>
      <returns>The property value for <paramref name="obj">obj</paramref>.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether one or more instance of <paramref name="attributeType">attributeType</paramref> is defined on this property.</summary>
      <param name="attributeType">The Type object to which the custom attributes are applied.</param>
      <param name="inherit">Specifies whether to walk up this property's inheritance chain to find the custom attributes.</param>
      <returns>true if one or more instance of <paramref name="attributeType">attributeType</paramref> is defined on this property; otherwise false.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Module">
      <summary>Gets the module in which the type that declares the current property is being defined.</summary>
      <returns>The <see cref="T:System.Reflection.Module"></see> in which the type that declares the current property is defined.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Name">
      <summary>Gets the name of this member.</summary>
      <returns>A <see cref="T:System.String"></see> containing the name of this member.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
      <summary>Gets the type of the field of this property.</summary>
      <returns>The type of this property.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance of MemberInfo.</summary>
      <returns>The Type object through which this MemberInfo object was obtained.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
      <summary>Sets the default value of this property.</summary>
      <param name="defaultValue">The default value of this property.</param>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see> has been called on the enclosing type.</exception>
      <exception cref="T:System.ArgumentException">The property is not one of the supported types.   -or-   The type of <paramref name="defaultValue">defaultValue</paramref> does not match the type of the property.   -or-   The property is of type <see cref="T:System.Object"></see> or other reference type, <paramref name="defaultValue">defaultValue</paramref> is not null, and the value cannot be assigned to the reference type.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Set a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="customBuilder">customBuilder</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">if <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see> has been called on the enclosing type.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Set a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute.</param>
      <param name="binaryAttribute">A byte blob representing the attributes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="con">con</paramref> or <paramref name="binaryAttribute">binaryAttribute</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see> has been called on the enclosing type.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Sets the method that gets the property value.</summary>
      <param name="mdBuilder">A MethodBuilder object that represents the method that gets the property value.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="mdBuilder">mdBuilder</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see> has been called on the enclosing type.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Sets the method that sets the property value.</summary>
      <param name="mdBuilder">A MethodBuilder object that represents the method that sets the property value.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="mdBuilder">mdBuilder</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see> has been called on the enclosing type.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
      <summary>Sets the value of the property with optional index values for index properties.</summary>
      <param name="obj">The object whose property value will be set.</param>
      <param name="value">The new value for this property.</param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties.</param>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Sets the property value for the given object to the given value.</summary>
      <param name="obj">The object whose property value will be returned.</param>
      <param name="value">The new value for this property.</param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from BindingFlags : InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty. A suitable invocation attribute must be specified. If a static member is to be invoked, the Static flag of BindingFlags must be set.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects using reflection. If binder is null, the default binder is used.</param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties.</param>
      <param name="culture">The CultureInfo object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the CultureInfo.Parent method will be called successively in search of a match. If this value is null, the CultureInfo is obtained from the CultureInfo.CurrentUICulture property.</param>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="T:System.Reflection.Emit.TypeBuilder">
      <summary>Defines and creates new instances of classes during run time.</summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)">
      <summary>Adds an interface that this type implements.</summary>
      <param name="interfaceType">The interface that this type implements.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="interfaceType">interfaceType</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Assembly">
      <summary>Retrieves the dynamic assembly that contains this type definition.</summary>
      <returns>Read-only. Retrieves the dynamic assembly that contains this type definition.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName">
      <summary>Returns the full name of this type qualified by the display name of the assembly.</summary>
      <returns>Read-only. The full name of this type qualified by the display name of the assembly.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Attributes">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.BaseType">
      <summary>Retrieves the base type of this type.</summary>
      <returns>Read-only. Retrieves the base type of this type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.ContainsGenericParameters">
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateType">
      <summary>Creates a <see cref="T:System.Type"></see> object for the class. After defining fields and methods on the class, CreateType is called in order to load its Type object.</summary>
      <returns>Returns the new <see cref="T:System.Type"></see> object for this class.</returns>
      <exception cref="T:System.InvalidOperationException">The enclosing type has not been created.   -or-   This type is non-abstract and contains an abstract method.   -or-   This type is not an abstract class or an interface and has a method without a method body.</exception>
      <exception cref="T:System.NotSupportedException">The type contains invalid Microsoft intermediate language (MSIL) code.   -or-   The branch target is specified using a 1-byte offset, but the target is at a distance greater than 127 bytes from the branch.</exception>
      <exception cref="T:System.TypeLoadException">The type cannot be loaded. For example, it contains a static method that has the calling convention <see cref="F:System.Reflection.CallingConventions.HasThis"></see>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateTypeInfo">
      <summary>Gets a <see cref="T:System.Reflection.TypeInfo"></see> object that represents this type.</summary>
      <returns>An object that represents this type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringMethod">
      <summary>Gets the method that declared the current generic type parameter.</summary>
      <returns>A <see cref="T:System.Reflection.MethodBase"></see> that represents the method that declared the current type, if the current type is a generic type parameter; otherwise, null.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringType">
      <summary>Returns the type that declared this type.</summary>
      <returns>Read-only. The type that declared this type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])">
      <summary>Adds a new constructor to the type, with the given attributes and signature.</summary>
      <param name="attributes">The attributes of the constructor.</param>
      <param name="callingConvention">The calling convention of the constructor.</param>
      <param name="parameterTypes">The parameter types of the constructor.</param>
      <returns>The defined constructor.</returns>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])">
      <summary>Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.</summary>
      <param name="attributes">The attributes of the constructor.</param>
      <param name="callingConvention">The calling convention of the constructor.</param>
      <param name="parameterTypes">The parameter types of the constructor.</param>
      <param name="requiredCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see>. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="optionalCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see>. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.</param>
      <returns>The defined constructor.</returns>
      <exception cref="T:System.ArgumentException">The size of <paramref name="requiredCustomModifiers">requiredCustomModifiers</paramref> or <paramref name="optionalCustomModifiers">optionalCustomModifiers</paramref> does not equal the size of <paramref name="parameterTypes">parameterTypes</paramref>.</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.   -or-   For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"></see> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"></see> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)">
      <summary>Defines the default constructor. The constructor defined here will simply call the default constructor of the parent.</summary>
      <param name="attributes">A MethodAttributes object representing the attributes to be applied to the constructor.</param>
      <returns>Returns the constructor.</returns>
      <exception cref="T:System.NotSupportedException">The parent type (base type) does not have a default constructor.</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.   -or-   For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"></see> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"></see> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)">
      <summary>Adds a new event to the type, with the given name, attributes and event type.</summary>
      <param name="name">The name of the event. name cannot contain embedded nulls.</param>
      <param name="attributes">The attributes of the event.</param>
      <param name="eventtype">The type of the event.</param>
      <returns>The defined event.</returns>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name">name</paramref> is zero.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.   -or-  <paramref name="eventtype">eventtype</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)">
      <summary>Adds a new field to the type, with the given name, attributes, and field type.</summary>
      <param name="fieldName">The name of the field. fieldName cannot contain embedded nulls.</param>
      <param name="type">The type of the field</param>
      <param name="attributes">The attributes of the field.</param>
      <returns>The defined field.</returns>
      <exception cref="T:System.ArgumentException">The length of <paramref name="fieldName">fieldName</paramref> is zero.   -or-  <paramref name="type">type</paramref> is System.Void.   -or-   A total size was specified for the parent class of this field.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="fieldName">fieldName</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)">
      <summary>Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.</summary>
      <param name="fieldName">The name of the field. fieldName cannot contain embedded nulls.</param>
      <param name="type">The type of the field</param>
      <param name="requiredCustomModifiers">An array of types representing the required custom modifiers for the field, such as <see cref="T:Microsoft.VisualC.IsConstModifier"></see>.</param>
      <param name="optionalCustomModifiers">An array of types representing the optional custom modifiers for the field, such as <see cref="T:Microsoft.VisualC.IsConstModifier"></see>.</param>
      <param name="attributes">The attributes of the field.</param>
      <returns>The defined field.</returns>
      <exception cref="T:System.ArgumentException">The length of <paramref name="fieldName">fieldName</paramref> is zero.   -or-  <paramref name="type">type</paramref> is System.Void.   -or-   A total size was specified for the parent class of this field.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="fieldName">fieldName</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])">
      <summary>Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"></see> objects that can be used to set their constraints.</summary>
      <param name="names">An array of names for the generic type parameters.</param>
      <returns>An array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"></see> objects that can be used to define the constraints of the generic type parameters for the current type.</returns>
      <exception cref="T:System.InvalidOperationException">Generic type parameters have already been defined for this type.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="names">names</paramref> is null.   -or-   An element of <paramref name="names">names</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="names">names</paramref> is an empty array.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary>Defines initialized data field in the .sdata section of the portable executable (PE) file.</summary>
      <param name="name">The name used to refer to the data. name cannot contain embedded nulls.</param>
      <param name="data">The blob of data.</param>
      <param name="attributes">The attributes for the field.</param>
      <returns>A field to reference the data.</returns>
      <exception cref="T:System.ArgumentException">Length of <paramref name="name">name</paramref> is zero.   -or-   The size of the data is less than or equal to zero, or greater than or equal to 0x3f0000.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> or <paramref name="data">data</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see> has been previously called.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)">
      <summary>Adds a new method to the type, with the specified name and method attributes.</summary>
      <param name="name">The name of the method. name cannot contain embedded nulls.</param>
      <param name="attributes">The attributes of the method.</param>
      <returns>A <see cref="T:System.Reflection.Emit.MethodBuilder"></see> representing the newly defined method.</returns>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name">name</paramref> is zero.   -or-   The type of the parent of this method is an interface, and this method is not virtual (Overridable in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.   -or-   For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"></see> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"></see> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)">
      <summary>Adds a new method to the type, with the specified name, method attributes, and calling convention.</summary>
      <param name="name">The name of the method. name cannot contain embedded nulls.</param>
      <param name="attributes">The attributes of the method.</param>
      <param name="callingConvention">The calling convention of the method.</param>
      <returns>A <see cref="T:System.Reflection.Emit.MethodBuilder"></see> representing the newly defined method.</returns>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name">name</paramref> is zero.   -or-   The type of the parent of this method is an interface and this method is not virtual (Overridable in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.   -or-   For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"></see> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"></see> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary>Adds a new method to the type, with the specified name, method attributes, and method signature.</summary>
      <param name="name">The name of the method. name cannot contain embedded nulls.</param>
      <param name="attributes">The attributes of the method.</param>
      <param name="returnType">The return type of the method.</param>
      <param name="parameterTypes">The types of the parameters of the method.</param>
      <returns>The defined method.</returns>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name">name</paramref> is zero.   -or-   The type of the parent of this method is an interface, and this method is not virtual (Overridable in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.   -or-   For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"></see> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"></see> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.</summary>
      <param name="name">The name of the method. name cannot contain embedded nulls.</param>
      <param name="attributes">The attributes of the method.</param>
      <param name="callingConvention">The calling convention of the method.</param>
      <param name="returnType">The return type of the method.</param>
      <param name="parameterTypes">The types of the parameters of the method.</param>
      <returns>A <see cref="T:System.Reflection.Emit.MethodBuilder"></see> representing the newly defined method.</returns>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name">name</paramref> is zero.   -or-   The type of the parent of this method is an interface, and this method is not virtual (Overridable in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.   -or-   For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"></see> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"></see> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.</summary>
      <param name="name">The name of the method. name cannot contain embedded nulls.</param>
      <param name="attributes">The attributes of the method.</param>
      <param name="callingConvention">The calling convention of the method.</param>
      <param name="returnType">The return type of the method.</param>
      <param name="returnTypeRequiredCustomModifiers">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see>, for the return type of the method. If the return type has no required custom modifiers, specify null.</param>
      <param name="returnTypeOptionalCustomModifiers">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see>, for the return type of the method. If the return type has no optional custom modifiers, specify null.</param>
      <param name="parameterTypes">The types of the parameters of the method.</param>
      <param name="parameterTypeRequiredCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see>. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="parameterTypeOptionalCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see>. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.</param>
      <returns>A <see cref="T:System.Reflection.Emit.MethodBuilder"></see> object representing the newly added method.</returns>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name">name</paramref> is zero.   -or-   The type of the parent of this method is an interface, and this method is not virtual (Overridable in Visual Basic).   -or-   The size of <paramref name="parameterTypeRequiredCustomModifiers">parameterTypeRequiredCustomModifiers</paramref> or <paramref name="parameterTypeOptionalCustomModifiers">parameterTypeOptionalCustomModifiers</paramref> does not equal the size of <paramref name="parameterTypes">parameterTypes</paramref>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.   -or-   For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"></see> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"></see> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>Specifies a given method body that implements a given method declaration, potentially with a different name.</summary>
      <param name="methodInfoBody">The method body to be used. This should be a MethodBuilder object.</param>
      <param name="methodInfoDeclaration">The method whose declaration is to be used.</param>
      <exception cref="T:System.ArgumentException"><paramref name="methodInfoBody">methodInfoBody</paramref> does not belong to this class.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="methodInfoBody">methodInfoBody</paramref> or <paramref name="methodInfoDeclaration">methodInfoDeclaration</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.   -or-   The declaring type of <paramref name="methodInfoBody">methodInfoBody</paramref> is not the type represented by this <see cref="T:System.Reflection.Emit.TypeBuilder"></see>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary>Defines a nested type, given its name, attributes, size, and the type that it extends.</summary>
      <param name="name">The short name of the type. name cannot contain embedded null values.</param>
      <param name="attr">The attributes of the type.</param>
      <param name="parent">The type that the nested type extends.</param>
      <param name="packSize">The packing size of the type.</param>
      <param name="typeSize">The total size of the type.</param>
      <returns>The defined nested type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary>Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.</summary>
      <param name="name">The short name of the type. name cannot contain embedded nulls.</param>
      <param name="attr">The attributes of the type.</param>
      <param name="parent">The type that the nested type extends.</param>
      <param name="interfaces">The interfaces that the nested type implements.</param>
      <returns>The defined nested type.</returns>
      <exception cref="T:System.ArgumentException">The nested attribute is not specified.   -or-   This type is sealed.   -or-   This type is an array.   -or-   This type is an interface, but the nested type is not an interface.   -or-   The length of <paramref name="name">name</paramref> is zero or greater than 1023.   -or-   This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName"></see> in the current assembly.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.   -or-   An element of the <paramref name="interfaces">interfaces</paramref> array is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary>Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.</summary>
      <param name="name">The short name of the type. name cannot contain embedded nulls.</param>
      <param name="attr">The attributes of the type.</param>
      <param name="parent">The type that the nested type extends.</param>
      <param name="typeSize">The total size of the type.</param>
      <returns>The defined nested type.</returns>
      <exception cref="T:System.ArgumentException">The nested attribute is not specified.   -or-   This type is sealed.   -or-   This type is an array.   -or-   This type is an interface, but the nested type is not an interface.   -or-   The length of <paramref name="name">name</paramref> is zero or greater than 1023.   -or-   This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName"></see> in the current assembly.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary>Defines a nested type, given its name, attributes, the type that it extends, and the packing size.</summary>
      <param name="name">The short name of the type. name cannot contain embedded nulls.</param>
      <param name="attr">The attributes of the type.</param>
      <param name="parent">The type that the nested type extends.</param>
      <param name="packSize">The packing size of the type.</param>
      <returns>The defined nested type.</returns>
      <exception cref="T:System.ArgumentException">The nested attribute is not specified.   -or-   This type is sealed.   -or-   This type is an array.   -or-   This type is an interface, but the nested type is not an interface.   -or-   The length of <paramref name="name">name</paramref> is zero or greater than 1023.   -or-   This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName"></see> in the current assembly.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)">
      <summary>Defines a nested type, given its name and attributes.</summary>
      <param name="name">The short name of the type. name cannot contain embedded nulls.</param>
      <param name="attr">The attributes of the type.</param>
      <returns>The defined nested type.</returns>
      <exception cref="T:System.ArgumentException">The nested attribute is not specified.   -or-   This type is sealed.   -or-   This type is an array.   -or-   This type is an interface, but the nested type is not an interface.   -or-   The length of <paramref name="name">name</paramref> is zero or greater than 1023.   -or-   This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName"></see> in the current assembly.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)">
      <summary>Defines a nested type, given its name.</summary>
      <param name="name">The short name of the type. name cannot contain embedded nulls.</param>
      <returns>The defined nested type.</returns>
      <exception cref="T:System.ArgumentException">Length of <paramref name="name">name</paramref> is zero or greater than 1023.   -or-   This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName"></see> in the current assembly.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>Defines a nested type, given its name, attributes, and the type that it extends.</summary>
      <param name="name">The short name of the type. name cannot contain embedded nulls.</param>
      <param name="attr">The attributes of the type.</param>
      <param name="parent">The type that the nested type extends.</param>
      <returns>The defined nested type.</returns>
      <exception cref="T:System.ArgumentException">The nested attribute is not specified.   -or-   This type is sealed.   -or-   This type is an array.   -or-   This type is an interface, but the nested type is not an interface.   -or-   The length of <paramref name="name">name</paramref> is zero or greater than 1023.   -or-   This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName"></see> in the current assembly.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])">
      <summary>Adds a new property to the type, with the given name and property signature.</summary>
      <param name="name">The name of the property. name cannot contain embedded nulls.</param>
      <param name="attributes">The attributes of the property.</param>
      <param name="returnType">The return type of the property.</param>
      <param name="parameterTypes">The types of the parameters of the property.</param>
      <returns>The defined property.</returns>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name">name</paramref> is zero.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.   -or-   Any of the elements of the <paramref name="parameterTypes">parameterTypes</paramref> array is null.</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>Adds a new property to the type, with the given name, attributes, calling convention, and property signature.</summary>
      <param name="name">The name of the property. name cannot contain embedded nulls.</param>
      <param name="attributes">The attributes of the property.</param>
      <param name="callingConvention">The calling convention of the property accessors.</param>
      <param name="returnType">The return type of the property.</param>
      <param name="parameterTypes">The types of the parameters of the property.</param>
      <returns>The defined property.</returns>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name">name</paramref> is zero.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.   -or-   Any of the elements of the <paramref name="parameterTypes">parameterTypes</paramref> array is null.</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Adds a new property to the type, with the given name, property signature, and custom modifiers.</summary>
      <param name="name">The name of the property. name cannot contain embedded nulls.</param>
      <param name="attributes">The attributes of the property.</param>
      <param name="returnType">The return type of the property.</param>
      <param name="returnTypeRequiredCustomModifiers">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see>, for the return type of the property. If the return type has no required custom modifiers, specify null.</param>
      <param name="returnTypeOptionalCustomModifiers">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see>, for the return type of the property. If the return type has no optional custom modifiers, specify null.</param>
      <param name="parameterTypes">The types of the parameters of the property.</param>
      <param name="parameterTypeRequiredCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see>. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="parameterTypeOptionalCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see>. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.</param>
      <returns>The defined property.</returns>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name">name</paramref> is zero.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null -or-   Any of the elements of the <paramref name="parameterTypes">parameterTypes</paramref> array is null</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.</summary>
      <param name="name">The name of the property. name cannot contain embedded nulls.</param>
      <param name="attributes">The attributes of the property.</param>
      <param name="callingConvention">The calling convention of the property accessors.</param>
      <param name="returnType">The return type of the property.</param>
      <param name="returnTypeRequiredCustomModifiers">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see>, for the return type of the property. If the return type has no required custom modifiers, specify null.</param>
      <param name="returnTypeOptionalCustomModifiers">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see>, for the return type of the property. If the return type has no optional custom modifiers, specify null.</param>
      <param name="parameterTypes">The types of the parameters of the property.</param>
      <param name="parameterTypeRequiredCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see>. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="parameterTypeOptionalCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst"></see>. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.</param>
      <returns>The defined property.</returns>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name">name</paramref> is zero.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.   -or-   Any of the elements of the <paramref name="parameterTypes">parameterTypes</paramref> array is null.</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer">
      <summary>Defines the initializer for this type.</summary>
      <returns>Returns a type initializer.</returns>
      <exception cref="T:System.InvalidOperationException">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary>Defines an uninitialized data field in the .sdata section of the portable executable (PE) file.</summary>
      <param name="name">The name used to refer to the data. name cannot contain embedded nulls.</param>
      <param name="size">The size of the data field.</param>
      <param name="attributes">The attributes for the field.</param>
      <returns>A field to reference the data.</returns>
      <exception cref="T:System.ArgumentException">Length of <paramref name="name">name</paramref> is zero.   -or-  <paramref name="size">size</paramref> is less than or equal to zero, or greater than or equal to 0x003f0000.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.FullName">
      <summary>Retrieves the full path of this type.</summary>
      <returns>Read-only. Retrieves the full path of this type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes">
      <summary>Gets a value that indicates the covariance and special constraints of the current generic type parameter.</summary>
      <returns>A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes"></see> values that describes the covariance and special constraints of the current generic type parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition">
      <summary>Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.</summary>
      <returns>If the current <see cref="T:System.Reflection.Emit.TypeBuilder"></see> object represents a generic type parameter, the position of the type parameter in the type parameter list of the generic type that declared the parameter; otherwise, undefined.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericTypeArguments">
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetArrayRank">
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)">
      <summary>Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition.</summary>
      <param name="type">The constructed generic type whose constructor is returned.</param>
      <param name="constructor">A constructor on the generic type definition of type, which specifies which constructor of type to return.</param>
      <returns>A <see cref="T:System.Reflection.ConstructorInfo"></see> object that represents the constructor of <paramref name="type">type</paramref> corresponding to <paramref name="constructor">constructor</paramref>, which specifies a constructor belonging to the generic type definition of <paramref name="type">type</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="type">type</paramref> does not represent a generic type.   -or-  <paramref name="type">type</paramref> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder"></see>.   -or-   The declaring type of <paramref name="constructor">constructor</paramref> is not a generic type definition.   -or-   The declaring type of <paramref name="constructor">constructor</paramref> is not the generic type definition of <paramref name="type">type</paramref>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.ConstructorInfo"></see> objects representing the public and non-public constructors defined for this class, as specified.</summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see> as in InvokeMethod, NonPublic, and so on.</param>
      <returns>Returns an array of <see cref="T:System.Reflection.ConstructorInfo"></see> objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.</returns>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for this type.</summary>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>Returns an array of objects representing all the custom attributes of this type.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported for incomplete types. Retrieve the type using <see cref="M:System.Type.GetType"></see> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)"></see> on the returned <see cref="T:System.Type"></see>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns all the custom attributes of the current type that are assignable to a specified type.</summary>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>An array of custom attributes defined on the current type.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported for incomplete types. Retrieve the type using <see cref="M:System.Type.GetType"></see> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)"></see> on the returned <see cref="T:System.Type"></see>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="attributeType">attributeType</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The type must be a type provided by the underlying runtime system.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetElementType">
      <summary>Calling this method always throws <see cref="T:System.NotSupportedException"></see>.</summary>
      <returns>This method is not supported. No value is returned.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the event with the specified name.</summary>
      <param name="name">The name of the event to search for.</param>
      <param name="bindingAttr">A bitwise combination of <see cref="T:System.Reflection.BindingFlags"></see> values that limits the search.</param>
      <returns>An <see cref="T:System.Reflection.EventInfo"></see> object representing the event declared or inherited by this type with the specified name, or null if there are no matches.</returns>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents">
      <summary>Returns the public events declared or inherited by this type.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.EventInfo"></see> objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.</returns>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public events that are declared by this type.</summary>
      <param name="bindingAttr">A bitwise combination of <see cref="T:System.Reflection.BindingFlags"></see> values that limits the search.</param>
      <returns>Returns an array of <see cref="T:System.Reflection.EventInfo"></see> objects representing the events declared or inherited by this type that match the specified binding flags. An empty array is returned if there are no matching events.</returns>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the field specified by the given name.</summary>
      <param name="name">The name of the field to get.</param>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see> as in InvokeMethod, NonPublic, and so on.</param>
      <returns>Returns the <see cref="T:System.Reflection.FieldInfo"></see> object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches then null is returned.</returns>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)">
      <summary>Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition.</summary>
      <param name="type">The constructed generic type whose field is returned.</param>
      <param name="field">A field on the generic type definition of type, which specifies which field of type to return.</param>
      <returns>A <see cref="T:System.Reflection.FieldInfo"></see> object that represents the field of <paramref name="type">type</paramref> corresponding to <paramref name="field">field</paramref>, which specifies a field belonging to the generic type definition of <paramref name="type">type</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="type">type</paramref> does not represent a generic type.   -or-  <paramref name="type">type</paramref> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder"></see>.   -or-   The declaring type of <paramref name="field">field</paramref> is not a generic type definition.   -or-   The declaring type of <paramref name="field">field</paramref> is not the generic type definition of <paramref name="type">type</paramref>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public fields that are declared by this type.</summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see> : InvokeMethod, NonPublic, and so on.</param>
      <returns>Returns an array of <see cref="T:System.Reflection.FieldInfo"></see> objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.</returns>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericArguments">
      <summary>Returns an array of <see cref="T:System.Type"></see> objects representing the type arguments of a generic type or the type parameters of a generic type definition.</summary>
      <returns>An array of <see cref="T:System.Type"></see> objects. The elements of the array represent the type arguments of a generic type or the type parameters of a generic type definition.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericParameterConstraints">
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition">
      <summary>Returns a <see cref="T:System.Type"></see> object that represents a generic type definition from which the current type can be obtained.</summary>
      <returns>A <see cref="T:System.Type"></see> object representing a generic type definition from which the current type can be obtained.</returns>
      <exception cref="T:System.InvalidOperationException">The current type is not generic. That is, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"></see> returns false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)">
      <summary>Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.</summary>
      <param name="name">The name of the interface.</param>
      <param name="ignoreCase">If true, the search is case-insensitive. If false, the search is case-sensitive.</param>
      <returns>Returns a <see cref="T:System.Type"></see> object representing the implemented interface. Returns null if no interface matching name is found.</returns>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)">
      <summary>Returns an interface mapping for the requested interface.</summary>
      <param name="interfaceType">The <see cref="T:System.Type"></see> of the interface for which the mapping is to be retrieved.</param>
      <returns>Returns the requested interface mapping.</returns>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaces">
      <summary>Returns an array of all the interfaces implemented on this type and its base types.</summary>
      <returns>Returns an array of <see cref="T:System.Type"></see> objects representing the implemented interfaces. If none are defined, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Returns all the public and non-public members declared or inherited by this type, as specified.</summary>
      <param name="name">The name of the member.</param>
      <param name="type">The type of the member to return.</param>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see>, as in InvokeMethod, NonPublic, and so on.</param>
      <returns>Returns an array of <see cref="T:System.Reflection.MemberInfo"></see> objects representing the public and non-public members defined on this type if <paramref name="nonPublic">nonPublic</paramref> is used; otherwise, only the public members are returned.</returns>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>Returns the members for the public and non-public members declared or inherited by this type.</summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see>, such as InvokeMethod, NonPublic, and so on.</param>
      <returns>Returns an array of <see cref="T:System.Reflection.MemberInfo"></see> objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.</returns>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)">
      <summary>Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition.</summary>
      <param name="type">The constructed generic type whose method is returned.</param>
      <param name="method">A method on the generic type definition of type, which specifies which method of type to return.</param>
      <returns>A <see cref="T:System.Reflection.MethodInfo"></see> object that represents the method of <paramref name="type">type</paramref> corresponding to <paramref name="method">method</paramref>, which specifies a method belonging to the generic type definition of <paramref name="type">type</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="method">method</paramref> is a generic method that is not a generic method definition.   -or-  <paramref name="type">type</paramref> does not represent a generic type.   -or-  <paramref name="type">type</paramref> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder"></see>.   -or-   The declaring type of <paramref name="method">method</paramref> is not a generic type definition.   -or-   The declaring type of <paramref name="method">method</paramref> is not the generic type definition of <paramref name="type">type</paramref>.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>Returns all the public and non-public methods declared or inherited by this type, as specified.</summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see> as in InvokeMethod, NonPublic, and so on.</param>
      <returns>Returns an array of <see cref="T:System.Reflection.MethodInfo"></see> objects representing the public and non-public methods defined on this type if <paramref name="nonPublic">nonPublic</paramref> is used; otherwise, only the public methods are returned.</returns>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public nested types that are declared by this type.</summary>
      <param name="name">The <see cref="T:System.String"></see> containing the name of the nested type to get.</param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"></see> that specify how the search is conducted.   -or-   Zero, to conduct a case-sensitive search for public methods.</param>
      <returns>A <see cref="T:System.Type"></see> object representing the nested type that matches the specified requirements, if found; otherwise, null.</returns>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public nested types that are declared or inherited by this type.</summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see>, as in InvokeMethod, NonPublic, and so on.</param>
      <returns>An array of <see cref="T:System.Type"></see> objects representing all the types nested within the current <see cref="T:System.Type"></see> that match the specified binding constraints.   An empty array of type <see cref="T:System.Type"></see>, if no types are nested within the current <see cref="T:System.Type"></see>, or if none of the nested types match the binding constraints.</returns>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>Returns all the public and non-public properties declared or inherited by this type, as specified.</summary>
      <param name="bindingAttr">This invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"></see> : InvokeMethod, NonPublic, and so on.</param>
      <returns>Returns an array of PropertyInfo objects representing the public and non-public properties defined on this type if <paramref name="nonPublic">nonPublic</paramref> is used; otherwise, only the public properties are returned.</returns>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GUID">
      <summary>Retrieves the GUID of this type.</summary>
      <returns>Read-only. Retrieves the GUID of this type</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported for incomplete types.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</summary>
      <param name="name">The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.</param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from BindingFlags.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects using reflection. If binder is null, the default binder is used. See <see cref="T:System.Reflection.Binder"></see>.</param>
      <param name="target">The object on which to invoke the specified member. If the member is static, this parameter is ignored.</param>
      <param name="args">An argument list. This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.</param>
      <param name="modifiers">An array of the same length as args with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for more details.</param>
      <param name="culture">An instance of CultureInfo used to govern the coercion of types. If this is null, the CultureInfo for the current thread is used. (Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.)</param>
      <param name="namedParameters">Each parameter in the namedParameters array gets the value in the corresponding element in the args array. If the length of args is greater than the length of namedParameters, the remaining argument values are passed in order.</param>
      <returns>Returns the return value of the invoked member.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported for incomplete types.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
      <summary>Gets a value that indicates whether a specified <see cref="T:System.Reflection.TypeInfo"></see> object can be assigned to this object.</summary>
      <param name="typeInfo">The object to test.</param>
      <returns>true if <paramref name="typeInfo">typeInfo</paramref> can be assigned to this object; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)">
      <summary>Gets a value that indicates whether a specified <see cref="T:System.Type"></see> can be assigned to this object.</summary>
      <param name="c">The object to test.</param>
      <returns>true if the <paramref name="c">c</paramref> parameter and the current type represent the same type, or if the current type is in the inheritance hierarchy of <paramref name="c">c</paramref>, or if the current type is an interface that <paramref name="c">c</paramref> supports. false if none of these conditions are valid, or if <paramref name="c">c</paramref> is null.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsConstructedGenericType">
      <summary>Gets a value that indicates whether this object represents a constructed generic type.</summary>
      <returns>true if this object represents a constructed generic type; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsCreated">
      <summary>Returns a value that indicates whether the current dynamic type has been created.</summary>
      <returns>true if the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see> method has been called; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether a custom attribute is applied to the current type.</summary>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>true if one or more instances of <paramref name="attributeType">attributeType</paramref>, or an attribute derived from <paramref name="attributeType">attributeType</paramref>, is defined on this type; otherwise, false.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported for incomplete types. Retrieve the type using <see cref="M:System.Type.GetType"></see> and call <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)"></see> on the returned <see cref="T:System.Type"></see>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="attributeType">attributeType</paramref> is not defined.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="attributeType">attributeType</paramref> is null.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsEnum">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericParameter">
      <summary>Gets a value indicating whether the current type is a generic type parameter.</summary>
      <returns>true if the current <see cref="T:System.Reflection.Emit.TypeBuilder"></see> object represents a generic type parameter; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericType">
      <summary>Gets a value indicating whether the current type is a generic type.</summary>
      <returns>true if the type represented by the current <see cref="T:System.Reflection.Emit.TypeBuilder"></see> object is generic; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition">
      <summary>Gets a value indicating whether the current <see cref="T:System.Reflection.Emit.TypeBuilder"></see> represents a generic type definition from which other generic types can be constructed.</summary>
      <returns>true if this <see cref="T:System.Reflection.Emit.TypeBuilder"></see> object represents a generic type definition; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical">
      <summary>Gets a value that indicates whether the current type is security-critical or security-safe-critical, and therefore can perform critical operations.</summary>
      <returns>true if the current type is security-critical or security-safe-critical; false if it is transparent.</returns>
      <exception cref="T:System.NotSupportedException">The current dynamic type has not been created by calling the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see> method.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical">
      <summary>Gets a value that indicates whether the current type is security-safe-critical; that is, whether it can perform critical operations and can be accessed by transparent code.</summary>
      <returns>true if the current type is security-safe-critical; false if it is security-critical or transparent.</returns>
      <exception cref="T:System.NotSupportedException">The current dynamic type has not been created by calling the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see> method.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent">
      <summary>Gets a value that indicates whether the current type is transparent, and therefore cannot perform critical operations.</summary>
      <returns>true if the type is security-transparent; otherwise, false.</returns>
      <exception cref="T:System.NotSupportedException">The current dynamic type has not been created by calling the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see> method.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSerializable">
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)">
      <summary>Determines whether this type is derived from a specified type.</summary>
      <param name="c">A <see cref="T:System.Type"></see> that is to be checked.</param>
      <returns>Read-only. Returns true if this type is the same as the type <paramref name="c">c</paramref>, or is a subtype of type <paramref name="c">c</paramref>; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSZArray">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsTypeDefinition">
      <returns></returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsVariableBoundArray">
      <returns></returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType">
      <summary>Returns a <see cref="T:System.Type"></see> object that represents a one-dimensional array of the current type, with a lower bound of zero.</summary>
      <returns>A <see cref="T:System.Type"></see> object representing a one-dimensional array type whose element type is the current type, with a lower bound of zero.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)">
      <summary>Returns a <see cref="T:System.Type"></see> object that represents an array of the current type, with the specified number of dimensions.</summary>
      <param name="rank">The number of dimensions for the array.</param>
      <returns>A <see cref="T:System.Type"></see> object that represents a one-dimensional array of the current type.</returns>
      <exception cref="T:System.IndexOutOfRangeException"><paramref name="rank">rank</paramref> is not a valid array dimension.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeByRefType">
      <summary>Returns a <see cref="T:System.Type"></see> object that represents the current type when passed as a ref parameter (ByRef in Visual Basic).</summary>
      <returns>A <see cref="T:System.Type"></see> object that represents the current type when passed as a ref parameter (ByRef in Visual Basic).</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])">
      <summary>Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.</summary>
      <param name="typeArguments">An array of types to be substituted for the type parameters of the current generic type definition.</param>
      <returns>A <see cref="T:System.Type"></see> representing the constructed type formed by substituting the elements of <paramref name="typeArguments">typeArguments</paramref> for the type parameters of the current generic type.</returns>
      <exception cref="T:System.InvalidOperationException">The current type does not represent the definition of a generic type. That is, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"></see> returns false.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="typeArguments">typeArguments</paramref> is null.   -or-   Any element of <paramref name="typeArguments">typeArguments</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Type.Module"></see> property of any element of <paramref name="typeArguments">typeArguments</paramref> is null.   -or-   The <see cref="P:System.Reflection.Module.Assembly"></see> property of the module of any element of <paramref name="typeArguments">typeArguments</paramref> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakePointerType">
      <summary>Returns a <see cref="T:System.Type"></see> object that represents the type of an unmanaged pointer to the current type.</summary>
      <returns>A <see cref="T:System.Type"></see> object that represents the type of an unmanaged pointer to the current type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Module">
      <summary>Retrieves the dynamic module that contains this type definition.</summary>
      <returns>Read-only. Retrieves the dynamic module that contains this type definition.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Name">
      <summary>Retrieves the name of this type.</summary>
      <returns>Read-only. Retrieves the <see cref="T:System.String"></see> name of this type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Namespace">
      <summary>Retrieves the namespace where this TypeBuilder is defined.</summary>
      <returns>Read-only. Retrieves the namespace where this TypeBuilder is defined.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.PackingSize">
      <summary>Retrieves the packing size of this type.</summary>
      <returns>Read-only. Retrieves the packing size of this type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.ReflectedType">
      <summary>Returns the type that was used to obtain this type.</summary>
      <returns>Read-only. The type that was used to obtain this type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Set a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="customBuilder">customBuilder</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"></see> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"></see> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Sets a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute.</param>
      <param name="binaryAttribute">A byte blob representing the attributes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="con">con</paramref> or <paramref name="binaryAttribute">binaryAttribute</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"></see> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"></see> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)">
      <summary>Sets the base type of the type currently under construction.</summary>
      <param name="parent">The new base type.</param>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"></see>.   -or-  <paramref name="parent">parent</paramref> is null, and the current instance represents an interface whose attributes do not include <see cref="F:System.Reflection.TypeAttributes.Abstract"></see>.   -or-   For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType"></see> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition"></see> property is false.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="parent">parent</paramref> is an interface. This exception condition is new in the .NET Framework version 2.0.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Size">
      <summary>Retrieves the total size of a type.</summary>
      <returns>Read-only. Retrieves this type’s total size.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.ToString">
      <summary>Returns the name of the type excluding the namespace.</summary>
      <returns>Read-only. The name of the type excluding the namespace.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeHandle">
      <summary>Not supported in dynamic modules.</summary>
      <returns>Read-only.</returns>
      <exception cref="T:System.NotSupportedException">Not supported in dynamic modules.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType">
      <summary>Returns the underlying system type for this TypeBuilder.</summary>
      <returns>Read-only. Returns the underlying system type.</returns>
      <exception cref="T:System.InvalidOperationException">This type is an enumeration, but there is no underlying system type.</exception>
    </member>
    <member name="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize">
      <summary>Represents that total size for the type is not specified.</summary>
      <returns></returns>
    </member>
  </members>
</doc></span>