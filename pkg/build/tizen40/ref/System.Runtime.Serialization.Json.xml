<?xml version="1.0" encoding="utf-8"?><span>
<doc>
  <assembly>
    <name>System.Runtime.Serialization.Json</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Serialization.DateTimeFormat">
      <summary>Specifies date-time format options.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DateTimeFormat.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DateTimeFormat"></see> class using the format string.</summary>
      <param name="formatString">The format string.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DateTimeFormat.#ctor(System.String,System.IFormatProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DateTimeFormat"></see> class using the format string and format provider.</summary>
      <param name="formatString">The format sting.</param>
      <param name="formatProvider">The format provider.</param>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.DateTimeStyles">
      <summary>Gets or sets the formatting options that customize string parsing for some date and time parsing methods.</summary>
      <returns>The formatting options that customize string parsing for some date and time parsing methods.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.FormatProvider">
      <summary>Gets an object that controls formatting.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.FormatString">
      <summary>Gets the format strings to control the formatting produced when a date or time is represented as a string.</summary>
      <returns>The format strings to control the formatting produced when a date or time is represented as a string.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.EmitTypeInformation">
      <summary>Specifies how often to emit type information.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.Always">
      <summary>Always to emit type information.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.AsNeeded">
      <summary>As needed emit type information.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.Never">
      <summary>Never to emit type information.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.Serialization.Json.DataContractJsonSerializer">
      
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type)">
      <param name="type"></param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <param name="type"></param>
      <param name="knownTypes"></param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)">
      <param name="type"></param>
      <param name="settings"></param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String)">
      <param name="type"></param>
      <param name="rootName"></param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString)">
      <param name="type"></param>
      <param name="rootName"></param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Type})">
      <param name="type"></param>
      <param name="rootName"></param>
      <param name="knownTypes"></param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type})">
      <param name="type"></param>
      <param name="rootName"></param>
      <param name="knownTypes"></param>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.DateTimeFormat">
      <returns></returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.EmitTypeInformation">
      <returns></returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.IgnoreExtensionDataObject">
      <returns></returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <param name="reader"></param>
      <returns></returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.IsStartObject(System.Xml.XmlReader)">
      <param name="reader"></param>
      <returns></returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes">
      <returns></returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.MaxItemsInObjectGraph">
      <returns></returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)">
      <param name="stream"></param>
      <returns></returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlDictionaryReader)">
      <param name="reader"></param>
      <returns></returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlReader)">
      <param name="reader"></param>
      <returns></returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <param name="reader"></param>
      <param name="verifyObjectName"></param>
      <returns></returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <param name="reader"></param>
      <param name="verifyObjectName"></param>
      <returns></returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.SerializeReadOnlyTypes">
      <returns></returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.UseSimpleDictionaryFormat">
      <returns></returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <param name="writer"></param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <param name="writer"></param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream,System.Object)">
      <param name="stream"></param>
      <param name="graph"></param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <param name="writer"></param>
      <param name="graph"></param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <param name="writer"></param>
      <param name="graph"></param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <param name="writer"></param>
      <param name="graph"></param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <param name="writer"></param>
      <param name="graph"></param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <param name="writer"></param>
      <param name="graph"></param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <param name="writer"></param>
      <param name="graph"></param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings">
      <summary>Specifies <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer"></see> settings.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings"></see> class.</summary>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.DateTimeFormat">
      <summary>Gets or sets a DateTimeFormat that defines the culturally appropriate format of displaying dates and times.</summary>
      <returns>The DateTimeFormat that defines the culturally appropriate format of displaying dates and times.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.EmitTypeInformation">
      <summary>Gets or sets the data contract JSON serializer settings to emit type information.</summary>
      <returns>The data contract JSON serializer settings to emit type information.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.IgnoreExtensionDataObject">
      <summary>Gets or sets a value that specifies whether to ignore data supplied by an extension of the class when the class is being serialized or deserialized.</summary>
      <returns>True to ignore data supplied by an extension of the class when the class is being serialized or deserialized; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.KnownTypes">
      <summary>Gets or sets a collection of types that may be present in the object graph serialized using this instance the DataContractJsonSerializerSettings.</summary>
      <returns>A collection of types that may be present in the object graph serialized using this instance the DataContractJsonSerializerSettings.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.MaxItemsInObjectGraph">
      <summary>Gets or sets the maximum number of items in an object graph to serialize or deserialize.</summary>
      <returns>The maximum number of items in an object graph to serialize or deserialize.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.RootName">
      <summary>Gets or sets the root name of the selected object.</summary>
      <returns>The root name of the selected object.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.SerializeReadOnlyTypes">
      <summary>Gets or sets a value that specifies whether to serialize read only types.</summary>
      <returns>True to serialize read only types; otherwise false.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.UseSimpleDictionaryFormat">
      <summary>Gets or sets a value that specifies whether to use a simple dictionary format.</summary>
      <returns>True to use a simple dictionary format; otherwise, false.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer">
      <summary>Specifies the interface for initializing a JavaScript Object Notation (JSON) reader when reusing them to read from a particular stream or buffer.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer.SetInput(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Reinitializes a JavaScript Object Notation (JSON) enabled reader to a specified stream that contains JSON-encoded data.</summary>
      <param name="stream">The input <see cref="T:System.IO.Stream"></see> from which to read.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding"></see> used by the reader.</param>
      <param name="quotas"><see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> to apply.</param>
      <param name="onClose">Delegate to call when the reader is closed.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Reinitializes a JavaScript Object Notation (JSON) enabled reader to a specified buffer that contains JSON-encoded data.</summary>
      <param name="buffer">The input <see cref="T:System.Byte"></see> buffer array from which to read.</param>
      <param name="offset">The starting position from which to read in buffer.</param>
      <param name="count">The number of bytes that can be read from buffer.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding"></see> used by the reader.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> to apply.</param>
      <param name="onClose">The <see cref="T:System.Xml.OnXmlDictionaryReaderClose"></see> delegate to call when the reader is closed.</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer">
      <summary>Specifies the interface for initializing a JavaScript Object Notation (JSON) writer when reusing them to write to a particular output stream.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Initializes (or reinitializes) a JavaScript Object Notation (JSON) writer to a specified output stream with specified character encoding.</summary>
      <param name="stream">The output <see cref="T:System.IO.Stream"></see> to which the writer writes.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding"></see> that specifies the character encoding of the output stream.</param>
      <param name="ownsStream">If true, the output stream is closed by the writer when done; otherwise false.</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
      <summary>Produces instances of <see cref="T:System.Xml.XmlDictionaryReader"></see> that can read data encoded with JavaScript Object Notation (JSON) from a stream or buffer and map it to an XML Infoset and instances of <see cref="T:System.Xml.XmlDictionaryWriter"></see> that can map an XML Infoset to JSON and write JSON-encoded data to a stream.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryReader"></see> that can map buffers encoded with JavaScript Object Notation (JSON) to an XML Infoset.</summary>
      <param name="buffer">The input <see cref="T:System.Byte"></see> buffer array from which to read.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> used to prevent Denial of Service attacks when reading untrusted data.</param>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader"></see> that can process JavaScript Object Notation (JSON) data.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryReader"></see> that can map streams encoded with JavaScript Object Notation (JSON) to an XML Infoset.</summary>
      <param name="stream">The input <see cref="T:System.IO.Stream"></see> from which to read.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> used to prevent Denial of Service attacks when reading untrusted data.</param>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader"></see> that can read JavaScript Object Notation (JSON).</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryReader"></see> that can map buffers encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.</summary>
      <param name="buffer">The input <see cref="T:System.Byte"></see> buffer array from which to read.</param>
      <param name="offset">Starting position from which to read in buffer.</param>
      <param name="count">Number of bytes that can be read from buffer.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> used to prevent Denial of Service attacks when reading untrusted data.</param>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader"></see> that can read JavaScript Object Notation (JSON).</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryReader"></see> that can map streams encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.</summary>
      <param name="stream">The input <see cref="T:System.IO.Stream"></see> from which to read.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding"></see> that specifies the character encoding used by the reader. If null is specified as the value, the reader attempts to auto-detect the encoding.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> used to prevent Denial of Service attacks when reading untrusted data.</param>
      <param name="onClose">The <see cref="T:System.Xml.OnXmlDictionaryReaderClose"></see> delegate to call when the reader is closed.</param>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader"></see> that can read JavaScript Object Notation (JSON).</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryReader"></see> that can map buffers encoded with JavaScript Object Notation (JSON), with a specified size and offset and character encoding, to an XML Infoset.</summary>
      <param name="buffer">The input <see cref="T:System.Byte"></see> buffer array from which to read.</param>
      <param name="offset">Starting position from which to read in buffer.</param>
      <param name="count">Number of bytes that can be read from buffer.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding"></see> that specifies the character encoding used by the reader. If null is specified as the value, the reader attempts to auto-detect the encoding.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> used to prevent Denial of Service attacks when reading untrusted data.</param>
      <param name="onClose">The <see cref="T:System.Xml.OnXmlDictionaryReaderClose"></see> delegate to call when the reader is closed. The default value is null.</param>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader"></see> that can read JavaScript Object Notation (JSON).</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryWriter"></see> that writes data encoded with JSON to a stream.</summary>
      <param name="stream">The output <see cref="T:System.IO.Stream"></see> for the JSON writer.</param>
      <returns>An <see cref="T:System.Xml.XmlDictionaryWriter"></see> that writes data encoded with JSON to the stream based on an XML Infoset.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryWriter"></see> that writes data encoded with JSON to a stream with a specified character encoding.</summary>
      <param name="stream">The output <see cref="T:System.IO.Stream"></see> for the JSON writer.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding"></see> that specifies the character encoding used by the writer. The default encoding is UTF-8.</param>
      <returns>An <see cref="T:System.Xml.XmlDictionaryWriter"></see> that writes data encoded with JSON to the stream based on an XML Infoset.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryWriter"></see> that writes data encoded with JSON to a stream with a specified character encoding.</summary>
      <param name="stream">The output <see cref="T:System.IO.Stream"></see> for the JSON writer.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding"></see> that specifies the character encoding used by the writer. The default encoding is UTF-8.</param>
      <param name="ownsStream">If true, the output stream is closed by the writer when done; otherwise false. The default value is true.</param>
      <returns>An <see cref="T:System.Xml.XmlDictionaryWriter"></see> that writes data encoded with JSON to the stream based on an XML Infoset.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryWriter"></see> that writes data encoded with JSON to a stream with a specified character.</summary>
      <param name="stream">The output <see cref="T:System.IO.Stream"></see> for the JSON writer.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding"></see> that specifies the character encoding used by the writer. The default encoding is UTF-8.</param>
      <param name="ownsStream">If true, the output stream is closed by the writer when done; otherwise false. The default value is true.</param>
      <param name="indent">If true, the output uses multiline format, indenting each level properly; otherwise, false.</param>
      <returns>An <see cref="T:System.Xml.XmlDictionaryWriter"></see> that writes data encoded with JSON to the stream based on an XML Infoset.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryWriter"></see> that writes data encoded with JSON to a stream with a specified character.</summary>
      <param name="stream">The output <see cref="T:System.IO.Stream"></see> for the JSON writer.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding"></see> that specifies the character encoding used by the writer. The default encoding is UTF-8.</param>
      <param name="ownsStream">If true, the output stream is closed by the writer when done; otherwise false. The default value is true.</param>
      <param name="indent">If true, the output uses multiline format, indenting each level properly; otherwise, false.</param>
      <param name="indentChars">The string used to indent each level.</param>
      <returns>An <see cref="T:System.Xml.XmlDictionaryWriter"></see> that writes data encoded with JSON to the stream based on an XML Infoset.</returns>
    </member>
  </members>
</doc></span>