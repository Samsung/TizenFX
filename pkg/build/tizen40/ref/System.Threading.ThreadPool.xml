<?xml version="1.0" encoding="utf-8"?><span>
<doc>
  <assembly>
    <name>System.Threading.ThreadPool</name>
  </assembly>
  <members>
    <member name="T:System.Threading.RegisteredWaitHandle">
      <summary>Represents a handle that has been registered when calling <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)"></see>. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
      <summary>Cancels a registered wait operation issued by the <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)"></see> method.</summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle"></see> to be signaled.</param>
      <returns>true if the function succeeds; otherwise, false.</returns>
    </member>
    <member name="T:System.Threading.ThreadPool">
      <summary>Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</summary>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
      <summary>Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool"></see>.</summary>
      <param name="osHandle">An <see cref="T:System.IntPtr"></see> that holds the handle. The handle must have been opened for overlapped I/O on the unmanaged side.</param>
      <returns>true if the handle is bound; otherwise, false.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
      <summary>Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool"></see>.</summary>
      <param name="osHandle">A <see cref="T:System.Runtime.InteropServices.SafeHandle"></see> that holds the operating system handle. The handle must have been opened for overlapped I/O on the unmanaged side.</param>
      <returns>true if the handle is bound; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="osHandle">osHandle</paramref> is null.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
      <summary>Retrieves the difference between the maximum number of thread pool threads returned by the <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)"></see> method, and the number currently active.</summary>
      <param name="workerThreads">The number of available worker threads.</param>
      <param name="completionPortThreads">The number of available asynchronous I/O threads.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
      <summary>Retrieves the number of requests to the thread pool that can be active concurrently. All requests above that number remain queued until thread pool threads become available.</summary>
      <param name="workerThreads">The maximum number of worker threads in the thread pool.</param>
      <param name="completionPortThreads">The maximum number of asynchronous I/O threads in the thread pool.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
      <summary>Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</summary>
      <param name="workerThreads">When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</param>
      <param name="completionPortThreads">When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
      <summary>Queues a method for execution. The method executes when a thread pool thread becomes available.</summary>
      <param name="callBack">A <see cref="T:System.Threading.WaitCallback"></see> that represents the method to be executed.</param>
      <returns>true if the method is successfully queued; <see cref="T:System.NotSupportedException"></see> is thrown if the work item could not be queued.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="callBack">callBack</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The common language runtime (CLR) is hosted, and the host does not support this action.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>Queues a method for execution, and specifies an object containing data to be used by the method. The method executes when a thread pool thread becomes available.</summary>
      <param name="callBack">A <see cref="T:System.Threading.WaitCallback"></see> representing the method to execute.</param>
      <param name="state">An object containing data to be used by the method.</param>
      <returns>true if the method is successfully queued; <see cref="T:System.NotSupportedException"></see> is thrown if the work item could not be queued.</returns>
      <exception cref="T:System.NotSupportedException">The common language runtime (CLR) is hosted, and the host does not support this action.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="callBack">callBack</paramref> is null.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle"></see>, specifying a 32-bit unsigned integer for the time-out in milliseconds.</summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle"></see> to register. Use a <see cref="T:System.Threading.WaitHandle"></see> other than <see cref="T:System.Threading.Mutex"></see>.</param>
      <param name="callBack">The <see cref="T:System.Threading.WaitOrTimerCallback"></see> delegate to call when the waitObject parameter is signaled.</param>
      <param name="state">The object passed to the delegate.</param>
      <param name="millisecondsTimeOutInterval">The time-out in milliseconds. If the millisecondsTimeOutInterval parameter is 0 (zero), the function tests the object's state and returns immediately. If millisecondsTimeOutInterval is -1, the function's time-out interval never elapses.</param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the waitObject parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</param>
      <returns>The <see cref="T:System.Threading.RegisteredWaitHandle"></see> that can be used to cancel the registered wait operation.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsTimeOutInterval">millisecondsTimeOutInterval</paramref> parameter is less than -1.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle"></see>, specifying a <see cref="T:System.TimeSpan"></see> value for the time-out.</summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle"></see> to register. Use a <see cref="T:System.Threading.WaitHandle"></see> other than <see cref="T:System.Threading.Mutex"></see>.</param>
      <param name="callBack">The <see cref="T:System.Threading.WaitOrTimerCallback"></see> delegate to call when the waitObject parameter is signaled.</param>
      <param name="state">The object passed to the delegate.</param>
      <param name="timeout">The time-out represented by a <see cref="T:System.TimeSpan"></see>. If timeout is 0 (zero), the function tests the object's state and returns immediately. If timeout is -1, the function's time-out interval never elapses.</param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the waitObject parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</param>
      <returns>The <see cref="T:System.Threading.RegisteredWaitHandle"></see> that encapsulates the native handle.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="timeout">timeout</paramref> parameter is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="timeout">timeout</paramref> parameter is greater than <see cref="F:System.Int32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle"></see>, specifying a 32-bit signed integer for the time-out in milliseconds.</summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle"></see> to register. Use a <see cref="T:System.Threading.WaitHandle"></see> other than <see cref="T:System.Threading.Mutex"></see>.</param>
      <param name="callBack">The <see cref="T:System.Threading.WaitOrTimerCallback"></see> delegate to call when the waitObject parameter is signaled.</param>
      <param name="state">The object that is passed to the delegate.</param>
      <param name="millisecondsTimeOutInterval">The time-out in milliseconds. If the millisecondsTimeOutInterval parameter is 0 (zero), the function tests the object's state and returns immediately. If millisecondsTimeOutInterval is -1, the function's time-out interval never elapses.</param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the waitObject parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</param>
      <returns>The <see cref="T:System.Threading.RegisteredWaitHandle"></see> that encapsulates the native handle.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsTimeOutInterval">millisecondsTimeOutInterval</paramref> parameter is less than -1.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle"></see>, specifying a 64-bit signed integer for the time-out in milliseconds.</summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle"></see> to register. Use a <see cref="T:System.Threading.WaitHandle"></see> other than <see cref="T:System.Threading.Mutex"></see>.</param>
      <param name="callBack">The <see cref="T:System.Threading.WaitOrTimerCallback"></see> delegate to call when the waitObject parameter is signaled.</param>
      <param name="state">The object passed to the delegate.</param>
      <param name="millisecondsTimeOutInterval">The time-out in milliseconds. If the millisecondsTimeOutInterval parameter is 0 (zero), the function tests the object's state and returns immediately. If millisecondsTimeOutInterval is -1, the function's time-out interval never elapses.</param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the waitObject parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</param>
      <returns>The <see cref="T:System.Threading.RegisteredWaitHandle"></see> that encapsulates the native handle.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsTimeOutInterval">millisecondsTimeOutInterval</paramref> parameter is less than -1.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
      <summary>Sets the number of requests to the thread pool that can be active concurrently. All requests above that number remain queued until thread pool threads become available.</summary>
      <param name="workerThreads">The maximum number of worker threads in the thread pool.</param>
      <param name="completionPortThreads">The maximum number of asynchronous I/O threads in the thread pool.</param>
      <returns>true if the change is successful; otherwise, false.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
      <summary>Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</summary>
      <param name="workerThreads">The minimum number of worker threads that the thread pool creates on demand.</param>
      <param name="completionPortThreads">The minimum number of asynchronous I/O threads that the thread pool creates on demand.</param>
      <returns>true if the change is successful; otherwise, false.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
      <summary>Queues an overlapped I/O operation for execution.</summary>
      <param name="overlapped">The <see cref="T:System.Threading.NativeOverlapped"></see> structure to queue.</param>
      <returns>true if the operation was successfully queued to an I/O completion port; otherwise, false.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</summary>
      <param name="callBack">A <see cref="T:System.Threading.WaitCallback"></see> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</param>
      <param name="state">The object that is passed to the delegate when serviced from the thread pool.</param>
      <returns>true if the method succeeds; <see cref="T:System.OutOfMemoryException"></see> is thrown if the work item could not be queued.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ApplicationException">An out-of-memory condition was encountered.</exception>
      <exception cref="T:System.OutOfMemoryException">The work item could not be queued.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="callBack">callBack</paramref> is null.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle"></see>, specifying a <see cref="T:System.TimeSpan"></see> value for the time-out. This method does not propagate the calling stack to the worker thread.</summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle"></see> to register. Use a <see cref="T:System.Threading.WaitHandle"></see> other than <see cref="T:System.Threading.Mutex"></see>.</param>
      <param name="callBack">The delegate to call when the waitObject parameter is signaled.</param>
      <param name="state">The object that is passed to the delegate.</param>
      <param name="timeout">The time-out represented by a <see cref="T:System.TimeSpan"></see>. If timeout is 0 (zero), the function tests the object's state and returns immediately. If timeout is -1, the function's time-out interval never elapses.</param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the waitObject parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</param>
      <returns>The <see cref="T:System.Threading.RegisteredWaitHandle"></see> object that can be used to cancel the registered wait operation.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="timeout">timeout</paramref> parameter is less than -1.</exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="timeout">timeout</paramref> parameter is greater than <see cref="F:System.Int32.MaxValue"></see>.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle"></see>, using a 32-bit signed integer for the time-out in milliseconds. This method does not propagate the calling stack to the worker thread.</summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle"></see> to register. Use a <see cref="T:System.Threading.WaitHandle"></see> other than <see cref="T:System.Threading.Mutex"></see>.</param>
      <param name="callBack">The delegate to call when the waitObject parameter is signaled.</param>
      <param name="state">The object that is passed to the delegate.</param>
      <param name="millisecondsTimeOutInterval">The time-out in milliseconds. If the millisecondsTimeOutInterval parameter is 0 (zero), the function tests the object's state and returns immediately. If millisecondsTimeOutInterval is -1, the function's time-out interval never elapses.</param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the waitObject parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</param>
      <returns>The <see cref="T:System.Threading.RegisteredWaitHandle"></see> object that can be used to cancel the registered wait operation.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsTimeOutInterval">millisecondsTimeOutInterval</paramref> parameter is less than -1.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle"></see>, specifying a 64-bit signed integer for the time-out in milliseconds. This method does not propagate the calling stack to the worker thread.</summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle"></see> to register. Use a <see cref="T:System.Threading.WaitHandle"></see> other than <see cref="T:System.Threading.Mutex"></see>.</param>
      <param name="callBack">The delegate to call when the waitObject parameter is signaled.</param>
      <param name="state">The object that is passed to the delegate.</param>
      <param name="millisecondsTimeOutInterval">The time-out in milliseconds. If the millisecondsTimeOutInterval parameter is 0 (zero), the function tests the object's state and returns immediately. If millisecondsTimeOutInterval is -1, the function's time-out interval never elapses.</param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the waitObject parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</param>
      <returns>The <see cref="T:System.Threading.RegisteredWaitHandle"></see> object that can be used to cancel the registered wait operation.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsTimeOutInterval">millisecondsTimeOutInterval</paramref> parameter is less than -1.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle"></see>, specifying a 32-bit unsigned integer for the time-out in milliseconds. This method does not propagate the calling stack to the worker thread.</summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle"></see> to register. Use a <see cref="T:System.Threading.WaitHandle"></see> other than <see cref="T:System.Threading.Mutex"></see>.</param>
      <param name="callBack">The delegate to call when the waitObject parameter is signaled.</param>
      <param name="state">The object that is passed to the delegate.</param>
      <param name="millisecondsTimeOutInterval">The time-out in milliseconds. If the millisecondsTimeOutInterval parameter is 0 (zero), the function tests the object's state and returns immediately. If millisecondsTimeOutInterval is -1, the function's time-out interval never elapses.</param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the waitObject parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</param>
      <returns>The <see cref="T:System.Threading.RegisteredWaitHandle"></see> object that can be used to cancel the registered wait operation.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="T:System.Threading.WaitCallback">
      <summary>Represents a callback method to be executed by a thread pool thread.</summary>
      <param name="state">An object containing information to be used by the callback method.</param>
    </member>
    <member name="T:System.Threading.WaitOrTimerCallback">
      <summary>Represents a method to be called when a <see cref="T:System.Threading.WaitHandle"></see> is signaled or times out.</summary>
      <param name="state">An object containing information to be used by the callback method each time it executes.</param>
      <param name="timedOut">true if the <see cref="T:System.Threading.WaitHandle"></see> timed out; false if it was signaled.</param>
    </member>
  </members>
</doc></span>