<?xml version="1.0" encoding="utf-8"?><span>
<doc>
  <assembly>
    <name>System.Text.Encoding</name>
  </assembly>
  <members>
    <member name="T:System.Text.Decoder">
      <summary>Converts a sequence of encoded bytes into a set of characters.</summary>
    </member>
    <member name="M:System.Text.Decoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.Decoder"></see> class.</summary>
    </member>
    <member name="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>Converts an array of encoded bytes to UTF-16 encoded characters and stores the result in a character array.</summary>
      <param name="bytes">A byte array to convert.</param>
      <param name="byteIndex">The first element of bytes to convert.</param>
      <param name="byteCount">The number of elements of bytes to convert.</param>
      <param name="chars">An array to store the converted characters.</param>
      <param name="charIndex">The first element of chars in which data is stored.</param>
      <param name="charCount">The maximum number of elements of chars to use in the conversion.</param>
      <param name="flush">true to indicate that no further data is to be converted; otherwise, false.</param>
      <param name="bytesUsed">When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.</param>
      <param name="charsUsed">When this method returns, contains the number of characters from chars that were produced by the conversion. This parameter is passed uninitialized.</param>
      <param name="completed">When this method returns, contains true if all the characters specified by byteCount were converted; otherwise, false. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="chars">chars</paramref> or <paramref name="bytes">bytes</paramref> is null (Nothing).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="charIndex">charIndex</paramref>, <paramref name="charCount">charCount</paramref>, <paramref name="byteIndex">byteIndex</paramref>, or <paramref name="byteCount">byteCount</paramref> is less than zero.   -or-   The length of <paramref name="chars">chars</paramref> - <paramref name="charIndex">charIndex</paramref> is less than <paramref name="charCount">charCount</paramref>.   -or-   The length of <paramref name="bytes">bytes</paramref> - <paramref name="byteIndex">byteIndex</paramref> is less than <paramref name="byteCount">byteCount</paramref>.</exception>
      <exception cref="T:System.ArgumentException">The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <see cref="Overload:System.Text.Decoder.GetCharCount"></see> method.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for fuller explanation)   -and-  <see cref="P:System.Text.Decoder.Fallback"></see> is set to <see cref="T:System.Text.DecoderExceptionFallback"></see>.</exception>
    </member>
    <member name="P:System.Text.Decoder.Fallback">
      <summary>Gets or sets a <see cref="T:System.Text.DecoderFallback"></see> object for the current <see cref="T:System.Text.Decoder"></see> object.</summary>
      <returns>A <see cref="T:System.Text.DecoderFallback"></see> object.</returns>
      <exception cref="T:System.ArgumentNullException">The value in a set operation is null (Nothing).</exception>
      <exception cref="T:System.ArgumentException">A new value cannot be assigned in a set operation because the current <see cref="T:System.Text.DecoderFallbackBuffer"></see> object contains data that has not been decoded yet.</exception>
    </member>
    <member name="P:System.Text.Decoder.FallbackBuffer">
      <summary>Gets the <see cref="T:System.Text.DecoderFallbackBuffer"></see> object associated with the current <see cref="T:System.Text.Decoder"></see> object.</summary>
      <returns>A <see cref="T:System.Text.DecoderFallbackBuffer"></see> object.</returns>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="index">The index of the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <returns>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="bytes">bytes</paramref> is null (Nothing).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not denote a valid range in <paramref name="bytes">bytes</paramref>.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for fuller explanation)   -and-  <see cref="P:System.Text.Decoder.Fallback"></see> is set to <see cref="T:System.Text.DecoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array. A parameter indicates whether to clear the internal state of the decoder after the calculation.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="index">The index of the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <param name="flush">true to simulate clearing the internal state of the encoder after the calculation; otherwise, false.</param>
      <returns>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="bytes">bytes</paramref> is null (Nothing).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not denote a valid range in <paramref name="bytes">bytes</paramref>.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for fuller explanation)   -and-  <see cref="P:System.Text.Decoder.Fallback"></see> is set to <see cref="T:System.Text.DecoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="byteIndex">The index of the first byte to decode.</param>
      <param name="byteCount">The number of bytes to decode.</param>
      <param name="chars">The character array to contain the resulting set of characters.</param>
      <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
      <returns>The actual number of characters written into <paramref name="chars">chars</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="bytes">bytes</paramref> is null (Nothing).   -or-  <paramref name="chars">chars</paramref> is null (Nothing).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="byteIndex">byteIndex</paramref> or <paramref name="byteCount">byteCount</paramref> or <paramref name="charIndex">charIndex</paramref> is less than zero.   -or-  <paramref name="byteindex">byteindex</paramref> and <paramref name="byteCount">byteCount</paramref> do not denote a valid range in <paramref name="bytes">bytes</paramref>.   -or-  <paramref name="charIndex">charIndex</paramref> is not a valid index in <paramref name="chars">chars</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="chars">chars</paramref> does not have enough capacity from <paramref name="charIndex">charIndex</paramref> to the end of the array to accommodate the resulting characters.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for fuller explanation)   -and-  <see cref="P:System.Text.Decoder.Fallback"></see> is set to <see cref="T:System.Text.DecoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array. A parameter indicates whether to clear the internal state of the decoder after the conversion.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="byteIndex">The index of the first byte to decode.</param>
      <param name="byteCount">The number of bytes to decode.</param>
      <param name="chars">The character array to contain the resulting set of characters.</param>
      <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
      <param name="flush">true to clear the internal state of the decoder after the conversion; otherwise, false.</param>
      <returns>The actual number of characters written into the <paramref name="chars">chars</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="bytes">bytes</paramref> is null (Nothing).   -or-  <paramref name="chars">chars</paramref> is null (Nothing).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="byteIndex">byteIndex</paramref> or <paramref name="byteCount">byteCount</paramref> or <paramref name="charIndex">charIndex</paramref> is less than zero.   -or-  <paramref name="byteindex">byteindex</paramref> and <paramref name="byteCount">byteCount</paramref> do not denote a valid range in <paramref name="bytes">bytes</paramref>.   -or-  <paramref name="charIndex">charIndex</paramref> is not a valid index in <paramref name="chars">chars</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="chars">chars</paramref> does not have enough capacity from <paramref name="charIndex">charIndex</paramref> to the end of the array to accommodate the resulting characters.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for fuller explanation)   -and-  <see cref="P:System.Text.Decoder.Fallback"></see> is set to <see cref="T:System.Text.DecoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Decoder.Reset">
      <summary>When overridden in a derived class, sets the decoder back to its initial state.</summary>
    </member>
    <member name="T:System.Text.DecoderExceptionFallback">
      <summary>Provides a failure-handling mechanism, called a fallback, for an encoded input byte sequence that cannot be converted to an input character. The fallback throws an exception instead of decoding the input byte sequence. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderExceptionFallback"></see> class.</summary>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.CreateFallbackBuffer">
      <summary>Returns a decoder fallback buffer that throws an exception if it cannot convert a sequence of bytes to a character.</summary>
      <returns>A decoder fallback buffer that throws an exception when it cannot decode a byte sequence.</returns>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.Equals(System.Object)">
      <summary>Indicates whether the current <see cref="T:System.Text.DecoderExceptionFallback"></see> object and a specified object are equal.</summary>
      <param name="value">An object that derives from the <see cref="T:System.Text.DecoderExceptionFallback"></see> class.</param>
      <returns>true if <paramref name="value">value</paramref> is not null and is a <see cref="T:System.Text.DecoderExceptionFallback"></see> object; otherwise, false.</returns>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.GetHashCode">
      <summary>Retrieves the hash code for this instance.</summary>
      <returns>The return value is always the same arbitrary value, and has no special significance.</returns>
    </member>
    <member name="P:System.Text.DecoderExceptionFallback.MaxCharCount">
      <summary>Gets the maximum number of characters this instance can return.</summary>
      <returns>The return value is always zero.</returns>
    </member>
    <member name="T:System.Text.DecoderFallback">
      <summary>Provides a failure-handling mechanism, called a fallback, for an encoded input byte sequence that cannot be converted to an output character.</summary>
    </member>
    <member name="M:System.Text.DecoderFallback.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallback"></see> class.</summary>
    </member>
    <member name="M:System.Text.DecoderFallback.CreateFallbackBuffer">
      <summary>When overridden in a derived class, initializes a new instance of the <see cref="T:System.Text.DecoderFallbackBuffer"></see> class.</summary>
      <returns>An object that provides a fallback buffer for a decoder.</returns>
    </member>
    <member name="P:System.Text.DecoderFallback.ExceptionFallback">
      <summary>Gets an object that throws an exception when an input byte sequence cannot be decoded.</summary>
      <returns>A type derived from the <see cref="T:System.Text.DecoderFallback"></see> class. The default value is a <see cref="T:System.Text.DecoderExceptionFallback"></see> object.</returns>
    </member>
    <member name="P:System.Text.DecoderFallback.MaxCharCount">
      <summary>When overridden in a derived class, gets the maximum number of characters the current <see cref="T:System.Text.DecoderFallback"></see> object can return.</summary>
      <returns>The maximum number of characters the current <see cref="T:System.Text.DecoderFallback"></see> object can return.</returns>
    </member>
    <member name="P:System.Text.DecoderFallback.ReplacementFallback">
      <summary>Gets an object that outputs a substitute string in place of an input byte sequence that cannot be decoded.</summary>
      <returns>A type derived from the <see cref="T:System.Text.DecoderFallback"></see> class. The default value is a <see cref="T:System.Text.DecoderReplacementFallback"></see> object that emits the QUESTION MARK character (&quot;?&quot;, U+003F) in place of unknown byte sequences.</returns>
    </member>
    <member name="T:System.Text.DecoderFallbackBuffer">
      <summary>Provides a buffer that allows a fallback handler to return an alternate string to a decoder when it cannot decode an input byte sequence.</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackBuffer"></see> class.</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.Fallback(System.Byte[],System.Int32)">
      <summary>When overridden in a derived class, prepares the fallback buffer to handle the specified input byte sequence.</summary>
      <param name="bytesUnknown">An input array of bytes.</param>
      <param name="index">The index position of a byte in bytesUnknown.</param>
      <returns>true if the fallback buffer can process <paramref name="bytesUnknown">bytesUnknown</paramref>; false if the fallback buffer ignores <paramref name="bytesUnknown">bytesUnknown</paramref>.</returns>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.GetNextChar">
      <summary>When overridden in a derived class, retrieves the next character in the fallback buffer.</summary>
      <returns>The next character in the fallback buffer.</returns>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.MovePrevious">
      <summary>When overridden in a derived class, causes the next call to the <see cref="M:System.Text.DecoderFallbackBuffer.GetNextChar"></see> method to access the data buffer character position that is prior to the current character position.</summary>
      <returns>true if the <see cref="M:System.Text.DecoderFallbackBuffer.MovePrevious"></see> operation was successful; otherwise, false.</returns>
    </member>
    <member name="P:System.Text.DecoderFallbackBuffer.Remaining">
      <summary>When overridden in a derived class, gets the number of characters in the current <see cref="T:System.Text.DecoderFallbackBuffer"></see> object that remain to be processed.</summary>
      <returns>The number of characters in the current fallback buffer that have not yet been processed.</returns>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.Reset">
      <summary>Initializes all data and state information pertaining to this fallback buffer.</summary>
    </member>
    <member name="T:System.Text.DecoderFallbackException">
      <summary>The exception that is thrown when a decoder fallback operation fails. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackException"></see> class.</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackException"></see> class. A parameter specifies the error message.</summary>
      <param name="message">An error message.</param>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackException"></see> class. Parameters specify the error message and the inner exception that is the cause of this exception.</summary>
      <param name="message">An error message.</param>
      <param name="innerException">The exception that caused this exception.</param>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackException"></see> class. Parameters specify the error message, the array of bytes being decoded, and the index of the byte that cannot be decoded.</summary>
      <param name="message">An error message.</param>
      <param name="bytesUnknown">The input byte array.</param>
      <param name="index">The index position in bytesUnknown of the byte that cannot be decoded.</param>
    </member>
    <member name="P:System.Text.DecoderFallbackException.BytesUnknown">
      <summary>Gets the input byte sequence that caused the exception.</summary>
      <returns>The input byte array that cannot be decoded.</returns>
    </member>
    <member name="P:System.Text.DecoderFallbackException.Index">
      <summary>Gets the index position in the input byte sequence of the byte that caused the exception.</summary>
      <returns>The index position in the input byte array of the byte that cannot be decoded. The index position is zero-based.</returns>
    </member>
    <member name="T:System.Text.DecoderReplacementFallback">
      <summary>Provides a failure-handling mechanism, called a fallback, for an encoded input byte sequence that cannot be converted to an output character. The fallback emits a user-specified replacement string instead of a decoded input byte sequence. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderReplacementFallback"></see> class.</summary>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderReplacementFallback"></see> class using a specified replacement string.</summary>
      <param name="replacement">A string that is emitted in a decoding operation in place of an input byte sequence that cannot be decoded.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="replacement">replacement</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="replacement">replacement</paramref> contains an invalid surrogate pair. In other words, the surrogate pair does not consist of one high surrogate component followed by one low surrogate component.</exception>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.CreateFallbackBuffer">
      <summary>Creates a <see cref="T:System.Text.DecoderFallbackBuffer"></see> object that is initialized with the replacement string of this <see cref="T:System.Text.DecoderReplacementFallback"></see> object.</summary>
      <returns>A <see cref="T:System.Text.DecoderFallbackBuffer"></see> object that specifies a string to use instead of the original decoding operation input.</returns>
    </member>
    <member name="P:System.Text.DecoderReplacementFallback.DefaultString">
      <summary>Gets the replacement string that is the value of the <see cref="T:System.Text.DecoderReplacementFallback"></see> object.</summary>
      <returns>A substitute string that is emitted in place of an input byte sequence that cannot be decoded.</returns>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.Equals(System.Object)">
      <summary>Indicates whether the value of a specified object is equal to the <see cref="T:System.Text.DecoderReplacementFallback"></see> object.</summary>
      <param name="value">A <see cref="T:System.Text.DecoderReplacementFallback"></see> object.</param>
      <returns>true if <paramref name="value">value</paramref> is a <see cref="T:System.Text.DecoderReplacementFallback"></see> object having a <see cref="P:System.Text.DecoderReplacementFallback.DefaultString"></see> property that is equal to the <see cref="P:System.Text.DecoderReplacementFallback.DefaultString"></see> property of the current <see cref="T:System.Text.DecoderReplacementFallback"></see> object; otherwise, false.</returns>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.GetHashCode">
      <summary>Retrieves the hash code for the value of the <see cref="T:System.Text.DecoderReplacementFallback"></see> object.</summary>
      <returns>The hash code of the value of the object.</returns>
    </member>
    <member name="P:System.Text.DecoderReplacementFallback.MaxCharCount">
      <summary>Gets the number of characters in the replacement string for the <see cref="T:System.Text.DecoderReplacementFallback"></see> object.</summary>
      <returns>The number of characters in the string that is emitted in place of a byte sequence that cannot be decoded, that is, the length of the string returned by the <see cref="P:System.Text.DecoderReplacementFallback.DefaultString"></see> property.</returns>
    </member>
    <member name="T:System.Text.Encoder">
      <summary>Converts a set of characters into a sequence of bytes.</summary>
    </member>
    <member name="M:System.Text.Encoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.Encoder"></see> class.</summary>
    </member>
    <member name="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>Converts an array of Unicode characters to an encoded byte sequence and stores the result in an array of bytes.</summary>
      <param name="chars">An array of characters to convert.</param>
      <param name="charIndex">The first element of chars to convert.</param>
      <param name="charCount">The number of elements of chars to convert.</param>
      <param name="bytes">An array where the converted bytes are stored.</param>
      <param name="byteIndex">The first element of bytes in which data is stored.</param>
      <param name="byteCount">The maximum number of elements of bytes to use in the conversion.</param>
      <param name="flush">true to indicate no further data is to be converted; otherwise, false.</param>
      <param name="charsUsed">When this method returns, contains the number of characters from chars that were used in the conversion. This parameter is passed uninitialized.</param>
      <param name="bytesUsed">When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.</param>
      <param name="completed">When this method returns, contains true if all the characters specified by charCount were converted; otherwise, false. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="chars">chars</paramref> or <paramref name="bytes">bytes</paramref> is null (Nothing).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="charIndex">charIndex</paramref>, <paramref name="charCount">charCount</paramref>, <paramref name="byteIndex">byteIndex</paramref>, or <paramref name="byteCount">byteCount</paramref> is less than zero.   -or-   The length of <paramref name="chars">chars</paramref> - <paramref name="charIndex">charIndex</paramref> is less than <paramref name="charCount">charCount</paramref>.   -or-   The length of <paramref name="bytes">bytes</paramref> - <paramref name="byteIndex">byteIndex</paramref> is less than <paramref name="byteCount">byteCount</paramref>.</exception>
      <exception cref="T:System.ArgumentException">The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <see cref="Overload:System.Text.Encoder.GetByteCount"></see> method.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for fuller explanation)   -and-  <see cref="P:System.Text.Encoder.Fallback"></see> is set to <see cref="T:System.Text.EncoderExceptionFallback"></see>.</exception>
    </member>
    <member name="P:System.Text.Encoder.Fallback">
      <summary>Gets or sets a <see cref="T:System.Text.EncoderFallback"></see> object for the current <see cref="T:System.Text.Encoder"></see> object.</summary>
      <returns>A <see cref="T:System.Text.EncoderFallback"></see> object.</returns>
      <exception cref="T:System.ArgumentNullException">The value in a set operation is null (Nothing).</exception>
      <exception cref="T:System.ArgumentException">A new value cannot be assigned in a set operation because the current <see cref="T:System.Text.EncoderFallbackBuffer"></see> object contains data that has not been encoded yet.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for fuller explanation)   -and-  <see cref="P:System.Text.Encoder.Fallback"></see> is set to <see cref="T:System.Text.EncoderExceptionFallback"></see>.</exception>
    </member>
    <member name="P:System.Text.Encoder.FallbackBuffer">
      <summary>Gets the <see cref="T:System.Text.EncoderFallbackBuffer"></see> object associated with the current <see cref="T:System.Text.Encoder"></see> object.</summary>
      <returns>A <see cref="T:System.Text.EncoderFallbackBuffer"></see> object.</returns>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array. A parameter indicates whether to clear the internal state of the encoder after the calculation.</summary>
      <param name="chars">The character array containing the set of characters to encode.</param>
      <param name="index">The index of the first character to encode.</param>
      <param name="count">The number of characters to encode.</param>
      <param name="flush">true to simulate clearing the internal state of the encoder after the calculation; otherwise, false.</param>
      <returns>The number of bytes produced by encoding the specified characters and any characters in the internal buffer.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="chars">chars</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not denote a valid range in <paramref name="chars">chars</paramref>.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for fuller explanation)   -and-  <see cref="P:System.Text.Encoder.Fallback"></see> is set to <see cref="T:System.Text.EncoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, encodes a set of characters from the specified character array and any characters in the internal buffer into the specified byte array. A parameter indicates whether to clear the internal state of the encoder after the conversion.</summary>
      <param name="chars">The character array containing the set of characters to encode.</param>
      <param name="charIndex">The index of the first character to encode.</param>
      <param name="charCount">The number of characters to encode.</param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
      <param name="flush">true to clear the internal state of the encoder after the conversion; otherwise, false.</param>
      <returns>The actual number of bytes written into <paramref name="bytes">bytes</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="chars">chars</paramref> is null (Nothing).   -or-  <paramref name="bytes">bytes</paramref> is null (Nothing).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="charIndex">charIndex</paramref> or <paramref name="charCount">charCount</paramref> or <paramref name="byteIndex">byteIndex</paramref> is less than zero.   -or-  <paramref name="charIndex">charIndex</paramref> and <paramref name="charCount">charCount</paramref> do not denote a valid range in <paramref name="chars">chars</paramref>.   -or-  <paramref name="byteIndex">byteIndex</paramref> is not a valid index in <paramref name="bytes">bytes</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="bytes">bytes</paramref> does not have enough capacity from <paramref name="byteIndex">byteIndex</paramref> to the end of the array to accommodate the resulting bytes.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for fuller explanation)   -and-  <see cref="P:System.Text.Encoder.Fallback"></see> is set to <see cref="T:System.Text.EncoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoder.Reset">
      <summary>When overridden in a derived class, sets the encoder back to its initial state.</summary>
    </member>
    <member name="T:System.Text.EncoderExceptionFallback">
      <summary>Provides a failure-handling mechanism, called a fallback, for an input character that cannot be converted to an output byte sequence. The fallback throws an exception if an input character cannot be converted to an output byte sequence. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderExceptionFallback"></see> class.</summary>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.CreateFallbackBuffer">
      <summary>Returns an encoder fallback buffer that throws an exception if it cannot convert a character sequence to a byte sequence.</summary>
      <returns>An encoder fallback buffer that throws an exception when it cannot encode a character sequence.</returns>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.Equals(System.Object)">
      <summary>Indicates whether the current <see cref="T:System.Text.EncoderExceptionFallback"></see> object and a specified object are equal.</summary>
      <param name="value">An object that derives from the <see cref="T:System.Text.EncoderExceptionFallback"></see> class.</param>
      <returns>true if <paramref name="value">value</paramref> is not null (Nothing in Visual Basic .NET) and is a <see cref="T:System.Text.EncoderExceptionFallback"></see> object; otherwise, false.</returns>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.GetHashCode">
      <summary>Retrieves the hash code for this instance.</summary>
      <returns>The return value is always the same arbitrary value, and has no special significance.</returns>
    </member>
    <member name="P:System.Text.EncoderExceptionFallback.MaxCharCount">
      <summary>Gets the maximum number of characters this instance can return.</summary>
      <returns>The return value is always zero.</returns>
    </member>
    <member name="T:System.Text.EncoderFallback">
      <summary>Provides a failure-handling mechanism, called a fallback, for an input character that cannot be converted to an encoded output byte sequence.</summary>
    </member>
    <member name="M:System.Text.EncoderFallback.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderFallback"></see> class.</summary>
    </member>
    <member name="M:System.Text.EncoderFallback.CreateFallbackBuffer">
      <summary>When overridden in a derived class, initializes a new instance of the <see cref="T:System.Text.EncoderFallbackBuffer"></see> class.</summary>
      <returns>An object that provides a fallback buffer for an encoder.</returns>
    </member>
    <member name="P:System.Text.EncoderFallback.ExceptionFallback">
      <summary>Gets an object that throws an exception when an input character cannot be encoded.</summary>
      <returns>A type derived from the <see cref="T:System.Text.EncoderFallback"></see> class. The default value is a <see cref="T:System.Text.EncoderExceptionFallback"></see> object.</returns>
    </member>
    <member name="P:System.Text.EncoderFallback.MaxCharCount">
      <summary>When overridden in a derived class, gets the maximum number of characters the current <see cref="T:System.Text.EncoderFallback"></see> object can return.</summary>
      <returns>The maximum number of characters the current <see cref="T:System.Text.EncoderFallback"></see> object can return.</returns>
    </member>
    <member name="P:System.Text.EncoderFallback.ReplacementFallback">
      <summary>Gets an object that outputs a substitute string in place of an input character that cannot be encoded.</summary>
      <returns>A type derived from the <see cref="T:System.Text.EncoderFallback"></see> class. The default value is a <see cref="T:System.Text.EncoderReplacementFallback"></see> object that replaces unknown input characters with the QUESTION MARK character (&quot;?&quot;, U+003F).</returns>
    </member>
    <member name="T:System.Text.EncoderFallbackBuffer">
      <summary>Provides a buffer that allows a fallback handler to return an alternate string to an encoder when it cannot encode an input character.</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderFallbackBuffer"></see> class.</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)">
      <summary>When overridden in a derived class, prepares the fallback buffer to handle the specified input character.</summary>
      <param name="charUnknown">An input character.</param>
      <param name="index">The index position of the character in the input buffer.</param>
      <returns>true if the fallback buffer can process <paramref name="charUnknown">charUnknown</paramref>; false if the fallback buffer ignores <paramref name="charUnknown">charUnknown</paramref>.</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
      <summary>When overridden in a derived class, prepares the fallback buffer to handle the specified surrogate pair.</summary>
      <param name="charUnknownHigh">The high surrogate of the input pair.</param>
      <param name="charUnknownLow">The low surrogate of the input pair.</param>
      <param name="index">The index position of the surrogate pair in the input buffer.</param>
      <returns>true if the fallback buffer can process <paramref name="charUnknownHigh">charUnknownHigh</paramref> and <paramref name="charUnknownLow">charUnknownLow</paramref>; false if the fallback buffer ignores the surrogate pair.</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.GetNextChar">
      <summary>When overridden in a derived class, retrieves the next character in the fallback buffer.</summary>
      <returns>The next character in the fallback buffer.</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.MovePrevious">
      <summary>When overridden in a derived class, causes the next call to the <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar"></see> method to access the data buffer character position that is prior to the current character position.</summary>
      <returns>true if the <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious"></see> operation was successful; otherwise, false.</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackBuffer.Remaining">
      <summary>When overridden in a derived class, gets the number of characters in the current <see cref="T:System.Text.EncoderFallbackBuffer"></see> object that remain to be processed.</summary>
      <returns>The number of characters in the current fallback buffer that have not yet been processed.</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.Reset">
      <summary>Initializes all data and state information pertaining to this fallback buffer.</summary>
    </member>
    <member name="T:System.Text.EncoderFallbackException">
      <summary>The exception that is thrown when an encoder fallback operation fails. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderFallbackException"></see> class.</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderFallbackException"></see> class. A parameter specifies the error message.</summary>
      <param name="message">An error message.</param>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderFallbackException"></see> class. Parameters specify the error message and the inner exception that is the cause of this exception.</summary>
      <param name="message">An error message.</param>
      <param name="innerException">The exception that caused this exception.</param>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknown">
      <summary>Gets the input character that caused the exception.</summary>
      <returns>The character that cannot be encoded.</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknownHigh">
      <summary>Gets the high component character of the surrogate pair that caused the exception.</summary>
      <returns>The high component character of the surrogate pair that cannot be encoded.</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknownLow">
      <summary>Gets the low component character of the surrogate pair that caused the exception.</summary>
      <returns>The low component character of the surrogate pair that cannot be encoded.</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.Index">
      <summary>Gets the index position in the input buffer of the character that caused the exception.</summary>
      <returns>The index position in the input buffer of the character that cannot be encoded.</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackException.IsUnknownSurrogate">
      <summary>Indicates whether the input that caused the exception is a surrogate pair.</summary>
      <returns>true if the input was a surrogate pair; otherwise, false.</returns>
    </member>
    <member name="T:System.Text.EncoderReplacementFallback">
      <summary>Provides a failure handling mechanism, called a fallback, for an input character that cannot be converted to an output byte sequence. The fallback uses a user-specified replacement string instead of the original input character. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderReplacementFallback"></see> class.</summary>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderReplacementFallback"></see> class using a specified replacement string.</summary>
      <param name="replacement">A string that is converted in an encoding operation in place of an input character that cannot be encoded.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="replacement">replacement</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="replacement">replacement</paramref> contains an invalid surrogate pair. In other words, the surrogate does not consist of one high surrogate component followed by one low surrogate component.</exception>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.CreateFallbackBuffer">
      <summary>Creates a <see cref="T:System.Text.EncoderFallbackBuffer"></see> object that is initialized with the replacement string of this <see cref="T:System.Text.EncoderReplacementFallback"></see> object.</summary>
      <returns>A <see cref="T:System.Text.EncoderFallbackBuffer"></see> object equal to this <see cref="T:System.Text.EncoderReplacementFallback"></see> object.</returns>
    </member>
    <member name="P:System.Text.EncoderReplacementFallback.DefaultString">
      <summary>Gets the replacement string that is the value of the <see cref="T:System.Text.EncoderReplacementFallback"></see> object.</summary>
      <returns>A substitute string that is used in place of an input character that cannot be encoded.</returns>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.Equals(System.Object)">
      <summary>Indicates whether the value of a specified object is equal to the <see cref="T:System.Text.EncoderReplacementFallback"></see> object.</summary>
      <param name="value">A <see cref="T:System.Text.EncoderReplacementFallback"></see> object.</param>
      <returns>true if the <paramref name="value">value</paramref> parameter specifies an <see cref="T:System.Text.EncoderReplacementFallback"></see> object and the replacement string of that object is equal to the replacement string of this <see cref="T:System.Text.EncoderReplacementFallback"></see> object; otherwise, false.</returns>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.GetHashCode">
      <summary>Retrieves the hash code for the value of the <see cref="T:System.Text.EncoderReplacementFallback"></see> object.</summary>
      <returns>The hash code of the value of the object.</returns>
    </member>
    <member name="P:System.Text.EncoderReplacementFallback.MaxCharCount">
      <summary>Gets the number of characters in the replacement string for the <see cref="T:System.Text.EncoderReplacementFallback"></see> object.</summary>
      <returns>The number of characters in the string used in place of an input character that cannot be encoded.</returns>
    </member>
    <member name="T:System.Text.Encoding">
      <summary>Represents a character encoding.</summary>
    </member>
    <member name="M:System.Text.Encoding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.Encoding"></see> class.</summary>
    </member>
    <member name="M:System.Text.Encoding.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.Encoding"></see> class that corresponds to the specified code page.</summary>
      <param name="codePage">The code page identifier of the preferred encoding.   -or-   0, to use the default encoding.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="codePage">codePage</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.Encoding"></see> class that corresponds to the specified code page with the specified encoder and decoder fallback strategies.</summary>
      <param name="codePage">The encoding code page identifier.</param>
      <param name="encoderFallback">An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</param>
      <param name="decoderFallback">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="codePage">codePage</paramref> is less than zero.</exception>
    </member>
    <member name="P:System.Text.Encoding.ASCII">
      <summary>Gets an encoding for the ASCII (7-bit) character set.</summary>
      <returns>An  encoding for the ASCII (7-bit) character set.</returns>
    </member>
    <member name="P:System.Text.Encoding.BigEndianUnicode">
      <summary>Gets an encoding for the UTF-16 format that uses the big endian byte order.</summary>
      <returns>An encoding object for the UTF-16 format that uses the big endian byte order.</returns>
    </member>
    <member name="M:System.Text.Encoding.Clone">
      <summary>When overridden in a derived class, creates a shallow copy of the current <see cref="T:System.Text.Encoding"></see> object.</summary>
      <returns>A copy of the current <see cref="T:System.Text.Encoding"></see> object.</returns>
    </member>
    <member name="P:System.Text.Encoding.CodePage">
      <summary>When overridden in a derived class, gets the code page identifier of the current <see cref="T:System.Text.Encoding"></see>.</summary>
      <returns>The code page identifier of the current <see cref="T:System.Text.Encoding"></see>.</returns>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
      <summary>Converts a range of bytes in a byte array from one encoding to another.</summary>
      <param name="srcEncoding">The encoding of the source array, bytes.</param>
      <param name="dstEncoding">The encoding of the output array.</param>
      <param name="bytes">The array of bytes to convert.</param>
      <param name="index">The index of the first element of bytes to convert.</param>
      <param name="count">The number of bytes to convert.</param>
      <returns>An array of type <see cref="T:System.Byte"></see> containing the result of converting a range of bytes in <paramref name="bytes">bytes</paramref> from <paramref name="srcEncoding">srcEncoding</paramref> to <paramref name="dstEncoding">dstEncoding</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="srcEncoding">srcEncoding</paramref> is null.   -or-  <paramref name="dstEncoding">dstEncoding</paramref> is null.   -or-  <paramref name="bytes">bytes</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not specify a valid range in the byte array.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  srcEncoding.<see cref="P:System.Text.Encoding.DecoderFallback"></see> is set to <see cref="T:System.Text.DecoderExceptionFallback"></see>.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  dstEncoding.<see cref="P:System.Text.Encoding.EncoderFallback"></see> is set to <see cref="T:System.Text.EncoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
      <summary>Converts an entire byte array from one encoding to another.</summary>
      <param name="srcEncoding">The encoding format of bytes.</param>
      <param name="dstEncoding">The target encoding format.</param>
      <param name="bytes">The bytes to convert.</param>
      <returns>An array of type <see cref="T:System.Byte"></see> containing the results of converting <paramref name="bytes">bytes</paramref> from <paramref name="srcEncoding">srcEncoding</paramref> to <paramref name="dstEncoding">dstEncoding</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="srcEncoding">srcEncoding</paramref> is null.   -or-  <paramref name="dstEncoding">dstEncoding</paramref> is null.   -or-  <paramref name="bytes">bytes</paramref> is null.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  srcEncoding.<see cref="P:System.Text.Encoding.DecoderFallback"></see> is set to <see cref="T:System.Text.DecoderExceptionFallback"></see>.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  dstEncoding.<see cref="P:System.Text.Encoding.EncoderFallback"></see> is set to <see cref="T:System.Text.EncoderExceptionFallback"></see>.</exception>
    </member>
    <member name="P:System.Text.Encoding.DecoderFallback">
      <summary>Gets or sets the <see cref="T:System.Text.DecoderFallback"></see> object for the current <see cref="T:System.Text.Encoding"></see> object.</summary>
      <returns>The decoder fallback object for the current <see cref="T:System.Text.Encoding"></see> object.</returns>
      <exception cref="T:System.ArgumentNullException">The value in a set operation is null.</exception>
      <exception cref="T:System.InvalidOperationException">A value cannot be assigned in a set operation because the current <see cref="T:System.Text.Encoding"></see> object is read-only.</exception>
    </member>
    <member name="P:System.Text.Encoding.EncoderFallback">
      <summary>Gets or sets the <see cref="T:System.Text.EncoderFallback"></see> object for the current <see cref="T:System.Text.Encoding"></see> object.</summary>
      <returns>The encoder fallback object for the current <see cref="T:System.Text.Encoding"></see> object.</returns>
      <exception cref="T:System.ArgumentNullException">The value in a set operation is null.</exception>
      <exception cref="T:System.InvalidOperationException">A value cannot be assigned in a set operation because the current <see cref="T:System.Text.Encoding"></see> object is read-only.</exception>
    </member>
    <member name="P:System.Text.Encoding.EncodingName">
      <summary>When overridden in a derived class, gets the human-readable description of the current encoding.</summary>
      <returns>The human-readable description of the current <see cref="T:System.Text.Encoding"></see>.</returns>
    </member>
    <member name="M:System.Text.Encoding.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object"></see> is equal to the current instance.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to compare with the current instance.</param>
      <returns>true if <paramref name="value">value</paramref> is an instance of <see cref="T:System.Text.Encoding"></see> and is equal to the current instance; otherwise, false.</returns>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.</summary>
      <param name="chars">The character array containing the set of characters to encode.</param>
      <param name="index">The index of the first character to encode.</param>
      <param name="count">The number of characters to encode.</param>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="chars">chars</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not denote a valid range in <paramref name="chars">chars</paramref>.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.EncoderFallback"></see> is set to <see cref="T:System.Text.EncoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[])">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding all the characters in the specified character array.</summary>
      <param name="chars">The character array containing the characters to encode.</param>
      <returns>The number of bytes produced by encoding all the characters in the specified character array.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="chars">chars</paramref> is null.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.EncoderFallback"></see> is set to <see cref="T:System.Text.EncoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.String)">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding the characters in the specified string.</summary>
      <param name="s">The string containing the set of characters to encode.</param>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="s">s</paramref> is null.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.EncoderFallback"></see> is set to <see cref="T:System.Text.EncoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</summary>
      <param name="chars">A pointer to the first character to encode.</param>
      <param name="count">The number of characters to encode.</param>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="chars">chars</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.EncoderFallback"></see> is set to <see cref="T:System.Text.EncoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[])">
      <summary>When overridden in a derived class, encodes all the characters in the specified character array into a sequence of bytes.</summary>
      <param name="chars">The character array containing the characters to encode.</param>
      <returns>A byte array containing the results of encoding the specified set of characters.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="chars">chars</paramref> is null.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.EncoderFallback"></see> is set to <see cref="T:System.Text.EncoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String)">
      <summary>When overridden in a derived class, encodes all the characters in the specified string into a sequence of bytes.</summary>
      <param name="s">The string containing the characters to encode.</param>
      <returns>A byte array containing the results of encoding the specified set of characters.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="s">s</paramref> is null.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.EncoderFallback"></see> is set to <see cref="T:System.Text.EncoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, encodes a set of characters from the specified character array into a sequence of bytes.</summary>
      <param name="chars">The character array containing the set of characters to encode.</param>
      <param name="index">The index of the first character to encode.</param>
      <param name="count">The number of characters to encode.</param>
      <returns>A byte array containing the results of encoding the specified set of characters.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="chars">chars</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not denote a valid range in <paramref name="chars">chars</paramref>.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.EncoderFallback"></see> is set to <see cref="T:System.Text.EncoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
      <summary>When overridden in a derived class, encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</summary>
      <param name="chars">A pointer to the first character to encode.</param>
      <param name="charCount">The number of characters to encode.</param>
      <param name="bytes">A pointer to the location at which to start writing the resulting sequence of bytes.</param>
      <param name="byteCount">The maximum number of bytes to write.</param>
      <returns>The actual number of bytes written at the location indicated by the <paramref name="bytes">bytes</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="chars">chars</paramref> is null.   -or-  <paramref name="bytes">bytes</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="charCount">charCount</paramref> or <paramref name="byteCount">byteCount</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="byteCount">byteCount</paramref> is less than the resulting number of bytes.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.EncoderFallback"></see> is set to <see cref="T:System.Text.EncoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.</summary>
      <param name="chars">The character array containing the set of characters to encode.</param>
      <param name="charIndex">The index of the first character to encode.</param>
      <param name="charCount">The number of characters to encode.</param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
      <returns>The actual number of bytes written into <paramref name="bytes">bytes</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="chars">chars</paramref> is null.   -or-  <paramref name="bytes">bytes</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="charIndex">charIndex</paramref> or <paramref name="charCount">charCount</paramref> or <paramref name="byteIndex">byteIndex</paramref> is less than zero.   -or-  <paramref name="charIndex">charIndex</paramref> and <paramref name="charCount">charCount</paramref> do not denote a valid range in <paramref name="chars">chars</paramref>.   -or-  <paramref name="byteIndex">byteIndex</paramref> is not a valid index in <paramref name="bytes">bytes</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="bytes">bytes</paramref> does not have enough capacity from <paramref name="byteIndex">byteIndex</paramref> to the end of the array to accommodate the resulting bytes.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.EncoderFallback"></see> is set to <see cref="T:System.Text.EncoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>When overridden in a derived class, encodes a set of characters from the specified string into the specified byte array.</summary>
      <param name="s">The string containing the set of characters to encode.</param>
      <param name="charIndex">The index of the first character to encode.</param>
      <param name="charCount">The number of characters to encode.</param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
      <returns>The actual number of bytes written into <paramref name="bytes">bytes</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="s">s</paramref> is null.   -or-  <paramref name="bytes">bytes</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="charIndex">charIndex</paramref> or <paramref name="charCount">charCount</paramref> or <paramref name="byteIndex">byteIndex</paramref> is less than zero.   -or-  <paramref name="charIndex">charIndex</paramref> and <paramref name="charCount">charCount</paramref> do not denote a valid range in <paramref name="chars">chars</paramref>.   -or-  <paramref name="byteIndex">byteIndex</paramref> is not a valid index in <paramref name="bytes">bytes</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="bytes">bytes</paramref> does not have enough capacity from <paramref name="byteIndex">byteIndex</paramref> to the end of the array to accommodate the resulting bytes.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.EncoderFallback"></see> is set to <see cref="T:System.Text.EncoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[])">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding all the bytes in the specified byte array.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="bytes">bytes</paramref> is null.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.DecoderFallback"></see> is set to <see cref="T:System.Text.DecoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</summary>
      <param name="bytes">A pointer to the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="bytes">bytes</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.DecoderFallback"></see> is set to <see cref="T:System.Text.DecoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="index">The index of the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="bytes">bytes</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not denote a valid range in <paramref name="bytes">bytes</paramref>.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.DecoderFallback"></see> is set to <see cref="T:System.Text.DecoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="byteIndex">The index of the first byte to decode.</param>
      <param name="byteCount">The number of bytes to decode.</param>
      <param name="chars">The character array to contain the resulting set of characters.</param>
      <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
      <returns>The actual number of characters written into <paramref name="chars">chars</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="bytes">bytes</paramref> is null.   -or-  <paramref name="chars">chars</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="byteIndex">byteIndex</paramref> or <paramref name="byteCount">byteCount</paramref> or <paramref name="charIndex">charIndex</paramref> is less than zero.   -or-  <paramref name="byteindex">byteindex</paramref> and <paramref name="byteCount">byteCount</paramref> do not denote a valid range in <paramref name="bytes">bytes</paramref>.   -or-  <paramref name="charIndex">charIndex</paramref> is not a valid index in <paramref name="chars">chars</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="chars">chars</paramref> does not have enough capacity from <paramref name="charIndex">charIndex</paramref> to the end of the array to accommodate the resulting characters.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.DecoderFallback"></see> is set to <see cref="T:System.Text.DecoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
      <summary>When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</summary>
      <param name="bytes">A pointer to the first byte to decode.</param>
      <param name="byteCount">The number of bytes to decode.</param>
      <param name="chars">A pointer to the location at which to start writing the resulting set of characters.</param>
      <param name="charCount">The maximum number of characters to write.</param>
      <returns>The actual number of characters written at the location indicated by the <paramref name="chars">chars</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="bytes">bytes</paramref> is null.   -or-  <paramref name="chars">chars</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="byteCount">byteCount</paramref> or <paramref name="charCount">charCount</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="charCount">charCount</paramref> is less than the resulting number of characters.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.DecoderFallback"></see> is set to <see cref="T:System.Text.DecoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a set of characters.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="index">The index of the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <returns>A character array containing the results of decoding the specified sequence of bytes.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="bytes">bytes</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not denote a valid range in <paramref name="bytes">bytes</paramref>.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.DecoderFallback"></see> is set to <see cref="T:System.Text.DecoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[])">
      <summary>When overridden in a derived class, decodes all the bytes in the specified byte array into a set of characters.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <returns>A character array containing the results of decoding the specified sequence of bytes.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="bytes">bytes</paramref> is null.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.DecoderFallback"></see> is set to <see cref="T:System.Text.DecoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetDecoder">
      <summary>When overridden in a derived class, obtains a decoder that converts an encoded sequence of bytes into a sequence of characters.</summary>
      <returns>A <see cref="T:System.Text.Decoder"></see> that converts an encoded sequence of bytes into a sequence of characters.</returns>
    </member>
    <member name="M:System.Text.Encoding.GetEncoder">
      <summary>When overridden in a derived class, obtains an encoder that converts a sequence of Unicode characters into an encoded sequence of bytes.</summary>
      <returns>A <see cref="T:System.Text.Encoder"></see> that converts a sequence of Unicode characters into an encoded sequence of bytes.</returns>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.Int32)">
      <summary>Returns the encoding associated with the specified code page identifier.</summary>
      <param name="codepage">The code page identifier of the preferred encoding. Possible values are listed in the Code Page column of the table that appears in the <see cref="T:System.Text.Encoding"></see> class topic.   -or-   0 (zero), to use the default encoding.</param>
      <returns>The encoding that is associated with the specified code page.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="codepage">codepage</paramref> is less than zero or greater than 65535.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="codepage">codepage</paramref> is not supported by the underlying platform.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="codepage">codepage</paramref> is not supported by the underlying platform.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.String)">
      <summary>Returns the encoding associated with the specified code page name.</summary>
      <param name="name">The code page name of the preferred encoding. Any value returned by the <see cref="P:System.Text.Encoding.WebName"></see> property is valid. Possible values are listed in the Name column of the table that appears in the <see cref="T:System.Text.Encoding"></see> class topic.</param>
      <returns>The encoding  associated with the specified code page.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="name">name</paramref> is not a valid code page name.   -or-   The code page indicated by <paramref name="name">name</paramref> is not supported by the underlying platform.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>Returns the encoding associated with the specified code page identifier. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</summary>
      <param name="codepage">The code page identifier of the preferred encoding. Possible values are listed in the Code Page column of the table that appears in the <see cref="T:System.Text.Encoding"></see> class topic.   -or-   0 (zero), to use the default encoding.</param>
      <param name="encoderFallback">An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</param>
      <param name="decoderFallback">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</param>
      <returns>The encoding that is associated with the specified code page.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="codepage">codepage</paramref> is less than zero or greater than 65535.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="codepage">codepage</paramref> is not supported by the underlying platform.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="codepage">codepage</paramref> is not supported by the underlying platform.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>Returns the encoding associated with the specified code page name. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</summary>
      <param name="name">The code page name of the preferred encoding. Any value returned by the <see cref="P:System.Text.Encoding.WebName"></see> property is valid. Possible values are listed in the Name column of the table that appears in the <see cref="T:System.Text.Encoding"></see> class topic.</param>
      <param name="encoderFallback">An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</param>
      <param name="decoderFallback">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</param>
      <returns>The encoding that is associated with the specified code page.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="name">name</paramref> is not a valid code page name.   -or-   The code page indicated by <paramref name="name">name</paramref> is not supported by the underlying platform.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>The hash code for the current instance.</returns>
    </member>
    <member name="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
      <summary>When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.</summary>
      <param name="charCount">The number of characters to encode.</param>
      <returns>The maximum number of bytes produced by encoding the specified number of characters.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="charCount">charCount</paramref> is less than zero.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.EncoderFallback"></see> is set to <see cref="T:System.Text.EncoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
      <summary>When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.</summary>
      <param name="byteCount">The number of bytes to decode.</param>
      <returns>The maximum number of characters produced by decoding the specified number of bytes.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="byteCount">byteCount</paramref> is less than zero.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.DecoderFallback"></see> is set to <see cref="T:System.Text.DecoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetPreamble">
      <summary>When overridden in a derived class, returns a sequence of bytes that specifies the encoding used.</summary>
      <returns>A byte array containing a sequence of bytes that specifies the encoding used.   -or-   A byte array of length zero, if a preamble is not required.</returns>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte[])">
      <summary>When overridden in a derived class, decodes all the bytes in the specified byte array into a string.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <returns>A string that contains the results of decoding the specified sequence of bytes.</returns>
      <exception cref="T:System.ArgumentException">The byte array contains invalid Unicode code points.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="bytes">bytes</paramref> is null.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.DecoderFallback"></see> is set to <see cref="T:System.Text.DecoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
      <summary>When overridden in a derived class, decodes a specified number of bytes starting at a specified address into a string.</summary>
      <param name="bytes">A pointer to a byte array.</param>
      <param name="byteCount">The number of bytes to decode.</param>
      <returns>A string that contains the results of decoding the specified sequence of bytes.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="bytes">bytes</paramref> is a null pointer.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="byteCount">byteCount</paramref> is less than zero.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A   fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for a complete explanation)   -and-  <see cref="P:System.Text.Encoding.DecoderFallback"></see> is set to <see cref="T:System.Text.DecoderExceptionFallback"></see>.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a string.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="index">The index of the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <returns>A string that contains the results of decoding the specified sequence of bytes.</returns>
      <exception cref="T:System.ArgumentException">The byte array contains invalid Unicode code points.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="bytes">bytes</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not denote a valid range in <paramref name="bytes">bytes</paramref>.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see <see cref="~/docs/standard/base-types/character-encoding.md">Character Encoding in the .NET Framework</see> for complete explanation)   -and-  <see cref="P:System.Text.Encoding.DecoderFallback"></see> is set to <see cref="T:System.Text.DecoderExceptionFallback"></see>.</exception>
    </member>
    <member name="P:System.Text.Encoding.IsSingleByte">
      <summary>When overridden in a derived class, gets a value indicating whether the current encoding uses single-byte code points.</summary>
      <returns>true if the current <see cref="T:System.Text.Encoding"></see> uses single-byte code points; otherwise, false.</returns>
    </member>
    <member name="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
      <summary>Registers an encoding provider.</summary>
      <param name="provider">A subclass of <see cref="T:System.Text.EncodingProvider"></see> that provides access to additional character encodings.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="provider">provider</paramref> is null.</exception>
    </member>
    <member name="P:System.Text.Encoding.Unicode">
      <summary>Gets an encoding for the UTF-16 format using the little endian byte order.</summary>
      <returns>An encoding for the UTF-16 format using the little endian byte order.</returns>
    </member>
    <member name="P:System.Text.Encoding.UTF32">
      <summary>Gets an encoding for the UTF-32 format using the little endian byte order.</summary>
      <returns>An  encoding object for the UTF-32 format using the little endian byte order.</returns>
    </member>
    <member name="P:System.Text.Encoding.UTF7">
      <summary>Gets an encoding for the UTF-7 format.</summary>
      <returns>An encoding for the UTF-7 format.</returns>
    </member>
    <member name="P:System.Text.Encoding.UTF8">
      <summary>Gets an encoding for the UTF-8 format.</summary>
      <returns>An encoding for the UTF-8 format.</returns>
    </member>
    <member name="P:System.Text.Encoding.WebName">
      <summary>When overridden in a derived class, gets the name registered with the Internet Assigned Numbers Authority (IANA) for the current encoding.</summary>
      <returns>The IANA name for the current <see cref="T:System.Text.Encoding"></see>.</returns>
    </member>
    <member name="T:System.Text.EncodingProvider">
      <summary>Provides the base class for an encoding provider, which supplies encodings that are unavailable on a particular platform.</summary>
    </member>
    <member name="M:System.Text.EncodingProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncodingProvider"></see> class.</summary>
    </member>
    <member name="M:System.Text.EncodingProvider.GetEncoding(System.Int32)">
      <summary>Returns the encoding associated with the specified code page identifier.</summary>
      <param name="codepage">The code page identifier of the requested encoding.</param>
      <returns>The encoding that is associated with the specified code page, or null if this <see cref="T:System.Text.EncodingProvider"></see> cannot return a valid encoding that corresponds to <paramref name="codepage">codepage</paramref>.</returns>
    </member>
    <member name="M:System.Text.EncodingProvider.GetEncoding(System.String)">
      <summary>Returns the encoding with the specified name.</summary>
      <param name="name">The name of the requested encoding.</param>
      <returns>The encoding that is associated with the specified name, or null if this <see cref="T:System.Text.EncodingProvider"></see> cannot return a valid encoding that corresponds to <paramref name="name">name</paramref>.</returns>
    </member>
    <member name="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>Returns the encoding associated with the specified code page identifier. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</summary>
      <param name="codepage">The code page identifier of the requested encoding.</param>
      <param name="encoderFallback">An object that provides an error-handling procedure when a character cannot be encoded with this encoding.</param>
      <param name="decoderFallback">An object that provides an error-handling procedure when a byte sequence cannot be decoded with this encoding.</param>
      <returns>The encoding that is associated with the specified code page, or null if this <see cref="T:System.Text.EncodingProvider"></see> cannot return a valid encoding that corresponds to <paramref name="codepage">codepage</paramref>.</returns>
    </member>
    <member name="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>Returns the encoding associated with the specified name. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</summary>
      <param name="name">The name of the preferred encoding.</param>
      <param name="encoderFallback">An object that provides an error-handling procedure when a character cannot be encoded with this encoding.</param>
      <param name="decoderFallback">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</param>
      <returns>The encoding that is associated with the specified name, or null if this <see cref="T:System.Text.EncodingProvider"></see> cannot return a valid encoding that corresponds to <paramref name="name">name</paramref>.</returns>
    </member>
  </members>
</doc></span>