/*
 * Copyright 2019 by its authors. See AUTHORS.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma warning disable CS1591
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics.Contracts;
namespace CoreUI.Input {
    /// <summary>Event data sent when inputs are put on hold or resumed.</summary>
    /// <since_tizen> 6 </since_tizen>
    [CoreUI.Input.Hold.NativeMethods]
    [CoreUI.Wrapper.BindingEntity]
    [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
    public class Hold : CoreUI.Object, CoreUI.Input.IEvent
    {
        /// <summary>Pointer to the native class description.</summary>
        public override System.IntPtr NativeClass
        {
            get
            {
                if (((object)this).GetType() == typeof(Hold))
                {
                    return GetCoreUIClassStatic();
                }
                else
                {
                    return CoreUI.Wrapper.ClassRegister.klassFromType[((object)this).GetType()];
                }
            }
        }

        [System.Runtime.InteropServices.DllImport(CoreUI.Libs.Evas)] internal static extern System.IntPtr
            efl_input_hold_class_get();

        /// <summary>Initializes a new instance of the <see cref="Hold"/> class.
        /// </summary>
        /// <param name="parent">Parent instance.</param>
        public Hold(CoreUI.Object parent= null) : base(efl_input_hold_class_get(), parent)
        {
            FinishInstantiation();
        }

        /// <summary>Subclasses should override this constructor if they are expected to be instantiated from native code.
        /// Do not call this constructor directly.
        /// </summary>
        /// <param name="ch">Tag struct storing the native handle of the object being constructed.</param>
        protected Hold(ConstructingHandle ch) : base(ch)
        {
        }

        /// <summary>Initializes a new instance of the <see cref="Hold"/> class.
        /// Internal usage: Constructs an instance from a native pointer. This is used when interacting with C code and should not be used directly.
        /// </summary>
        /// <param name="wh">The native pointer to be wrapped.</param>
        internal Hold(CoreUI.Wrapper.WrappingHandle wh) : base(wh)
        {
        }

        /// <summary>Initializes a new instance of the <see cref="Hold"/> class.
        /// Internal usage: Constructor to forward the wrapper initialization to the root class that interfaces with native code. Should not be used directly.
        /// </summary>
        /// <param name="baseKlass">The pointer to the base native Eo class.</param>
        /// <param name="parent">The CoreUI.Object parent of this instance.</param>
        protected Hold(IntPtr baseKlass, CoreUI.Object parent) : base(baseKlass, parent)
        {
        }


        /// <summary>Property to show if inputs are now on hold.</summary>
        /// <returns><c>true</c> if inputs are on hold, <c>false</c> otherwise</returns>
        /// <since_tizen> 6 </since_tizen>
        public virtual bool GetInputHold() {
            var _ret_var = CoreUI.Input.Hold.NativeMethods.efl_input_hold_get_ptr.Value.Delegate((IsGeneratedBindingClass ? this.NativeHandle : CoreUI.Wrapper.Globals.Super(this.NativeHandle, this.NativeClass)));
            CoreUI.DataTypes.Error.RaiseIfUnhandledException();
            return _ret_var;
        }

        /// <summary>Property to show if inputs are now on hold.</summary>
        /// <param name="val"><c>true</c> if inputs are on hold, <c>false</c> otherwise</param>
        /// <since_tizen> 6 </since_tizen>
        public virtual void SetInputHold(bool val) {
            CoreUI.Input.Hold.NativeMethods.efl_input_hold_set_ptr.Value.Delegate((IsGeneratedBindingClass ? this.NativeHandle : CoreUI.Wrapper.Globals.Super(this.NativeHandle, this.NativeClass)), val);
            CoreUI.DataTypes.Error.RaiseIfUnhandledException();
            
        }

        /// <summary>The time at which an event was generated.
        /// 
        /// If the event is generated by a server (eg. X.org or Wayland), then the time may be set by the server. Usually this time will be based on the monotonic clock, if available, but this class can not guarantee it.</summary>
        /// <returns>Time in milliseconds when the event happened.</returns>
        /// <since_tizen> 6 </since_tizen>
        public virtual double GetTimestamp() {
            var _ret_var = CoreUI.Input.IEventNativeMethods.efl_input_timestamp_get_ptr.Value.Delegate((IsGeneratedBindingClass ? this.NativeHandle : CoreUI.Wrapper.Globals.Super(this.NativeHandle, this.NativeClass)));
            CoreUI.DataTypes.Error.RaiseIfUnhandledException();
            return _ret_var;
        }

        /// <summary>The time at which an event was generated.
        /// 
        /// If the event is generated by a server (eg. X.org or Wayland), then the time may be set by the server. Usually this time will be based on the monotonic clock, if available, but this class can not guarantee it.<br/>
        /// <b>Note:</b> Call this when generating events manually.</summary>
        /// <param name="ms">Time in milliseconds when the event happened.</param>
        /// <since_tizen> 6 </since_tizen>
        public virtual void SetTimestamp(double ms) {
            CoreUI.Input.IEventNativeMethods.efl_input_timestamp_set_ptr.Value.Delegate((IsGeneratedBindingClass ? this.NativeHandle : CoreUI.Wrapper.Globals.Super(this.NativeHandle, this.NativeClass)), ms);
            CoreUI.DataTypes.Error.RaiseIfUnhandledException();
            
        }

        /// <summary>Input device that originated this event.</summary>
        /// <returns>Input device origin</returns>
        /// <since_tizen> 6 </since_tizen>
        public virtual CoreUI.Input.Device GetDevice() {
            var _ret_var = CoreUI.Input.IEventNativeMethods.efl_input_device_get_ptr.Value.Delegate((IsGeneratedBindingClass ? this.NativeHandle : CoreUI.Wrapper.Globals.Super(this.NativeHandle, this.NativeClass)));
            CoreUI.DataTypes.Error.RaiseIfUnhandledException();
            return _ret_var;
        }

        /// <summary>Input device that originated this event.</summary>
        /// <param name="dev">Input device origin</param>
        /// <since_tizen> 6 </since_tizen>
        public virtual void SetDevice(CoreUI.Input.Device dev) {
            CoreUI.Input.IEventNativeMethods.efl_input_device_set_ptr.Value.Delegate((IsGeneratedBindingClass ? this.NativeHandle : CoreUI.Wrapper.Globals.Super(this.NativeHandle, this.NativeClass)), dev);
            CoreUI.DataTypes.Error.RaiseIfUnhandledException();
            
        }

        /// <summary>Extra flags for this event, may be changed by the user.</summary>
        /// <returns>Input event flags</returns>
        /// <since_tizen> 6 </since_tizen>
        public virtual CoreUI.Input.Flags GetEventFlags() {
            var _ret_var = CoreUI.Input.IEventNativeMethods.efl_input_event_flags_get_ptr.Value.Delegate((IsGeneratedBindingClass ? this.NativeHandle : CoreUI.Wrapper.Globals.Super(this.NativeHandle, this.NativeClass)));
            CoreUI.DataTypes.Error.RaiseIfUnhandledException();
            return _ret_var;
        }

        /// <summary>Extra flags for this event, may be changed by the user.</summary>
        /// <param name="flags">Input event flags</param>
        /// <since_tizen> 6 </since_tizen>
        public virtual void SetEventFlags(CoreUI.Input.Flags flags) {
            CoreUI.Input.IEventNativeMethods.efl_input_event_flags_set_ptr.Value.Delegate((IsGeneratedBindingClass ? this.NativeHandle : CoreUI.Wrapper.Globals.Super(this.NativeHandle, this.NativeClass)), flags);
            CoreUI.DataTypes.Error.RaiseIfUnhandledException();
            
        }

        /// <summary><c>true</c> if <see cref="CoreUI.Input.IEvent.EventFlags"/> indicates the event is on hold.</summary>
        /// <returns><c>true</c> if the event is on hold, <c>false</c> otherwise</returns>
        /// <since_tizen> 6 </since_tizen>
        public virtual bool GetProcessed() {
            var _ret_var = CoreUI.Input.IEventNativeMethods.efl_input_processed_get_ptr.Value.Delegate((IsGeneratedBindingClass ? this.NativeHandle : CoreUI.Wrapper.Globals.Super(this.NativeHandle, this.NativeClass)));
            CoreUI.DataTypes.Error.RaiseIfUnhandledException();
            return _ret_var;
        }

        /// <summary><c>true</c> if <see cref="CoreUI.Input.IEvent.EventFlags"/> indicates the event is on hold.</summary>
        /// <param name="val"><c>true</c> if the event is on hold, <c>false</c> otherwise</param>
        /// <since_tizen> 6 </since_tizen>
        public virtual void SetProcessed(bool val) {
            CoreUI.Input.IEventNativeMethods.efl_input_processed_set_ptr.Value.Delegate((IsGeneratedBindingClass ? this.NativeHandle : CoreUI.Wrapper.Globals.Super(this.NativeHandle, this.NativeClass)), val);
            CoreUI.DataTypes.Error.RaiseIfUnhandledException();
            
        }

        /// <summary><c>true</c> if <see cref="CoreUI.Input.IEvent.EventFlags"/> indicates the event happened while scrolling.</summary>
        /// <returns><c>true</c> if the event happened while scrolling, <c>false</c> otherwise</returns>
        /// <since_tizen> 6 </since_tizen>
        public virtual bool GetScrolling() {
            var _ret_var = CoreUI.Input.IEventNativeMethods.efl_input_scrolling_get_ptr.Value.Delegate((IsGeneratedBindingClass ? this.NativeHandle : CoreUI.Wrapper.Globals.Super(this.NativeHandle, this.NativeClass)));
            CoreUI.DataTypes.Error.RaiseIfUnhandledException();
            return _ret_var;
        }

        /// <summary><c>true</c> if <see cref="CoreUI.Input.IEvent.EventFlags"/> indicates the event happened while scrolling.</summary>
        /// <param name="val"><c>true</c> if the event happened while scrolling, <c>false</c> otherwise</param>
        /// <since_tizen> 6 </since_tizen>
        public virtual void SetScrolling(bool val) {
            CoreUI.Input.IEventNativeMethods.efl_input_scrolling_set_ptr.Value.Delegate((IsGeneratedBindingClass ? this.NativeHandle : CoreUI.Wrapper.Globals.Super(this.NativeHandle, this.NativeClass)), val);
            CoreUI.DataTypes.Error.RaiseIfUnhandledException();
            
        }

        /// <summary><c>true</c> if the event was fake, not triggered by real hardware.</summary>
        /// <returns><c>true</c> if the event was not from real hardware, <c>false</c> otherwise</returns>
        /// <since_tizen> 6 </since_tizen>
        public virtual bool GetFake() {
            var _ret_var = CoreUI.Input.IEventNativeMethods.efl_input_fake_get_ptr.Value.Delegate((IsGeneratedBindingClass ? this.NativeHandle : CoreUI.Wrapper.Globals.Super(this.NativeHandle, this.NativeClass)));
            CoreUI.DataTypes.Error.RaiseIfUnhandledException();
            return _ret_var;
        }

        /// <summary>Resets the internal data to 0 or default values.</summary>
        /// <since_tizen> 6 </since_tizen>
        public virtual void Reset() {
            CoreUI.Input.IEventNativeMethods.efl_input_reset_ptr.Value.Delegate((IsGeneratedBindingClass ? this.NativeHandle : CoreUI.Wrapper.Globals.Super(this.NativeHandle, this.NativeClass)));
            CoreUI.DataTypes.Error.RaiseIfUnhandledException();
            
        }

        /// <summary>Property to show if inputs are now on hold.</summary>
        /// <value><c>true</c> if inputs are on hold, <c>false</c> otherwise</value>
        /// <since_tizen> 6 </since_tizen>
        public bool InputHold {
            get { return GetInputHold(); }
            set { SetInputHold(value); }
        }

        /// <summary>The time at which an event was generated.
        /// 
        /// If the event is generated by a server (eg. X.org or Wayland), then the time may be set by the server. Usually this time will be based on the monotonic clock, if available, but this class can not guarantee it.<br/>
        /// <b>Note on writing:</b> Call this when generating events manually.</summary>
        /// <value>Time in milliseconds when the event happened.</value>
        /// <since_tizen> 6 </since_tizen>
        public double Timestamp {
            get { return GetTimestamp(); }
            set { SetTimestamp(value); }
        }

        /// <summary>Input device that originated this event.</summary>
        /// <value>Input device origin</value>
        /// <since_tizen> 6 </since_tizen>
        public CoreUI.Input.Device Device {
            get { return GetDevice(); }
            set { SetDevice(value); }
        }

        /// <summary>Extra flags for this event, may be changed by the user.</summary>
        /// <value>Input event flags</value>
        /// <since_tizen> 6 </since_tizen>
        public CoreUI.Input.Flags EventFlags {
            get { return GetEventFlags(); }
            set { SetEventFlags(value); }
        }

        /// <summary><c>true</c> if <see cref="CoreUI.Input.IEvent.EventFlags"/> indicates the event is on hold.</summary>
        /// <value><c>true</c> if the event is on hold, <c>false</c> otherwise</value>
        /// <since_tizen> 6 </since_tizen>
        public bool Processed {
            get { return GetProcessed(); }
            set { SetProcessed(value); }
        }

        /// <summary><c>true</c> if <see cref="CoreUI.Input.IEvent.EventFlags"/> indicates the event happened while scrolling.</summary>
        /// <value><c>true</c> if the event happened while scrolling, <c>false</c> otherwise</value>
        /// <since_tizen> 6 </since_tizen>
        public bool Scrolling {
            get { return GetScrolling(); }
            set { SetScrolling(value); }
        }

        /// <summary><c>true</c> if the event was fake, not triggered by real hardware.</summary>
        /// <value><c>true</c> if the event was not from real hardware, <c>false</c> otherwise</value>
        /// <since_tizen> 6 </since_tizen>
        public bool Fake {
            get { return GetFake(); }
        }

        private static IntPtr GetCoreUIClassStatic()
        {
            return CoreUI.Input.Hold.efl_input_hold_class_get();
        }

        /// <summary>Wrapper for native methods and virtual method delegates.
        /// For internal use by generated code only.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal new class NativeMethods : CoreUI.Object.NativeMethods
        {
            private static CoreUI.Wrapper.NativeModule Module = new CoreUI.Wrapper.NativeModule(CoreUI.Libs.Evas);

            /// <summary>Gets the list of Eo operations to override.
        /// </summary>
            /// <returns>The list of Eo operations to be overload.</returns>
            internal override System.Collections.Generic.List<CoreUIOpDescription> GetEoOps(System.Type type, bool includeInherited)
            {
                var descs = new System.Collections.Generic.List<CoreUIOpDescription>();
                var methods = CoreUI.Wrapper.Globals.GetUserMethods(type);

                if (efl_input_hold_get_static_delegate == null)
                {
                    efl_input_hold_get_static_delegate = new efl_input_hold_get_delegate(input_hold_get);
                }

                if (methods.Contains("GetInputHold"))
                {
                    descs.Add(new CoreUIOpDescription() {api_func = CoreUI.Wrapper.FunctionInterop.LoadFunctionPointer(Module.Module, "efl_input_hold_get"), func = Marshal.GetFunctionPointerForDelegate(efl_input_hold_get_static_delegate) });
                }

                if (efl_input_hold_set_static_delegate == null)
                {
                    efl_input_hold_set_static_delegate = new efl_input_hold_set_delegate(input_hold_set);
                }

                if (methods.Contains("SetInputHold"))
                {
                    descs.Add(new CoreUIOpDescription() {api_func = CoreUI.Wrapper.FunctionInterop.LoadFunctionPointer(Module.Module, "efl_input_hold_set"), func = Marshal.GetFunctionPointerForDelegate(efl_input_hold_set_static_delegate) });
                }

                if (includeInherited)
                {
                    var all_interfaces = type.GetInterfaces();
                    foreach (var iface in all_interfaces)
                    {
                        var moredescs = ((CoreUI.Wrapper.NativeClass)iface.GetCustomAttributes(false)?.FirstOrDefault(attr => attr is CoreUI.Wrapper.NativeClass))?.GetEoOps(type, false);
                        if (moredescs != null)
                            descs.AddRange(moredescs);
                    }
                }
                descs.AddRange(base.GetEoOps(type, false));
                return descs;
            }

            /// <summary>Returns the Eo class for the native methods of this class.
            /// </summary>
            /// <returns>The native class pointer.</returns>
            internal override IntPtr GetCoreUIClass()
            {
                return CoreUI.Input.Hold.efl_input_hold_class_get();
            }

            #pragma warning disable CA1707, CS1591, SA1300, SA1600

            [return: MarshalAs(UnmanagedType.U1)]
            private delegate bool efl_input_hold_get_delegate(System.IntPtr obj, System.IntPtr pd);

            [return: MarshalAs(UnmanagedType.U1)]
            internal delegate bool efl_input_hold_get_api_delegate(System.IntPtr obj);

            internal static readonly CoreUI.Wrapper.FunctionWrapper<efl_input_hold_get_api_delegate> efl_input_hold_get_ptr = new CoreUI.Wrapper.FunctionWrapper<efl_input_hold_get_api_delegate>(Module, "efl_input_hold_get");

            [SuppressMessage("Microsoft.Reliability", "CA2000:DisposeObjectsBeforeLosingScope", Justification = "The instantiated objects can be stored in the called Managed API method.")]
            private static bool input_hold_get(System.IntPtr obj, System.IntPtr pd)
            {
                CoreUI.DataTypes.Log.Debug("function efl_input_hold_get was called");
                var ws = CoreUI.Wrapper.Globals.GetWrapperSupervisor(obj);
                if (ws != null)
                {
                    bool _ret_var = default(bool);
                    try
                    {
                        _ret_var = ((Hold)ws.Target).GetInputHold();
                    }
                    catch (Exception e)
                    {
                        CoreUI.DataTypes.Log.Warning($"Callback error: {e.ToString()}");
                        CoreUI.DataTypes.Error.Set(CoreUI.DataTypes.Error.UNHANDLED_EXCEPTION);
                    }

                    return _ret_var;
                }
                else
                {
                    return efl_input_hold_get_ptr.Value.Delegate(CoreUI.Wrapper.Globals.Super(obj, CoreUI.Wrapper.Globals.GetClass(obj)));
                }
            }

            private static efl_input_hold_get_delegate efl_input_hold_get_static_delegate;

            
            private delegate void efl_input_hold_set_delegate(System.IntPtr obj, System.IntPtr pd, [MarshalAs(UnmanagedType.U1)] bool val);

            
            internal delegate void efl_input_hold_set_api_delegate(System.IntPtr obj, [MarshalAs(UnmanagedType.U1)] bool val);

            internal static readonly CoreUI.Wrapper.FunctionWrapper<efl_input_hold_set_api_delegate> efl_input_hold_set_ptr = new CoreUI.Wrapper.FunctionWrapper<efl_input_hold_set_api_delegate>(Module, "efl_input_hold_set");

            [SuppressMessage("Microsoft.Reliability", "CA2000:DisposeObjectsBeforeLosingScope", Justification = "The instantiated objects can be stored in the called Managed API method.")]
            private static void input_hold_set(System.IntPtr obj, System.IntPtr pd, bool val)
            {
                CoreUI.DataTypes.Log.Debug("function efl_input_hold_set was called");
                var ws = CoreUI.Wrapper.Globals.GetWrapperSupervisor(obj);
                if (ws != null)
                {
                    
                    try
                    {
                        ((Hold)ws.Target).SetInputHold(val);
                    }
                    catch (Exception e)
                    {
                        CoreUI.DataTypes.Log.Warning($"Callback error: {e.ToString()}");
                        CoreUI.DataTypes.Error.Set(CoreUI.DataTypes.Error.UNHANDLED_EXCEPTION);
                    }

                    
                }
                else
                {
                    efl_input_hold_set_ptr.Value.Delegate(CoreUI.Wrapper.Globals.Super(obj, CoreUI.Wrapper.Globals.GetClass(obj)), val);
                }
            }

            private static efl_input_hold_set_delegate efl_input_hold_set_static_delegate;

            #pragma warning restore CA1707, CS1591, SA1300, SA1600

        }
    }
}

namespace CoreUI.Input {
#pragma warning disable CS1591
    /// <since_tizen> 6 </since_tizen>
    public static class HoldExtensions {
        /// <since_tizen> 6 </since_tizen>
        public static CoreUI.BindableProperty<bool> InputHold<T>(this CoreUI.UI.IGenericFactoryExtended<T> fac, CoreUI.Csharp.ExtensionTag<CoreUI.Input.Hold, T>magic = null) where T : CoreUI.Input.Hold {
            return new CoreUI.BindableProperty<bool>("input_hold", fac.GetPropBind());
        }

        /// <since_tizen> 6 </since_tizen>
        public static CoreUI.BindableProperty<double> Timestamp<T>(this CoreUI.UI.IGenericFactoryExtended<T> fac, CoreUI.Csharp.ExtensionTag<CoreUI.Input.Hold, T>magic = null) where T : CoreUI.Input.Hold {
            return new CoreUI.BindableProperty<double>("timestamp", fac.GetPropBind());
        }

        /// <since_tizen> 6 </since_tizen>
        public static CoreUI.BindableProperty<CoreUI.Input.Device> Device<T>(this CoreUI.UI.IGenericFactoryExtended<T> fac, CoreUI.Csharp.ExtensionTag<CoreUI.Input.Hold, T>magic = null) where T : CoreUI.Input.Hold {
            return new CoreUI.BindableProperty<CoreUI.Input.Device>("device", fac.GetPropBind());
        }

        /// <since_tizen> 6 </since_tizen>
        public static CoreUI.BindableProperty<CoreUI.Input.Flags> EventFlags<T>(this CoreUI.UI.IGenericFactoryExtended<T> fac, CoreUI.Csharp.ExtensionTag<CoreUI.Input.Hold, T>magic = null) where T : CoreUI.Input.Hold {
            return new CoreUI.BindableProperty<CoreUI.Input.Flags>("event_flags", fac.GetPropBind());
        }

        /// <since_tizen> 6 </since_tizen>
        public static CoreUI.BindableProperty<bool> Processed<T>(this CoreUI.UI.IGenericFactoryExtended<T> fac, CoreUI.Csharp.ExtensionTag<CoreUI.Input.Hold, T>magic = null) where T : CoreUI.Input.Hold {
            return new CoreUI.BindableProperty<bool>("processed", fac.GetPropBind());
        }

        /// <since_tizen> 6 </since_tizen>
        public static CoreUI.BindableProperty<bool> Scrolling<T>(this CoreUI.UI.IGenericFactoryExtended<T> fac, CoreUI.Csharp.ExtensionTag<CoreUI.Input.Hold, T>magic = null) where T : CoreUI.Input.Hold {
            return new CoreUI.BindableProperty<bool>("scrolling", fac.GetPropBind());
        }

    }
#pragma warning restore CS1591
}

