<?xml version="1.0" encoding="utf-8"?><span>
<doc>
  <assembly>
    <name>System.Threading.Tasks</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1">
      <summary>Represents a builder for asynchronous methods that returns a task and provides a parameter for the result.</summary>
      <typeparam name="TResult">The result to use to complete the task.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Schedules the state machine to proceed to the next action when the specified awaiter completes.</summary>
      <param name="awaiter">The awaiter.</param>
      <param name="stateMachine">The state machine.</param>
      <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
      <typeparam name="TStateMachine">The type of the state machine.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Schedules the state machine to proceed to the next action when the specified awaiter completes. This method can be called from partially trusted code.</summary>
      <param name="awaiter">The awaiter.</param>
      <param name="stateMachine">The state machine.</param>
      <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
      <typeparam name="TStateMachine">The type of the state machine.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create">
      <summary>Creates an instance of the <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1"></see> class.</summary>
      <returns>A new instance of the builder.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)">
      <summary>Marks the task as failed and binds the specified exception to the task.</summary>
      <param name="exception">The exception to bind to the task.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="exception">exception</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The task has already completed.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)">
      <summary>Marks the task as successfully completed.</summary>
      <param name="result">The result to use to complete the task.</param>
      <exception cref="T:System.InvalidOperationException">The task has already completed.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Associates the builder with the specified state machine.</summary>
      <param name="stateMachine">The state machine instance to associate with the builder.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stateMachine">stateMachine</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The state machine was previously set.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)">
      <summary>Begins running the builder with the associated state machine.</summary>
      <param name="stateMachine">The state machine instance, passed by reference.</param>
      <typeparam name="TStateMachine">The type of the state machine.</typeparam>
      <exception cref="T:System.ArgumentNullException"><paramref name="stateMachine">stateMachine</paramref> is null.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task">
      <summary>Gets the task for this builder.</summary>
      <returns>The task for this builder.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder">
      <summary>Represents a builder for asynchronous methods that return a task.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Schedules the state machine to proceed to the next action when the specified awaiter completes.</summary>
      <param name="awaiter">The awaiter.</param>
      <param name="stateMachine">The state machine.</param>
      <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
      <typeparam name="TStateMachine">The type of the state machine.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Schedules the state machine to proceed to the next action when the specified awaiter completes. This method can be called from partially trusted code.</summary>
      <param name="awaiter">The awaiter.</param>
      <param name="stateMachine">The state machine.</param>
      <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
      <typeparam name="TStateMachine">The type of the state machine.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Create">
      <summary>Creates an instance of the <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder"></see> class.</summary>
      <returns>A new instance of the builder.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception)">
      <summary>Marks the task as failed and binds the specified exception to the task.</summary>
      <param name="exception">The exception to bind to the task.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="exception">exception</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The task has already completed.   -or-   The builder is not initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult">
      <summary>Marks the task as successfully completed.</summary>
      <exception cref="T:System.InvalidOperationException">The task has already completed.   -or-   The builder is not initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Associates the builder with the specified state machine.</summary>
      <param name="stateMachine">The state machine instance to associate with the builder.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stateMachine">stateMachine</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The state machine was previously set.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start``1(``0@)">
      <summary>Begins running the builder with the associated state machine.</summary>
      <param name="stateMachine">The state machine instance, passed by reference.</param>
      <typeparam name="TStateMachine">The type of the state machine.</typeparam>
      <exception cref="T:System.ArgumentNullException"><paramref name="stateMachine">stateMachine</paramref> is null.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Task">
      <summary>Gets the task for this builder.</summary>
      <returns>The task for this builder.</returns>
      <exception cref="T:System.InvalidOperationException">The builder is not initialized.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder">
      <summary>Represents a builder for asynchronous methods that do not return a value.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Schedules the state machine to proceed to the next action when the specified awaiter completes.</summary>
      <param name="awaiter">The awaiter.</param>
      <param name="stateMachine">The state machine.</param>
      <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
      <typeparam name="TStateMachine">The type of the state machine.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Schedules the state machine to proceed to the next action when the specified awaiter completes. This method can be called from partially trusted code.</summary>
      <param name="awaiter">The awaiter.</param>
      <param name="stateMachine">The state machine.</param>
      <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
      <typeparam name="TStateMachine">The type of the state machine.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Create">
      <summary>Creates an instance of the <see cref="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder"></see> class.</summary>
      <returns>A new instance of the builder.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetException(System.Exception)">
      <summary>Binds an exception to the method builder.</summary>
      <param name="exception">The exception to bind.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="exception">exception</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The builder is not initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetResult">
      <summary>Marks the method builder as successfully completed.</summary>
      <exception cref="T:System.InvalidOperationException">The builder is not initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Associates the builder with the specified state machine.</summary>
      <param name="stateMachine">The state machine instance to associate with the builder.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stateMachine">stateMachine</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The state machine was previously set.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start``1(``0@)">
      <summary>Begins running the builder with the associated state machine.</summary>
      <param name="stateMachine">The state machine instance, passed by reference.</param>
      <typeparam name="TStateMachine">The type of the state machine.</typeparam>
      <exception cref="T:System.ArgumentNullException"><paramref name="stateMachine">stateMachine</paramref> is null.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter">
      <summary>Provides an awaiter for an awaitable object(<see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1"></see>).</summary>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult">
      <summary>Ends the await on the completed task.</summary>
      <returns>The result of the completed task.</returns>
      <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task was canceled.</exception>
      <exception cref="T:System.Exception">The task completed in a faulted state.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.IsCompleted">
      <summary>Gets a value that specifies whether the task being awaited has been completed.</summary>
      <returns>true if the task being awaited has been completed; otherwise, false.</returns>
      <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
      <summary>Schedules the continuation action for the task associated with this awaiter.</summary>
      <param name="continuation">The action to invoke when the await operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuation">continuation</paramref> argument is null.</exception>
      <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>Schedules the continuation action for the task associated with this awaiter.</summary>
      <param name="continuation">The action to invoke when the await operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuation">continuation</paramref> argument is null.</exception>
      <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1">
      <summary>Provides an awaitable object that enables configured awaits on a task.</summary>
      <typeparam name="TResult">The type of the result produced by this <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.GetAwaiter">
      <summary>Returns an awaiter for this awaitable object.</summary>
      <returns>The awaiter.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter">
      <summary>Provides an awaiter for an awaitable (<see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable"></see>) object.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult">
      <summary>Ends the await on the completed task.</summary>
      <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task was canceled.</exception>
      <exception cref="T:System.Exception">The task completed in a faulted state.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.IsCompleted">
      <summary>Gets a value that specifies whether the task being awaited is completed.</summary>
      <returns>true if the task being awaited is completed; otherwise, false.</returns>
      <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
      <summary>Schedules the continuation action for the task associated with this awaiter.</summary>
      <param name="continuation">The action to invoke when the await operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuation">continuation</paramref> argument is null.</exception>
      <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>Schedules the continuation action for the task associated with this awaiter.</summary>
      <param name="continuation">The action to invoke when the await operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuation">continuation</paramref> argument is null.</exception>
      <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable">
      <summary>Provides an awaitable object that enables configured awaits on a task.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.GetAwaiter">
      <summary>Returns an awaiter for this awaitable object.</summary>
      <returns>The awaiter.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IAsyncStateMachine">
      <summary>Represents state machines that are generated for asynchronous methods. This type is intended for compiler use only.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IAsyncStateMachine.MoveNext">
      <summary>Moves the state machine to its next state.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IAsyncStateMachine.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Configures the state machine with a heap-allocated replica.</summary>
      <param name="stateMachine">The heap-allocated replica.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.ICriticalNotifyCompletion">
      <summary>Represents an awaiter that schedules continuations when an await operation completes.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ICriticalNotifyCompletion.UnsafeOnCompleted(System.Action)">
      <summary>Schedules the continuation action that's invoked when the instance completes.</summary>
      <param name="continuation">The action to invoke when the operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuation">continuation</paramref> argument is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.INotifyCompletion">
      <summary>Represents an operation that schedules continuations when it completes.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.INotifyCompletion.OnCompleted(System.Action)">
      <summary>Schedules the continuation action that's invoked when the instance completes.</summary>
      <param name="continuation">The action to invoke when the operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuation">continuation</paramref> argument is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.AggregateException">
      <summary>Represents one or more errors that occur during application execution.</summary>
    </member>
    <member name="M:System.AggregateException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AggregateException"></see> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Initializes a new instance of the <see cref="T:System.AggregateException"></see> class with references to the inner exceptions that are the cause of this exception.</summary>
      <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions">innerExceptions</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions">innerExceptions</paramref> is null.</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.Exception[])">
      <summary>Initializes a new instance of the <see cref="T:System.AggregateException"></see> class with references to the inner exceptions that are the cause of this exception.</summary>
      <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions">innerExceptions</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions">innerExceptions</paramref> is null.</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.AggregateException"></see> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Initializes a new instance of the <see cref="T:System.AggregateException"></see> class with a specified error message and references to the inner exceptions that are the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions">innerExceptions</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions">innerExceptions</paramref> is null.</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.AggregateException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="innerException">innerException</paramref> argument is null.</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Exception[])">
      <summary>Initializes a new instance of the <see cref="T:System.AggregateException"></see> class with a specified error message and references to the inner exceptions that are the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions">innerExceptions</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions">innerExceptions</paramref> is null.</exception>
    </member>
    <member name="M:System.AggregateException.Flatten">
      <summary>Flattens an <see cref="T:System.AggregateException"></see> instances into a single, new instance.</summary>
      <returns>A new, flattened <see cref="T:System.AggregateException"></see>.</returns>
    </member>
    <member name="M:System.AggregateException.GetBaseException">
      <summary>Returns the <see cref="T:System.AggregateException"></see> that is the root cause of this exception.</summary>
      <returns>Returns the <see cref="T:System.AggregateException"></see> that is the root cause of this exception.</returns>
    </member>
    <member name="M:System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})">
      <summary>Invokes a handler on each <see cref="T:System.Exception"></see> contained by this <see cref="T:System.AggregateException"></see>.</summary>
      <param name="predicate">The predicate to execute for each exception. The predicate accepts as an argument the <see cref="T:System.Exception"></see> to be processed and returns a Boolean to indicate whether the exception was handled.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="predicate">predicate</paramref> argument is null.</exception>
      <exception cref="T:System.AggregateException">An exception contained by this <see cref="T:System.AggregateException"></see> was not handled.</exception>
    </member>
    <member name="P:System.AggregateException.InnerExceptions">
      <summary>Gets a read-only collection of the <see cref="T:System.Exception"></see> instances that caused the current exception.</summary>
      <returns>Returns a read-only collection of the <see cref="T:System.Exception"></see> instances that caused the current exception.</returns>
    </member>
    <member name="M:System.AggregateException.ToString">
      <summary>Creates and returns a string representation of the current <see cref="T:System.AggregateException"></see>.</summary>
      <returns>A string representation of the current exception.</returns>
    </member>
    <member name="T:System.Threading.CancellationToken">
      <summary>Propagates notification that operations should be canceled.</summary>
    </member>
    <member name="M:System.Threading.CancellationToken.#ctor(System.Boolean)">
      <summary>Initializes the <see cref="T:System.Threading.CancellationToken"></see>.</summary>
      <param name="canceled">The canceled state for the token.</param>
    </member>
    <member name="P:System.Threading.CancellationToken.CanBeCanceled">
      <summary>Gets whether this token is capable of being in the canceled state.</summary>
      <returns>true if this token is capable of being in the canceled state; otherwise, false.</returns>
    </member>
    <member name="M:System.Threading.CancellationToken.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Threading.CancellationToken"></see> instance is equal to the specified <see cref="T:System.Object"></see>.</summary>
      <param name="other">The other object to which to compare this instance.</param>
      <returns>true if <paramref name="other">other</paramref> is a <see cref="T:System.Threading.CancellationToken"></see> and if the two instances are equal; otherwise, false. Two tokens are equal if they are associated with the same <see cref="T:System.Threading.CancellationTokenSource"></see> or if they were both constructed from public <see cref="T:System.Threading.CancellationToken"></see> constructors and their <see cref="P:System.Threading.CancellationToken.IsCancellationRequested"></see> values are equal.</returns>
      <exception cref="T:System.ObjectDisposedException">An associated <see cref="T:System.Threading.CancellationTokenSource"></see> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)">
      <summary>Determines whether the current <see cref="T:System.Threading.CancellationToken"></see> instance is equal to the specified token.</summary>
      <param name="other">The other <see cref="T:System.Threading.CancellationToken"></see> to which to compare this instance.</param>
      <returns>true if the instances are equal; otherwise, false. Two tokens are equal if they are associated with the same <see cref="T:System.Threading.CancellationTokenSource"></see> or if they were both constructed from public <see cref="T:System.Threading.CancellationToken"></see> constructors and their <see cref="P:System.Threading.CancellationToken.IsCancellationRequested"></see> values are equal.</returns>
    </member>
    <member name="M:System.Threading.CancellationToken.GetHashCode">
      <summary>Serves as a hash function for a <see cref="T:System.Threading.CancellationToken"></see>.</summary>
      <returns>A hash code for the current <see cref="T:System.Threading.CancellationToken"></see> instance.</returns>
    </member>
    <member name="P:System.Threading.CancellationToken.IsCancellationRequested">
      <summary>Gets whether cancellation has been requested for this token.</summary>
      <returns>true if cancellation has been requested for this token; otherwise, false.</returns>
    </member>
    <member name="P:System.Threading.CancellationToken.None">
      <summary>Returns an empty <see cref="T:System.Threading.CancellationToken"></see> value.</summary>
      <returns>An empty cancellation token.</returns>
    </member>
    <member name="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>Determines whether two <see cref="T:System.Threading.CancellationToken"></see> instances are equal.</summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>true if the instances are equal; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">An associated <see cref="T:System.Threading.CancellationTokenSource"></see> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>Determines whether two <see cref="T:System.Threading.CancellationToken"></see> instances are not equal.</summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>true if the instances are not equal; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">An associated <see cref="T:System.Threading.CancellationTokenSource"></see> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action)">
      <summary>Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken"></see> is canceled.</summary>
      <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken"></see> is canceled.</param>
      <returns>The <see cref="T:System.Threading.CancellationTokenRegistration"></see> instance that can be used to deregister the callback.</returns>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="callback">callback</paramref> is null.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)">
      <summary>Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken"></see> is canceled.</summary>
      <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken"></see> is canceled.</param>
      <param name="useSynchronizationContext">A value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext"></see> and use it when invoking the callback.</param>
      <returns>The <see cref="T:System.Threading.CancellationTokenRegistration"></see> instance that can be used to deregister the callback.</returns>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="callback">callback</paramref> is null.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
      <summary>Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken"></see> is canceled.</summary>
      <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken"></see> is canceled.</param>
      <param name="state">The state to pass to the callback when the delegate is invoked. This may be null.</param>
      <returns>The <see cref="T:System.Threading.CancellationTokenRegistration"></see> instance that can be used to deregister the callback.</returns>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="callback">callback</paramref> is null.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
      <summary>Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken"></see> is canceled.</summary>
      <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken"></see> is canceled.</param>
      <param name="state">The state to pass to the callback when the delegate is invoked. This may be null.</param>
      <param name="useSynchronizationContext">A Boolean value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext"></see> and use it when invoking the callback.</param>
      <returns>The <see cref="T:System.Threading.CancellationTokenRegistration"></see> instance that can be used to deregister the callback.</returns>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="callback">callback</paramref> is null.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.ThrowIfCancellationRequested">
      <summary>Throws a <see cref="T:System.OperationCanceledException"></see> if this token has had cancellation requested.</summary>
      <exception cref="T:System.OperationCanceledException">The token has had cancellation requested.</exception>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource"></see> has been disposed.</exception>
    </member>
    <member name="P:System.Threading.CancellationToken.WaitHandle">
      <summary>Gets a <see cref="T:System.Threading.WaitHandle"></see> that is signaled when the token is canceled.</summary>
      <returns>A <see cref="T:System.Threading.WaitHandle"></see> that is signaled when the token is canceled.</returns>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource"></see> has been disposed.</exception>
    </member>
    <member name="T:System.Threading.CancellationTokenRegistration">
      <summary>Represents a callback delegate that has been registered with a <see cref="T:System.Threading.CancellationToken"></see>.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.CancellationTokenRegistration"></see> class.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Threading.CancellationTokenRegistration"></see> instance is equal to the specified <see cref="T:System.Threading.CancellationTokenRegistration"></see>.</summary>
      <param name="obj">The other object to which to compare this instance.</param>
      <returns>True, if both this and <paramref name="obj">obj</paramref> are equal. False, otherwise.   Two <see cref="T:System.Threading.CancellationTokenRegistration"></see> instances are equal if they both refer to the output of a single call to the same Register method of a <see cref="T:System.Threading.CancellationToken"></see>.</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Equals(System.Threading.CancellationTokenRegistration)">
      <summary>Determines whether the current <see cref="T:System.Threading.CancellationTokenRegistration"></see> instance is equal to the specified <see cref="T:System.Threading.CancellationTokenRegistration"></see>.</summary>
      <param name="other">The other <see cref="T:System.Threading.CancellationTokenRegistration"></see> to which to compare this instance.</param>
      <returns>True, if both this and <paramref name="other">other</paramref> are equal. False, otherwise.   Two <see cref="T:System.Threading.CancellationTokenRegistration"></see> instances are equal if they both refer to the output of a single call to the same Register method of a <see cref="T:System.Threading.CancellationToken"></see>.</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.GetHashCode">
      <summary>Serves as a hash function for a <see cref="T:System.Threading.CancellationTokenRegistration"></see>.</summary>
      <returns>A hash code for the current <see cref="T:System.Threading.CancellationTokenRegistration"></see> instance.</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.op_Equality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)">
      <summary>Determines whether two <see cref="T:System.Threading.CancellationTokenRegistration"></see> instances are equal.</summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>True if the instances are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.op_Inequality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)">
      <summary>Determines whether two <see cref="T:System.Threading.CancellationTokenRegistration"></see> instances are not equal.</summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>True if the instances are not equal; otherwise, false.</returns>
    </member>
    <member name="T:System.Threading.CancellationTokenSource">
      <summary>Signals to a <see cref="T:System.Threading.CancellationToken"></see> that it should be canceled.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.CancellationTokenSource"></see> class.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.CancellationTokenSource"></see> class that will be canceled after the specified delay in milliseconds.</summary>
      <param name="millisecondsDelay">The time interval in milliseconds to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource"></see>.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsDelay">millisecondsDelay</paramref> is less than -1.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.CancellationTokenSource"></see> class that will be canceled after the specified time span.</summary>
      <param name="delay">The time interval to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource"></see>.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="delay">delay</paramref>.<see cref="P:System.TimeSpan.TotalMilliseconds"></see> is less than -1 or greater than <see cref="F:System.Int32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel">
      <summary>Communicates a request for cancellation.</summary>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Threading.CancellationTokenSource"></see> has been disposed.</exception>
      <exception cref="T:System.AggregateException">An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <see cref="T:System.Threading.CancellationToken"></see>.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
      <summary>Communicates a request for cancellation, and specifies whether remaining callbacks and cancelable operations should be processed.</summary>
      <param name="throwOnFirstException">true if exceptions should immediately propagate; otherwise, false.</param>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Threading.CancellationTokenSource"></see> has been disposed.</exception>
      <exception cref="T:System.AggregateException">An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <see cref="T:System.Threading.CancellationToken"></see>.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
      <summary>Schedules a cancel operation on this <see cref="T:System.Threading.CancellationTokenSource"></see> after the specified number of milliseconds.</summary>
      <param name="millisecondsDelay">The time span to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource"></see>.</param>
      <exception cref="T:System.ObjectDisposedException">The exception thrown when this <see cref="T:System.Threading.CancellationTokenSource"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception thrown when <paramref name="millisecondsDelay">millisecondsDelay</paramref> is less than -1.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
      <summary>Schedules a cancel operation on this <see cref="T:System.Threading.CancellationTokenSource"></see> after the specified time span.</summary>
      <param name="delay">The time span to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource"></see>.</param>
      <exception cref="T:System.ObjectDisposedException">The exception thrown when this <see cref="T:System.Threading.CancellationTokenSource"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when <paramref name="delay">delay</paramref> is less than -1 or greater than Int32.MaxValue.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
      <summary>Creates a <see cref="T:System.Threading.CancellationTokenSource"></see> that will be in the canceled state when any of the source tokens in the specified array are in the canceled state.</summary>
      <param name="tokens">An array that contains the cancellation token instances to observe.</param>
      <returns>A <see cref="T:System.Threading.CancellationTokenSource"></see> that is linked to the source tokens.</returns>
      <exception cref="T:System.ObjectDisposedException">A <see cref="T:System.Threading.CancellationTokenSource"></see> associated with one of the source tokens has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="tokens">tokens</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="tokens">tokens</paramref> is empty.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>Creates a <see cref="T:System.Threading.CancellationTokenSource"></see> that will be in the canceled state when any of the source tokens are in the canceled state.</summary>
      <param name="token1">The first cancellation token to observe.</param>
      <param name="token2">The second cancellation token to observe.</param>
      <returns>A <see cref="T:System.Threading.CancellationTokenSource"></see> that is linked to the source tokens.</returns>
      <exception cref="T:System.ObjectDisposedException">A <see cref="T:System.Threading.CancellationTokenSource"></see> associated with one of the source tokens has been disposed.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.CancellationTokenSource"></see> class.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Threading.CancellationTokenSource"></see> class and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
      <summary>Gets whether cancellation has been requested for this <see cref="T:System.Threading.CancellationTokenSource"></see>.</summary>
      <returns>true if cancellation has been requested for this <see cref="T:System.Threading.CancellationTokenSource"></see>; otherwise, false.</returns>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.Token">
      <summary>Gets the <see cref="T:System.Threading.CancellationToken"></see> associated with this <see cref="T:System.Threading.CancellationTokenSource"></see>.</summary>
      <returns>The <see cref="T:System.Threading.CancellationToken"></see> associated with this <see cref="T:System.Threading.CancellationTokenSource"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The token source has been disposed.</exception>
    </member>
    <member name="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair">
      <summary>Provides task schedulers that coordinate to execute tasks while ensuring that concurrent tasks may run concurrently and exclusive tasks never do.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair"></see> class.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair"></see> class that targets the specified scheduler.</summary>
      <param name="taskScheduler">The target scheduler on which this pair should execute.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair"></see> class that targets the specified scheduler with a maximum concurrency level.</summary>
      <param name="taskScheduler">The target scheduler on which this pair should execute.</param>
      <param name="maxConcurrencyLevel">The maximum number of tasks to run concurrently.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair"></see> class that targets the specified scheduler with a maximum concurrency level and a maximum number of scheduled tasks that may be processed as a unit.</summary>
      <param name="taskScheduler">The target scheduler on which this pair should execute.</param>
      <param name="maxConcurrencyLevel">The maximum number of tasks to run concurrently.</param>
      <param name="maxItemsPerTask">The maximum number of tasks to process for each underlying scheduled task used by the pair.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete">
      <summary>Informs the scheduler pair that it should not accept any more tasks.</summary>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion">
      <summary>Gets a <see cref="T:System.Threading.Tasks.Task"></see> that will complete when the scheduler has completed processing.</summary>
      <returns>The asynchronous operation that will complete when the scheduler finishes processing.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler">
      <summary>Gets a <see cref="T:System.Threading.Tasks.TaskScheduler"></see> that can be used to schedule tasks to this pair that may run concurrently with other tasks on this pair.</summary>
      <returns>An object that can be used to schedule tasks concurrently.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler">
      <summary>Gets a <see cref="T:System.Threading.Tasks.TaskScheduler"></see> that can be used to schedule tasks to this pair that must run exclusively with regards to other tasks on this pair.</summary>
      <returns>An object that can be used to schedule tasks that do not run concurrently with other tasks.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Task`1">
      <summary>Represents an asynchronous operation that can return a value.</summary>
      <typeparam name="TResult">The type of the result produced by this <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1"></see> with the specified function.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property will be set to return the result value of the function.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1"></see> with the specified function and state.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property will be set to return the result value of the function.</param>
      <param name="state">An object representing data to be used by the action.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1"></see> with the specified function.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property will be set to return the result value of the function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> to be assigned to this task.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1"></see> with the specified function and creation options.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property will be set to return the result value of the function.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see> used to customize the task's behavior.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see>.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1"></see> with the specified action, state, and options.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property will be set to return the result value of the function.</param>
      <param name="state">An object representing data to be used by the function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> to be assigned to the new task.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1"></see> with the specified action, state, and options.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property will be set to return the result value of the function.</param>
      <param name="state">An object representing data to be used by the function.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see> used to customize the task's behavior.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see>.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1"></see> with the specified function and creation options.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property will be set to return the result value of the function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new task.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see> used to customize the task's behavior.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see>.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1"></see> with the specified action, state, and options.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property will be set to return the result value of the function.</param>
      <param name="state">An object representing data to be used by the function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> to be assigned to the new task.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see> used to customize the task's behavior.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see>.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)">
      <summary>Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task`1"></see>.</summary>
      <param name="continueOnCapturedContext">true to attempt to marshal the continuation back to the original context captured; otherwise, false.</param>
      <returns>An object used to await this task.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1"></see> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1"></see> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></see>, as  well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></see>.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to associate with the continuation task and to use for its  execution.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes according the condition specified in <paramref name="continuationOptions">continuationOptions</paramref>.</summary>
      <param name="continuationAction">An action to run according the condition specified in continuationOptions. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></see>, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></see>.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to associate with the continuation task and to use for its execution.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1"></see> has been disposed.   -or-   The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction">continuationAction</paramref> argument is null.   -or-   The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see>.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1"></see> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1"></see> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to associate with the continuation task and to use for its execution.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1"></see> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1"></see> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new continuation task.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1"></see> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1"></see> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such  as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></see>, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></see>.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see>.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that executes according the condition specified in <paramref name="continuationOptions">continuationOptions</paramref>.</summary>
      <param name="continuationAction">An action to according the condition specified in continuationOptions. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></see>, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></see>.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see>.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
      <summary>Creates a cancelable continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1"></see> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1"></see> completes. When run, the delegate is passed the completed task as an argument.</param>
      <param name="cancellationToken">The cancellation token that is passed to the new continuation task.</param>
      <returns>A new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1"></see> has been disposed.   -or-   The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)">
      <summary>Creates a continuation that that is passed state information and that executes when the target <see cref="T:System.Threading.Tasks.Task`1"></see> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1"></see> completes. When run, the delegate is   passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
      <summary>Creates a continuation that executes asynchronously when the target task completes.</summary>
      <param name="continuationAction">An action to run when the antecedent <see cref="T:System.Threading.Tasks.Task`1"></see> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <returns>A new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1"></see> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1"></see> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to associate with the continuation task and to use for its execution.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction">continuationAction</paramref> argument is null.   -or-   The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1"></see> completes.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1"></see> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></see>, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></see>.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to associate with the continuation task and to use for its execution.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The  <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes according the condition specified in <paramref name="continuationOptions">continuationOptions</paramref>.</summary>
      <param name="continuationFunction">A function to run according the condition specified in continuationOptions.   When run, the delegate will be passed as an argument this completed task.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></see>, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></see>.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to associate with the continuation task and to use for its execution.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1"></see> has been disposed.   -or-   The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.   -or-   The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see>.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1"></see> completes.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1"></see> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to associate with the continuation task and to use for its execution.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1"></see> completes.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1"></see> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></see>, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></see>.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see>.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1"></see> completes.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1"></see> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new task.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that executes according the condition specified in <paramref name="continuationOptions">continuationOptions</paramref>.</summary>
      <param name="continuationFunction">A function to run according the condition specified in continuationOptions.   When run, the delegate will be passed the completed task as an argument.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></see>, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></see>.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see>.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1"></see> completes.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1"></see> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new task.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1"></see> has been disposed.   -or-   The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1"></see> completes.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1"></see> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1"></see> completes.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1"></see> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1"></see> completes.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1"></see> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to associate with the continuation task and to use for its execution.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.   -or-   The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task`1.Factory">
      <summary>Provides access to factory methods for creating and configuring <see cref="T:System.Threading.Tasks.Task`1"></see> instances.</summary>
      <returns>A factory object that can create a variety of <see cref="T:System.Threading.Tasks.Task`1"></see> objects.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.GetAwaiter">
      <summary>Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task`1"></see>.</summary>
      <returns>An awaiter instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task`1.Result">
      <summary>Gets the result value of this <see cref="T:System.Threading.Tasks.Task`1"></see>.</summary>
      <returns>The result value of this <see cref="T:System.Threading.Tasks.Task`1"></see>, which is the same type as the task's type parameter.</returns>
      <exception cref="T:System.AggregateException">The task was canceled. The <see cref="P:System.AggregateException.InnerExceptions"></see> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException"></see> object.   -or-   An exception was thrown during the execution of the task. The <see cref="P:System.AggregateException.InnerExceptions"></see> collection contains information about the exception or exceptions.</exception>
    </member>
    <member name="T:System.Threading.Tasks.Task">
      <summary>Represents an asynchronous operation.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task"></see> with the specified action.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action">action</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task"></see> with the specified action and <see cref="T:System.Threading.CancellationToken"></see>.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that the new  task will observe.</param>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action">action</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task"></see> with the specified action and creation options.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see> used to customize the task's behavior.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action">action</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see>.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task"></see> with the specified action and state.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="state">An object representing data to be used by the action.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action">action</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task"></see> with the specified action and creation options.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> that the new task will observe.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see> used to customize the task's behavior.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action">action</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see>.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task"></see> with the specified action, state, and options.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="state">An object representing data to be used by the action.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> that that the new task will observe.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action">action</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task"></see> with the specified action, state, and options.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="state">An object representing data to be used by the action.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see> used to customize the task's behavior.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action">action</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see>.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task"></see> with the specified action, state, and options.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="state">An object representing data to be used by the action.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> that that the new task will observe..</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see> used to customize the task's behavior.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action">action</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see>.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.AsyncState">
      <summary>Gets the state object supplied when the <see cref="T:System.Threading.Tasks.Task"></see> was created, or null if none was supplied.</summary>
      <returns>An <see cref="T:System.Object"></see> that represents the state data that was passed in to the task when it was created.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.CompletedTask">
      <summary>Gets a task that has already completed successfully.</summary>
      <returns>The successfully completed task.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)">
      <summary>Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task"></see>.</summary>
      <param name="continueOnCapturedContext">true to attempt to marshal the continuation back to the original context captured; otherwise, false.</param>
      <returns>An object used to await this task.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <see cref="T:System.Threading.Tasks.Task"></see> completes. The continuation executes based on a set of specified conditions and uses a specified scheduler.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task"></see> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></see>, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></see>.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to associate with the continuation task and to use for its  execution.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes when the target task competes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see>. The continuation receives a cancellation token and uses a specified scheduler.</summary>
      <param name="continuationAction">An action to run according to the specified continuationOptions. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></see>, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></see>.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to associate with the continuation task and to use for its execution.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource"></see> that created the token has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction">continuationAction</paramref> argument is null.   -or-   The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see>.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task"></see> completes. The continuation uses a specified scheduler.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task"></see> completes.  When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to associate with the continuation task and to use for its execution.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task"></see> completes. The continuation executes based on a set of specified conditions.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task"></see> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></see>, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></see>.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see>.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task"></see> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task"></see> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new continuation task.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)">
      <summary>Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task"></see> completes.</summary>
      <param name="continuationAction">An action to run when the task completes. When run, the delegate is passed the completed task and a caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <returns>A new continuation task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that executes when the target task completes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see>.</summary>
      <param name="continuationAction">An action to run according to the specified continuationOptions. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></see>, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></see>.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see>.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Creates a continuation that receives a cancellation token and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task"></see> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task"></see> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> that will be assigned to the new continuation task.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource"></see> that created the token has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task"></see> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task"></see> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task"></see> completes. The continuation uses a specified scheduler.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task"></see> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to associate with the continuation task and to use for its execution.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction">continuationAction</paramref> argument is null.   -or-   The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task"></see> completes. The continuation receives caller-supplied state information.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task"></see> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></see>, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></see>.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see>.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task"></see> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task"></see> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></see>, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></see>.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to associate with the continuation task and to use for its  execution.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes according to the specified continuation options and returns a value. The continuation is passed a cancellation token and uses a specified scheduler.</summary>
      <param name="continuationFunction">A function to run according to the specified continuationOptions. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></see>, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></see>.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to associate with the continuation task and to use for its execution.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> has been disposed.   -or-   The <see cref="T:System.Threading.CancellationTokenSource"></see> that created the token has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.   -or-   The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see>.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task"></see> completes. The continuation receives caller-supplied state information and uses a specified scheduler.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task"></see> completes.  When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to associate with the continuation task and to use for its execution.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task"></see> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task"></see> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new continuation task.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)">
      <summary>Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task"></see> completes and returns a value.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task"></see> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that executes according to the specified continuation options and returns a value.</summary>
      <param name="continuationFunction">A function to run according to the condition specified in continuationOptions. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></see>, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></see>.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see>.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task"></see> completes and returns a value. The continuation receives a cancellation token.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task"></see> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> that will be assigned to the new continuation task.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> has been disposed.   -or-   The <see cref="T:System.Threading.CancellationTokenSource"></see> that created the token has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1"></see> completes and returns a value.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1"></see> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task"></see> completes and returns a value. The continuation uses a specified scheduler.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task"></see> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to associate with the continuation task and to use for its execution.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.   -or-   The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.CreationOptions">
      <summary>Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see> used to create this task.</summary>
      <returns>The <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see> used to create this task.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.CurrentId">
      <summary>Returns the ID of the currently executing <see cref="T:System.Threading.Tasks.Task"></see>.</summary>
      <returns>An integer that was assigned by the system to the currently-executing task.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Creates a cancellable task that completes after a specified time interval.</summary>
      <param name="delay">The time span to wait before completing the returned task, or TimeSpan.FromMilliseconds(-1) to wait indefinitely.</param>
      <param name="cancellationToken">The cancellation token that will be checked prior to completing the returned task.</param>
      <returns>A task that represents the time delay.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="delay">delay</paramref> represents a negative time interval other than TimeSpan.FromMillseconds(-1).   -or-   The <paramref name="delay">delay</paramref> argument's <see cref="P:System.TimeSpan.TotalMilliseconds"></see> property is greater than <see cref="F:System.Int32.MaxValue"></see>.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
      <summary>Creates a cancellable task that completes after a time delay.</summary>
      <param name="millisecondsDelay">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</param>
      <param name="cancellationToken">The cancellation token that will be checked prior to completing the returned task.</param>
      <returns>A task that represents the time delay.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsDelay">millisecondsDelay</paramref> argument is less than -1.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.Int32)">
      <summary>Creates a task that completes after a time delay.</summary>
      <param name="millisecondsDelay">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</param>
      <returns>A task that represents the time delay.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsDelay">millisecondsDelay</paramref> argument is less than -1.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
      <summary>Creates a task that completes after a specified time interval.</summary>
      <param name="delay">The time span to wait before completing the returned task, or TimeSpan.FromMilliseconds(-1) to wait indefinitely.</param>
      <returns>A task that represents the time delay.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="delay">delay</paramref> represents a negative time interval other than TimeSpan.FromMillseconds(-1).   -or-   The <paramref name="delay">delay</paramref> argument's <see cref="P:System.TimeSpan.TotalMilliseconds"></see> property is greater than <see cref="F:System.Int32.MaxValue"></see>.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.Exception">
      <summary>Gets the <see cref="T:System.AggregateException"></see> that caused the <see cref="T:System.Threading.Tasks.Task"></see> to end prematurely. If the <see cref="T:System.Threading.Tasks.Task"></see> completed successfully or has not yet thrown any exceptions, this will return null.</summary>
      <returns>The <see cref="T:System.AggregateException"></see> that caused the <see cref="T:System.Threading.Tasks.Task"></see> to end prematurely.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.Factory">
      <summary>Provides access to factory methods for creating and configuring <see cref="T:System.Threading.Tasks.Task"></see> and <see cref="T:System.Threading.Tasks.Task`1"></see> instances.</summary>
      <returns>A factory object that can create a variety of <see cref="T:System.Threading.Tasks.Task"></see> and <see cref="T:System.Threading.Tasks.Task`1"></see> objects.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task"></see> that's completed due to cancellation with a specified cancellation token.</summary>
      <param name="cancellationToken">The cancellation token with which to complete the task.</param>
      <returns>The canceled task.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Cancellation has not been requested for <paramref name="cancellationToken">cancellationToken</paramref>; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested"></see> property is false.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"></see> that's completed due to cancellation with a specified cancellation token.</summary>
      <param name="cancellationToken">The cancellation token with which to complete the task.</param>
      <typeparam name="TResult">The type of the result returned by the task.</typeparam>
      <returns>The canceled task.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Cancellation has not been requested for <paramref name="cancellationToken">cancellationToken</paramref>; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested"></see> property is false.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromException(System.Exception)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task"></see> that has completed with a specified exception.</summary>
      <param name="exception">The exception with which to complete the task.</param>
      <returns>The faulted task.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromException``1(System.Exception)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"></see> that's completed with a specified exception.</summary>
      <param name="exception">The exception with which to complete the task.</param>
      <typeparam name="TResult">The type of the result returned by the task.</typeparam>
      <returns>The faulted task.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromResult``1(``0)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"></see> that's completed successfully with the specified result.</summary>
      <param name="result">The result to store into the completed task.</param>
      <typeparam name="TResult">The type of the result returned by the task.</typeparam>
      <returns>The successfully completed task.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.GetAwaiter">
      <summary>Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task"></see>.</summary>
      <returns>An awaiter instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.Id">
      <summary>Gets an ID for this <see cref="T:System.Threading.Tasks.Task"></see> instance.</summary>
      <returns>The identifier that is assigned by the system to this <see cref="T:System.Threading.Tasks.Task"></see> instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsCanceled">
      <summary>Gets whether this <see cref="T:System.Threading.Tasks.Task"></see> instance has completed execution due to being canceled.</summary>
      <returns>true if the task has completed due to being canceled; otherwise false.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsCompleted">
      <summary>Gets whether this <see cref="T:System.Threading.Tasks.Task"></see> has completed.</summary>
      <returns>true if the task has completed; otherwise false.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsFaulted">
      <summary>Gets whether the <see cref="T:System.Threading.Tasks.Task"></see> completed due to an unhandled exception.</summary>
      <returns>true if the task has thrown an unhandled exception; otherwise false.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Action)">
      <summary>Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task"></see> object that represents that work.</summary>
      <param name="action">The work to execute asynchronously</param>
      <returns>A task that represents the work queued to execute in the ThreadPool.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action">action</paramref> parameter was null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})">
      <summary>Queues the specified work to run on the thread pool and returns a proxy for the  task returned by <paramref name="function">function</paramref>.</summary>
      <param name="function">The work to execute asynchronously</param>
      <returns>A task that represents a proxy for the task returned by <paramref name="function">function</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> parameter was null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
      <summary>Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task"></see> object that represents that work. A cancellation token allows the work to be cancelled.</summary>
      <param name="action">The work to execute asynchronously</param>
      <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
      <returns>A task that represents the work queued to execute in the thread pool.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action">action</paramref> parameter was null.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource"></see> associated with <paramref name="cancellationToken">cancellationToken</paramref> was disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Queues the specified work to run on the thread pool and returns a proxy for the task returned by <paramref name="function">function</paramref>.</summary>
      <param name="function">The work to execute asynchronously.</param>
      <param name="cancellationToken">A cancellation token that should be used to cancel the work.</param>
      <returns>A task that represents a proxy for the task returned by <paramref name="function">function</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> parameter was null.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource"></see> associated with <paramref name="cancellationToken">cancellationToken</paramref> was disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
      <summary>Queues the specified work to run on the thread pool and returns a Task(TResult) object that represents that work. A cancellation token allows the work to be cancelled.</summary>
      <param name="function">The work to execute asynchronously</param>
      <param name="cancellationToken">A cancellation token that should be used to cancel the work</param>
      <typeparam name="TResult">The result type of the task.</typeparam>
      <returns>A Task(TResult) that represents the work queued to execute in the thread pool.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> parameter is null.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource"></see> associated with <paramref name="cancellationToken">cancellationToken</paramref> was disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>Queues the specified work to run on the thread pool and returns a proxy for the Task(TResult) returned by <paramref name="function">function</paramref>.</summary>
      <param name="function">The work to execute asynchronously</param>
      <param name="cancellationToken">A cancellation token that should be used to cancel the work</param>
      <typeparam name="TResult">The type of the result returned by the proxy task.</typeparam>
      <returns>A Task(TResult) that represents a proxy for the Task(TResult) returned by <paramref name="function">function</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> parameter was null.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource"></see> associated with <paramref name="cancellationToken">cancellationToken</paramref> was disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>Queues the specified work to run on the thread pool and returns a proxy for the Task(TResult) returned by <paramref name="function">function</paramref>.</summary>
      <param name="function">The work to execute asynchronously</param>
      <typeparam name="TResult">The type of the result returned by the proxy task.</typeparam>
      <returns>A Task(TResult) that represents a proxy for the Task(TResult) returned by <paramref name="function">function</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> parameter was null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
      <summary>Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task`1"></see> object that represents that work.</summary>
      <param name="function">The work to execute asynchronously.</param>
      <typeparam name="TResult">The return type of the task.</typeparam>
      <returns>A task object that represents the work queued to execute in the thread pool.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.RunSynchronously">
      <summary>Runs the <see cref="T:System.Threading.Tasks.Task"></see> synchronously on the current <see cref="T:System.Threading.Tasks.TaskScheduler"></see>.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> instance has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.Tasks.Task"></see> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
      <summary>Runs the <see cref="T:System.Threading.Tasks.Task"></see> synchronously on the <see cref="T:System.Threading.Tasks.TaskScheduler"></see> provided.</summary>
      <param name="scheduler">The scheduler on which to attempt to run this task inline.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> instance has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.Tasks.Task"></see> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Start">
      <summary>Starts the <see cref="T:System.Threading.Tasks.Task"></see>, scheduling it for execution to the current <see cref="T:System.Threading.Tasks.TaskScheduler"></see>.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> instance has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.Tasks.Task"></see> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)">
      <summary>Starts the <see cref="T:System.Threading.Tasks.Task"></see>, scheduling it for execution to the specified <see cref="T:System.Threading.Tasks.TaskScheduler"></see>.</summary>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> with which to associate and execute this task.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.Tasks.Task"></see> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> instance has been disposed.</exception>
      <exception cref="T:System.Threading.Tasks.TaskSchedulerException">The scheduler was unable to queue this task.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.Status">
      <summary>Gets the <see cref="T:System.Threading.Tasks.TaskStatus"></see> of this task.</summary>
      <returns>The current <see cref="T:System.Threading.Tasks.TaskStatus"></see> of this task instance.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
      <summary>Waits for the <see cref="T:System.Threading.Tasks.Task"></see> to complete execution within a specified time interval.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan"></see> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"></see> that represents -1 milliseconds to wait indefinitely.</param>
      <returns>true if the <see cref="T:System.Threading.Tasks.Task"></see> completed execution within the allotted time; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is a negative number other than -1 milliseconds, which represents an infinite time-out.   -or-  <paramref name="timeout">timeout</paramref> is greater than <see cref="F:System.Int32.MaxValue"></see>.</exception>
      <exception cref="T:System.AggregateException">The task was canceled. The <see cref="P:System.AggregateException.InnerExceptions"></see> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException"></see> object.   -or-   An exception was thrown during the execution of the task. The <see cref="P:System.AggregateException.InnerExceptions"></see> collection contains information about the exception or exceptions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>Waits for the <see cref="T:System.Threading.Tasks.Task"></see> to complete execution. The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"></see> (-1) to wait indefinitely.</param>
      <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
      <returns>true if the <see cref="T:System.Threading.Tasks.Task"></see> completed execution within the allotted time; otherwise, false.</returns>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken">cancellationToken</paramref> was canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout">millisecondsTimeout</paramref> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.AggregateException">The task was canceled. The <see cref="P:System.AggregateException.InnerExceptions"></see> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException"></see> object.   -or-   An exception was thrown during the execution of the task. The <see cref="P:System.AggregateException.InnerExceptions"></see> collection contains information about the exception or exceptions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
      <summary>Waits for the <see cref="T:System.Threading.Tasks.Task"></see> to complete execution. The wait terminates if a cancellation token is canceled before the task completes.</summary>
      <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken">cancellationToken</paramref> was canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The task has been disposed.</exception>
      <exception cref="T:System.AggregateException">The task was canceled. The <see cref="P:System.AggregateException.InnerExceptions"></see> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException"></see> object.   -or-   An exception was thrown during the execution of the task. The <see cref="P:System.AggregateException.InnerExceptions"></see> collection contains information about the exception or exceptions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Int32)">
      <summary>Waits for the <see cref="T:System.Threading.Tasks.Task"></see> to complete execution within a specified number of milliseconds.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"></see> (-1) to wait indefinitely.</param>
      <returns>true if the <see cref="T:System.Threading.Tasks.Task"></see> completed execution within the allotted time; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout">millisecondsTimeout</paramref> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.AggregateException">The task was canceled. The <see cref="P:System.AggregateException.InnerExceptions"></see> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException"></see> object.   -or-   An exception was thrown during the execution of the task. The <see cref="P:System.AggregateException.InnerExceptions"></see> collection contains information about the exception or exceptions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait">
      <summary>Waits for the <see cref="T:System.Threading.Tasks.Task"></see> to complete execution.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> has been disposed.</exception>
      <exception cref="T:System.AggregateException">The task was canceled. The <see cref="P:System.AggregateException.InnerExceptions"></see> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException"></see> object.   -or-   An exception was thrown during the execution of the task. The <see cref="P:System.AggregateException.InnerExceptions"></see> collection contains information about the exception or exceptions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
      <summary>Waits for all of the provided <see cref="T:System.Threading.Tasks.Task"></see> objects to complete execution.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task"></see> instances on which to wait.</param>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task"></see> objects in <paramref name="tasks">tasks</paramref> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> argument contains a null element.   -or-   The <paramref name="tasks">tasks</paramref> argument is an empty array.</exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task"></see> instances was canceled. If a task was canceled, the <see cref="T:System.AggregateException"></see> exception contains an <see cref="T:System.OperationCanceledException"></see> exception in its <see cref="P:System.AggregateException.InnerExceptions"></see> collection.   -or-   An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task"></see> instances.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
      <summary>Waits for all of the provided <see cref="T:System.Threading.Tasks.Task"></see> objects to complete execution within a specified number of milliseconds.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task"></see> instances on which to wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"></see> (-1) to wait indefinitely.</param>
      <returns>true if all of the <see cref="T:System.Threading.Tasks.Task"></see> instances completed execution within the allotted time; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task"></see> objects in <paramref name="tasks">tasks</paramref> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> argument is null.</exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task"></see> instances was canceled. If a task was canceled, the <see cref="T:System.AggregateException"></see> contains an <see cref="T:System.OperationCanceledException"></see> in its <see cref="P:System.AggregateException.InnerExceptions"></see> collection.   -or-   An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task"></see> instances.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout">millisecondsTimeout</paramref> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> argument contains a null element.   -or-   The <paramref name="tasks">tasks</paramref> argument is an empty array.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
      <summary>Waits for all of the provided <see cref="T:System.Threading.Tasks.Task"></see> objects to complete execution unless the wait is cancelled.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task"></see> instances on which to wait.</param>
      <param name="cancellationToken">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> to observe while waiting for the tasks to complete.</param>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken">cancellationToken</paramref> was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> argument is null.</exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task"></see> instances was canceled. If a task was canceled, the <see cref="T:System.AggregateException"></see> contains an <see cref="T:System.OperationCanceledException"></see> in its <see cref="P:System.AggregateException.InnerExceptions"></see> collection.   -or-   An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task"></see> instances.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> argument contains a null element.   -or-   The <paramref name="tasks">tasks</paramref> argument is an empty array.</exception>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task"></see> objects in <paramref name="tasks">tasks</paramref> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
      <summary>Waits for all of the provided cancellable <see cref="T:System.Threading.Tasks.Task"></see> objects to complete execution within a specified time interval.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task"></see> instances on which to wait.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan"></see> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"></see> that represents -1 milliseconds to wait indefinitely.</param>
      <returns>true if all of the <see cref="T:System.Threading.Tasks.Task"></see> instances completed execution within the allotted time; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task"></see> objects in <paramref name="tasks">tasks</paramref> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> argument is null.</exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task"></see> instances was canceled. If a task was canceled, the <see cref="T:System.AggregateException"></see> contains an <see cref="T:System.OperationCanceledException"></see> in its <see cref="P:System.AggregateException.InnerExceptions"></see> collection.   -or-   An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task"></see> instances.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is a negative number other than -1 milliseconds, which represents an infinite time-out.   -or-  <paramref name="timeout">timeout</paramref> is greater than <see cref="F:System.Int32.MaxValue"></see>.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> argument contains a null element.   -or-   The <paramref name="tasks">tasks</paramref> argument is an empty array.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
      <summary>Waits for all of the provided <see cref="T:System.Threading.Tasks.Task"></see> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task"></see> instances on which to wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"></see> (-1) to wait indefinitely.</param>
      <param name="cancellationToken">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> to observe while waiting for the tasks to complete.</param>
      <returns>true if all of the <see cref="T:System.Threading.Tasks.Task"></see> instances completed execution within the allotted time; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task"></see> objects in <paramref name="tasks">tasks</paramref> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> argument is null.</exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task"></see> instances was canceled. If a task was canceled, the <see cref="T:System.AggregateException"></see> contains an <see cref="T:System.OperationCanceledException"></see> in its <see cref="P:System.AggregateException.InnerExceptions"></see> collection.   -or-   An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task"></see> instances.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout">millisecondsTimeout</paramref> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> argument contains a null element.   -or-   The <paramref name="tasks">tasks</paramref> argument is an empty array.</exception>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken">cancellationToken</paramref> was canceled.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
      <summary>Waits for any of the provided <see cref="T:System.Threading.Tasks.Task"></see> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task"></see> instances on which to wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"></see> (-1) to wait indefinitely.</param>
      <param name="cancellationToken">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> to observe while waiting for a task to complete.</param>
      <returns>The index of the completed task in the <paramref name="tasks">tasks</paramref> array argument, or -1 if the timeout occurred.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout">millisecondsTimeout</paramref> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> argument contains a null element.</exception>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken">cancellationToken</paramref> was canceled.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
      <summary>Waits for any of the provided <see cref="T:System.Threading.Tasks.Task"></see> objects to complete execution within a specified time interval.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task"></see> instances on which to wait.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan"></see> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"></see> that represents -1 milliseconds to wait indefinitely.</param>
      <returns>The index of the completed task in the <paramref name="tasks">tasks</paramref> array argument, or -1 if the timeout occurred.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is a negative number other than -1 milliseconds, which represents an infinite time-out.   -or-  <paramref name="timeout">timeout</paramref> is greater than <see cref="F:System.Int32.MaxValue"></see>.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> argument contains a null element.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
      <summary>Waits for any of the provided <see cref="T:System.Threading.Tasks.Task"></see> objects to complete execution within a specified number of milliseconds.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task"></see> instances on which to wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"></see> (-1) to wait indefinitely.</param>
      <returns>The index of the completed task in the <paramref name="tasks">tasks</paramref> array argument, or -1 if the timeout occurred.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout">millisecondsTimeout</paramref> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> argument contains a null element.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
      <summary>Waits for any of the provided <see cref="T:System.Threading.Tasks.Task"></see> objects to complete execution unless the wait is cancelled.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task"></see> instances on which to wait.</param>
      <param name="cancellationToken">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> to observe while waiting for a task to complete.</param>
      <returns>The index of the completed task in the <paramref name="tasks">tasks</paramref> array argument.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> argument contains a null element.</exception>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken">cancellationToken</paramref> was canceled.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
      <summary>Waits for any of the provided <see cref="T:System.Threading.Tasks.Task"></see> objects to complete execution.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task"></see> instances on which to wait.</param>
      <returns>The index of the completed <see cref="T:System.Threading.Tasks.Task"></see> object in the <paramref name="tasks">tasks</paramref> array.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> argument contains a null element.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
      <summary>Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task"></see> objects in an enumerable collection have completed.</summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <returns>A task that represents the completion of all of the supplied tasks.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> argument was null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> collection contained a null task.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
      <summary>Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task"></see> objects in an array have completed.</summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <returns>A task that represents the completion of all of the supplied tasks.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> argument was null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contained a null task.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
      <summary>Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1"></see> objects in an enumerable collection have completed.</summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <typeparam name="TResult">The type of the completed task.</typeparam>
      <returns>A task that represents the completion of all of the supplied tasks.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> argument was null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> collection contained a null task.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
      <summary>Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1"></see> objects in an array have completed.</summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <typeparam name="TResult">The type of the completed task.</typeparam>
      <returns>A task that represents the completion of all of the supplied tasks.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> argument was null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contained a null task.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
      <summary>Creates a task that will complete when any of the supplied tasks have completed.</summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <returns>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> argument was null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contained a null task, or was empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])">
      <summary>Creates a task that will complete when any of the supplied tasks have completed.</summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <returns>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> argument was null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contained a null task, or was empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
      <summary>Creates a task that will complete when any of the supplied tasks have completed.</summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <typeparam name="TResult">The type of the completed task.</typeparam>
      <returns>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> argument was null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contained a null task, or was empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
      <summary>Creates a task that will complete when any of the supplied tasks have completed.</summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <typeparam name="TResult">The type of the completed task.</typeparam>
      <returns>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> argument was null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contained a null task, or was empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Yield">
      <summary>Creates an awaitable task that asynchronously yields back to the current context when awaited.</summary>
      <returns>A context that, when awaited, will asynchronously transition back into the current context at the time of the await. If the current <see cref="T:System.Threading.SynchronizationContext"></see> is non-null, it is treated as the current context. Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle">
      <summary>Gets a <see cref="T:System.Threading.WaitHandle"></see> that can be used to wait for the task to complete.</summary>
      <returns>A <see cref="T:System.Threading.WaitHandle"></see> that can be used to wait for the task to complete.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task"></see> has been disposed.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously">
      <summary>Gets an indication of whether the operation completed synchronously.</summary>
      <returns>true if the operation completed synchronously; otherwise, false.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCanceledException">
      <summary>Represents an exception used to communicate task cancellation.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskCanceledException"></see> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskCanceledException"></see> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Threading.Tasks.Task)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskCanceledException"></see> class with a reference to the <see cref="T:System.Threading.Tasks.Task"></see> that has been canceled.</summary>
      <param name="task">A task that has been canceled.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskCanceledException"></see> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskCanceledException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskCanceledException.Task">
      <summary>Gets the task associated with this exception.</summary>
      <returns>A reference to the <see cref="T:System.Threading.Tasks.Task"></see> that is associated with this exception.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCompletionSource`1">
      <summary>Represents the producer side of a <see cref="T:System.Threading.Tasks.Task`1"></see> unbound to a delegate, providing access to the consumer side through the <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task"></see> property.</summary>
      <typeparam name="TResult">The type of the result value assocatied with this <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"></see>.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor">
      <summary>Creates a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"></see>.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"></see> with the specified state.</summary>
      <param name="state">The state to use as the underlying <see cref="T:System.Threading.Tasks.Task`1"></see>'s AsyncState.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"></see> with the specified options.</summary>
      <param name="creationOptions">The options to use when creating the underlying <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> represent options invalid for use with a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"></see>.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"></see> with the specified state and options.</summary>
      <param name="state">The state to use as the underlying <see cref="T:System.Threading.Tasks.Task`1"></see>'s AsyncState.</param>
      <param name="creationOptions">The options to use when creating the underlying <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> represent options invalid for use with a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"></see>.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
      <summary>Transitions the underlying <see cref="T:System.Threading.Tasks.Task`1"></see> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"></see> state.</summary>
      <exception cref="T:System.InvalidOperationException">The underlying <see cref="T:System.Threading.Tasks.Task`1"></see> is already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"></see>, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"></see>, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"></see>, or if the underlying <see cref="T:System.Threading.Tasks.Task`1"></see> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Transitions the underlying <see cref="T:System.Threading.Tasks.Task`1"></see> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"></see> state and binds a collection of exception objects to it.</summary>
      <param name="exceptions">The collection of exceptions to bind to this <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task"></see> was disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exceptions">exceptions</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">There are one or more null elements in <paramref name="exceptions">exceptions</paramref>.</exception>
      <exception cref="T:System.InvalidOperationException">The underlying <see cref="T:System.Threading.Tasks.Task`1"></see> is already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"></see>, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"></see>, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"></see>.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
      <summary>Transitions the underlying <see cref="T:System.Threading.Tasks.Task`1"></see> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"></see> state and binds it to a specified exception.</summary>
      <param name="exception">The exception to bind to this <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task"></see> was disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exception">exception</paramref> argument is null.</exception>
      <exception cref="T:System.InvalidOperationException">The underlying <see cref="T:System.Threading.Tasks.Task`1"></see> is already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"></see>, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"></see>, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"></see>.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
      <summary>Transitions the underlying <see cref="T:System.Threading.Tasks.Task`1"></see> into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"></see> state.</summary>
      <param name="result">The result value to bind to this <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task"></see> was disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The underlying <see cref="T:System.Threading.Tasks.Task`1"></see> is already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"></see>, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"></see>, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"></see>.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
      <summary>Gets the <see cref="T:System.Threading.Tasks.Task`1"></see> created by this <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"></see>.</summary>
      <returns>Returns the <see cref="T:System.Threading.Tasks.Task`1"></see> created by this <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"></see>.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
      <summary>Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task`1"></see> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"></see> state.</summary>
      <returns>True if the operation was successful; false if the operation was unsuccessful or the object has already been disposed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
      <summary>Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task`1"></see> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"></see> state and enables a cancellation token to be stored in the canceled task.</summary>
      <param name="cancellationToken">A cancellation token.</param>
      <returns>true if the operation is successful; otherwise, false.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task`1"></see> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"></see> state and binds a collection of exception objects to it.</summary>
      <param name="exceptions">The collection of exceptions to bind to this <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <returns>True if the operation was successful; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task"></see> was disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exceptions">exceptions</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">There are one or more null elements in <paramref name="exceptions">exceptions</paramref>.   -or-   The <paramref name="exceptions">exceptions</paramref> collection is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
      <summary>Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task`1"></see> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"></see> state and binds it to a specified exception.</summary>
      <param name="exception">The exception to bind to this <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <returns>True if the operation was successful; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task"></see> was disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exception">exception</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
      <summary>Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task`1"></see> into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"></see> state.</summary>
      <param name="result">The result value to bind to this <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <returns>True if the operation was successful; otherwise, false.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskContinuationOptions">
      <summary>Specifies the behavior for a task that is created by using the <see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)"></see> or <see cref="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)"></see> method.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
      <summary>Specifies that the continuation, if it is a child task, is attached to a parent in the task hierarchy. The continuation can be a child task only if its antecedent is also a child task. By default, a child task (that is, an inner task created by an outer task) executes independently of its parent. You can use the <see cref="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent"></see> option so that the parent and child tasks are synchronized.   Note that if a parent task is configured with the <see cref="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach"></see> option, the <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent"></see> option in the child task has no effect, and the child task will execute as a detached child task.   For more information, see <see cref="~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md">Attached and Detached Child Tasks</see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach">
      <summary>Specifies that any child task (that is, any nested inner task created by this continuation) that is created with the <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent"></see> option and attempts to execute as an attached child task will not be able to attach to the parent task and will execute instead as a detached child task. For more information, see <see cref="~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md">Attached and Detached Child Tasks</see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
      <summary>Specifies that the continuation task should be executed synchronously. With this option specified, the continuation runs on the same thread that causes the antecedent task to transition into its final state. If the antecedent is already complete when the continuation is created, the continuation will run on the thread that creates the continuation. If the antecedent's <see cref="T:System.Threading.CancellationTokenSource"></see> is disposed in a finally block (Finally in Visual Basic), a continuation with this option will run in that finally block. Only very short-running continuations should be executed synchronously.   Because the task executes synchronously, there is no need to call a method such as <see cref="M:System.Threading.Tasks.Task.Wait"></see> to ensure that the calling thread waits for the task to complete.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.HideScheduler">
      <summary>Specifies that tasks created by the continuation by calling methods such as <see cref="M:System.Threading.Tasks.Task.Run(System.Action)"></see> or <see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})"></see> see the default scheduler (<see cref="P:System.Threading.Tasks.TaskScheduler.Default"></see>) rather than the scheduler on which this continuation is running as the current scheduler.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.LazyCancellation">
      <summary>In the case of continuation cancellation, prevents completion of the continuation until the antecedent has completed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.LongRunning">
      <summary>Specifies that a continuation will be a long-running, course-grained operation. It provides a hint to the <see cref="T:System.Threading.Tasks.TaskScheduler"></see> that oversubscription may be warranted.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.None">
      <summary>When no continuation options are specified, specifies that default behavior should be used when executing a continuation. The continuation runs asynchronously when the antecedent task completes, regardless of the antecedent's final <see cref="P:System.Threading.Tasks.Task.Status"></see> property value. It the continuation is a child task, it is created as a detached nested task.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
      <summary>Specifies that the continuation task should not be scheduled if its antecedent was canceled. An antecedent is canceled if its <see cref="P:System.Threading.Tasks.Task.Status"></see> property upon completion is <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"></see>. This option is not valid for multi-task continuations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
      <summary>Specifies that the continuation task should not be scheduled if its antecedent threw an unhandled exception. An antecedent throws an unhandled exception if its <see cref="P:System.Threading.Tasks.Task.Status"></see> property upon completion is <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"></see>. This option is not valid for multi-task continuations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
      <summary>Specifies that the continuation task should not be scheduled if its antecedent ran to completion. An antecedent runs to completion if its <see cref="P:System.Threading.Tasks.Task.Status"></see> property upon completion is <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"></see>. This option is not valid for multi-task continuations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
      <summary>Specifies that the continuation should be scheduled only if its antecedent was canceled.  An antecedent is canceled if its <see cref="P:System.Threading.Tasks.Task.Status"></see> property upon completion is <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"></see>. This option is not valid for multi-task continuations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
      <summary>Specifies that the continuation task should be scheduled only if its antecedent threw an unhandled exception. An antecedent throws an unhandled exception if its <see cref="P:System.Threading.Tasks.Task.Status"></see> property upon completion is <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"></see>.   The <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted"></see> option guarantees that the <see cref="P:System.Threading.Tasks.Task.Exception"></see> property in the antecedent is not null. You can use that property to catch the exception and see which exception caused the task to fault. If you do not access the <see cref="P:System.Threading.Tasks.Task.Exception"></see> property, the exception is unhandled. Also, if you attempt to access the <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property of a task that has been canceled or has faulted, a new exception is thrown.   This option is not valid for multi-task continuations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
      <summary>Specifies that the continuation should be scheduled only if its antecedent ran to completion. An antecedent runs to completion if its <see cref="P:System.Threading.Tasks.Task.Status"></see> property upon completion is <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"></see>. This option is not valid for multi-task continuations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.PreferFairness">
      <summary>A hint to a <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to schedule task in the order in which they were scheduled, so that tasks scheduled sooner are more likely to run sooner, and tasks scheduled later are more likely to run later.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously">
      <summary>Specifies that the continuation task should be run asynchronously.  This option has precedence over <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></see>.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCreationOptions">
      <summary>Specifies flags that control optional behavior for the creation and execution of tasks.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent">
      <summary>Specifies that a task is attached to a parent in the task hierarchy. By default, a child task (that is, an inner task created by an outer task) executes independently of its parent. You can use the <see cref="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent"></see> option so that the parent and child tasks are synchronized.   Note that if a parent task is configured with the <see cref="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach"></see> option, the <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent"></see> option in the child task has no effect, and the child task will execute as a detached child task.   For more information, see <see cref="~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md">Attached and Detached Child Tasks</see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach">
      <summary>Specifies that any child task that attempts to execute as an attached child task (that is, it is created with the <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent"></see> option) will not be able to attach to the parent task and will execute instead as a detached child task. For more information, see <see cref="~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md">Attached and Detached Child Tasks</see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.HideScheduler">
      <summary>Prevents the ambient scheduler from being seen as the current scheduler in the created task. This means that operations like StartNew or ContinueWith that are performed in the created task will see <see cref="P:System.Threading.Tasks.TaskScheduler.Default"></see> as the current scheduler.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.LongRunning">
      <summary>Specifies that a task will be a long-running, coarse-grained operation involving fewer, larger components than fine-grained systems. It provides a hint to the <see cref="T:System.Threading.Tasks.TaskScheduler"></see> that oversubscription may be warranted. Oversubscription lets you create more threads than the available number of hardware threads. It also provides a hint  to the task scheduler that an additional thread might be required for the task so that it does not block the forward progress of other threads or work items on the local thread-pool queue.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.None">
      <summary>Specifies that the default behavior should be used.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.PreferFairness">
      <summary>A hint to a <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to schedule a task in as fair a manner as possible, meaning that tasks scheduled sooner will be more likely to be run sooner, and tasks scheduled later will be more likely to be run later.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.RunContinuationsAsynchronously">
      <summary>Forces continuations added to the current task to be executed asynchronously.   Note that the <see cref="F:System.Threading.Tasks.TaskCreationOptions.RunContinuationsAsynchronously"></see> member is available in the <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see> enumeration starting with the .NET Framework 4.6.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>Provides a set of static (Shared in Visual Basic) methods for working with specific kinds of <see cref="T:System.Threading.Tasks.Task"></see> instances.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>Creates a proxy <see cref="T:System.Threading.Tasks.Task"></see> that represents the asynchronous operation of a <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)"></see>.</summary>
      <param name="task">The Task&lt;Task&gt; (C#) or Task (Of Task) (Visual Basic) to unwrap.</param>
      <returns>A Task that represents the asynchronous operation of the provided System.Threading.Tasks.Task(Of Task).</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown if the <paramref name="task">task</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>Creates a proxy <see cref="T:System.Threading.Tasks.Task"></see> that represents the asynchronous operation of a Task&lt;Task&lt;T&gt;&gt; (C#) or Task (Of Task(Of T)) (Visual Basic).</summary>
      <param name="task">The Task&lt;Task&lt;T&gt;&gt; (C#) or Task (Of Task(Of T)) (Visual Basic) to unwrap.</param>
      <typeparam name="TResult">The type of the task's result.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task"></see> that represents the asynchronous operation of the provided Task&lt;Task&lt;T&gt;&gt; (C#) or Task (Of Task(Of T)) (Visual Basic).</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown if the <paramref name="task">task</paramref> argument is null.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskFactory`1">
      <summary>Provides support for creating and scheduling <see cref="T:System.Threading.Tasks.Task`1"></see> objects.</summary>
      <typeparam name="TResult">The return value of the <see cref="T:System.Threading.Tasks.Task`1"></see> objects that the methods of this class create.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1"></see> instance with the default configuration.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1"></see> instance with the default configuration.</summary>
      <param name="cancellationToken">The default cancellation token that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory"></see> unless another cancellation token is explicitly specified when calling the factory methods.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1"></see> instance with the specified configuration.</summary>
      <param name="scheduler">The scheduler to use to schedule any tasks created with this <see cref="T:System.Threading.Tasks.TaskFactory`1"></see>. A null value indicates that the current <see cref="T:System.Threading.Tasks.TaskScheduler"></see> should be used.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1"></see> instance with the specified configuration.</summary>
      <param name="creationOptions">The default options to use when creating tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1"></see>.</param>
      <param name="continuationOptions">The default options to use when creating continuation tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1"></see>.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationOptions">creationOptions</paramref> or <paramref name="continuationOptions">continuationOptions</paramref> specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1"></see> instance with the specified configuration.</summary>
      <param name="cancellationToken">The default cancellation token that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory"></see> unless another cancellation token is explicitly specified when calling the factory methods.</param>
      <param name="creationOptions">The default options to use when creating tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1"></see>.</param>
      <param name="continuationOptions">The default options to use when creating continuation tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1"></see>.</param>
      <param name="scheduler">The default scheduler to use to schedule any tasks created with this <see cref="T:System.Threading.Tasks.TaskFactory`1"></see>. A null value indicates that <see cref="P:System.Threading.Tasks.TaskScheduler.Current"></see> should be used.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationOptions">creationOptions</paramref> or <paramref name="continuationOptions">continuationOptions</paramref> specifies an invalid value.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.CancellationToken">
      <summary>Gets the default cancellation token for this task factory.</summary>
      <returns>The default cancellation token for this task factory.</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions">
      <summary>Gets the <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see> enumeration value for this task factory.</summary>
      <returns>One of the enumeration values that specifies the default continuation options for this task factory.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation task that will be started upon the completion of a set of provided Tasks.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the tasks array have completed.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</param>
      <param name="scheduler">The scheduler that is used to schedule the created continuation task.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.   -or-   The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contains a null value or is empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="continuationOptions">continuationOptions</paramref> specifies an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.   -or-   The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation task that will be started upon the completion of a set of provided Tasks.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the tasks array have completed.</param>
      <param name="continuationOptions">One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contains a null value or is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
      <summary>Creates a continuation task that will be started upon the completion of a set of provided tasks.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the tasks array have completed.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contains a null value or is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
      <summary>Creates a continuation task that will be started upon the completion of a set of provided tasks.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the tasks array have completed.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new continuation task.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.   -or-   The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-  <paramref name="continuationFunction">continuationFunction</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contains a null value or is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
      <summary>Creates a continuation task that will be started upon the completion of a set of provided tasks.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the tasks array have completed.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contains a null value or is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
      <summary>Creates a continuation task that will be started upon the completion of a set of provided tasks.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the tasks array have completed.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.   -or-   The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contains a null value or is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation task that will be started upon the completion of a set of provided tasks.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the tasks array have completed.</param>
      <param name="continuationOptions">One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contains a null value or is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation task that will be started upon the completion of a set of provided tasks.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the tasks array have completed.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</param>
      <param name="scheduler">The scheduler that is used to schedule the created continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.   -or-   The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contains a null value or is empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.   -or-   The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation task that will be started upon the completion of any task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the tasks array completes.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</param>
      <param name="scheduler">The task scheduler that is used to schedule the created continuation task.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.   -or-   The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The <paramref name="tasks">tasks</paramref> array is empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see> value.</exception>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.   -or-   The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
      <summary>Creates a continuation task that will be started upon the completion of any task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the tasks array completes.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contains a null value or is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
      <summary>Creates a continuation task that will be started upon the completion of any task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the tasks array completes.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new continuation task.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.   -or-   The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation task that will be started upon the completion of any task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the tasks array completes.</param>
      <param name="continuationOptions">One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid enumeration value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation task that will be started upon the completion of any task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the tasks array completes.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.   -or-   The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The <paramref name="tasks">tasks</paramref> array is empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.   -or-   The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation task that will be started upon the completion of any task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the tasks array completes.</param>
      <param name="continuationOptions">One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid enumeration value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
      <summary>Creates a continuation task that will be started upon the completion of any task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the tasks array completes.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
      <summary>Creates a continuation task that will be started upon the completion of any task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the tasks array completes.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.   -or-   The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.CreationOptions">
      <summary>Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see> enumeration value for this task factory.</summary>
      <returns>One of the enumeration values that specifies the default creation options for this task factory.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
      <summary>Creates a task that executes an end method function when a specified <see cref="T:System.IAsyncResult"></see> completes.</summary>
      <param name="asyncResult">The <see cref="T:System.IAsyncResult"></see> whose completion should trigger the processing of the endMethod.</param>
      <param name="endMethod">The function delegate that processes the completed asyncResult.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="asyncResult">asyncResult</paramref> argument is null.   -or-   The <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
      <summary>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <returns>The created task that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a task that executes an end method function when a specified <see cref="T:System.IAsyncResult"></see> completes.</summary>
      <param name="asyncResult">The <see cref="T:System.IAsyncResult"></see> whose completion should trigger the processing of the endMethod.</param>
      <param name="endMethod">The function delegate that processes the completed asyncResult.</param>
      <param name="creationOptions">One of the enumeration values that controls the behavior of the created task.</param>
      <returns>A task that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="asyncResult">asyncResult</paramref> argument is null.   -or-   The <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <param name="creationOptions">One of the enumeration values that controls the behavior of the created task.</param>
      <returns>The created <see cref="T:System.Threading.Tasks.Task`1"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a task that executes an end method function when a specified <see cref="T:System.IAsyncResult"></see> completes.</summary>
      <param name="asyncResult">The <see cref="T:System.IAsyncResult"></see> whose completion should trigger the processing of the endMethod.</param>
      <param name="endMethod">The function delegate that processes the completed asyncResult.</param>
      <param name="creationOptions">One of the enumeration values that controls the behavior of the created task.</param>
      <param name="scheduler">The task scheduler that is used to schedule the task that executes the end method.</param>
      <returns>The created task that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="asyncResult">asyncResult</paramref> argument is null.   -or-   The <paramref name="endMethod">endMethod</paramref> argument is null.   -or-   The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> parameter specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the beginMethod delegate.</param>
      <param name="arg2">The second argument passed to the beginMethod delegate.</param>
      <param name="arg3">The third argument passed to the beginMethod delegate.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <param name="creationOptions">An object that controls the behavior of the created task.</param>
      <typeparam name="TArg1">The type of the second argument passed to beginMethod delegate.</typeparam>
      <typeparam name="TArg2">The type of the third argument passed to beginMethod delegate.</typeparam>
      <typeparam name="TArg3">The type of the first argument passed to the beginMethod delegate.</typeparam>
      <returns>The created task that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> parameter specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
      <summary>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the beginMethod delegate.</param>
      <param name="arg2">The second argument passed to the beginMethod delegate.</param>
      <param name="arg3">The third argument passed to the beginMethod delegate.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <typeparam name="TArg1">The type of the second argument passed to beginMethod delegate.</typeparam>
      <typeparam name="TArg2">The type of the third argument passed to beginMethod delegate.</typeparam>
      <typeparam name="TArg3">The type of the first argument passed to the beginMethod delegate.</typeparam>
      <returns>The created task that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the beginMethod delegate.</param>
      <param name="arg2">The second argument passed to the beginMethod delegate.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <param name="creationOptions">An object that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <typeparam name="TArg1">The type of the second argument passed to beginMethod delegate.</typeparam>
      <typeparam name="TArg2">The type of the first argument passed to the beginMethod delegate.</typeparam>
      <returns>The created task that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> parameter specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
      <summary>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the beginMethod delegate.</param>
      <param name="arg2">The second argument passed to the beginMethod delegate.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <typeparam name="TArg1">The type of the second argument passed to beginMethod delegate.</typeparam>
      <typeparam name="TArg2">The type of the first argument passed to the beginMethod delegate.</typeparam>
      <returns>The created task that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
      <summary>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the beginMethod delegate.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <typeparam name="TArg1">The type of the first argument passed to the beginMethod delegate.</typeparam>
      <returns>The created task that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the beginMethod delegate.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <param name="creationOptions">One of the enumeration values that controls the behavior of the created task.</param>
      <typeparam name="TArg1">The type of the first argument passed to the beginMethod delegate.</typeparam>
      <returns>The created task that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> parameter specifies an invalid value.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.Scheduler">
      <summary>Gets the task scheduler for this task factory.</summary>
      <returns>The task scheduler for this task factory.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
      <summary>Creates and starts a task.</summary>
      <param name="function">A function delegate that returns the future result to be available through the task.</param>
      <param name="state">An object that contains data to be used by the function delegate.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new task.</param>
      <returns>The started task.</returns>
      <exception cref="T:System.ObjectDisposedException">The cancellation token source that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates and starts a task.</summary>
      <param name="function">A function delegate that returns the future result to be available through the task.</param>
      <param name="state">An object that contains data to be used by the function delegate.</param>
      <param name="creationOptions">One of the enumeration values that controls the behavior of the created task.</param>
      <returns>The started task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> parameter specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates and starts a task.</summary>
      <param name="function">A function delegate that returns the future result to be available through the task.</param>
      <param name="creationOptions">One of the enumeration values that controls the behavior of the created task.</param>
      <returns>The started <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> parameter specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates and starts a task.</summary>
      <param name="function">A function delegate that returns the future result to be available through the task.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new task.</param>
      <param name="creationOptions">One of the enumeration values that controls the behavior of the created task.</param>
      <param name="scheduler">The task scheduler that is used to schedule the created task.</param>
      <returns>The started task.</returns>
      <exception cref="T:System.ObjectDisposedException">The cancellation token source that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> argument is null.   -or-   The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> parameter specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
      <summary>Creates and starts a task.</summary>
      <param name="function">A function delegate that returns the future result to be available through the task.</param>
      <param name="state">An object that contains data to be used by the function delegate.</param>
      <returns>The started task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
      <summary>Creates and starts a task.</summary>
      <param name="function">A function delegate that returns the future result to be available through the task.</param>
      <returns>The started task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
      <summary>Creates and starts a task.</summary>
      <param name="function">A function delegate that returns the future result to be available through the task.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new task.</param>
      <returns>The started task.</returns>
      <exception cref="T:System.ObjectDisposedException">The cancellation token source that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates and starts a task.</summary>
      <param name="function">A function delegate that returns the future result to be available through the task.</param>
      <param name="state">An object that contains data to be used by the function delegate.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new task.</param>
      <param name="creationOptions">One of the enumeration values that controls the behavior of the created task.</param>
      <param name="scheduler">The task scheduler that is used to schedule the created task.</param>
      <returns>The started task.</returns>
      <exception cref="T:System.ObjectDisposedException">The cancellation token source that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> argument is null.   -or-   The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> parameter specifies an invalid value.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskFactory">
      <summary>Provides support for creating and scheduling <see cref="T:System.Threading.Tasks.Task"></see> objects.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory"></see> instance with the default configuration.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory"></see> instance with the specified configuration.</summary>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory"></see> unless another CancellationToken is explicitly specified while calling the factory methods.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory"></see> instance with the specified configuration.</summary>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to use to schedule any tasks created with this TaskFactory. A null value indicates that the current TaskScheduler should be used.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory"></see> instance with the specified configuration.</summary>
      <param name="creationOptions">The default <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see> to use when creating tasks with this TaskFactory.</param>
      <param name="continuationOptions">The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see> to use when creating continuation tasks with this TaskFactory.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see> value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></see>.   -or-   The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory"></see> instance with the specified configuration.</summary>
      <param name="cancellationToken">The default <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory"></see> unless another CancellationToken is explicitly specified while calling the factory methods.</param>
      <param name="creationOptions">The default <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see> to use when creating tasks with this TaskFactory.</param>
      <param name="continuationOptions">The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see> to use when creating continuation tasks with this TaskFactory.</param>
      <param name="scheduler">The default <see cref="T:System.Threading.Tasks.TaskScheduler"></see> to use to schedule any Tasks created with this TaskFactory. A null value indicates that TaskScheduler.Current should be used.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions"></see> value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></see>.   -or-   The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.CancellationToken">
      <summary>Gets the default cancellation token for this task factory.</summary>
      <returns>The default task cancellation token for this task factory.</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.ContinuationOptions">
      <summary>Gets the default task continuation options for this task factory.</summary>
      <returns>The default task continuation options for this task factory.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the tasks array have completed.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the tasks array have completed.</param>
      <param name="cancellationToken">The cancellation token to assign to the new continuation task.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks">tasks</paramref> array has been disposed.   -or-   The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the tasks array have completed.</param>
      <param name="continuationOptions">A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the tasks array have completed.</param>
      <param name="cancellationToken">The cancellation token to assign to the new continuation task.</param>
      <param name="continuationOptions">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</param>
      <param name="scheduler">The object that is used to schedule the new continuation task.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationAction">continuationAction</paramref> argument is null.   -or-   The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the tasks array have completed.</param>
      <param name="cancellationToken">The cancellation token to assign to the new continuation task.</param>
      <param name="continuationOptions">A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</param>
      <param name="scheduler">The object that is used to schedule the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the continuationFunction delegate and associated with the created task.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.   -or-   The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array is empty or contains a null value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks">tasks</paramref> array has been disposed.   -or-   The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the tasks array have completed.</param>
      <param name="continuationOptions">A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the continuationFunction delegate and associated with the created task.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the tasks array have completed.</param>
      <param name="cancellationToken">The cancellation token to assign to the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the continuationFunction delegate and associated with the created task.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks">tasks</paramref> array has been disposed.   -or-   The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the tasks array have completed.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the continuationFunction delegate and associated with the created task.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the tasks array have completed.</param>
      <param name="cancellationToken">The cancellation token to assign to the new continuation task.</param>
      <param name="continuationOptions">A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</param>
      <param name="scheduler">The object that is used to schedule the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationAction">continuationAction</paramref> argument is null.   -or-   The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the tasks array have completed.</param>
      <param name="continuationOptions">A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the tasks array have completed.</param>
      <param name="cancellationToken">The cancellation token to assign to the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks">tasks</paramref> array has been disposed.   -or-   The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the tasks array have completed.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the tasks array have completed.</param>
      <typeparam name="TResult">The type of the result that is returned by the continuationFunction delegate and associated with the created task.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the tasks array have completed.</param>
      <param name="cancellationToken">The cancellation token to assign to the new continuation task.</param>
      <typeparam name="TResult">The type of the result that is returned by the continuationFunction delegate and associated with the created task.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks">tasks</paramref> array has been disposed.   -or-   The <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the tasks array have completed.</param>
      <param name="continuationOptions">A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</param>
      <typeparam name="TResult">The type of the result that is returned by the continuationFunction delegate and associated with the created task.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the tasks array have completed.</param>
      <param name="cancellationToken">The cancellation token to assign to the new continuation task.</param>
      <param name="continuationOptions">A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</param>
      <param name="scheduler">The object that is used to schedule the new continuation task.</param>
      <typeparam name="TResult">The type of the result that is returned by the continuationFunction delegate and associated with the created task.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationFunction">continuationFunction</paramref> argument is null.   -or-   The <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task"></see> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the tasks array completes.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task"></see>.</param>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is null.   -or-   The exception that is thrown when the <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task"></see> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the tasks array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task"></see>.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task"></see>.</param>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is null.   -or-   The exception that is thrown when the <paramref name="continuationAction">continuationAction</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task"></see> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the tasks array completes.</param>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task"></see> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the tasks array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new continuation task.</param>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.   -or-  <paramref name="cancellationToken">cancellationToken</paramref> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks">tasks</paramref> array is null.   -or-   The <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The <paramref name="tasks">tasks</paramref> array is empty .</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1"></see> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the tasks array completes.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the continuationFunction delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is null.   -or-   The exception that is thrown when the <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1"></see> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the tasks array completes.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the continuationFunction delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is null.   -or-   The exception that is thrown when the <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1"></see> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the tasks array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the continuationFunction delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.   -or-   The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is null.   -or-   The exception that is thrown when the <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1"></see> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the tasks array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the continuationFunction delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is null.   -or-   The exception that is thrown when the <paramref name="continuationFunction">continuationFunction</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task"></see> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the tasks array completes.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is null.   -or-   The exception that is thrown when the <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task"></see> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the tasks array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.   -or-   The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is null.   -or-   The exception that is thrown when the <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task"></see> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the tasks array completes.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task"></see>.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is null.   -or-   The exception that is thrown when the <paramref name="continuationAction">continuationAction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task"></see> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the tasks array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task"></see>.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent tasks.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is null.   -or-   The exception that is thrown when the <paramref name="continuationAction">continuationAction</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1"></see> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the tasks array completes.</param>
      <typeparam name="TResult">The type of the result that is returned by the continuationFunction delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is null.   -or-   The exception that is thrown when the <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1"></see> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the tasks array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new continuation task.</param>
      <typeparam name="TResult">The type of the result that is returned by the continuationFunction delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.   -or-   The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is null.   -or-   The exception that is thrown when the <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1"></see> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the tasks array completes.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <typeparam name="TResult">The type of the result that is returned by the continuationFunction delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks">tasks</paramref> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is null.   -or-   The exception that is thrown when the <paramref name="continuationFunction">continuationFunction</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="continuationOptions">continuationOptions</paramref> argument specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1"></see> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the tasks array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions"></see> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <typeparam name="TResult">The type of the result that is returned by the continuationFunction delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is null.   -or-   The exception that is thrown when the <paramref name="continuationFunction">continuationFunction</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks">tasks</paramref> array contains a null value.   -or-   The exception that is thrown when the <paramref name="tasks">tasks</paramref> array is empty.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.CreationOptions">
      <summary>Gets the default task creation options for this task factory.</summary>
      <returns>The default task creation options for this task factory.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task"></see> that executes an end method action when a specified <see cref="T:System.IAsyncResult"></see> completes.</summary>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the endMethod.</param>
      <param name="endMethod">The action delegate that processes the completed asyncResult.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="asyncResult">asyncResult</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task"></see> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <returns>The created <see cref="T:System.Threading.Tasks.Task"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task"></see> that executes an end method action when a specified <see cref="T:System.IAsyncResult"></see> completes.</summary>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the endMethod.</param>
      <param name="endMethod">The action delegate that processes the completed asyncResult.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task"></see>.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="asyncResult">asyncResult</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></see></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task"></see> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task"></see>.</param>
      <returns>The created <see cref="T:System.Threading.Tasks.Task"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task"></see> that executes an end method action when a specified <see cref="T:System.IAsyncResult"></see> completes.</summary>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the endMethod.</param>
      <param name="endMethod">The action delegate that processes the completed asyncResult.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task"></see>.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> that is used to schedule the task that executes the end method.</param>
      <returns>The created <see cref="T:System.Threading.Tasks.Task"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="asyncResult">asyncResult</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></see></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"></see> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the beginMethod delegate.</param>
      <param name="arg2">The second argument passed to the beginMethod delegate.</param>
      <param name="arg3">The third argument passed to the beginMethod delegate.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <typeparam name="TArg1">The type of the second argument passed to beginMethod delegate.</typeparam>
      <typeparam name="TArg2">The type of the third argument passed to beginMethod delegate.</typeparam>
      <typeparam name="TArg3">The type of the first argument passed to the beginMethod delegate.</typeparam>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task`1"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></see></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"></see> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the beginMethod delegate.</param>
      <param name="arg2">The second argument passed to the beginMethod delegate.</param>
      <param name="arg3">The third argument passed to the beginMethod delegate.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <typeparam name="TArg1">The type of the second argument passed to beginMethod delegate.</typeparam>
      <typeparam name="TArg2">The type of the third argument passed to beginMethod delegate.</typeparam>
      <typeparam name="TArg3">The type of the first argument passed to the beginMethod delegate.</typeparam>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task`1"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task"></see> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the beginMethod delegate.</param>
      <param name="arg2">The second argument passed to the beginMethod delegate.</param>
      <param name="arg3">The third argument passed to the beginMethod delegate.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task"></see>.</param>
      <typeparam name="TArg1">The type of the second argument passed to beginMethod delegate.</typeparam>
      <typeparam name="TArg2">The type of the third argument passed to beginMethod delegate.</typeparam>
      <typeparam name="TArg3">The type of the first argument passed to the beginMethod delegate.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></see></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task"></see> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the beginMethod delegate.</param>
      <param name="arg2">The second argument passed to the beginMethod delegate.</param>
      <param name="arg3">The third argument passed to the beginMethod delegate.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <typeparam name="TArg1">The type of the second argument passed to beginMethod delegate.</typeparam>
      <typeparam name="TArg2">The type of the third argument passed to beginMethod delegate.</typeparam>
      <typeparam name="TArg3">The type of the first argument passed to the beginMethod delegate.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"></see> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the beginMethod delegate.</param>
      <param name="arg2">The second argument passed to the beginMethod delegate.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <typeparam name="TArg1">The type of the second argument passed to beginMethod delegate.</typeparam>
      <typeparam name="TArg2">The type of the first argument passed to the beginMethod delegate.</typeparam>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task`1"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"></see> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the beginMethod delegate.</param>
      <param name="arg2">The second argument passed to the beginMethod delegate.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <typeparam name="TArg1">The type of the second argument passed to beginMethod delegate.</typeparam>
      <typeparam name="TArg2">The type of the first argument passed to the beginMethod delegate.</typeparam>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task`1"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></see></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task"></see> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the beginMethod delegate.</param>
      <param name="arg2">The second argument passed to the beginMethod delegate.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <typeparam name="TArg1">The type of the second argument passed to beginMethod delegate.</typeparam>
      <typeparam name="TArg2">The type of the first argument passed to the beginMethod delegate.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task"></see> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the beginMethod delegate.</param>
      <param name="arg2">The second argument passed to the beginMethod delegate.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task"></see>.</param>
      <typeparam name="TArg1">The type of the second argument passed to beginMethod delegate.</typeparam>
      <typeparam name="TArg2">The type of the first argument passed to the beginMethod delegate.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></see></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"></see> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the beginMethod delegate.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <typeparam name="TArg1">The type of the first argument passed to the beginMethod delegate.</typeparam>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task`1"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"></see> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the beginMethod delegate.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <typeparam name="TArg1">The type of the first argument passed to the beginMethod delegate.</typeparam>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task`1"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></see></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task"></see> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the beginMethod delegate.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task"></see>.</param>
      <typeparam name="TArg1">The type of the first argument passed to the beginMethod delegate.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></see></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task"></see> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the beginMethod delegate.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <typeparam name="TArg1">The type of the first argument passed to the beginMethod delegate.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"></see> that executes an end method function when a specified <see cref="T:System.IAsyncResult"></see> completes.</summary>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the endMethod.</param>
      <param name="endMethod">The function delegate that processes the completed asyncResult.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> that is used to schedule the task that executes the end method.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="asyncResult">asyncResult</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></see></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"></see> that executes an end method function when a specified <see cref="T:System.IAsyncResult"></see> completes.</summary>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the endMethod.</param>
      <param name="endMethod">The function delegate that processes the completed asyncResult.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="asyncResult">asyncResult</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></see></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"></see> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task`1"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"></see> that executes an end method function when a specified <see cref="T:System.IAsyncResult"></see> completes.</summary>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the endMethod.</param>
      <param name="endMethod">The function delegate that processes the completed asyncResult.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="asyncResult">asyncResult</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"></see> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="state">An object containing data to be used by the beginMethod delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task`1"></see> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod">beginMethod</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="endMethod">endMethod</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></see></exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.Scheduler">
      <summary>Gets the default task scheduler for this task factory.</summary>
      <returns>The default task scheduler for this task factory.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task"></see>.</summary>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="state">An object containing data to be used by the action delegate.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> that will be assigned to the new task.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task"></see></param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task"></see>.</param>
      <returns>The started <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="action">action</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></see></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task"></see>.</summary>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task"></see></param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task"></see></param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task"></see>.</param>
      <returns>The started <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="action">action</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></see></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task"></see>.</summary>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="state">An object containing data to be used by the action delegate.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task"></see></param>
      <returns>The started <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="action">action</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task"></see>.</summary>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="state">An object containing data to be used by the action delegate.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task"></see></param>
      <returns>The started <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="action">action</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task"></see>.</summary>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> that will be assigned to the new task.</param>
      <returns>The started <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="action">action</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task"></see>.</summary>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task"></see></param>
      <returns>The started <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="action">action</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)">
      <summary>Creates and starts a task.</summary>
      <param name="action">The action delegate to execute asynchronously.</param>
      <returns>The started task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action">action</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task"></see>.</summary>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="state">An object containing data to be used by the action delegate.</param>
      <returns>The started <see cref="T:System.Threading.Tasks.Task"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action">action</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1"></see>.</summary>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> that will be assigned to the new task.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The started <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function">function</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></see></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1"></see>.</summary>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The started <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function">function</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1"></see>.</summary>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <param name="state">An object containing data to be used by the function delegate.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The started <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function">function</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1"></see>.</summary>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task"></see></param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The started <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function">function</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1"></see>.</summary>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The started <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function">function</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></see></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1"></see>.</summary>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <param name="state">An object containing data to be used by the function delegate.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task"></see></param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The started <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function">function</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1"></see>.</summary>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <param name="state">An object containing data to be used by the function delegate.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The started <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function">function</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></see></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1"></see>.</summary>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <param name="state">An object containing data to be used by the function delegate.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken"></see> that will be assigned to the new task.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"></see> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task`1"></see>.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"></see>.</typeparam>
      <returns>The started <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken"></see> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function">function</paramref> argument is null.   -or-   The exception that is thrown when the <paramref name="scheduler">scheduler</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <paramref name="creationOptions">creationOptions</paramref> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></see></exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskScheduler">
      <summary>Represents an object that handles the low-level work of queuing tasks onto threads.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.#ctor">
      <summary>Initializes the <see cref="T:System.Threading.Tasks.TaskScheduler"></see>.</summary>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Current">
      <summary>Gets the <see cref="T:System.Threading.Tasks.TaskScheduler"></see> associated with the currently executing task.</summary>
      <returns>Returns the <see cref="T:System.Threading.Tasks.TaskScheduler"></see> associated with the currently executing task.</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Default">
      <summary>Gets the default <see cref="T:System.Threading.Tasks.TaskScheduler"></see> instance that is provided by the .NET Framework.</summary>
      <returns>Returns the default <see cref="T:System.Threading.Tasks.TaskScheduler"></see> instance.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext">
      <summary>Creates a <see cref="T:System.Threading.Tasks.TaskScheduler"></see> associated with the current <see cref="T:System.Threading.SynchronizationContext"></see>.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.TaskScheduler"></see> associated with the current <see cref="T:System.Threading.SynchronizationContext"></see>, as determined by <see cref="P:System.Threading.SynchronizationContext.Current"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">The current SynchronizationContext may not be used as a TaskScheduler.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.GetScheduledTasks">
      <summary>For debugger support only, generates an enumerable of <see cref="T:System.Threading.Tasks.Task"></see> instances currently queued to the scheduler waiting to be executed.</summary>
      <returns>An enumerable that allows a debugger to traverse the tasks currently queued to this scheduler.</returns>
      <exception cref="T:System.NotSupportedException">This scheduler is unable to generate a list of queued tasks at this time.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Id">
      <summary>Gets the unique ID for this <see cref="T:System.Threading.Tasks.TaskScheduler"></see>.</summary>
      <returns>Returns the unique ID for this <see cref="T:System.Threading.Tasks.TaskScheduler"></see>.</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel">
      <summary>Indicates the maximum concurrency level this <see cref="T:System.Threading.Tasks.TaskScheduler"></see> is able to support.</summary>
      <returns>Returns an integer that represents the maximum concurrency level. The default scheduler returns <see cref="F:System.Int32.MaxValue"></see>.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)">
      <summary>Queues a <see cref="T:System.Threading.Tasks.Task"></see> to the scheduler.</summary>
      <param name="task">The <see cref="T:System.Threading.Tasks.Task"></see> to be queued.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="task">task</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
      <summary>Attempts to dequeue a <see cref="T:System.Threading.Tasks.Task"></see> that was previously queued to this scheduler.</summary>
      <param name="task">The <see cref="T:System.Threading.Tasks.Task"></see> to be dequeued.</param>
      <returns>A Boolean denoting whether the <paramref name="task">task</paramref> argument was successfully dequeued.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="task">task</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)">
      <summary>Attempts to execute the provided <see cref="T:System.Threading.Tasks.Task"></see> on this scheduler.</summary>
      <param name="task">A <see cref="T:System.Threading.Tasks.Task"></see> object to be executed.</param>
      <returns>A Boolean that is true if <paramref name="task">task</paramref> was successfully executed, false if it was not. A common reason for execution failure is that the task had previously been executed or is in the process of being executed by another thread.</returns>
      <exception cref="T:System.InvalidOperationException">The <paramref name="task">task</paramref> is not associated with this scheduler.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
      <summary>Determines whether the provided <see cref="T:System.Threading.Tasks.Task"></see> can be executed synchronously in this call, and if it can, executes it.</summary>
      <param name="task">The <see cref="T:System.Threading.Tasks.Task"></see> to be executed.</param>
      <param name="taskWasPreviouslyQueued">A Boolean denoting whether or not task has previously been queued. If this parameter is True, then the task may have been previously queued (scheduled); if False, then the task is known not to have been queued, and this call is being made in order to execute the task inline without queuing it.</param>
      <returns>A Boolean value indicating whether the task was executed inline.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="task">task</paramref> argument is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="task">task</paramref> was already executed.</exception>
    </member>
    <member name="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException">
      <summary>Occurs when a faulted task's unobserved exception is about to trigger exception escalation policy, which, by default, would terminate the process.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskSchedulerException">
      <summary>Represents an exception used to communicate an invalid operation by a <see cref="T:System.Threading.Tasks.TaskScheduler"></see>.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskSchedulerException"></see> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskSchedulerException"></see> class using the default error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskSchedulerException"></see> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskSchedulerException"></see> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskSchedulerException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Threading.Tasks.TaskStatus">
      <summary>Represents the current stage in the lifecycle of a <see cref="T:System.Threading.Tasks.Task"></see>.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Canceled">
      <summary>The task acknowledged cancellation by throwing an OperationCanceledException with its own CancellationToken while the token was in signaled state, or the task's CancellationToken was already signaled before the task started executing. For more information, see <see cref="~/docs/standard/parallel-programming/task-cancellation.md">Task Cancellation</see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Created">
      <summary>The task has been initialized but has not yet been scheduled.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Faulted">
      <summary>The task completed due to an unhandled exception.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.RanToCompletion">
      <summary>The task completed execution successfully.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Running">
      <summary>The task is running but has not yet completed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingForActivation">
      <summary>The task is waiting to be activated and scheduled internally by the .NET Framework infrastructure.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingForChildrenToComplete">
      <summary>The task has finished executing and is implicitly waiting for attached child tasks to complete.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingToRun">
      <summary>The task has been scheduled for execution but has not yet begun executing.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs">
      <summary>Provides data for the event that is raised when a faulted <see cref="T:System.Threading.Tasks.Task"></see>'s exception goes unobserved.</summary>
    </member>
    <member name="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.#ctor(System.AggregateException)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs"></see> class with the unobserved exception.</summary>
      <param name="exception">The Exception that has gone unobserved.</param>
    </member>
    <member name="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception">
      <summary>The Exception that went unobserved.</summary>
      <returns>The Exception that went unobserved.</returns>
    </member>
    <member name="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Observed">
      <summary>Gets whether this exception has been marked as &quot;observed.&quot;</summary>
      <returns>true if this exception has been marked as &quot;observed&quot;; otherwise false.</returns>
    </member>
    <member name="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved">
      <summary>Marks the <see cref="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception"></see> as &quot;observed,&quot; thus preventing it from triggering exception escalation policy which, by default, terminates the process.</summary>
    </member>
    <member name="T:System.OperationCanceledException">
      <summary>The exception that is thrown in a thread upon cancellation of an operation that the thread was executing.</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.OperationCanceledException"></see> class with a system-supplied error message.</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.OperationCanceledException"></see> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String"></see> that describes the error.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Threading.CancellationToken)">
      <summary>Initializes a new instance of the <see cref="T:System.OperationCanceledException"></see> class with a cancellation token.</summary>
      <param name="token">A cancellation token associated with the operation that was canceled.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.OperationCanceledException"></see> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.OperationCanceledException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Threading.CancellationToken)">
      <summary>Initializes a new instance of the <see cref="T:System.OperationCanceledException"></see> class with a specified error message and a cancellation token.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="token">A cancellation token associated with the operation that was canceled.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>Initializes a new instance of the <see cref="T:System.OperationCanceledException"></see> class with a specified error message, a reference to the inner exception that is the cause of this exception, and a cancellation token.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
      <param name="token">A cancellation token associated with the operation that was canceled.</param>
    </member>
    <member name="P:System.OperationCanceledException.CancellationToken">
      <summary>Gets a token associated with the operation that was canceled.</summary>
      <returns>A token associated with the operation that was canceled, or a default token.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.TaskAwaiter`1">
      <summary>Represents an object that waits for the completion of an asynchronous task and provides a parameter for the result.</summary>
      <typeparam name="TResult">The result for the task.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.GetResult">
      <summary>Ends the wait for the completion of the asynchronous task.</summary>
      <returns>The result of the completed task.</returns>
      <exception cref="T:System.NullReferenceException">The <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1"></see> object was not properly initialized.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task was canceled.</exception>
      <exception cref="T:System.Exception">The task completed in a <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"></see> state.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TaskAwaiter`1.IsCompleted">
      <summary>Gets a value that indicates whether the asynchronous task has completed.</summary>
      <returns>true if the task has completed; otherwise, false.</returns>
      <exception cref="T:System.NullReferenceException">The <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1"></see> object was not properly initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.OnCompleted(System.Action)">
      <summary>Sets the action to perform when the <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1"></see> object stops waiting for the asynchronous task to complete.</summary>
      <param name="continuation">The action to perform when the wait operation completes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="continuation">continuation</paramref> is null.</exception>
      <exception cref="T:System.NullReferenceException">The <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1"></see> object was not properly initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.UnsafeOnCompleted(System.Action)">
      <summary>Schedules the continuation action for the asynchronous task associated with this awaiter.</summary>
      <param name="continuation">The action to invoke when the await operation completes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="continuation">continuation</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The awaiter was not properly initialized.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.TaskAwaiter">
      <summary>Provides an object that waits for the completion of an asynchronous task.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter.GetResult">
      <summary>Ends the wait for the completion of the asynchronous task.</summary>
      <exception cref="T:System.NullReferenceException">The <see cref="T:System.Runtime.CompilerServices.TaskAwaiter"></see> object was not properly initialized.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task was canceled.</exception>
      <exception cref="T:System.Exception">The task completed in a <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"></see> state.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TaskAwaiter.IsCompleted">
      <summary>Gets a value that indicates whether the asynchronous task has completed.</summary>
      <returns>true if the task has completed; otherwise, false.</returns>
      <exception cref="T:System.NullReferenceException">The <see cref="T:System.Runtime.CompilerServices.TaskAwaiter"></see> object was not properly initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter.OnCompleted(System.Action)">
      <summary>Sets the action to perform when the <see cref="T:System.Runtime.CompilerServices.TaskAwaiter"></see> object stops waiting for the asynchronous task to complete.</summary>
      <param name="continuation">The action to perform when the wait operation completes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="continuation">continuation</paramref> is null.</exception>
      <exception cref="T:System.NullReferenceException">The <see cref="T:System.Runtime.CompilerServices.TaskAwaiter"></see> object was not properly initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>Schedules the continuation action for the asynchronous task that is associated with this awaiter.</summary>
      <param name="continuation">The action to invoke when the await operation completes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="continuation">continuation</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The awaiter was not properly initialized.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter">
      <summary>Provides an awaiter for switching into a target environment.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.GetResult">
      <summary>Ends the await operation.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.IsCompleted">
      <summary>Gets a value that indicates whether a yield is not required.</summary>
      <returns>Always false, which indicates that a yield is always required for <see cref="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter"></see>.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.OnCompleted(System.Action)">
      <summary>Sets the continuation to invoke.</summary>
      <param name="continuation">The action to invoke asynchronously.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="continuation">continuation</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>Posts the <paramref name="continuation">continuation</paramref> back to the current context.</summary>
      <param name="continuation">The action to invoke asynchronously.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuation">continuation</paramref> argument is null.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.YieldAwaitable">
      <summary>Provides the context for waiting when asynchronously switching into a target environment.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.GetAwaiter">
      <summary>Retrieves a <see cref="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter"></see> object  for this instance of the class.</summary>
      <returns>The object that is used to monitor the completion of an asynchronous operation.</returns>
    </member>
  </members>
</doc></span>