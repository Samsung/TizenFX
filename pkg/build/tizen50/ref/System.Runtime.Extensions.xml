<?xml version="1.0" encoding="utf-8"?><doc>
  <assembly>
    <name>System.Runtime.Extensions</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Hashtable">
      <summary>Represents a collection of key/value pairs that are organized based on the hash code of the key.</summary>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable"></see> class using the default initial capacity, load factor, hash code provider, and comparer.</summary>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable"></see> class using the specified initial capacity, load factor, hash code provider, and comparer.</summary>
      <param name="capacity">The approximate number of elements that the <see cref="T:System.Collections.Hashtable"></see> object can initially contain.</param>
      <param name="loadFactor">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.</param>
      <param name="hcp">The <see cref="T:System.Collections.IHashCodeProvider"></see> object that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable"></see>.  
 -or-  
 null to use the default hash code provider, which is each key&amp;#39;s implementation of <see cref="M:System.Object.GetHashCode"></see>.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> object to use to determine whether two keys are equal.  
 -or-  
 null to use the default comparer, which is each key&amp;#39;s implementation of <see cref="M:System.Object.Equals(System.Object)"></see>.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is less than zero.  
 -or-  
 <paramref name="loadFactor">loadFactor</paramref> is less than 0.1.  
 -or-  
 <paramref name="loadFactor">loadFactor</paramref> is greater than 1.0.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Hashtable"></see> class by copying the elements from the specified dictionary to the new <see cref="T:System.Collections.Hashtable"></see> object. The new <see cref="T:System.Collections.Hashtable"></see> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, hash code provider, and comparer.</summary>
      <param name="d">The <see cref="T:System.Collections.IDictionary"></see> object to copy to a new <see cref="T:System.Collections.Hashtable"></see> object.</param>
      <param name="loadFactor">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.</param>
      <param name="hcp">The <see cref="T:System.Collections.IHashCodeProvider"></see> object that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable"></see>.  
 -or-  
 null to use the default hash code provider, which is each key&amp;#39;s implementation of <see cref="M:System.Object.GetHashCode"></see>.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> object to use to determine whether two keys are equal.  
 -or-  
 null to use the default comparer, which is each key&amp;#39;s implementation of <see cref="M:System.Object.Equals(System.Object)"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="d">d</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="loadFactor">loadFactor</paramref> is less than 0.1.  
 -or-  
 <paramref name="loadFactor">loadFactor</paramref> is greater than 1.0.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable"></see> class using the specified initial capacity, load factor, and <see cref="T:System.Collections.IEqualityComparer"></see> object.</summary>
      <param name="capacity">The approximate number of elements that the <see cref="T:System.Collections.Hashtable"></see> object can initially contain.</param>
      <param name="loadFactor">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.</param>
      <param name="equalityComparer">The <see cref="T:System.Collections.IEqualityComparer"></see> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable"></see>.  
 -or-  
 null to use the default hash code provider and the default comparer. The default hash code provider is each key&amp;#39;s implementation of <see cref="M:System.Object.GetHashCode"></see> and the default comparer is each key&amp;#39;s implementation of <see cref="M:System.Object.Equals(System.Object)"></see>.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is less than zero.  
 -or-  
 <paramref name="loadFactor">loadFactor</paramref> is less than 0.1.  
 -or-  
 <paramref name="loadFactor">loadFactor</paramref> is greater than 1.0.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable"></see> class using the specified initial capacity, hash code provider, comparer, and the default load factor.</summary>
      <param name="capacity">The approximate number of elements that the <see cref="T:System.Collections.Hashtable"></see> object can initially contain.</param>
      <param name="hcp">The <see cref="T:System.Collections.IHashCodeProvider"></see> object that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable"></see>.  
 -or-  
 null to use the default hash code provider, which is each key&amp;#39;s implementation of <see cref="M:System.Object.GetHashCode"></see>.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> object to use to determine whether two keys are equal.  
 -or-  
 null to use the default comparer, which is each key&amp;#39;s implementation of <see cref="M:System.Object.Equals(System.Object)"></see>.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Hashtable"></see> class by copying the elements from the specified dictionary to the new <see cref="T:System.Collections.Hashtable"></see> object. The new <see cref="T:System.Collections.Hashtable"></see> object has an initial capacity equal to the number of elements copied, and uses the specified load factor and <see cref="T:System.Collections.IEqualityComparer"></see> object.</summary>
      <param name="d">The <see cref="T:System.Collections.IDictionary"></see> object to copy to a new <see cref="T:System.Collections.Hashtable"></see> object.</param>
      <param name="loadFactor">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.</param>
      <param name="equalityComparer">The <see cref="T:System.Collections.IEqualityComparer"></see> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable"></see>.  
 -or-  
 null to use the default hash code provider and the default comparer. The default hash code provider is each key&amp;#39;s implementation of <see cref="M:System.Object.GetHashCode"></see> and the default comparer is each key&amp;#39;s implementation of <see cref="M:System.Object.Equals(System.Object)"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="d">d</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="loadFactor">loadFactor</paramref> is less than 0.1.  
 -or-  
 <paramref name="loadFactor">loadFactor</paramref> is greater than 1.0.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Hashtable"></see> class by copying the elements from the specified dictionary to the new <see cref="T:System.Collections.Hashtable"></see> object. The new <see cref="T:System.Collections.Hashtable"></see> object has an initial capacity equal to the number of elements copied, and uses the default load factor, and the specified hash code provider and comparer. This API is obsolete. For an alternative, see <see cref="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)"></see>.</summary>
      <param name="d">The <see cref="T:System.Collections.IDictionary"></see> object to copy to a new <see cref="T:System.Collections.Hashtable"></see> object.</param>
      <param name="hcp">The <see cref="T:System.Collections.IHashCodeProvider"></see> object that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable"></see>.  
 -or-  
 null to use the default hash code provider, which is each key&amp;#39;s implementation of <see cref="M:System.Object.GetHashCode"></see>.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> object to use to determine whether two keys are equal.  
 -or-  
 null to use the default comparer, which is each key&amp;#39;s implementation of <see cref="M:System.Object.Equals(System.Object)"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="d">d</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single)">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable"></see> class using the specified initial capacity and load factor, and the default hash code provider and comparer.</summary>
      <param name="capacity">The approximate number of elements that the <see cref="T:System.Collections.Hashtable"></see> object can initially contain.</param>
      <param name="loadFactor">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is less than zero.  
 -or-  
 <paramref name="loadFactor">loadFactor</paramref> is less than 0.1.  
 -or-  
 <paramref name="loadFactor">loadFactor</paramref> is greater than 1.0.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="capacity">capacity</paramref> is causing an overflow.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable"></see> class that is serializable using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> objects.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object containing the information required to serialize the <see cref="T:System.Collections.Hashtable"></see> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Hashtable"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable"></see> class using the default initial capacity and load factor, and the specified hash code provider and comparer.</summary>
      <param name="hcp">The <see cref="T:System.Collections.IHashCodeProvider"></see> object that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable"></see> object.  
 -or-  
 null to use the default hash code provider, which is each key&amp;#39;s implementation of <see cref="M:System.Object.GetHashCode"></see>.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> object to use to determine whether two keys are equal.  
 -or-  
 null to use the default comparer, which is each key&amp;#39;s implementation of <see cref="M:System.Object.Equals(System.Object)"></see>.</param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Hashtable"></see> class by copying the elements from the specified dictionary to the new <see cref="T:System.Collections.Hashtable"></see> object. The new <see cref="T:System.Collections.Hashtable"></see> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, and the default hash code provider and comparer.</summary>
      <param name="d">The <see cref="T:System.Collections.IDictionary"></see> object to copy to a new <see cref="T:System.Collections.Hashtable"></see> object.</param>
      <param name="loadFactor">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="d">d</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="loadFactor">loadFactor</paramref> is less than 0.1.  
 -or-  
 <paramref name="loadFactor">loadFactor</paramref> is greater than 1.0.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Hashtable"></see> class by copying the elements from the specified dictionary to a new <see cref="T:System.Collections.Hashtable"></see> object. The new <see cref="T:System.Collections.Hashtable"></see> object has an initial capacity equal to the number of elements copied, and uses the default load factor and the specified <see cref="T:System.Collections.IEqualityComparer"></see> object.</summary>
      <param name="d">The <see cref="T:System.Collections.IDictionary"></see> object to copy to a new <see cref="T:System.Collections.Hashtable"></see> object.</param>
      <param name="equalityComparer">The <see cref="T:System.Collections.IEqualityComparer"></see> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable"></see>.  
 -or-  
 null to use the default hash code provider and the default comparer. The default hash code provider is each key&amp;#39;s implementation of <see cref="M:System.Object.GetHashCode"></see> and the default comparer is each key&amp;#39;s implementation of <see cref="M:System.Object.Equals(System.Object)"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="d">d</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32)">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable"></see> class using the specified initial capacity, and the default load factor, hash code provider, and comparer.</summary>
      <param name="capacity">The approximate number of elements that the <see cref="T:System.Collections.Hashtable"></see> object can initially contain.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable"></see> class using the default initial capacity and load factor, and the specified <see cref="T:System.Collections.IEqualityComparer"></see> object.</summary>
      <param name="equalityComparer">The <see cref="T:System.Collections.IEqualityComparer"></see> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable"></see> object.  
 -or-  
 null to use the default hash code provider and the default comparer. The default hash code provider is each key&amp;#39;s implementation of <see cref="M:System.Object.GetHashCode"></see> and the default comparer is each key&amp;#39;s implementation of <see cref="M:System.Object.Equals(System.Object)"></see>.</param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Hashtable"></see> class by copying the elements from the specified dictionary to the new <see cref="T:System.Collections.Hashtable"></see> object. The new <see cref="T:System.Collections.Hashtable"></see> object has an initial capacity equal to the number of elements copied, and uses the default load factor, hash code provider, and comparer.</summary>
      <param name="d">The <see cref="T:System.Collections.IDictionary"></see> object to copy to a new <see cref="T:System.Collections.Hashtable"></see> object.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="d">d</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable"></see> class using the specified initial capacity and <see cref="T:System.Collections.IEqualityComparer"></see>, and the default load factor.</summary>
      <param name="capacity">The approximate number of elements that the <see cref="T:System.Collections.Hashtable"></see> object can initially contain.</param>
      <param name="equalityComparer">The <see cref="T:System.Collections.IEqualityComparer"></see> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable"></see>.  
 -or-  
 null to use the default hash code provider and the default comparer. The default hash code provider is each key&amp;#39;s implementation of <see cref="M:System.Object.GetHashCode"></see> and the default comparer is each key&amp;#39;s implementation of <see cref="M:System.Object.Equals(System.Object)"></see>.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Add(System.Object,System.Object)">
      <summary>Adds an element with the specified key and value into the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add. The value can be null.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="System.Collections.Hashtable"></see>.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.Hashtable"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.Hashtable"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.Hashtable"></see> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Clone">
      <summary>Creates a shallow copy of the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <returns>A shallow copy of the <see cref="System.Collections.Hashtable"></see>.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.comparer">
      <summary>Gets or sets the <see cref="T:System.Collections.IComparer"></see> to use for the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <returns>The <see cref="System.Collections.IComparer"></see> to use for the <see cref="System.Collections.Hashtable"></see>.</returns>
      <exception cref="T:System.ArgumentException">The property is set to a value, but the hash table was created using an <see cref="System.Collections.IEqualityComparer"></see>.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.Hashtable"></see> contains a specific key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Hashtable"></see>.</param>
      <returns>true if the <see cref="System.Collections.Hashtable"></see> contains an element with the specified key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsKey(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.Hashtable"></see> contains a specific key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Hashtable"></see>.</param>
      <returns>true if the <see cref="System.Collections.Hashtable"></see> contains an element with the specified key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsValue(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.Hashtable"></see> contains a specific value.</summary>
      <param name="value">The value to locate in the <see cref="T:System.Collections.Hashtable"></see>. The value can be null.</param>
      <returns>true if the <see cref="System.Collections.Hashtable"></see> contains an element with the specified <paramref name="value">value</paramref>; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)">
      <summary>Copies the <see cref="T:System.Collections.Hashtable"></see> elements to a one-dimensional <see cref="T:System.Array"></see> instance at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the <see cref="T:System.Collections.DictionaryEntry"></see> objects copied from <see cref="T:System.Collections.Hashtable"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex">arrayIndex</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.  
 -or-  
 The number of elements in the source <see cref="System.Collections.Hashtable"></see> is greater than the available space from <paramref name="arrayIndex">arrayIndex</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="System.Collections.Hashtable"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.Count">
      <summary>Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <returns>The number of key/value pairs contained in the <see cref="System.Collections.Hashtable"></see>.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.EqualityComparer">
      <summary>Gets the <see cref="T:System.Collections.IEqualityComparer"></see> to use for the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <returns>The <see cref="System.Collections.IEqualityComparer"></see> to use for the <see cref="System.Collections.Hashtable"></see>.</returns>
      <exception cref="T:System.ArgumentException">The property is set to a value, but the hash table was created using an <see cref="System.Collections.IHashCodeProvider"></see> and an <see cref="System.Collections.IComparer"></see>.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> that iterates through the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <returns>An <see cref="System.Collections.IDictionaryEnumerator"></see> for the <see cref="System.Collections.Hashtable"></see>.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.GetHash(System.Object)">
      <summary>Returns the hash code for the specified key.</summary>
      <param name="key">The <see cref="T:System.Object"></see> for which a hash code is to be returned.</param>
      <returns>The hash code for <paramref name="key">key</paramref>.</returns>
      <exception cref="T:System.NullReferenceException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface and returns the data needed to serialize the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object containing the information required to serialize the <see cref="T:System.Collections.Hashtable"></see>.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Hashtable"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The collection was modified.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.hcp">
      <summary>Gets or sets the object that can dispense hash codes.</summary>
      <returns>The object that can dispense hash codes.</returns>
      <exception cref="T:System.ArgumentException">The property is set to a value, but the hash table was created using an <see cref="System.Collections.IEqualityComparer"></see>.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Hashtable"></see> has a fixed size.</summary>
      <returns>true if the <see cref="System.Collections.Hashtable"></see> has a fixed size; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Hashtable"></see> is read-only.</summary>
      <returns>true if the <see cref="System.Collections.Hashtable"></see> is read-only; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.Hashtable"></see> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="System.Collections.Hashtable"></see> is synchronized (thread safe); otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.Item(System.Object)">
      <summary>Gets or sets the value associated with the specified key.</summary>
      <param name="key">The key whose value to get or set.</param>
      <returns>The value associated with the specified key. If the specified key is not found, attempting to get it returns null, and attempting to set it creates a new element using the specified key.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="System.Collections.Hashtable"></see> is read-only.  
 -or-  
 The property is set, <paramref name="key">key</paramref> does not exist in the collection, and the <see cref="System.Collections.Hashtable"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.KeyEquals(System.Object,System.Object)">
      <summary>Compares a specific <see cref="T:System.Object"></see> with a specific key in the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <param name="item">The <see cref="T:System.Object"></see> to compare with key.</param>
      <param name="key">The key in the <see cref="T:System.Collections.Hashtable"></see> to compare with item.</param>
      <returns>true if <paramref name="item">item</paramref> and <paramref name="key">key</paramref> are equal; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="item">item</paramref> is null.  
 -or-  
 <paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection"></see> containing the keys in the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <returns>An <see cref="System.Collections.ICollection"></see> containing the keys in the <see cref="System.Collections.Hashtable"></see>.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.OnDeserialization(System.Object)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface and raises the deserialization event when the deserialization is complete.</summary>
      <param name="sender">The source of the deserialization event.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="System.Runtime.Serialization.SerializationInfo"></see> object associated with the current <see cref="System.Collections.Hashtable"></see> is invalid.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.Hashtable"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.Hashtable"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)">
      <summary>Returns a synchronized (thread-safe) wrapper for the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <param name="table">The <see cref="T:System.Collections.Hashtable"></see> to synchronize.</param>
      <returns>A synchronized (thread-safe) wrapper for the <see cref="System.Collections.Hashtable"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="table">table</paramref> is null.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="System.Collections.Hashtable"></see>.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection"></see> containing the values in the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <returns>An <see cref="System.Collections.ICollection"></see> containing the values in the <see cref="System.Collections.Hashtable"></see>.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="System.Collections.IEnumerator"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Collections.IHashCodeProvider">
      <summary>Supplies a hash code for an object, using a custom hash function.</summary>
    </member>
    <member name="M:System.Collections.IHashCodeProvider.GetHashCode(System.Object)">
      <summary>Returns a hash code for the specified object.</summary>
      <param name="obj">The <see cref="T:System.Object"></see> for which a hash code is to be returned.</param>
      <returns>A hash code for the specified object.</returns>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj">obj</paramref> is a reference type and <paramref name="obj">obj</paramref> is null.</exception>
    </member>
    <member name="T:System.Environment.SpecialFolder">
      <summary>Specifies enumerated constants used to retrieve directory paths to system special folders.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.AdminTools">
      <summary>The file system directory that is used to store administrative tools for an individual user. The Microsoft Management Console (MMC) will save customized consoles to this directory, and it will roam with the user. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.ApplicationData">
      <summary>The directory that serves as a common repository for application-specific data for the current roaming user.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.CDBurning">
      <summary>The file system directory that acts as a staging area for files waiting to be written to a CD. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonAdminTools">
      <summary>The file system directory that contains administrative tools for all users of the computer. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonApplicationData">
      <summary>The directory that serves as a common repository for application-specific data that is used by all users.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonDesktopDirectory">
      <summary>The file system directory that contains files and folders that appear on the desktop for all users. This special folder is valid only for Windows NT systems. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonDocuments">
      <summary>The file system directory that contains documents that are common to all users. This special folder is valid for Windows NT systems, Windows 95, and Windows 98 systems with Shfolder.dll installed. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonMusic">
      <summary>The file system directory that serves as a repository for music files common to all users. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonOemLinks">
      <summary>This value is recognized in Windows Vista for backward compatibility, but the special folder itself is no longer used. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonPictures">
      <summary>The file system directory that serves as a repository for image files common to all users. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFiles">
      <summary>The directory for components that are shared across applications.  
 To get the x86 common program files directory on a non-x86 system, use the <see cref="F:System.Environment.SpecialFolder.ProgramFilesX86"></see> member.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFilesX86">
      <summary>The Program Files folder. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonPrograms">
      <summary>A folder for components that are shared across applications. This special folder is valid only for Windows NT, Windows 2000, and Windows XP systems. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonStartMenu">
      <summary>The file system directory that contains the programs and folders that appear on the Start menu for all users. This special folder is valid only for Windows NT systems. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonStartup">
      <summary>The file system directory that contains the programs that appear in the Startup folder for all users. This special folder is valid only for Windows NT systems. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonTemplates">
      <summary>The file system directory that contains the templates that are available to all users. This special folder is valid only for Windows NT systems.  Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonVideos">
      <summary>The file system directory that serves as a repository for video files common to all users. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.Cookies">
      <summary>The directory that serves as a common repository for Internet cookies.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.Desktop">
      <summary>The logical Desktop rather than the physical file system location.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.DesktopDirectory">
      <summary>The directory used to physically store file objects on the desktop.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.Favorites">
      <summary>The directory that serves as a common repository for the user&amp;#39;s favorite items.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.Fonts">
      <summary>A virtual folder that contains fonts. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.History">
      <summary>The directory that serves as a common repository for Internet history items.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.InternetCache">
      <summary>The directory that serves as a common repository for temporary Internet files.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalApplicationData">
      <summary>The directory that serves as a common repository for application-specific data that is used by the current, non-roaming user.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalizedResources">
      <summary>The file system directory that contains localized resource data. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyComputer">
      <summary>The My Computer folder.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyDocuments">
      <summary>The My Documents folder.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyMusic">
      <summary>The My Music folder.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyPictures">
      <summary>The My Pictures folder.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyVideos">
      <summary>The file system directory that serves as a repository for videos that belong to a user.  Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.NetworkShortcuts">
      <summary>A file system directory that contains the link objects that may exist in the My Network Places virtual folder. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.Personal">
      <summary>The directory that serves as a common repository for documents.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.PrinterShortcuts">
      <summary>The file system directory that contains the link objects that can exist in the Printers virtual folder. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFiles">
      <summary>The program files directory.  
 On a non-x86 system, passing <see cref="F:System.Environment.SpecialFolder.ProgramFiles"></see> to the <see cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)"></see> method returns the path for non-x86 programs. To get the x86 program files directory on a non-x86 system, use the <see cref="F:System.Environment.SpecialFolder.ProgramFilesX86"></see> member.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFilesX86">
      <summary>The x86 Program Files folder. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.Programs">
      <summary>The directory that contains the user&amp;#39;s program groups.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.Recent">
      <summary>The directory that contains the user&amp;#39;s most recently used documents.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.Resources">
      <summary>The file system directory that contains resource data. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.SendTo">
      <summary>The directory that contains the Send To menu items.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.StartMenu">
      <summary>The directory that contains the Start menu items.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.Startup">
      <summary>The directory that corresponds to the user&amp;#39;s Startup program group.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.System">
      <summary>The System directory.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.SystemX86">
      <summary>The Windows System folder. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.Templates">
      <summary>The directory that serves as a common repository for document templates.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.UserProfile">
      <summary>The user&amp;#39;s profile folder. Applications should not create files or folders at this level; they should put their data under the locations referred to by <see cref="F:System.Environment.SpecialFolder.ApplicationData"></see>. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolder.Windows">
      <summary>The Windows directory or SYSROOT. This corresponds to the %windir% or %SYSTEMROOT% environment variables. Added in the .NET Framework 4.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Environment.SpecialFolderOption">
      <summary>Specifies options to use for getting the path to a special folder.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.Create">
      <summary>The path to the folder is created if it does not already exist.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.DoNotVerify">
      <summary>The path to the folder is returned without verifying whether the path exists. If the folder is located on a network, specifying this option can reduce lag time.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.None">
      <summary>The path to the folder is verified. If the folder exists, the path is returned. If the folder does not exist, an empty string is returned. This is the default behavior.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Environment">
      <summary>Provides information about, and means to manipulate, the current environment and platform. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Environment.CommandLine">
      <summary>Gets the command line for this process.</summary>
      <returns>A string containing command-line arguments.</returns>
    </member>
    <member name="P:System.Environment.CurrentDirectory">
      <summary>Gets or sets the fully qualified path of the current working directory.</summary>
      <returns>A string containing a directory path.</returns>
      <exception cref="T:System.ArgumentException">Attempted to set to an empty string (&amp;quot;&amp;quot;).</exception>
      <exception cref="T:System.ArgumentNullException">Attempted to set to null.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Attempted to set a local path that cannot be found.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the appropriate permission.</exception>
    </member>
    <member name="P:System.Environment.CurrentManagedThreadId">
      <summary>Gets a unique identifier for the current managed thread.</summary>
      <returns>An integer that represents a unique identifier for this managed thread.</returns>
    </member>
    <member name="M:System.Environment.Exit(System.Int32)">
      <summary>Terminates this process and returns an exit code to the operating system.</summary>
      <param name="exitCode">The exit code to return to the operating system. Use 0 (zero) to indicate that the process completed successfully.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have sufficient security permission to perform this function.</exception>
    </member>
    <member name="P:System.Environment.ExitCode">
      <summary>Gets or sets the exit code of the process.</summary>
      <returns>A 32-bit signed integer containing the exit code. The default value is 0 (zero), which indicates that the process completed successfully.</returns>
    </member>
    <member name="M:System.Environment.ExpandEnvironmentVariables(System.String)">
      <summary>Replaces the name of each environment variable embedded in the specified string with the string equivalent of the value of the variable, then returns the resulting string.</summary>
      <param name="name">A string containing the names of zero or more environment variables. Each environment variable is quoted with the percent sign character (%).</param>
      <returns>A string with each environment variable replaced by its value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
    </member>
    <member name="M:System.Environment.FailFast(System.String)">
      <summary>Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message in error reporting to Microsoft.</summary>
      <param name="message">A message that explains why the process was terminated, or null if no explanation is provided.</param>
    </member>
    <member name="M:System.Environment.FailFast(System.String,System.Exception)">
      <summary>Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message and exception information in error reporting to Microsoft.</summary>
      <param name="message">A message that explains why the process was terminated, or null if no explanation is provided.</param>
      <param name="exception">An exception that represents the error that caused the termination. This is typically the exception in a catch block.</param>
    </member>
    <member name="M:System.Environment.GetCommandLineArgs">
      <summary>Returns a string array containing the command-line arguments for the current process.</summary>
      <returns>An array of string where each element contains a command-line argument. The first element is the executable file name, and the following zero or more elements contain the remaining command-line arguments.</returns>
      <exception cref="T:System.NotSupportedException">The system does not support command-line arguments.</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String)">
      <summary>Retrieves the value of an environment variable from the current process.</summary>
      <param name="variable">The name of the environment variable.</param>
      <returns>The value of the environment variable specified by <paramref name="variable">variable</paramref>, or null if the environment variable is not found.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="variable">variable</paramref> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to perform this operation.</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
      <summary>Retrieves the value of an environment variable from the current process or from the Windows operating system registry key for the current user or local machine.</summary>
      <param name="variable">The name of an environment variable.</param>
      <param name="target">One of the <see cref="T:System.EnvironmentVariableTarget"></see> values.</param>
      <returns>The value of the environment variable specified by the <paramref name="variable">variable</paramref> and <paramref name="target">target</paramref> parameters, or null if the environment variable is not found.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="variable">variable</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not a valid <see cref="System.EnvironmentVariableTarget"></see> value.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to perform this operation.</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables">
      <summary>Retrieves all environment variable names and their values from the current process.</summary>
      <returns>A dictionary that contains all environment variable names and their values; otherwise, an empty dictionary if no environment variables are found.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to perform this operation.</exception>
      <exception cref="T:System.OutOfMemoryException">The buffer is out of memory.</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
      <summary>Retrieves all environment variable names and their values from the current process, or from the Windows operating system registry key for the current user or local machine.</summary>
      <param name="target">One of the <see cref="T:System.EnvironmentVariableTarget"></see> values.</param>
      <returns>A dictionary that contains all environment variable names and their values from the source specified by the <paramref name="target">target</paramref> parameter; otherwise, an empty dictionary if no environment variables are found.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to perform this operation for the specified value of <paramref name="target">target</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> contains an illegal value.</exception>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
      <summary>Gets the path to the system special folder that is identified by the specified enumeration.</summary>
      <param name="folder">An enumerated constant that identifies a system special folder.</param>
      <returns>The path to the specified system special folder, if that folder physically exists on your computer; otherwise, an empty string (&amp;quot;&amp;quot;).  
 A folder will not physically exist if the operating system did not create it, the existing folder was deleted, or the folder is a virtual directory, such as My Computer, which does not correspond to a physical path.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="folder">folder</paramref> is not a member of <see cref="System.Environment.SpecialFolder"></see>.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current platform is not supported.</exception>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
      <summary>Gets the path to the system special folder that is identified by the specified enumeration, and uses a specified option for accessing special folders.</summary>
      <param name="folder">An enumerated constant that identifies a system special folder.</param>
      <param name="option">Specifies options to use for accessing a special folder.</param>
      <returns>The path to the specified system special folder, if that folder physically exists on your computer; otherwise, an empty string (&amp;quot;&amp;quot;).  
 A folder will not physically exist if the operating system did not create it, the existing folder was deleted, or the folder is a virtual directory, such as My Computer, which does not correspond to a physical path.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="folder">folder</paramref> is not a member of <see cref="System.Environment.SpecialFolder"></see></exception>
      <exception cref="T:System.PlatformNotSupportedException"><see cref="System.PlatformNotSupportedException"></see></exception>
    </member>
    <member name="M:System.Environment.GetLogicalDrives">
      <summary>Returns an array of string containing the names of the logical drives on the current computer.</summary>
      <returns>An array of strings where each element contains the name of a logical drive. For example, if the computer&amp;#39;s hard drive is the first logical drive, the first element returned is &amp;quot;C:\&amp;quot;.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
    </member>
    <member name="P:System.Environment.HasShutdownStarted">
      <summary>Gets a value that indicates whether the current application domain is being unloaded or the common language runtime (CLR) is shutting down.</summary>
      <returns>true if the current application domain is being unloaded or the CLR is shutting down; otherwise, false.</returns>
    </member>
    <member name="P:System.Environment.Is64BitOperatingSystem">
      <summary>Determines whether the current operating system is a 64-bit operating system.</summary>
      <returns>true if the operating system is 64-bit; otherwise, false.</returns>
    </member>
    <member name="P:System.Environment.Is64BitProcess">
      <summary>Determines whether the current process is a 64-bit process.</summary>
      <returns>true if the process is 64-bit; otherwise, false.</returns>
    </member>
    <member name="P:System.Environment.MachineName">
      <summary>Gets the NetBIOS name of this local computer.</summary>
      <returns>A string containing the name of this computer.</returns>
      <exception cref="T:System.InvalidOperationException">The name of this computer cannot be obtained.</exception>
    </member>
    <member name="P:System.Environment.NewLine">
      <summary>Gets the newline string defined for this environment.</summary>
      <returns>A string containing &amp;quot;\r\n&amp;quot; for non-Unix platforms, or a string containing &amp;quot;\n&amp;quot; for Unix platforms.</returns>
    </member>
    <member name="P:System.Environment.OSVersion">
      <summary>Gets an <see cref="T:System.OperatingSystem"></see> object that contains the current platform identifier and version number.</summary>
      <returns>An object that contains the platform identifier and version number.</returns>
      <exception cref="T:System.InvalidOperationException">This property was unable to obtain the system version.  
 -or-  
 The obtained platform identifier is not a member of <see cref="System.PlatformID"></see></exception>
    </member>
    <member name="P:System.Environment.ProcessorCount">
      <summary>Gets the number of processors on the current machine.</summary>
      <returns>The 32-bit signed integer that specifies the number of processors on the current machine. There is no default. If the current machine contains multiple processor groups, this property returns the number of logical processors that are available for use by the common language runtime (CLR).</returns>
    </member>
    <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
      <summary>Creates, modifies, or deletes an environment variable stored in the current process.</summary>
      <param name="variable">The name of an environment variable.</param>
      <param name="value">A value to assign to variable.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="variable">variable</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="variable">variable</paramref> contains a zero-length string, an initial hexadecimal zero character (0x00), or an equal sign (&amp;quot;=&amp;quot;).  
 -or-  
 The length of <paramref name="variable">variable</paramref> or <paramref name="value">value</paramref> is greater than or equal to 32,767 characters.  
 -or-  
 An error occurred during the execution of this operation.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to perform this operation.</exception>
    </member>
    <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
      <summary>Creates, modifies, or deletes an environment variable stored in the current process or in the Windows operating system registry key reserved for the current user or local machine.</summary>
      <param name="variable">The name of an environment variable.</param>
      <param name="value">A value to assign to variable.</param>
      <param name="target">One of the enumeration values that specifies the location of the environment variable.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="variable">variable</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="variable">variable</paramref> contains a zero-length string, an initial hexadecimal zero character (0x00), or an equal sign (&amp;quot;=&amp;quot;).  
 -or-  
 The length of <paramref name="variable">variable</paramref> is greater than or equal to 32,767 characters.  
 -or-  
 <paramref name="target">target</paramref> is not a member of the <see cref="System.EnvironmentVariableTarget"></see> enumeration.  
 -or-  
 <paramref name="target">target</paramref> is <see cref="System.EnvironmentVariableTarget.Machine"></see> or <see cref="System.EnvironmentVariableTarget.User"></see>, and the length of <paramref name="variable">variable</paramref> is greater than or equal to 255.  
 -or-  
 <paramref name="target">target</paramref> is <see cref="System.EnvironmentVariableTarget.Process"></see> and the length of <paramref name="value">value</paramref> is greater than or equal to 32,767 characters.  
 -or-  
 An error occurred during the execution of this operation.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to perform this operation.</exception>
    </member>
    <member name="P:System.Environment.StackTrace">
      <summary>Gets current stack trace information.</summary>
      <returns>A string containing stack trace information. This value can be <see cref="System.String.Empty"></see>.</returns>
    </member>
    <member name="P:System.Environment.SystemDirectory">
      <summary>Gets the fully qualified path of the system directory.</summary>
      <returns>A string containing a directory path.</returns>
    </member>
    <member name="P:System.Environment.SystemPageSize">
      <summary>Gets the number of bytes in the operating system&amp;#39;s memory page.</summary>
      <returns>The number of bytes in the system memory page.</returns>
    </member>
    <member name="P:System.Environment.TickCount">
      <summary>Gets the number of milliseconds elapsed since the system started.</summary>
      <returns>A 32-bit signed integer containing the amount of time in milliseconds that has passed since the last time the computer was started.</returns>
    </member>
    <member name="P:System.Environment.UserDomainName">
      <summary>Gets the network domain name associated with the current user.</summary>
      <returns>The network domain name associated with the current user.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The operating system does not support retrieving the network domain name.</exception>
      <exception cref="T:System.InvalidOperationException">The network domain name cannot be retrieved.</exception>
    </member>
    <member name="P:System.Environment.UserInteractive">
      <summary>Gets a value indicating whether the current process is running in user interactive mode.</summary>
      <returns>true if the current process is running in user interactive mode; otherwise, false.</returns>
    </member>
    <member name="P:System.Environment.UserName">
      <summary>Gets the user name of the person who is currently logged on to the Windows operating system.</summary>
      <returns>The user name of the person who is logged on to Windows.</returns>
    </member>
    <member name="P:System.Environment.Version">
      <summary>Gets a <see cref="T:System.Version"></see> object that describes the major, minor, build, and revision numbers of the common language runtime.</summary>
      <returns>An object that displays the version of the common language runtime.</returns>
    </member>
    <member name="P:System.Environment.WorkingSet">
      <summary>Gets the amount of physical memory mapped to the process context.</summary>
      <returns>A 64-bit signed integer containing the number of bytes of physical memory mapped to the process context.</returns>
    </member>
    <member name="T:System.EnvironmentVariableTarget">
      <summary>Specifies the location where an environment variable is stored or retrieved in a set or get operation.</summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.Machine">
      <summary>The environment variable is stored or retrieved from the HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment key in the Windows operating system registry.</summary>
      <returns></returns>
    </member>
    <member name="F:System.EnvironmentVariableTarget.Process">
      <summary>The environment variable is stored or retrieved from the environment block associated with the current process.</summary>
      <returns></returns>
    </member>
    <member name="F:System.EnvironmentVariableTarget.User">
      <summary>The environment variable is stored or retrieved from the HKEY_CURRENT_USER\Environment key in the Windows operating system registry.</summary>
      <returns></returns>
    </member>
    <member name="T:System.IO.MemoryStream">
      <summary>Creates a stream whose backing store is memory.</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.MemoryStream"></see> class with an expandable capacity initialized to zero.</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[])">
      <summary>Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream"></see> class based on the specified byte array.</summary>
      <param name="buffer">The array of unsigned bytes from which to create the current stream.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.MemoryStream"></see> class with an expandable capacity initialized as specified.</summary>
      <param name="capacity">The initial size of the internal array in bytes.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is negative.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
      <summary>Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream"></see> class based on the specified byte array with the <see cref="P:System.IO.MemoryStream.CanWrite"></see> property set as specified.</summary>
      <param name="buffer">The array of unsigned bytes from which to create this stream.</param>
      <param name="writable">The setting of the <see cref="P:System.IO.MemoryStream.CanWrite"></see> property, which determines whether the stream supports writing.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream"></see> class based on the specified region (index) of a byte array.</summary>
      <param name="buffer">The array of unsigned bytes from which to create this stream.</param>
      <param name="index">The index into buffer at which the stream begins.</param>
      <param name="count">The length of the stream in bytes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index">index</paramref> is less than <paramref name="count">count</paramref>.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream"></see> class based on the specified region of a byte array, with the <see cref="P:System.IO.MemoryStream.CanWrite"></see> property set as specified.</summary>
      <param name="buffer">The array of unsigned bytes from which to create this stream.</param>
      <param name="index">The index in buffer at which the stream begins.</param>
      <param name="count">The length of the stream in bytes.</param>
      <param name="writable">The setting of the <see cref="P:System.IO.MemoryStream.CanWrite"></see> property, which determines whether the stream supports writing.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> are negative.</exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index">index</paramref> is less than <paramref name="count">count</paramref>.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.MemoryStream"></see> class based on the specified region of a byte array, with the <see cref="P:System.IO.MemoryStream.CanWrite"></see> property set as specified, and the ability to call <see cref="M:System.IO.MemoryStream.GetBuffer"></see> set as specified.</summary>
      <param name="buffer">The array of unsigned bytes from which to create this stream.</param>
      <param name="index">The index into buffer at which the stream begins.</param>
      <param name="count">The length of the stream in bytes.</param>
      <param name="writable">The setting of the <see cref="P:System.IO.MemoryStream.CanWrite"></see> property, which determines whether the stream supports writing.</param>
      <param name="publiclyVisible">true to enable <see cref="M:System.IO.MemoryStream.GetBuffer"></see>, which returns the unsigned byte array from which the stream was created; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index">index</paramref> is less than <paramref name="count">count</paramref>.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <param name="buffer"></param>
      <param name="offset"></param>
      <param name="count"></param>
      <param name="callback"></param>
      <param name="state"></param>
      <returns></returns>
    </member>
    <member name="M:System.IO.MemoryStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <param name="buffer"></param>
      <param name="offset"></param>
      <param name="count"></param>
      <param name="callback"></param>
      <param name="state"></param>
      <returns></returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanRead">
      <summary>Gets a value indicating whether the current stream supports reading.</summary>
      <returns>true if the stream is open.</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanSeek">
      <summary>Gets a value indicating whether the current stream supports seeking.</summary>
      <returns>true if the stream is open.</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanWrite">
      <summary>Gets a value indicating whether the current stream supports writing.</summary>
      <returns>true if the stream supports writing; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.MemoryStream.Capacity">
      <summary>Gets or sets the number of bytes allocated for this stream.</summary>
      <returns>The length of the usable portion of the buffer for the stream.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">A capacity is set that is negative or less than the current length of the stream.</exception>
      <exception cref="T:System.ObjectDisposedException">The current stream is closed.</exception>
      <exception cref="T:System.NotSupportedException">set is invoked on a stream whose capacity cannot be modified.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.CopyTo(System.IO.Stream,System.Int32)">
      <param name="destination"></param>
      <param name="bufferSize"></param>
    </member>
    <member name="M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>Asynchronously reads all the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.</summary>
      <param name="destination">The stream to which the contents of the current stream will be copied.</param>
      <param name="bufferSize">The size, in bytes, of the buffer. This value must be greater than zero.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
      <returns>A task that represents the asynchronous copy operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="destination">destination</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="buffersize">buffersize</paramref> is negative or zero.</exception>
      <exception cref="T:System.ObjectDisposedException">Either the current stream or the destination stream is disposed.</exception>
      <exception cref="T:System.NotSupportedException">The current stream does not support reading, or the destination stream does not support writing.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.MemoryStream"></see> class and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.MemoryStream.EndRead(System.IAsyncResult)">
      <param name="asyncResult"></param>
      <returns></returns>
    </member>
    <member name="M:System.IO.MemoryStream.EndWrite(System.IAsyncResult)">
      <param name="asyncResult"></param>
    </member>
    <member name="M:System.IO.MemoryStream.Flush">
      <summary>Overrides the <see cref="M:System.IO.Stream.Flush"></see> method so that no action is performed.</summary>
    </member>
    <member name="M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>Asynchronously clears all buffers for this stream, and monitors cancellation requests.</summary>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
      <returns>A task that represents the asynchronous flush operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.GetBuffer">
      <summary>Returns the array of unsigned bytes from which this stream was created.</summary>
      <returns>The byte array from which this stream was created, or the underlying array if a byte array was not provided to the <see cref="System.IO.MemoryStream"></see> constructor during construction of the current instance.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The MemoryStream instance was not created with a publicly visible buffer.</exception>
    </member>
    <member name="P:System.IO.MemoryStream.Length">
      <summary>Gets the length of the stream in bytes.</summary>
      <returns>The length of the stream in bytes.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="P:System.IO.MemoryStream.Position">
      <summary>Gets or sets the current position within the stream.</summary>
      <returns>The current position within the stream.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The position is set to a negative value or a value greater than <see cref="System.Int32.MaxValue"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a block of bytes from the current stream and writes the data to a buffer.</summary>
      <param name="buffer">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the characters read from the current stream.</param>
      <param name="offset">The zero-based byte offset in buffer at which to begin storing data from the current stream.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <returns>The total number of bytes written into the buffer. This can be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached before any bytes are read.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="offset">offset</paramref> subtracted from the buffer length is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.ObjectDisposedException">The current stream instance is closed.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</summary>
      <param name="buffer">The buffer to write the data into.</param>
      <param name="offset">The byte offset in buffer at which to begin writing data from the stream.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"></see>.</param>
      <returns>A task that represents the asynchronous read operation. The value of the <paramref name="TResult">TResult</paramref> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="offset">offset</paramref> and <paramref name="count">count</paramref> is larger than the buffer length.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is currently in use by a previous read operation.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.ReadByte">
      <summary>Reads a byte from the current stream.</summary>
      <returns>The byte cast to a <see cref="System.Int32"></see>, or -1 if the end of the stream has been reached.</returns>
      <exception cref="T:System.ObjectDisposedException">The current stream instance is closed.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the position within the current stream to the specified value.</summary>
      <param name="offset">The new position within the stream. This is relative to the loc parameter, and can be positive or negative.</param>
      <param name="loc">A value of type <see cref="T:System.IO.SeekOrigin"></see>, which acts as the seek reference point.</param>
      <returns>The new position within the stream, calculated by combining the initial reference point and the offset.</returns>
      <exception cref="T:System.IO.IOException">Seeking is attempted before the beginning of the stream.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> is greater than <see cref="System.Int32.MaxValue"></see>.</exception>
      <exception cref="T:System.ArgumentException">There is an invalid <see cref="System.IO.SeekOrigin"></see>.  
 -or-  
 <paramref name="offset">offset</paramref> caused an arithmetic overflow.</exception>
      <exception cref="T:System.ObjectDisposedException">The current stream instance is closed.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.SetLength(System.Int64)">
      <summary>Sets the length of the current stream to the specified value.</summary>
      <param name="value">The value at which to set the length.</param>
      <exception cref="T:System.NotSupportedException">The current stream is not resizable and <paramref name="value">value</paramref> is larger than the current capacity.  
 -or-  
 The current stream does not support writing.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value">value</paramref> is negative or is greater than the maximum length of the <see cref="System.IO.MemoryStream"></see>, where the maximum length is(<see cref="System.Int32.MaxValue"></see> - origin), and origin is the index into the underlying buffer at which the stream starts.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.ToArray">
      <summary>Writes the stream contents to a byte array, regardless of the <see cref="P:System.IO.MemoryStream.Position"></see> property.</summary>
      <returns>A new byte array.</returns>
    </member>
    <member name="M:System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)">
      <summary>Returns the array of unsigned bytes from which this stream was created. The return value indicates whether the conversion succeeded.</summary>
      <param name="buffer">The byte array segment from which this stream was created.</param>
      <returns>true if the conversion was successful; otherwise, false.</returns>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a block of bytes to the current stream using data read from a buffer.</summary>
      <param name="buffer">The buffer to write data from.</param>
      <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing. For additional information see <see cref="System.IO.Stream.CanWrite"></see>.  
 -or-  
 The current position is closer than <paramref name="count">count</paramref> bytes to the end of the stream, and the capacity cannot be modified.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="offset">offset</paramref> subtracted from the buffer length is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> are negative.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The current stream instance is closed.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</summary>
      <param name="buffer">The buffer to write data from.</param>
      <param name="offset">The zero-based byte offset in buffer from which to begin copying bytes to the stream.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"></see>.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="offset">offset</paramref> and <paramref name="count">count</paramref> is larger than the buffer length.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteByte(System.Byte)">
      <summary>Writes a byte to the current stream at the current position.</summary>
      <param name="value">The byte to write.</param>
      <exception cref="T:System.NotSupportedException">The stream does not support writing. For additional information see <see cref="System.IO.Stream.CanWrite"></see>.  
 -or-  
 The current position is at the end of the stream, and the capacity cannot be modified.</exception>
      <exception cref="T:System.ObjectDisposedException">The current stream is closed.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
      <summary>Writes the entire contents of this memory stream to another stream.</summary>
      <param name="stream">The stream to write this memory stream to.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The current or target stream is closed.</exception>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesAttribute">
      <summary>Defines the compatibility guarantee of a component, type, or type member that may span multiple versions.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Versioning.ComponentGuaranteesAttribute"></see> class with a value that indicates a library, type, or member&amp;#39;s guaranteed level of compatibility across multiple versions.</summary>
      <param name="guarantees">One of the enumeration values that specifies the level of compatibility that is guaranteed across multiple versions.</param>
    </member>
    <member name="P:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees">
      <summary>Gets a value that indicates the guaranteed level of compatibility of a library, type, or type member that spans multiple versions.</summary>
      <returns>One of the enumeration values that specifies the level of compatibility that is guaranteed across multiple versions.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesOptions">
      <summary>Describes the compatibility guarantee of a component, type, or type member that may span multiple versions.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange">
      <summary>The developer promises multi-version exchange compatibility for the type. Consumers of the type can expect compatibility across future versions and can use the type in all their interfaces. Versioning problems cannot be fixed by side-by-side execution.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.None">
      <summary>The developer does not guarantee compatibility across versions. Consumers of the component, type, or member can expect future versions to break the existing client.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide">
      <summary>The component has been tested to work when more than one version of the assembly is loaded into the same application domain. Future versions can break compatibility. However, when such breaking changes are made, the old version is not modified but continues to exist alongside the new version.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable">
      <summary>The developer promises stable compatibility across versions. Consumers of the type can expect that future versions will not break the existing client. However, if they do and if the client has not used the type in its interfaces, side-by-side execution may fix the problem.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.Versioning.FrameworkName">
      <summary>Represents the name of a version of the .NET Framework.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Versioning.FrameworkName"></see> class from a string that contains information about a version of the .NET Framework.</summary>
      <param name="frameworkName">A string that contains .NET Framework version information.</param>
      <exception cref="T:System.ArgumentException"><paramref name="frameworkName">frameworkName</paramref> is <see cref="System.String.Empty"></see>.  
 -or-  
 <paramref name="frameworkName">frameworkName</paramref> has fewer than two components or more than three components.  
 -or-  
 <paramref name="frameworkName">frameworkName</paramref> does not include a major and minor version number.  
 -or-  
 <paramref name="frameworkName">frameworkName</paramref> does not include a valid version number.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="frameworkName">frameworkName</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Versioning.FrameworkName"></see> class from a string and a <see cref="T:System.Version"></see> object that identify a .NET Framework version.</summary>
      <param name="identifier">A string that identifies a .NET Framework version.</param>
      <param name="version">An object that contains .NET Framework version information.</param>
      <exception cref="T:System.ArgumentException"><paramref name="identifier">identifier</paramref> is <see cref="System.String.Empty"></see>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="identifier">identifier</paramref> is null.  
 -or-  
 <paramref name="version">version</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Versioning.FrameworkName"></see> class from a string, a <see cref="T:System.Version"></see> object that identifies a .NET Framework version, and a profile name.</summary>
      <param name="identifier">A string that identifies a .NET Framework version.</param>
      <param name="version">An object that contains .NET Framework version information.</param>
      <param name="profile">A profile name.</param>
      <exception cref="T:System.ArgumentException"><paramref name="identifier">identifier</paramref> is <see cref="System.String.Empty"></see>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="identifier">identifier</paramref> is null.  
 -or-  
 <paramref name="version">version</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Object)">
      <summary>Returns a value that indicates whether this <see cref="T:System.Runtime.Versioning.FrameworkName"></see> instance represents the same .NET Framework version as a specified object.</summary>
      <param name="obj">The object to compare to the current instance.</param>
      <returns>true if every component of the current <see cref="System.Runtime.Versioning.FrameworkName"></see> object matches the corresponding component of <paramref name="obj">obj</paramref>; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)">
      <summary>Returns a value that indicates whether this <see cref="T:System.Runtime.Versioning.FrameworkName"></see> instance represents the same .NET Framework version as a specified <see cref="T:System.Runtime.Versioning.FrameworkName"></see> instance.</summary>
      <param name="other">The object to compare to the current instance.</param>
      <returns>true if every component of the current <see cref="System.Runtime.Versioning.FrameworkName"></see> object matches the corresponding component of <paramref name="other">other</paramref>; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.FullName">
      <summary>Gets the full name of this <see cref="T:System.Runtime.Versioning.FrameworkName"></see> object.</summary>
      <returns>The full name of this <see cref="System.Runtime.Versioning.FrameworkName"></see> object.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.GetHashCode">
      <summary>Returns the hash code for the <see cref="T:System.Runtime.Versioning.FrameworkName"></see> object.</summary>
      <returns>A 32-bit signed integer that represents the hash code of this instance.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Identifier">
      <summary>Gets the identifier of this <see cref="T:System.Runtime.Versioning.FrameworkName"></see> object.</summary>
      <returns>The identifier of this <see cref="System.Runtime.Versioning.FrameworkName"></see> object.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Runtime.Versioning.FrameworkName"></see> objects represent the same .NET Framework version.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>true if the <paramref name="left">left</paramref> and <paramref name="right">right</paramref> parameters represent the same .NET Framework version; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Runtime.Versioning.FrameworkName"></see> objects represent different .NET Framework versions.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>true if the <paramref name="left">left</paramref> and <paramref name="right">right</paramref> parameters represent different .NET Framework versions; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Profile">
      <summary>Gets the profile name of this <see cref="T:System.Runtime.Versioning.FrameworkName"></see> object.</summary>
      <returns>The profile name of this <see cref="System.Runtime.Versioning.FrameworkName"></see> object.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.ToString">
      <summary>Returns the string representation of this <see cref="T:System.Runtime.Versioning.FrameworkName"></see> object.</summary>
      <returns>A string that represents this <see cref="System.Runtime.Versioning.FrameworkName"></see> object.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Version">
      <summary>Gets the version of this <see cref="T:System.Runtime.Versioning.FrameworkName"></see> object.</summary>
      <returns>An object that contains version information about this <see cref="System.Runtime.Versioning.FrameworkName"></see> object.</returns>
    </member>
    <member name="T:System.Security.IPermission">
      <summary>Defines methods implemented by permission types.</summary>
    </member>
    <member name="M:System.Security.IPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.IPermission.Demand">
      <summary>Throws a <see cref="T:System.Security.SecurityException"></see> at run time if the security requirement is not met.</summary>
    </member>
    <member name="M:System.Security.IPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not an instance of the same class as the current permission.</exception>
    </member>
    <member name="M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.IPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="T:System.Security.ISecurityEncodable">
      <summary>Defines the methods that convert permission object state to and from XML element representation.</summary>
    </member>
    <member name="M:System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
    </member>
    <member name="M:System.Security.ISecurityEncodable.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="T:System.Security.Permissions.CodeAccessSecurityAttribute">
      <summary>Specifies the base attribute class for code access security.</summary>
    </member>
    <member name="M:System.Security.Permissions.CodeAccessSecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute"></see> with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="T:System.StringComparer">
      <summary>Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</summary>
    </member>
    <member name="M:System.StringComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.StringComparer"></see> class.</summary>
    </member>
    <member name="M:System.StringComparer.Compare(System.Object,System.Object)">
      <summary>When overridden in a derived class, compares two objects and returns an indication of their relative sort order.</summary>
      <param name="x">An object to compare to y.</param>
      <param name="y">An object to compare to x.</param>
      <returns>A signed integer that indicates the relative values of <paramref name="x">x</paramref> and <paramref name="y">y</paramref>, as shown in the following table.  
  Value  

  Meaning  

  Less than zero  

 <paramref name="x">x</paramref> precedes  <paramref name="y">y</paramref> in the sort order.  

 -or-  

 <paramref name="x">x</paramref> is null and <paramref name="y">y</paramref> is not null.  

  Zero  

 <paramref name="x">x</paramref> is equal to <paramref name="y">y</paramref>.  

 -or-  

 <paramref name="x">x</paramref> and <paramref name="y">y</paramref> are both null.  

  Greater than zero  

 <paramref name="x">x</paramref> follows <paramref name="y">y</paramref> in the sort order.  

 -or-  

 <paramref name="y">y</paramref> is null and <paramref name="x">x</paramref> is not null.  

 </returns>
      <exception cref="T:System.ArgumentException">Neither <paramref name="x">x</paramref> nor <paramref name="y">y</paramref> is a <see cref="System.String"></see> object, and neither <paramref name="x">x</paramref> nor <paramref name="y">y</paramref> implements the <see cref="System.IComparable"></see> interface.</exception>
    </member>
    <member name="M:System.StringComparer.Compare(System.String,System.String)">
      <summary>When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</summary>
      <param name="x">A string to compare to y.</param>
      <param name="y">A string to compare to x.</param>
      <returns>A signed integer that indicates the relative values of <paramref name="x">x</paramref> and <paramref name="y">y</paramref>, as shown in the following table.  
  Value  

  Meaning  

  Less than zero  

 <paramref name="x">x</paramref> precedes <paramref name="y">y</paramref> in the sort order.  

 -or-  

 <paramref name="x">x</paramref> is null and <paramref name="y">y</paramref> is not null.  

  Zero  

 <paramref name="x">x</paramref> is equal to <paramref name="y">y</paramref>.  

 -or-  

 <paramref name="x">x</paramref> and <paramref name="y">y</paramref> are both null.  

  Greater than zero  

 <paramref name="x">x</paramref> follows <paramref name="y">y</paramref> in the sort order.  

 -or-  

 <paramref name="y">y</paramref> is null and <paramref name="x">x</paramref> is not null.  

 </returns>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
      <summary>Creates a <see cref="T:System.StringComparer"></see> object that compares strings according to the rules of a specified culture.</summary>
      <param name="culture">A culture whose linguistic rules are used to perform a string comparison.</param>
      <param name="ignoreCase">true to specify that comparison operations be case-insensitive; false to specify that comparison operations be case-sensitive.</param>
      <returns>A new <see cref="System.StringComparer"></see> object that performs string comparisons according to the comparison rules used by the <paramref name="culture">culture</paramref> parameter and the case rule specified by the <paramref name="ignoreCase">ignoreCase</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="culture">culture</paramref> is null.</exception>
    </member>
    <member name="P:System.StringComparer.CurrentCulture">
      <summary>Gets a <see cref="T:System.StringComparer"></see> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</summary>
      <returns>A new <see cref="System.StringComparer"></see> object.</returns>
    </member>
    <member name="P:System.StringComparer.CurrentCultureIgnoreCase">
      <summary>Gets a <see cref="T:System.StringComparer"></see> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</summary>
      <returns>A new <see cref="System.StringComparer"></see> object.</returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.Object,System.Object)">
      <summary>When overridden in a derived class, indicates whether two objects are equal.</summary>
      <param name="x">An object to compare to y.</param>
      <param name="y">An object to compare to x.</param>
      <returns>true if <paramref name="x">x</paramref> and <paramref name="y">y</paramref> refer to the same object, or <paramref name="x">x</paramref> and <paramref name="y">y</paramref> are both the same type of object and those objects are equal, or both <paramref name="x">x</paramref> and <paramref name="y">y</paramref> are null; otherwise, false.</returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.String,System.String)">
      <summary>When overridden in a derived class, indicates whether two strings are equal.</summary>
      <param name="x">A string to compare to y.</param>
      <param name="y">A string to compare to x.</param>
      <returns>true if <paramref name="x">x</paramref> and <paramref name="y">y</paramref> refer to the same object, or <paramref name="x">x</paramref> and <paramref name="y">y</paramref> are equal, or <paramref name="x">x</paramref> and <paramref name="y">y</paramref> are null; otherwise, false.</returns>
    </member>
    <member name="M:System.StringComparer.FromComparison(System.StringComparison)">
      <param name="comparisonType"></param>
      <returns></returns>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.Object)">
      <summary>When overridden in a derived class, gets the hash code for the specified object.</summary>
      <param name="obj">An object.</param>
      <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj">obj</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentException">Not enough memory is available to allocate the buffer that is required to compute the hash code.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="obj">obj</paramref> is null.</exception>
      <exception cref="  
            T:System.ArgumentException">Not enough memory is available to allocate the buffer that is required to compute the hash code.</exception>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.String)">
      <summary>When overridden in a derived class, gets the hash code for the specified string.</summary>
      <param name="obj">A string.</param>
      <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj">obj</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentException">Not enough memory is available to allocate the buffer that is required to compute the hash code.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="obj">obj</paramref> is null.</exception>
      <exception cref="  
            T:System.ArgumentException">Not enough memory is available to allocate the buffer that is required to compute the hash code.</exception>
    </member>
    <member name="P:System.StringComparer.InvariantCulture">
      <summary>Gets a <see cref="T:System.StringComparer"></see> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.</summary>
      <returns>A new <see cref="System.StringComparer"></see> object.</returns>
    </member>
    <member name="P:System.StringComparer.InvariantCultureIgnoreCase">
      <summary>Gets a <see cref="T:System.StringComparer"></see> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.</summary>
      <returns>A new <see cref="System.StringComparer"></see> object.</returns>
    </member>
    <member name="P:System.StringComparer.Ordinal">
      <summary>Gets a <see cref="T:System.StringComparer"></see> object that performs a case-sensitive ordinal string comparison.</summary>
      <returns>A <see cref="System.StringComparer"></see> object.</returns>
    </member>
    <member name="P:System.StringComparer.OrdinalIgnoreCase">
      <summary>Gets a <see cref="T:System.StringComparer"></see> object that performs a case-insensitive ordinal string comparison.</summary>
      <returns>A <see cref="System.StringComparer"></see> object.</returns>
    </member>
    <member name="M:System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <param name="x"></param>
      <param name="y"></param>
      <returns></returns>
    </member>
    <member name="M:System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <param name="x"></param>
      <param name="y"></param>
      <returns></returns>
    </member>
    <member name="M:System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <param name="obj"></param>
      <returns></returns>
    </member>
    <member name="T:System.StringNormalizationExtensions">
      <summary>Provides extension methods to work with string normalization.</summary>
    </member>
    <member name="M:System.StringNormalizationExtensions.IsNormalized(System.String)">
      <summary>Indicates whether the specified string is in Unicode normalization form C.</summary>
      <param name="value">A string.</param>
      <returns>true if <paramref name="value">value</paramref> is in normalization form C; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> contains invalid Unicode characters.</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.IsNormalized(System.String,System.Text.NormalizationForm)">
      <summary>Indicates whether a string is in a specified Unicode normalization form.</summary>
      <param name="value">A string.</param>
      <param name="normalizationForm">A Unicode normalization form.</param>
      <returns>true if <paramref name="value">value</paramref> is in normalization form <paramref name="normalizationForm">normalizationForm</paramref>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> contains invalid Unicode characters.</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.Normalize(System.String)">
      <summary>Normalizes a string to a Unicode normalization form C.</summary>
      <param name="value">The string to normalize.</param>
      <returns>A new string whose textual value is the same as <paramref name="value">value</paramref> but whose binary representation is in Unicode normalization form C.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> contains invalid Unicode characters.</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.Normalize(System.String,System.Text.NormalizationForm)">
      <summary>Normalizes a string to the specified Unicode normalization form.</summary>
      <param name="value">The string to normalize.</param>
      <param name="normalizationForm">The Unicode normalization form.</param>
      <returns>A new string whose textual value is the same as <paramref name="value">value</paramref> but whose binary representation is in the <paramref name="normalizationForm">normalizationForm</paramref> normalization form.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> contains invalid Unicode characters.</exception>
    </member>
    <member name="T:System.AppDomain">
      <summary>Represents an application domain, which is an isolated environment where applications execute. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.AppDomain.AppendPrivatePath(System.String)">
      <summary>Appends the specified directory name to the private path list.</summary>
      <param name="path">The name of the directory to be appended to the private path.</param>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
    </member>
    <member name="M:System.AppDomain.ApplyPolicy(System.String)">
      <summary>Returns the assembly display name after policy has been applied.</summary>
      <param name="assemblyName">The assembly display name, in the form provided by the <see cref="P:System.Reflection.Assembly.FullName"></see> property.</param>
      <returns>A string containing the assembly display name after policy has been applied.</returns>
    </member>
    <member name="E:System.AppDomain.AssemblyLoad">
      <summary>Occurs when an assembly is loaded.</summary>
    </member>
    <member name="E:System.AppDomain.AssemblyResolve">
      <summary>Occurs when the resolution of an assembly fails.</summary>
    </member>
    <member name="P:System.AppDomain.BaseDirectory">
      <summary>Gets the base directory that the assembly resolver uses to probe for assemblies.</summary>
      <returns>The base directory that the assembly resolver uses to probe for assemblies.</returns>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
    </member>
    <member name="M:System.AppDomain.ClearPrivatePath">
      <summary>Resets the path that specifies the location of private assemblies to the empty string (&amp;quot;&amp;quot;).</summary>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
    </member>
    <member name="M:System.AppDomain.ClearShadowCopyPath">
      <summary>Resets the list of directories containing shadow copied assemblies to the empty string (&amp;quot;&amp;quot;).</summary>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
    </member>
    <member name="M:System.AppDomain.CreateDomain(System.String)">
      <summary>Creates a new application domain with the specified name.</summary>
      <param name="friendlyName">The friendly name of the domain.</param>
      <returns>The newly created application domain.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="friendlyName">friendlyName</paramref> is null.</exception>
    </member>
    <member name="P:System.AppDomain.CurrentDomain">
      <summary>Gets the current application domain for the current <see cref="T:System.Threading.Thread"></see>.</summary>
      <returns>The current application domain.</returns>
    </member>
    <member name="E:System.AppDomain.DomainUnload">
      <summary>Occurs when an <see cref="T:System.AppDomain"></see> is about to be unloaded.</summary>
    </member>
    <member name="P:System.AppDomain.DynamicDirectory">
      <summary>Gets the directory that the assembly resolver uses to probe for dynamically created assemblies.</summary>
      <returns>The directory that the assembly resolver uses to probe for dynamically created assemblies.</returns>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>Executes the assembly contained in the specified file, using the specified arguments, hash value, and hash algorithm.</summary>
      <param name="assemblyFile">The name of the file that contains the assembly to execute.</param>
      <param name="args">The arguments to the entry point of the assembly.</param>
      <param name="hashValue">Represents the value of the computed hash code.</param>
      <param name="hashAlgorithm">Represents the hash algorithm used by the assembly manifest.</param>
      <returns>The value that is returned by the entry point of the assembly.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="assemblyFile">assemblyFile</paramref> is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException"><paramref name="assemblyFile">assemblyFile</paramref> is not found.</exception>
      <exception cref="T:System.BadImageFormatException"><paramref name="assemblyFile">assemblyFile</paramref> is not a valid assembly.  
 -or-  
 <paramref name="assemblyFile">assemblyFile</paramref> was compiled with a later version of the common language runtime than the version that is currently loaded.</exception>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences.</exception>
      <exception cref="T:System.MissingMethodException">The specified assembly has no entry point.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
      <summary>Executes the assembly contained in the specified file, using the specified arguments.</summary>
      <param name="assemblyFile">The name of the file that contains the assembly to execute.</param>
      <param name="args">The arguments to the entry point of the assembly.</param>
      <returns>The value that is returned by the entry point of the assembly.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="assemblyFile">assemblyFile</paramref> is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException"><paramref name="assemblyFile">assemblyFile</paramref> is not found.</exception>
      <exception cref="T:System.BadImageFormatException"><paramref name="assemblyFile">assemblyFile</paramref> is not a valid assembly.  
 -or-  
 <paramref name="assemblyFile">assemblyFile</paramref> was compiled with a later version of the common language runtime than the version that is currently loaded.</exception>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences.</exception>
      <exception cref="T:System.MissingMethodException">The specified assembly has no entry point.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String)">
      <summary>Executes the assembly contained in the specified file.</summary>
      <param name="assemblyFile">The name of the file that contains the assembly to execute.</param>
      <returns>The value returned by the entry point of the assembly.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="assemblyFile">assemblyFile</paramref> is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException"><paramref name="assemblyFile">assemblyFile</paramref> is not found.</exception>
      <exception cref="T:System.BadImageFormatException"><paramref name="assemblyFile">assemblyFile</paramref> is not a valid assembly.  
 -or-  
 Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile">assemblyFile</paramref> was compiled with a later version.</exception>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences.</exception>
      <exception cref="T:System.MissingMethodException">The specified assembly has no entry point.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
      <summary>Executes an assembly given its display name.</summary>
      <param name="assemblyName">The display name of the assembly. See <see cref="P:System.Reflection.Assembly.FullName"></see>.</param>
      <returns>The value returned by the entry point of the assembly.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="assemblyName">assemblyName</paramref> is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The assembly specified by <paramref name="assemblyName">assemblyName</paramref> is not found.</exception>
      <exception cref="T:System.BadImageFormatException">The assembly specified by <paramref name="assemblyName">assemblyName</paramref> is not a valid assembly.  
 -or-  
 Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName">assemblyName</paramref> was compiled with a later version.</exception>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
      <exception cref="T:System.IO.FileLoadException">The assembly specified by <paramref name="assemblyName">assemblyName</paramref> was found, but could not be loaded.</exception>
      <exception cref="T:System.MissingMethodException">The specified assembly has no entry point.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
      <summary>Executes the assembly given an <see cref="T:System.Reflection.AssemblyName"></see>, using the specified arguments.</summary>
      <param name="assemblyName">An <see cref="T:System.Reflection.AssemblyName"></see> object representing the name of the assembly.</param>
      <param name="args">Command-line arguments to pass when starting the process.</param>
      <returns>The value that is returned by the entry point of the assembly.</returns>
      <exception cref="T:System.IO.FileNotFoundException">The assembly specified by <paramref name="assemblyName">assemblyName</paramref> is not found.</exception>
      <exception cref="T:System.IO.FileLoadException">The assembly specified by <paramref name="assemblyName">assemblyName</paramref> was found, but could not be loaded.</exception>
      <exception cref="T:System.BadImageFormatException">The assembly specified by <paramref name="assemblyName">assemblyName</paramref> is not a valid assembly.  
 -or-  
 <paramref name="assemblyName">assemblyName</paramref> was compiled with a later version of the common language runtime than the version that is currently loaded.</exception>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
      <exception cref="T:System.MissingMethodException">The specified assembly has no entry point.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
      <summary>Executes the assembly given its display name, using the specified arguments.</summary>
      <param name="assemblyName">The display name of the assembly. See <see cref="P:System.Reflection.Assembly.FullName"></see>.</param>
      <param name="args">Command-line arguments to pass when starting the process.</param>
      <returns>The value that is returned by the entry point of the assembly.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="assemblyName">assemblyName</paramref> is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The assembly specified by <paramref name="assemblyName">assemblyName</paramref> is not found.</exception>
      <exception cref="T:System.IO.FileLoadException">The assembly specified by <paramref name="assemblyName">assemblyName</paramref> was found, but could not be loaded.</exception>
      <exception cref="T:System.BadImageFormatException">The assembly specified by <paramref name="assemblyName">assemblyName</paramref> is not a valid assembly.  
 -or-  
 <paramref name="assemblyName">assemblyName</paramref> was compiled with a later version of the common language runtime than the version that is currently loaded.</exception>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
      <exception cref="T:System.MissingMethodException">The specified assembly has no entry point.</exception>
    </member>
    <member name="E:System.AppDomain.FirstChanceException">
      <summary>Occurs when an exception is thrown in managed code, before the runtime searches the call stack for an exception handler in the application domain.</summary>
    </member>
    <member name="P:System.AppDomain.FriendlyName">
      <summary>Gets the friendly name of this application domain.</summary>
      <returns>The friendly name of this application domain.</returns>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
    </member>
    <member name="M:System.AppDomain.GetAssemblies">
      <summary>Gets the assemblies that have been loaded into the execution context of this application domain.</summary>
      <returns>An array of assemblies in this application domain.</returns>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
    </member>
    <member name="M:System.AppDomain.GetCurrentThreadId">
      <summary>Gets the current thread identifier.</summary>
      <returns>A 32-bit signed integer that is the identifier of the current thread.</returns>
    </member>
    <member name="M:System.AppDomain.GetData(System.String)">
      <summary>Gets the value stored in the current application domain for the specified name.</summary>
      <param name="name">The name of a predefined application domain property, or the name of an application domain property you have defined.</param>
      <returns>The value of the <paramref name="name">name</paramref> property, or null if the property does not exist.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
    </member>
    <member name="P:System.AppDomain.Id">
      <summary>Gets an integer that uniquely identifies the application domain within the process.</summary>
      <returns>An integer that identifies the application domain.</returns>
    </member>
    <member name="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
      <summary>Gets a nullable Boolean value that indicates whether any compatibility switches are set, and if so, whether the specified compatibility switch is set.</summary>
      <param name="value">The compatibility switch to test.</param>
      <returns>A null reference (Nothing in Visual Basic) if no compatibility switches are set; otherwise, a Boolean value that indicates whether the compatibility switch that is specified by <paramref name="value">value</paramref> is set.</returns>
    </member>
    <member name="M:System.AppDomain.IsDefaultAppDomain">
      <summary>Returns a value that indicates whether the application domain is the default application domain for the process.</summary>
      <returns>true if the current <see cref="System.AppDomain"></see> object represents the default application domain for the process; otherwise, false.</returns>
    </member>
    <member name="M:System.AppDomain.IsFinalizingForUnload">
      <summary>Indicates whether this application domain is unloading, and the objects it contains are being finalized by the common language runtime.</summary>
      <returns>true if this application domain is unloading and the common language runtime has started invoking finalizers; otherwise, false.</returns>
    </member>
    <member name="P:System.AppDomain.IsFullyTrusted">
      <summary>Gets a value that indicates whether assemblies that are loaded into the current application domain execute with full trust.</summary>
      <returns>true if assemblies that are loaded into the current application domain execute with full trust; otherwise, false.</returns>
    </member>
    <member name="P:System.AppDomain.IsHomogenous">
      <summary>Gets a value that indicates whether the current application domain has a set of permissions that is granted to all assemblies that are loaded into the application domain.</summary>
      <returns>true if the current application domain has a homogenous set of permissions; otherwise, false.</returns>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[])">
      <summary>Loads the <see cref="T:System.Reflection.Assembly"></see> with a common object file format (COFF) based image containing an emitted <see cref="T:System.Reflection.Assembly"></see>.</summary>
      <param name="rawAssembly">An array of type byte that is a COFF-based image containing an emitted assembly.</param>
      <returns>The loaded assembly.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="rawAssembly">rawAssembly</paramref> is null.</exception>
      <exception cref="T:System.BadImageFormatException"><paramref name="rawAssembly">rawAssembly</paramref> is not a valid assembly.  
 -or-  
 Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly">rawAssembly</paramref> was compiled with a later version.</exception>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences.</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
      <summary>Loads an <see cref="T:System.Reflection.Assembly"></see> given its <see cref="T:System.Reflection.AssemblyName"></see>.</summary>
      <param name="assemblyRef">An object that describes the assembly to load.</param>
      <returns>The loaded assembly.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="assemblyRef">assemblyRef</paramref> is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException"><paramref name="assemblyRef">assemblyRef</paramref> is not found.</exception>
      <exception cref="T:System.BadImageFormatException"><paramref name="assemblyRef">assemblyRef</paramref> is not a valid assembly.  
 -or-  
 Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyRef">assemblyRef</paramref> was compiled with a later version.</exception>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences.</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.String)">
      <summary>Loads an <see cref="T:System.Reflection.Assembly"></see> given its display name.</summary>
      <param name="assemblyString">The display name of the assembly. See <see cref="P:System.Reflection.Assembly.FullName"></see>.</param>
      <returns>The loaded assembly.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="assemblyString">assemblyString</paramref> is null</exception>
      <exception cref="T:System.IO.FileNotFoundException"><paramref name="assemblyString">assemblyString</paramref> is not found.</exception>
      <exception cref="T:System.BadImageFormatException"><paramref name="assemblyString">assemblyString</paramref> is not a valid assembly.  
 -or-  
 Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString">assemblyString</paramref> was compiled with a later version.</exception>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences.</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
      <summary>Loads the <see cref="T:System.Reflection.Assembly"></see> with a common object file format (COFF) based image containing an emitted <see cref="T:System.Reflection.Assembly"></see>. The raw bytes representing the symbols for the <see cref="T:System.Reflection.Assembly"></see> are also loaded.</summary>
      <param name="rawAssembly">An array of type byte that is a COFF-based image containing an emitted assembly.</param>
      <param name="rawSymbolStore">An array of type byte containing the raw bytes representing the symbols for the assembly.</param>
      <returns>The loaded assembly.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="rawAssembly">rawAssembly</paramref> is null.</exception>
      <exception cref="T:System.BadImageFormatException"><paramref name="rawAssembly">rawAssembly</paramref> is not a valid assembly.  
 -or-  
 Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly">rawAssembly</paramref> was compiled with a later version.</exception>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences.</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringIsEnabled">
      <summary>Gets or sets a value that indicates whether CPU and memory monitoring of application domains is enabled for the current process. Once monitoring is enabled for a process, it cannot be disabled.</summary>
      <returns>true if monitoring is enabled; otherwise false.</returns>
      <exception cref="T:System.ArgumentException">The current process attempted to assign the value false to this property.</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedMemorySize">
      <summary>Gets the number of bytes that survived the last collection and that are known to be referenced by the current application domain.</summary>
      <returns>The number of surviving bytes.</returns>
      <exception cref="T:System.InvalidOperationException">The static (Shared in Visual Basic) <see cref="System.AppDomain.MonitoringIsEnabled"></see> property is set to false.</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedProcessMemorySize">
      <summary>Gets the total bytes that survived from the last collection for all application domains in the process.</summary>
      <returns>The total number of surviving bytes for the process.</returns>
      <exception cref="T:System.InvalidOperationException">The static (Shared in Visual Basic) <see cref="System.AppDomain.MonitoringIsEnabled"></see> property is set to false.</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalAllocatedMemorySize">
      <summary>Gets the total size, in bytes, of all memory allocations that have been made by the application domain since it was created, without subtracting memory that has been collected.</summary>
      <returns>The total size of all memory allocations.</returns>
      <exception cref="T:System.InvalidOperationException">The static (Shared in Visual Basic) <see cref="System.AppDomain.MonitoringIsEnabled"></see> property is set to false.</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalProcessorTime">
      <summary>Gets the total processor time that has been used by all threads while executing in the current application domain, since the process started.</summary>
      <returns>Total processor time for the current application domain.</returns>
      <exception cref="T:System.InvalidOperationException">The static (Shared in Visual Basic) <see cref="System.AppDomain.MonitoringIsEnabled"></see> property is set to false.</exception>
    </member>
    <member name="E:System.AppDomain.ProcessExit">
      <summary>Occurs when the default application domain&amp;#39;s parent process exits.</summary>
    </member>
    <member name="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
      <summary>Occurs when the resolution of an assembly fails in the reflection-only context.</summary>
    </member>
    <member name="M:System.AppDomain.ReflectionOnlyGetAssemblies">
      <summary>Returns the assemblies that have been loaded into the reflection-only context of the application domain.</summary>
      <returns>An array of <see cref="System.Reflection.Assembly"></see> objects that represent the assemblies loaded into the reflection-only context of the application domain.</returns>
      <exception cref="T:System.AppDomainUnloadedException">An operation is attempted on an unloaded application domain.</exception>
    </member>
    <member name="P:System.AppDomain.RelativeSearchPath">
      <summary>Gets the path under the base directory where the assembly resolver should probe for private assemblies.</summary>
      <returns>The path under the base directory where the assembly resolver should probe for private assemblies.</returns>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
    </member>
    <member name="E:System.AppDomain.ResourceResolve">
      <summary>Occurs when the resolution of a resource fails because the resource is not a valid linked or embedded resource in the assembly.</summary>
    </member>
    <member name="M:System.AppDomain.SetCachePath(System.String)">
      <summary>Establishes the specified directory path as the location where assemblies are shadow copied.</summary>
      <param name="path">The fully qualified path to the shadow copy location.</param>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
    </member>
    <member name="M:System.AppDomain.SetData(System.String,System.Object)">
      <summary>Assigns the specified value to the specified application domain property.</summary>
      <param name="name">The name of a user-defined application domain property to create or change.</param>
      <param name="data">The value of the property.</param>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
    </member>
    <member name="M:System.AppDomain.SetDynamicBase(System.String)">
      <summary>Establishes the specified directory path as the base directory for subdirectories where dynamically generated files are stored and accessed.</summary>
      <param name="path">The fully qualified path that is the base directory for subdirectories where dynamic assemblies are stored.</param>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
    </member>
    <member name="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
      <summary>Specifies how principal and identity objects should be attached to a thread if the thread attempts to bind to a principal while executing in this application domain.</summary>
      <param name="policy">One of the <see cref="T:System.Security.Principal.PrincipalPolicy"></see> values that specifies the type of the principal object to attach to threads.</param>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyFiles">
      <summary>Turns on shadow copying.</summary>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyPath(System.String)">
      <summary>Establishes the specified directory path as the location of assemblies to be shadow copied.</summary>
      <param name="path">A list of directory names, where each name is separated by a semicolon.</param>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
    </member>
    <member name="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
      <summary>Sets the default principal object to be attached to threads if they attempt to bind to a principal while executing in this application domain.</summary>
      <param name="principal">The principal object to attach to threads.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="principal">principal</paramref> is null.</exception>
      <exception cref="T:System.Security.Policy.PolicyException">The thread principal has already been set.</exception>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
    </member>
    <member name="P:System.AppDomain.ShadowCopyFiles">
      <summary>Gets an indication whether the application domain is configured to shadow copy files.</summary>
      <returns>true if the application domain is configured to shadow copy files; otherwise, false.</returns>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
    </member>
    <member name="M:System.AppDomain.ToString">
      <summary>Obtains a string representation that includes the friendly name of the application domain and any context policies.</summary>
      <returns>A string formed by concatenating the literal string &amp;quot;Name:&amp;quot;, the friendly name of the application domain, and either string representations of the context policies or the string &amp;quot;There are no context policies.&amp;quot;</returns>
      <exception cref="T:System.AppDomainUnloadedException">The application domain represented by the current <see cref="System.AppDomain"></see> has been unloaded.</exception>
    </member>
    <member name="E:System.AppDomain.TypeResolve">
      <summary>Occurs when the resolution of a type fails.</summary>
    </member>
    <member name="E:System.AppDomain.UnhandledException">
      <summary>Occurs when an exception is not caught.</summary>
    </member>
    <member name="M:System.AppDomain.Unload(System.AppDomain)">
      <summary>Unloads the specified application domain.</summary>
      <param name="domain">An application domain to unload.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="domain">domain</paramref> is null.</exception>
      <exception cref="T:System.CannotUnloadAppDomainException"><paramref name="domain">domain</paramref> could not be unloaded.</exception>
      <exception cref="T:System.Exception">An error occurred during the unload process.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.IndentedTextWriter">
      <summary>Provides a text writer that can indent new lines by a tab string token.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.IndentedTextWriter"></see> class using the specified text writer and default tab string.</summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter"></see> to use for output.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.IndentedTextWriter"></see> class using the specified text writer and tab string.</summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter"></see> to use for output.</param>
      <param name="tabString">The tab string to use for indentation.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Close">
      <summary>Closes the document being written to.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.IndentedTextWriter.DefaultTabString">
      <summary>Specifies the default tab string. This field is constant.</summary>
      <returns></returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Encoding">
      <summary>Gets the encoding for the text writer to use.</summary>
      <returns>An <see cref="System.Text.Encoding"></see> that indicates the encoding for the text writer to use.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Flush">
      <summary>Flushes the stream.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Indent">
      <summary>Gets or sets the number of spaces to indent.</summary>
      <returns>The number of spaces to indent.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.InnerWriter">
      <summary>Gets the <see cref="T:System.IO.TextWriter"></see> to use.</summary>
      <returns>The <see cref="System.IO.TextWriter"></see> to use.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.NewLine">
      <summary>Gets or sets the new line character to use.</summary>
      <returns>The new line character to use.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.OutputTabs">
      <summary>Outputs the tab string once for each level of indentation according to the <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent"></see> property.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>Writes out a formatted string, using the same semantics as specified.</summary>
      <param name="format">The formatting string to use.</param>
      <param name="arg0">The first object to write into the formatted string.</param>
      <param name="arg1">The second object to write into the formatted string.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a subarray of characters to the text stream.</summary>
      <param name="buffer">The character array to write data from.</param>
      <param name="index">Starting index in the buffer.</param>
      <param name="count">The number of characters to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>Writes out a formatted string, using the same semantics as specified.</summary>
      <param name="format">The formatting string to use.</param>
      <param name="arg">The argument array to output.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String)">
      <summary>Writes the specified string to the text stream.</summary>
      <param name="s">The string to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Single)">
      <summary>Writes the text representation of a Single to the text stream.</summary>
      <param name="value">The single to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Object)">
      <summary>Writes the text representation of an object to the text stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>Writes out a formatted string, using the same semantics as specified.</summary>
      <param name="format">The formatting string.</param>
      <param name="arg0">The object to write into the formatted string.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int32)">
      <summary>Writes the text representation of an integer to the text stream.</summary>
      <param name="value">The integer to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Double)">
      <summary>Writes the text representation of a Double to the text stream.</summary>
      <param name="value">The double to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[])">
      <summary>Writes a character array to the text stream.</summary>
      <param name="buffer">The character array to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char)">
      <summary>Writes a character to the text stream.</summary>
      <param name="value">The character to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Boolean)">
      <summary>Writes the text representation of a Boolean value to the text stream.</summary>
      <param name="value">The Boolean value to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int64)">
      <summary>Writes the text representation of an 8-byte integer to the text stream.</summary>
      <param name="value">The 8-byte integer to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a subarray of characters, followed by a line terminator, to the text stream.</summary>
      <param name="buffer">The character array to write data from.</param>
      <param name="index">Starting index in the buffer.</param>
      <param name="count">The number of characters to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>Writes out a formatted string, followed by a line terminator, using the same semantics as specified.</summary>
      <param name="format">The formatting string to use.</param>
      <param name="arg">The argument array to output.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>Writes out a formatted string, followed by a line terminator, using the same semantics as specified.</summary>
      <param name="format">The formatting string.</param>
      <param name="arg0">The object to write into the formatted string.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>Writes the text representation of a UInt32, followed by a line terminator, to the text stream.</summary>
      <param name="value">A UInt32 to output.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String)">
      <summary>Writes the specified string, followed by a line terminator, to the text stream.</summary>
      <param name="s">The string to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Single)">
      <summary>Writes the text representation of a Single, followed by a line terminator, to the text stream.</summary>
      <param name="value">The single to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Object)">
      <summary>Writes the text representation of an object, followed by a line terminator, to the text stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Double)">
      <summary>Writes the text representation of a Double, followed by a line terminator, to the text stream.</summary>
      <param name="value">The double to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>Writes the text representation of an integer, followed by a line terminator, to the text stream.</summary>
      <param name="value">The integer to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>Writes a character array, followed by a line terminator, to the text stream.</summary>
      <param name="buffer">The character array to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char)">
      <summary>Writes a character, followed by a line terminator, to the text stream.</summary>
      <param name="value">The character to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>Writes the text representation of a Boolean, followed by a line terminator, to the text stream.</summary>
      <param name="value">The Boolean to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine">
      <summary>Writes a line terminator.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>Writes out a formatted string, followed by a line terminator, using the same semantics as specified.</summary>
      <param name="format">The formatting string to use.</param>
      <param name="arg0">The first object to write into the formatted string.</param>
      <param name="arg1">The second object to write into the formatted string.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>Writes the text representation of an 8-byte integer, followed by a line terminator, to the text stream.</summary>
      <param name="value">The 8-byte integer to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>Writes the specified string to a line without tabs.</summary>
      <param name="s">The string to write.</param>
    </member>
    <member name="T:System.Collections.ArrayList">
      <summary>Implements the <see cref="T:System.Collections.IList"></see> interface using an array whose size is dynamically increased as required.</summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ArrayList"></see> class that is empty and has the default initial capacity.</summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ArrayList"></see> class that contains elements copied from the specified collection and that has the same initial capacity as the number of elements copied.</summary>
      <param name="c">The <see cref="T:System.Collections.ICollection"></see> whose elements are copied to the new list.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="c">c</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ArrayList"></see> class that is empty and has the specified initial capacity.</summary>
      <param name="capacity">The number of elements that the new list can initially store.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
      <summary>Creates an <see cref="T:System.Collections.ArrayList"></see> wrapper for a specific <see cref="T:System.Collections.IList"></see>.</summary>
      <param name="list">The <see cref="T:System.Collections.IList"></see> to wrap.</param>
      <returns>The <see cref="System.Collections.ArrayList"></see> wrapper around the <see cref="System.Collections.IList"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="list">list</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Add(System.Object)">
      <summary>Adds an object to the end of the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to be added to the end of the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <returns>The <see cref="System.Collections.ArrayList"></see> index at which the <paramref name="value">value</paramref> has been added.</returns>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.ArrayList"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
      <summary>Adds the elements of an <see cref="T:System.Collections.ICollection"></see> to the end of the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="c">The <see cref="T:System.Collections.ICollection"></see> whose elements should be added to the end of the <see cref="T:System.Collections.ArrayList"></see>. The collection itself cannot be null, but it can contain elements that are null.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="c">c</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.ArrayList"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object)">
      <summary>Searches the entire sorted <see cref="T:System.Collections.ArrayList"></see> for an element using the default comparer and returns the zero-based index of the element.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate. The value can be null.</param>
      <returns>The zero-based index of <paramref name="value">value</paramref> in the sorted <see cref="System.Collections.ArrayList"></see>, if <paramref name="value">value</paramref> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <paramref name="value">value</paramref> or, if there is no larger element, the bitwise complement of <see cref="System.Collections.ArrayList.Count"></see>.</returns>
      <exception cref="T:System.ArgumentException">Neither <paramref name="value">value</paramref> nor the elements of <see cref="System.Collections.ArrayList"></see> implement the <see cref="System.IComparable"></see> interface.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="value">value</paramref> is not of the same type as the elements of the <see cref="System.Collections.ArrayList"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
      <summary>Searches the entire sorted <see cref="T:System.Collections.ArrayList"></see> for an element using the specified comparer and returns the zero-based index of the element.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate. The value can be null.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> implementation to use when comparing elements.  
 -or-  
 null to use the default comparer that is the <see cref="T:System.IComparable"></see> implementation of each element.</param>
      <returns>The zero-based index of <paramref name="value">value</paramref> in the sorted <see cref="System.Collections.ArrayList"></see>, if <paramref name="value">value</paramref> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <paramref name="value">value</paramref> or, if there is no larger element, the bitwise complement of <see cref="System.Collections.ArrayList.Count"></see>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="comparer">comparer</paramref> is null and neither <paramref name="value">value</paramref> nor the elements of <see cref="System.Collections.ArrayList"></see> implement the <see cref="System.IComparable"></see> interface.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="comparer">comparer</paramref> is null and <paramref name="value">value</paramref> is not of the same type as the elements of the <see cref="System.Collections.ArrayList"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>Searches a range of elements in the sorted <see cref="T:System.Collections.ArrayList"></see> for an element using the specified comparer and returns the zero-based index of the element.</summary>
      <param name="index">The zero-based starting index of the range to search.</param>
      <param name="count">The length of the range to search.</param>
      <param name="value">The <see cref="T:System.Object"></see> to locate. The value can be null.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> implementation to use when comparing elements.  
 -or-  
 null to use the default comparer that is the <see cref="T:System.IComparable"></see> implementation of each element.</param>
      <returns>The zero-based index of <paramref name="value">value</paramref> in the sorted <see cref="System.Collections.ArrayList"></see>, if <paramref name="value">value</paramref> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <paramref name="value">value</paramref> or, if there is no larger element, the bitwise complement of <see cref="System.Collections.ArrayList.Count"></see>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not denote a valid range in the <see cref="System.Collections.ArrayList"></see>.  
 -or-  
 <paramref name="comparer">comparer</paramref> is null and neither <paramref name="value">value</paramref> nor the elements of <see cref="System.Collections.ArrayList"></see> implement the <see cref="System.IComparable"></see> interface.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="comparer">comparer</paramref> is null and <paramref name="value">value</paramref> is not of the same type as the elements of the <see cref="System.Collections.ArrayList"></see>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="count">count</paramref> is less than zero.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.Capacity">
      <summary>Gets or sets the number of elements that the <see cref="T:System.Collections.ArrayList"></see> can contain.</summary>
      <returns>The number of elements that the <see cref="System.Collections.ArrayList"></see> can contain.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><see cref="System.Collections.ArrayList.Capacity"></see> is set to a value that is less than <see cref="System.Collections.ArrayList.Count"></see>.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory available on the system.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.ArrayList"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Clone">
      <summary>Creates a shallow copy of the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <returns>A shallow copy of the <see cref="System.Collections.ArrayList"></see>.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.Contains(System.Object)">
      <summary>Determines whether an element is in the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="item">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <returns>true if <paramref name="item">item</paramref> is found in the <see cref="System.Collections.ArrayList"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array)">
      <summary>Copies the entire <see cref="T:System.Collections.ArrayList"></see> to a compatible one-dimensional <see cref="T:System.Array"></see>, starting at the beginning of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ArrayList"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.  
 -or-  
 The number of elements in the source <see cref="System.Collections.ArrayList"></see> is greater than the number of elements that the destination <paramref name="array">array</paramref> can contain.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="System.Collections.ArrayList"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
      <summary>Copies the entire <see cref="T:System.Collections.ArrayList"></see> to a compatible one-dimensional <see cref="T:System.Array"></see>, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ArrayList"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex">arrayIndex</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.  
 -or-  
 The number of elements in the source <see cref="System.Collections.ArrayList"></see> is greater than the available space from <paramref name="arrayIndex">arrayIndex</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="System.Collections.ArrayList"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>Copies a range of elements from the <see cref="T:System.Collections.ArrayList"></see> to a compatible one-dimensional <see cref="T:System.Array"></see>, starting at the specified index of the target array.</summary>
      <param name="index">The zero-based index in the source <see cref="T:System.Collections.ArrayList"></see> at which copying begins.</param>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ArrayList"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
      <param name="count">The number of elements to copy.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="arrayIndex">arrayIndex</paramref> is less than zero.  
 -or-  
 <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.  
 -or-  
 <paramref name="index">index</paramref> is equal to or greater than the <see cref="System.Collections.ArrayList.Count"></see> of the source <see cref="System.Collections.ArrayList"></see>.  
 -or-  
 The number of elements from <paramref name="index">index</paramref> to the end of the source <see cref="System.Collections.ArrayList"></see> is greater than the available space from <paramref name="arrayIndex">arrayIndex</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="System.Collections.ArrayList"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.Count">
      <summary>Gets the number of elements actually contained in the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <returns>The number of elements actually contained in the <see cref="System.Collections.ArrayList"></see>.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
      <summary>Returns an <see cref="T:System.Collections.ArrayList"></see> wrapper with a fixed size.</summary>
      <param name="list">The <see cref="T:System.Collections.ArrayList"></see> to wrap.</param>
      <returns>An <see cref="System.Collections.ArrayList"></see> wrapper with a fixed size.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="list">list</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
      <summary>Returns an <see cref="T:System.Collections.IList"></see> wrapper with a fixed size.</summary>
      <param name="list">The <see cref="T:System.Collections.IList"></see> to wrap.</param>
      <returns>An <see cref="System.Collections.IList"></see> wrapper with a fixed size.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="list">list</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator">
      <summary>Returns an enumerator for the entire <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <returns>An <see cref="System.Collections.IEnumerator"></see> for the entire <see cref="System.Collections.ArrayList"></see>.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
      <summary>Returns an enumerator for a range of elements in the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="index">The zero-based starting index of the <see cref="T:System.Collections.ArrayList"></see> section that the enumerator should refer to.</param>
      <param name="count">The number of elements in the <see cref="T:System.Collections.ArrayList"></see> section that the enumerator should refer to.</param>
      <returns>An <see cref="System.Collections.IEnumerator"></see> for the specified range of elements in the <see cref="System.Collections.ArrayList"></see>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not specify a valid range in the <see cref="System.Collections.ArrayList"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
      <summary>Returns an <see cref="T:System.Collections.ArrayList"></see> which represents a subset of the elements in the source <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="index">The zero-based <see cref="T:System.Collections.ArrayList"></see> index at which the range starts.</param>
      <param name="count">The number of elements in the range.</param>
      <returns>An <see cref="System.Collections.ArrayList"></see> which represents a subset of the elements in the source <see cref="System.Collections.ArrayList"></see>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not denote a valid range of elements in the <see cref="System.Collections.ArrayList"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object)">
      <summary>Searches for the specified <see cref="T:System.Object"></see> and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value">value</paramref> within the entire <see cref="System.Collections.ArrayList"></see>, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
      <summary>Searches for the specified <see cref="T:System.Object"></see> and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.ArrayList"></see> that extends from the specified index to the last element.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value">value</paramref> within the range of elements in the <see cref="System.Collections.ArrayList"></see> that extends from <paramref name="startIndex">startIndex</paramref> to the last element, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> is outside the range of valid indexes for the <see cref="System.Collections.ArrayList"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
      <summary>Searches for the specified <see cref="T:System.Object"></see> and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.ArrayList"></see> that starts at the specified index and contains the specified number of elements.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value">value</paramref> within the range of elements in the <see cref="System.Collections.ArrayList"></see> that starts at <paramref name="startIndex">startIndex</paramref> and contains <paramref name="count">count</paramref> number of elements, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> is outside the range of valid indexes for the <see cref="System.Collections.ArrayList"></see>.  
 -or-  
 <paramref name="count">count</paramref> is less than zero.  
 -or-  
 <paramref name="startIndex">startIndex</paramref> and <paramref name="count">count</paramref> do not specify a valid section in the <see cref="System.Collections.ArrayList"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
      <summary>Inserts an element into the <see cref="T:System.Collections.ArrayList"></see> at the specified index.</summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">The <see cref="T:System.Object"></see> to insert. The value can be null.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="index">index</paramref> is greater than <see cref="System.Collections.ArrayList.Count"></see>.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.ArrayList"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
      <summary>Inserts the elements of a collection into the <see cref="T:System.Collections.ArrayList"></see> at the specified index.</summary>
      <param name="index">The zero-based index at which the new elements should be inserted.</param>
      <param name="c">The <see cref="T:System.Collections.ICollection"></see> whose elements should be inserted into the <see cref="T:System.Collections.ArrayList"></see>. The collection itself cannot be null, but it can contain elements that are null.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="c">c</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="index">index</paramref> is greater than <see cref="System.Collections.ArrayList.Count"></see>.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.ArrayList"></see> has a fixed size.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.ArrayList"></see> has a fixed size.</summary>
      <returns>true if the <see cref="System.Collections.ArrayList"></see> has a fixed size; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Collections.ArrayList.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.ArrayList"></see> is read-only.</summary>
      <returns>true if the <see cref="System.Collections.ArrayList"></see> is read-only; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Collections.ArrayList.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ArrayList"></see> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="System.Collections.ArrayList"></see> is synchronized (thread safe); otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Collections.ArrayList.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="index">index</paramref> is equal to or greater than <see cref="System.Collections.ArrayList.Count"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
      <summary>Searches for the specified <see cref="T:System.Object"></see> and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="value">value</paramref> within the entire the <see cref="System.Collections.ArrayList"></see>, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
      <summary>Searches for the specified <see cref="T:System.Object"></see> and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.ArrayList"></see> that extends from the first element to the specified index.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="value">value</paramref> within the range of elements in the <see cref="System.Collections.ArrayList"></see> that extends from the first element to <paramref name="startIndex">startIndex</paramref>, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> is outside the range of valid indexes for the <see cref="System.Collections.ArrayList"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
      <summary>Searches for the specified <see cref="T:System.Object"></see> and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.ArrayList"></see> that contains the specified number of elements and ends at the specified index.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="value">value</paramref> within the range of elements in the <see cref="System.Collections.ArrayList"></see> that contains <paramref name="count">count</paramref> number of elements and ends at <paramref name="startIndex">startIndex</paramref>, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> is outside the range of valid indexes for the <see cref="System.Collections.ArrayList"></see>.  
 -or-  
 <paramref name="count">count</paramref> is less than zero.  
 -or-  
 <paramref name="startIndex">startIndex</paramref> and <paramref name="count">count</paramref> do not specify a valid section in the <see cref="System.Collections.ArrayList"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
      <summary>Returns a read-only <see cref="T:System.Collections.ArrayList"></see> wrapper.</summary>
      <param name="list">The <see cref="T:System.Collections.ArrayList"></see> to wrap.</param>
      <returns>A read-only <see cref="System.Collections.ArrayList"></see> wrapper around <paramref name="list">list</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="list">list</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
      <summary>Returns a read-only <see cref="T:System.Collections.IList"></see> wrapper.</summary>
      <param name="list">The <see cref="T:System.Collections.IList"></see> to wrap.</param>
      <returns>A read-only <see cref="System.Collections.IList"></see> wrapper around <paramref name="list">list</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="list">list</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="obj">The <see cref="T:System.Object"></see> to remove from the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.ArrayList"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="index">index</paramref> is equal to or greater than <see cref="System.Collections.ArrayList.Count"></see>.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.ArrayList"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
      <summary>Removes a range of elements from the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="index">The zero-based starting index of the range of elements to remove.</param>
      <param name="count">The number of elements to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not denote a valid range of elements in the <see cref="System.Collections.ArrayList"></see>.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.ArrayList"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
      <summary>Returns an <see cref="T:System.Collections.ArrayList"></see> whose elements are copies of the specified value.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to copy multiple times in the new <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <param name="count">The number of times value should be copied.</param>
      <returns>An <see cref="System.Collections.ArrayList"></see> with <paramref name="count">count</paramref> number of elements, all of which are copies of <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count">count</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse">
      <summary>Reverses the order of the elements in the entire <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
      <summary>Reverses the order of the elements in the specified range.</summary>
      <param name="index">The zero-based starting index of the range to reverse.</param>
      <param name="count">The number of elements in the range to reverse.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not denote a valid range of elements in the <see cref="System.Collections.ArrayList"></see>.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
      <summary>Copies the elements of a collection over a range of elements in the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="index">The zero-based <see cref="T:System.Collections.ArrayList"></see> index at which to start copying the elements of c.</param>
      <param name="c">The <see cref="T:System.Collections.ICollection"></see> whose elements to copy to the <see cref="T:System.Collections.ArrayList"></see>. The collection itself cannot be null, but it can contain elements that are null.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="index">index</paramref> plus the number of elements in <paramref name="c">c</paramref> is greater than <see cref="System.Collections.ArrayList.Count"></see>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="c">c</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort">
      <summary>Sorts the elements in the entire <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
      <summary>Sorts the elements in the entire <see cref="T:System.Collections.ArrayList"></see> using the specified comparer.</summary>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> implementation to use when comparing elements.  
 -or-  
 A null reference (Nothing in Visual Basic) to use the <see cref="T:System.IComparable"></see> implementation of each element.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.</exception>
      <exception cref="T:System.InvalidOperationException">An error occurred while comparing two elements.</exception>
      <exception cref="T:System.ArgumentException">null is passed for <paramref name="comparer">comparer</paramref>, and the elements in the list do not implement <see cref="System.IComparable"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>Sorts the elements in a range of elements in <see cref="T:System.Collections.ArrayList"></see> using the specified comparer.</summary>
      <param name="index">The zero-based starting index of the range to sort.</param>
      <param name="count">The length of the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> implementation to use when comparing elements.  
 -or-  
 A null reference (Nothing in Visual Basic) to use the <see cref="T:System.IComparable"></see> implementation of each element.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not specify a valid range in the <see cref="System.Collections.ArrayList"></see>.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.</exception>
      <exception cref="T:System.InvalidOperationException">An error occurred while comparing two elements.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
      <summary>Returns an <see cref="T:System.Collections.ArrayList"></see> wrapper that is synchronized (thread safe).</summary>
      <param name="list">The <see cref="T:System.Collections.ArrayList"></see> to synchronize.</param>
      <returns>An <see cref="System.Collections.ArrayList"></see> wrapper that is synchronized (thread safe).</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="list">list</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
      <summary>Returns an <see cref="T:System.Collections.IList"></see> wrapper that is synchronized (thread safe).</summary>
      <param name="list">The <see cref="T:System.Collections.IList"></see> to synchronize.</param>
      <returns>An <see cref="System.Collections.IList"></see> wrapper that is synchronized (thread safe).</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="list">list</paramref> is null.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="System.Collections.ArrayList"></see>.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray">
      <summary>Copies the elements of the <see cref="T:System.Collections.ArrayList"></see> to a new <see cref="T:System.Object"></see> array.</summary>
      <returns>An <see cref="System.Object"></see> array containing copies of the elements of the <see cref="System.Collections.ArrayList"></see>.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray(System.Type)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ArrayList"></see> to a new array of the specified element type.</summary>
      <param name="type">The element <see cref="T:System.Type"></see> of the destination array to create and copy elements to.</param>
      <returns>An array of the specified element type containing copies of the elements of the <see cref="System.Collections.ArrayList"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> is null.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="System.Collections.ArrayList"></see> cannot be cast automatically to the specified type.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.TrimToSize">
      <summary>Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.ArrayList"></see> has a fixed size.</exception>
    </member>
    <member name="T:System.IO.BinaryReader">
      <summary>Reads primitive data types as binary values in a specific encoding.</summary>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.BinaryReader"></see> class based on the specified stream and using UTF-8 encoding.</summary>
      <param name="input">The input stream.</param>
      <exception cref="T:System.ArgumentException">The stream does not support reading, is null, or is already closed.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.BinaryReader"></see> class based on the specified stream and character encoding.</summary>
      <param name="input">The input stream.</param>
      <param name="encoding">The character encoding to use.</param>
      <exception cref="T:System.ArgumentException">The stream does not support reading, is null, or is already closed.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="encoding">encoding</paramref> is null.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.BinaryReader"></see> class based on the specified stream and character encoding, and optionally leaves the stream open.</summary>
      <param name="input">The input stream.</param>
      <param name="encoding">The character encoding to use.</param>
      <param name="leaveOpen">true to leave the stream open after the <see cref="T:System.IO.BinaryReader"></see> object is disposed; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">The stream does not support reading, is null, or is already closed.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="encoding">encoding</paramref> or <paramref name="input">input</paramref> is null.</exception>
    </member>
    <member name="P:System.IO.BinaryReader.BaseStream">
      <summary>Exposes access to the underlying stream of the <see cref="T:System.IO.BinaryReader"></see>.</summary>
      <returns>The underlying stream associated with the BinaryReader.</returns>
    </member>
    <member name="M:System.IO.BinaryReader.Close">
      <summary>Closes the current reader and the underlying stream.</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.IO.BinaryReader"></see> class.</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.BinaryReader"></see> class and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
      <summary>Fills the internal buffer with the specified number of bytes read from the stream.</summary>
      <param name="numBytes">The number of bytes to be read.</param>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached before <paramref name="numBytes">numBytes</paramref> could be read.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Requested <paramref name="numBytes">numBytes</paramref> is larger than the internal buffer size.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.PeekChar">
      <summary>Returns the next available character and does not advance the byte or character position.</summary>
      <returns>The next available character, or -1 if no more characters are available or the stream does not support seeking.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ArgumentException">The current character cannot be decoded into the internal character buffer by using the <see cref="System.Text.Encoding"></see> selected for the stream.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read">
      <summary>Reads characters from the underlying stream and advances the current position of the stream in accordance with the Encoding used and the specific character being read from the stream.</summary>
      <returns>The next character from the input stream, or -1 if no characters are currently available.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the specified number of bytes from the stream, starting from a specified point in the byte array.</summary>
      <param name="buffer">The buffer to read data into.</param>
      <param name="index">The starting point in the buffer at which to begin reading into the buffer.</param>
      <param name="count">The number of bytes to read.</param>
      <returns>The number of bytes read into <paramref name="buffer">buffer</paramref>. This might be less than the number of bytes requested if that many bytes are not available, or it might be zero if the end of the stream is reached.</returns>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index">index</paramref> is less than <paramref name="count">count</paramref>.  
 -or-  
 The number of decoded characters to read is greater than <paramref name="count">count</paramref>. This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Reads the specified number of characters from the stream, starting from a specified point in the character array.</summary>
      <param name="buffer">The buffer to read data into.</param>
      <param name="index">The starting point in the buffer at which to begin reading into the buffer.</param>
      <param name="count">The number of characters to read.</param>
      <returns>The total number of characters read into the buffer. This might be less than the number of characters requested if that many characters are not currently available, or it might be zero if the end of the stream is reached.</returns>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index">index</paramref> is less than <paramref name="count">count</paramref>.  
 -or-  
 The number of decoded characters to read is greater than <paramref name="count">count</paramref>. This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read7BitEncodedInt">
      <summary>Reads in a 32-bit integer in compressed format.</summary>
      <returns>A 32-bit integer in compressed format.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.FormatException">The stream is corrupted.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBoolean">
      <summary>Reads a Boolean value from the current stream and advances the current position of the stream by one byte.</summary>
      <returns>true if the byte is nonzero; otherwise, false.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadByte">
      <summary>Reads the next byte from the current stream and advances the current position of the stream by one byte.</summary>
      <returns>The next byte read from the current stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
      <summary>Reads the specified number of bytes from the current stream into a byte array and advances the current position by that number of bytes.</summary>
      <param name="count">The number of bytes to read. This value must be 0 or a non-negative number or an exception will occur.</param>
      <returns>A byte array containing data read from the underlying stream. This might be less than the number of bytes requested if the end of the stream is reached.</returns>
      <exception cref="T:System.ArgumentException">The number of decoded characters to read is greater than <paramref name="count">count</paramref>. This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count">count</paramref> is negative.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChar">
      <summary>Reads the next character from the current stream and advances the current position of the stream in accordance with the Encoding used and the specific character being read from the stream.</summary>
      <returns>A character read from the current stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ArgumentException">A surrogate character was read.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChars(System.Int32)">
      <summary>Reads the specified number of characters from the current stream, returns the data in a character array, and advances the current position in accordance with the Encoding used and the specific character being read from the stream.</summary>
      <param name="count">The number of characters to read.</param>
      <returns>A character array containing data read from the underlying stream. This might be less than the number of characters requested if the end of the stream is reached.</returns>
      <exception cref="T:System.ArgumentException">The number of decoded characters to read is greater than <paramref name="count">count</paramref>. This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count">count</paramref> is negative.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDecimal">
      <summary>Reads a decimal value from the current stream and advances the current position of the stream by sixteen bytes.</summary>
      <returns>A decimal value read from the current stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDouble">
      <summary>Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.</summary>
      <returns>An 8-byte floating point value read from the current stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt16">
      <summary>Reads a 2-byte signed integer from the current stream and advances the current position of the stream by two bytes.</summary>
      <returns>A 2-byte signed integer read from the current stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt32">
      <summary>Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.</summary>
      <returns>A 4-byte signed integer read from the current stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt64">
      <summary>Reads an 8-byte signed integer from the current stream and advances the current position of the stream by eight bytes.</summary>
      <returns>An 8-byte signed integer read from the current stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSByte">
      <summary>Reads a signed byte from this stream and advances the current position of the stream by one byte.</summary>
      <returns>A signed byte read from the current stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSingle">
      <summary>Reads a 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.</summary>
      <returns>A 4-byte floating point value read from the current stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadString">
      <summary>Reads a string from the current stream. The string is prefixed with the length, encoded as an integer seven bits at a time.</summary>
      <returns>The string being read.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt16">
      <summary>Reads a 2-byte unsigned integer from the current stream using little-endian encoding and advances the position of the stream by two bytes.</summary>
      <returns>A 2-byte unsigned integer read from this stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt32">
      <summary>Reads a 4-byte unsigned integer from the current stream and advances the position of the stream by four bytes.</summary>
      <returns>A 4-byte unsigned integer read from this stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt64">
      <summary>Reads an 8-byte unsigned integer from the current stream and advances the position of the stream by eight bytes.</summary>
      <returns>An 8-byte unsigned integer read from this stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="T:System.IO.BinaryWriter">
      <summary>Writes primitive types in binary to a stream and supports writing strings in a specific encoding.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.BinaryWriter"></see> class that writes to a stream.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.BinaryWriter"></see> class based on the specified stream and using UTF-8 encoding.</summary>
      <param name="output">The output stream.</param>
      <exception cref="T:System.ArgumentException">The stream does not support writing or is already closed.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="output">output</paramref> is null.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.BinaryWriter"></see> class based on the specified stream and character encoding.</summary>
      <param name="output">The output stream.</param>
      <param name="encoding">The character encoding to use.</param>
      <exception cref="T:System.ArgumentException">The stream does not support writing or is already closed.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="output">output</paramref> or <paramref name="encoding">encoding</paramref> is null.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.BinaryWriter"></see> class based on the specified stream and character encoding, and optionally leaves the stream open.</summary>
      <param name="output">The output stream.</param>
      <param name="encoding">The character encoding to use.</param>
      <param name="leaveOpen">true to leave the stream open after the <see cref="T:System.IO.BinaryWriter"></see> object is disposed; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">The stream does not support writing or is already closed.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="output">output</paramref> or <paramref name="encoding">encoding</paramref> is null.</exception>
    </member>
    <member name="P:System.IO.BinaryWriter.BaseStream">
      <summary>Gets the underlying stream of the <see cref="T:System.IO.BinaryWriter"></see>.</summary>
      <returns>The underlying stream associated with the BinaryWriter.</returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Close">
      <summary>Closes the current <see cref="T:System.IO.BinaryWriter"></see> and the underlying stream.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.IO.BinaryWriter"></see> class.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.BinaryWriter"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Flush">
      <summary>Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</summary>
    </member>
    <member name="F:System.IO.BinaryWriter.Null">
      <summary>Specifies a <see cref="T:System.IO.BinaryWriter"></see> with no backing store.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.BinaryWriter.OutStream">
      <summary>Holds the underlying stream.</summary>
      <returns></returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
      <summary>Sets the position within the current stream.</summary>
      <param name="offset">A byte offset relative to origin.</param>
      <param name="origin">A field of <see cref="T:System.IO.SeekOrigin"></see> indicating the reference point from which the new position is to be obtained.</param>
      <returns>The position with the current stream.</returns>
      <exception cref="T:System.IO.IOException">The file pointer was moved to an invalid location.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="System.IO.SeekOrigin"></see> value is invalid.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a region of a byte array to the current stream.</summary>
      <param name="buffer">A byte array containing the data to write.</param>
      <param name="index">The starting point in buffer at which to begin writing.</param>
      <param name="count">The number of bytes to write.</param>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index">index</paramref> is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt64)">
      <summary>Writes an eight-byte unsigned integer to the current stream and advances the stream position by eight bytes.</summary>
      <param name="value">The eight-byte unsigned integer to write.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt32)">
      <summary>Writes a four-byte unsigned integer to the current stream and advances the stream position by four bytes.</summary>
      <param name="value">The four-byte unsigned integer to write.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt16)">
      <summary>Writes a two-byte unsigned integer to the current stream and advances the stream position by two bytes.</summary>
      <param name="value">The two-byte unsigned integer to write.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.String)">
      <summary>Writes a length-prefixed string to this stream in the current encoding of the <see cref="T:System.IO.BinaryWriter"></see>, and advances the current position of the stream in accordance with the encoding used and the specific characters being written to the stream.</summary>
      <param name="value">The value to write.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Single)">
      <summary>Writes a four-byte floating-point value to the current stream and advances the stream position by four bytes.</summary>
      <param name="value">The four-byte floating-point value to write.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.SByte)">
      <summary>Writes a signed byte to the current stream and advances the stream position by one byte.</summary>
      <param name="value">The signed byte to write.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int64)">
      <summary>Writes an eight-byte signed integer to the current stream and advances the stream position by eight bytes.</summary>
      <param name="value">The eight-byte signed integer to write.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char)">
      <summary>Writes a Unicode character to the current stream and advances the current position of the stream in accordance with the Encoding used and the specific characters being written to the stream.</summary>
      <param name="ch">The non-surrogate, Unicode character to write.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="ch">ch</paramref> is a single surrogate character.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int16)">
      <summary>Writes a two-byte signed integer to the current stream and advances the stream position by two bytes.</summary>
      <param name="value">The two-byte signed integer to write.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Double)">
      <summary>Writes an eight-byte floating-point value to the current stream and advances the stream position by eight bytes.</summary>
      <param name="value">The eight-byte floating-point value to write.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Decimal)">
      <summary>Writes a decimal value to the current stream and advances the stream position by sixteen bytes.</summary>
      <param name="value">The decimal value to write.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[])">
      <summary>Writes a character array to the current stream and advances the current position of the stream in accordance with the Encoding used and the specific characters being written to the stream.</summary>
      <param name="chars">A character array containing the data to write.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="chars">chars</paramref> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a section of a character array to the current stream, and advances the current position of the stream in accordance with the Encoding used and perhaps the specific characters being written to the stream.</summary>
      <param name="chars">A character array containing the data to write.</param>
      <param name="index">The starting point in chars from which to begin writing.</param>
      <param name="count">The number of characters to write.</param>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index">index</paramref> is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="chars">chars</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[])">
      <summary>Writes a byte array to the underlying stream.</summary>
      <param name="buffer">A byte array containing the data to write.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte)">
      <summary>Writes an unsigned byte to the current stream and advances the stream position by one byte.</summary>
      <param name="value">The unsigned byte to write.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Boolean)">
      <summary>Writes a one-byte Boolean value to the current stream, with 0 representing false and 1 representing true.</summary>
      <param name="value">The Boolean value to write (0 or 1).</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int32)">
      <summary>Writes a four-byte signed integer to the current stream and advances the stream position by four bytes.</summary>
      <param name="value">The four-byte signed integer to write.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
      <summary>Writes a 32-bit integer in a compressed format.</summary>
      <param name="value">The 32-bit integer to be written.</param>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">The stream is closed.</exception>
    </member>
    <member name="T:System.IO.BufferedStream">
      <summary>Adds a buffering layer to read and write operations on another stream. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IO.BufferedStream.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.BufferedStream"></see> class with a default buffer size of 4096 bytes.</summary>
      <param name="stream">The current stream.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> is null.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.BufferedStream"></see> class with the specified buffer size.</summary>
      <param name="stream">The current stream.</param>
      <param name="bufferSize">The buffer size in bytes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize">bufferSize</paramref> is negative.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous read operation. (Consider using <see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"></see> instead.)</summary>
      <param name="buffer">The buffer to read the data into.</param>
      <param name="offset">The byte offset in buffer at which to begin writing data read from the stream.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
      <returns>An object that represents the asynchronous read, which could still be pending.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.IO.IOException">Attempted an asynchronous read past the end of the stream.</exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="offset">offset</paramref> is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.NotSupportedException">The current stream does not support the read operation.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous write operation. (Consider using <see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"></see> instead.)</summary>
      <param name="buffer">The buffer containing data to write to the current stream.</param>
      <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <param name="callback">The method to be called when the asynchronous write operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
      <returns>An object that references the asynchronous write which could still be pending.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="buffer">buffer</paramref> length minus <paramref name="offset">offset</paramref> is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
    </member>
    <member name="P:System.IO.BufferedStream.BufferSize">
      <returns></returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanRead">
      <summary>Gets a value indicating whether the current stream supports reading.</summary>
      <returns>true if the stream supports reading; false if the stream is closed or was opened with write-only access.</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanSeek">
      <summary>Gets a value indicating whether the current stream supports seeking.</summary>
      <returns>true if the stream supports seeking; false if the stream is closed or if the stream was constructed from an operating system handle such as a pipe or output to the console.</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanWrite">
      <summary>Gets a value indicating whether the current stream supports writing.</summary>
      <returns>true if the stream supports writing; false if the stream is closed or was opened with read-only access.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous read operation to complete. (Consider using <see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"></see> instead.)</summary>
      <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
      <returns>The number of bytes read from the stream, between 0 (zero) and the number of bytes you requested. Streams only return 0 only at the end of the stream, otherwise, they should block until at least 1 byte is available.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">This <see cref="System.IAsyncResult"></see> object was not created by calling <see cref="System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see> on this class.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
      <summary>Ends an asynchronous write operation and blocks until the I/O operation is complete. (Consider using <see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"></see> instead.)</summary>
      <param name="asyncResult">The pending asynchronous request.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">This <see cref="System.IAsyncResult"></see> object was not created by calling <see cref="System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see> on this class.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Flush">
      <summary>Clears all buffers for this stream and causes any buffered data to be written to the underlying device.</summary>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
      <exception cref="T:System.IO.IOException">The data source or repository is not open.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</summary>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
      <returns>A task that represents the asynchronous flush operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
    </member>
    <member name="P:System.IO.BufferedStream.Length">
      <summary>Gets the stream length in bytes.</summary>
      <returns>The stream length in bytes.</returns>
      <exception cref="T:System.IO.IOException">The underlying stream is null or closed.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support seeking.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
    </member>
    <member name="P:System.IO.BufferedStream.Position">
      <summary>Gets the position within the current stream.</summary>
      <returns>The position within the current stream.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value passed to <see cref="System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)"></see> is negative.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as the stream being closed.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support seeking.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Copies bytes from the current buffered stream to an array.</summary>
      <param name="array">The buffer to which bytes are to be copied.</param>
      <param name="offset">The byte offset in the buffer at which to begin reading bytes.</param>
      <param name="count">The number of bytes to be read.</param>
      <returns>The total number of bytes read into <paramref name="array">array</paramref>. This can be less than the number of bytes requested if that many bytes are not currently available, or 0 if the end of the stream has been reached before any data can be read.</returns>
      <exception cref="T:System.ArgumentException">Length of <paramref name="array">array</paramref> minus <paramref name="offset">offset</paramref> is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.IO.IOException">The stream is not open or is null.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</summary>
      <param name="buffer">The buffer to write the data into.</param>
      <param name="offset">The byte offset in buffer at which to begin writing data from the stream.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
      <returns>A task that represents the asynchronous read operation. The value of the <paramref name="TResult">TResult</paramref> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="offset">offset</paramref> and <paramref name="count">count</paramref> is larger than the buffer length.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is currently in use by a previous read operation.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.ReadByte">
      <summary>Reads a byte from the underlying stream and returns the byte cast to an int, or returns -1 if reading from the end of the stream.</summary>
      <returns>The byte cast to an int, or -1 if reading from the end of the stream.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as the stream being closed.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the position within the current buffered stream.</summary>
      <param name="offset">A byte offset relative to origin.</param>
      <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"></see> indicating the reference point from which to obtain the new position.</param>
      <returns>The new position within the current buffered stream.</returns>
      <exception cref="T:System.IO.IOException">The stream is not open or is null.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support seeking.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.SetLength(System.Int64)">
      <summary>Sets the length of the buffered stream.</summary>
      <param name="value">An integer indicating the desired length of the current buffered stream in bytes.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value">value</paramref> is negative.</exception>
      <exception cref="T:System.IO.IOException">The stream is not open or is null.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
    </member>
    <member name="P:System.IO.BufferedStream.UnderlyingStream">
      <returns></returns>
    </member>
    <member name="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Copies bytes to the buffered stream and advances the current position within the buffered stream by the number of bytes written.</summary>
      <param name="array">The byte array from which to copy count bytes to the current buffered stream.</param>
      <param name="offset">The offset in the buffer at which to begin copying bytes to the current buffered stream.</param>
      <param name="count">The number of bytes to be written to the current buffered stream.</param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="array">array</paramref> minus <paramref name="offset">offset</paramref> is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.IO.IOException">The stream is closed or null.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</summary>
      <param name="buffer">The buffer to write data from.</param>
      <param name="offset">The zero-based byte offset in buffer from which to begin copying bytes to the stream.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="offset">offset</paramref> and <paramref name="count">count</paramref> is larger than the buffer length.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.WriteByte(System.Byte)">
      <summary>Writes a byte to the current position in the buffered stream.</summary>
      <param name="value">A byte to write to the stream.</param>
      <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
    </member>
    <member name="T:System.IO.EndOfStreamException">
      <summary>The exception that is thrown when reading is attempted past the end of a stream.</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.EndOfStreamException"></see> class with its message string set to a system-supplied message and its HRESULT set to COR_E_ENDOFSTREAM.</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.EndOfStreamException"></see> class with its message string set to <paramref name="message">message</paramref> and its HRESULT set to COR_E_ENDOFSTREAM.</summary>
      <param name="message">A string that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.EndOfStreamException"></see> class with the specified serialization and context information.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.EndOfStreamException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A string that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.IO.InvalidDataException">
      <summary>The exception that is thrown when a data stream is in an invalid format.</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.InvalidDataException"></see> class.</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.InvalidDataException"></see> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.InvalidDataException"></see> class with a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Globalization.GlobalizationExtensions">
      <summary>Provides globalization-related extension methods.</summary>
    </member>
    <member name="M:System.Globalization.GlobalizationExtensions.GetStringComparer(System.Globalization.CompareInfo,System.Globalization.CompareOptions)">
      <summary>Returns a <see cref="T:System.StringComparer"></see> object based on the culture-sensitive string comparison rules of a specified <see cref="T:System.Globalization.CompareInfo"></see> object.</summary>
      <param name="compareInfo">An object that supports culture-sensitive string comparison.</param>
      <param name="options">A value that defines how strings should be compared. <paramref name="options">options</paramref> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal"></see>, the enumeration value <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase"></see>, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase"></see>, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"></see>, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"></see>, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth"></see>, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"></see>, and <see cref="F:System.Globalization.CompareOptions.StringSort"></see>.</param>
      <returns>An object that can be used to perform string comparisons.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="compareInfo">compareInfo</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="options">options</paramref> is invalid.</exception>
    </member>
    <member name="T:System.IO.Path">
      <summary>Performs operations on <see cref="T:System.String"></see> instances that contain file or directory path information. These operations are performed in a cross-platform manner.</summary>
    </member>
    <member name="F:System.IO.Path.AltDirectorySeparatorChar">
      <summary>Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
      <returns></returns>
    </member>
    <member name="M:System.IO.Path.ChangeExtension(System.String,System.String)">
      <summary>Changes the extension of a path string.</summary>
      <param name="path">The path information to modify. The path cannot contain any of the characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"></see>.</param>
      <param name="extension">The new extension (with or without a leading period). Specify null to remove an existing extension from path.</param>
      <returns>The modified path information.  
 On Windows-based desktop platforms, if <paramref name="path">path</paramref> is null or an empty string (&amp;quot;&amp;quot;), the path information is returned unmodified. If <paramref name="extension">extension</paramref> is null, the returned string contains the specified path with its extension removed. If <paramref name="path">path</paramref> has no extension, and <paramref name="extension">extension</paramref> is not null, the returned path string contains <paramref name="extension">extension</paramref> appended to the end of <paramref name="path">path</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="path">path</paramref> contains one or more of the invalid characters defined in <see cref="System.IO.Path.GetInvalidPathChars"></see>.</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String[])">
      <summary>Combines an array of strings into a path.</summary>
      <param name="paths">An array of parts of the path.</param>
      <returns>The combined paths.</returns>
      <exception cref="T:System.ArgumentException">One of the strings in the array contains one or more of the invalid characters defined in <see cref="System.IO.Path.GetInvalidPathChars"></see>.</exception>
      <exception cref="T:System.ArgumentNullException">One of the strings in the array is null.</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String)">
      <summary>Combines two strings into a path.</summary>
      <param name="path1">The first path to combine.</param>
      <param name="path2">The second path to combine.</param>
      <returns>The combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If <paramref name="path2">path2</paramref> contains an absolute path, this method returns <paramref name="path2">path2</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="path1">path1</paramref> or <paramref name="path2">path2</paramref> contains one or more of the invalid characters defined in <see cref="System.IO.Path.GetInvalidPathChars"></see>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="path1">path1</paramref> or <paramref name="path2">path2</paramref> is null.</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String)">
      <summary>Combines three strings into a path.</summary>
      <param name="path1">The first path to combine.</param>
      <param name="path2">The second path to combine.</param>
      <param name="path3">The third path to combine.</param>
      <returns>The combined paths.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="path1">path1</paramref>, <paramref name="path2">path2</paramref>, or <paramref name="path3">path3</paramref> contains one or more of the invalid characters defined in <see cref="System.IO.Path.GetInvalidPathChars"></see>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="path1">path1</paramref>, <paramref name="path2">path2</paramref>, or <paramref name="path3">path3</paramref> is null.</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String,System.String)">
      <summary>Combines four strings into a path.</summary>
      <param name="path1">The first path to combine.</param>
      <param name="path2">The second path to combine.</param>
      <param name="path3">The third path to combine.</param>
      <param name="path4">The fourth path to combine.</param>
      <returns>The combined paths.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="path1">path1</paramref>, <paramref name="path2">path2</paramref>, <paramref name="path3">path3</paramref>, or <paramref name="path4">path4</paramref> contains one or more of the invalid characters defined in <see cref="System.IO.Path.GetInvalidPathChars"></see>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="path1">path1</paramref>, <paramref name="path2">path2</paramref>, <paramref name="path3">path3</paramref>, or <paramref name="path4">path4</paramref> is null.</exception>
    </member>
    <member name="F:System.IO.Path.DirectorySeparatorChar">
      <summary>Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
      <returns></returns>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.String)">
      <summary>Returns the directory information for the specified path string.</summary>
      <param name="path">The path of a file or directory.</param>
      <returns>Directory information for <paramref name="path">path</paramref>, or null if <paramref name="path">path</paramref> denotes a root directory or is null. Returns <see cref="System.String.Empty"></see> if <paramref name="path">path</paramref> does not contain directory information.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="path">path</paramref> parameter contains invalid characters, is empty, or contains only white spaces.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        
 In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="System.IO.IOException"></see>, instead.  


      

 The <paramref name="path">path</paramref> parameter is longer than the system-defined maximum length.</exception>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.String)">
      <summary>Returns the extension of the specified path string.</summary>
      <param name="path">The path string from which to get the extension.</param>
      <returns>The extension of the specified path (including the period &amp;quot;.&amp;quot;), or null, or <see cref="System.String.Empty"></see>. If <paramref name="path">path</paramref> is null, <see cref="System.IO.Path.GetExtension(System.String)"></see> returns null. If <paramref name="path">path</paramref> does not have extension information, <see cref="System.IO.Path.GetExtension(System.String)"></see> returns <see cref="System.String.Empty"></see>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="path">path</paramref> contains one or more of the invalid characters defined in <see cref="System.IO.Path.GetInvalidPathChars"></see>.</exception>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.String)">
      <summary>Returns the file name and extension of the specified path string.</summary>
      <param name="path">The path string from which to obtain the file name and extension.</param>
      <returns>The characters after the last directory character in <paramref name="path">path</paramref>. If the last character of <paramref name="path">path</paramref> is a directory or volume separator character, this method returns <see cref="System.String.Empty"></see>. If <paramref name="path">path</paramref> is null, this method returns null.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="path">path</paramref> contains one or more of the invalid characters defined in <see cref="System.IO.Path.GetInvalidPathChars"></see>.</exception>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.String)">
      <summary>Returns the file name of the specified path string without the extension.</summary>
      <param name="path">The path of the file.</param>
      <returns>The string returned by <see cref="System.IO.Path.GetFileName(System.String)"></see>, minus the last period (.) and all characters following it.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="path">path</paramref> contains one or more of the invalid characters defined in <see cref="System.IO.Path.GetInvalidPathChars"></see>.</exception>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String)">
      <summary>Returns the absolute path for the specified path string.</summary>
      <param name="path">The file or directory for which to obtain absolute path information.</param>
      <returns>The fully qualified location of <paramref name="path">path</paramref>, such as &amp;quot;C:\MyFile.txt&amp;quot;.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="path">path</paramref> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <see cref="System.IO.Path.GetInvalidPathChars"></see>.  
 -or-  
 The system could not retrieve the absolute path.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="path">path</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="path">path</paramref> contains a colon (&amp;quot;:&amp;quot;) that is not part of a volume identifier (for example, &amp;quot;c:\&amp;quot;).</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
    </member>
    <member name="M:System.IO.Path.GetInvalidFileNameChars">
      <summary>Gets an array containing the characters that are not allowed in file names.</summary>
      <returns>An array containing the characters that are not allowed in file names.</returns>
    </member>
    <member name="M:System.IO.Path.GetInvalidPathChars">
      <summary>Gets an array containing the characters that are not allowed in path names.</summary>
      <returns>An array containing the characters that are not allowed in path names.</returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.String)">
      <summary>Gets the root directory information of the specified path.</summary>
      <param name="path">The path from which to obtain root directory information.</param>
      <returns>The root directory of <paramref name="path">path</paramref>, such as &amp;quot;C:\&amp;quot;, or null if <paramref name="path">path</paramref> is null, or an empty string if <paramref name="path">path</paramref> does not contain root directory information.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="path">path</paramref> contains one or more of the invalid characters defined in <see cref="System.IO.Path.GetInvalidPathChars"></see>.  
 -or-  
 <see cref="System.String.Empty"></see> was passed to <paramref name="path">path</paramref>.</exception>
    </member>
    <member name="M:System.IO.Path.GetRandomFileName">
      <summary>Returns a random folder name or file name.</summary>
      <returns>A random folder name or file name.</returns>
    </member>
    <member name="M:System.IO.Path.GetRelativePath(System.String,System.String)">
      <param name="relativeTo"></param>
      <param name="path"></param>
      <returns></returns>
    </member>
    <member name="M:System.IO.Path.GetTempFileName">
      <summary>Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</summary>
      <returns>The full path of the temporary file.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as no unique temporary file name is available.  
 - or -  
 This method was unable to create a temporary file.</exception>
    </member>
    <member name="M:System.IO.Path.GetTempPath">
      <summary>Returns the path of the current user&amp;#39;s temporary folder.</summary>
      <returns>The path to the temporary folder, ending with a backslash.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.String)">
      <summary>Determines whether a path includes a file name extension.</summary>
      <param name="path">The path to search for an extension.</param>
      <returns>true if the characters that follow the last directory separator (\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="path">path</paramref> contains one or more of the invalid characters defined in <see cref="System.IO.Path.GetInvalidPathChars"></see>.</exception>
    </member>
    <member name="F:System.IO.Path.InvalidPathChars">
      <summary>Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the <see cref="T:System.IO.Path"></see> class.</summary>
      <returns></returns>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.String)">
      <summary>Gets a value indicating whether the specified path string contains a root.</summary>
      <param name="path">The path to test.</param>
      <returns>true if <paramref name="path">path</paramref> contains a root; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="path">path</paramref> contains one or more of the invalid characters defined in <see cref="System.IO.Path.GetInvalidPathChars"></see>.</exception>
    </member>
    <member name="F:System.IO.Path.PathSeparator">
      <summary>A platform-specific separator character used to separate path strings in environment variables.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Path.VolumeSeparatorChar">
      <summary>Provides a platform-specific volume separator character.</summary>
      <returns></returns>
    </member>
    <member name="T:System.IO.StreamReader">
      <summary>Implements a <see cref="T:System.IO.TextReader"></see> that reads characters from a byte stream in a particular encoding.</summary>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader"></see> class for the specified stream.</summary>
      <param name="stream">The stream to be read.</param>
      <exception cref="T:System.ArgumentException"><paramref name="stream">stream</paramref> does not support reading.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> is null.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader"></see> class for the specified file name.</summary>
      <param name="path">The complete file path to be read.</param>
      <exception cref="T:System.ArgumentException"><paramref name="path">path</paramref> is an empty string (&amp;quot;&amp;quot;).</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="path">path</paramref> is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException"><paramref name="path">path</paramref> includes an incorrect or invalid syntax for file name, directory name, or volume label.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader"></see> class for the specified stream, with the specified byte order mark detection option.</summary>
      <param name="stream">The stream to be read.</param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
      <exception cref="T:System.ArgumentException"><paramref name="stream">stream</paramref> does not support reading.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> is null.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader"></see> class for the specified stream, with the specified character encoding.</summary>
      <param name="stream">The stream to be read.</param>
      <param name="encoding">The character encoding to use.</param>
      <exception cref="T:System.ArgumentException"><paramref name="stream">stream</paramref> does not support reading.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> or <paramref name="encoding">encoding</paramref> is null.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader"></see> class for the specified file name, with the specified byte order mark detection option.</summary>
      <param name="path">The complete file path to be read.</param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
      <exception cref="T:System.ArgumentException"><paramref name="path">path</paramref> is an empty string (&amp;quot;&amp;quot;).</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="path">path</paramref> is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.IOException"><paramref name="path">path</paramref> includes an incorrect or invalid syntax for file name, directory name, or volume label.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader"></see> class for the specified file name, with the specified character encoding.</summary>
      <param name="path">The complete file path to be read.</param>
      <param name="encoding">The character encoding to use.</param>
      <exception cref="T:System.ArgumentException"><paramref name="path">path</paramref> is an empty string (&amp;quot;&amp;quot;).</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="path">path</paramref> or <paramref name="encoding">encoding</paramref> is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="path">path</paramref> includes an incorrect or invalid syntax for file name, directory name, or volume label.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader"></see> class for the specified stream, with the specified character encoding and byte order mark detection option.</summary>
      <param name="stream">The stream to be read.</param>
      <param name="encoding">The character encoding to use.</param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
      <exception cref="T:System.ArgumentException"><paramref name="stream">stream</paramref> does not support reading.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> or <paramref name="encoding">encoding</paramref> is null.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader"></see> class for the specified file name, with the specified character encoding and byte order mark detection option.</summary>
      <param name="path">The complete file path to be read.</param>
      <param name="encoding">The character encoding to use.</param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
      <exception cref="T:System.ArgumentException"><paramref name="path">path</paramref> is an empty string (&amp;quot;&amp;quot;).</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="path">path</paramref> or <paramref name="encoding">encoding</paramref> is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="path">path</paramref> includes an incorrect or invalid syntax for file name, directory name, or volume label.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader"></see> class for the specified stream, with the specified character encoding, byte order mark detection option, and buffer size.</summary>
      <param name="stream">The stream to be read.</param>
      <param name="encoding">The character encoding to use.</param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
      <param name="bufferSize">The minimum buffer size.</param>
      <exception cref="T:System.ArgumentException">The stream does not support reading.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> or <paramref name="encoding">encoding</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize">bufferSize</paramref> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader"></see> class for the specified file name, with the specified character encoding, byte order mark detection option, and buffer size.</summary>
      <param name="path">The complete file path to be read.</param>
      <param name="encoding">The character encoding to use.</param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
      <param name="bufferSize">The minimum buffer size, in number of 16-bit characters.</param>
      <exception cref="T:System.ArgumentException"><paramref name="path">path</paramref> is an empty string (&amp;quot;&amp;quot;).</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="path">path</paramref> or <paramref name="encoding">encoding</paramref> is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="path">path</paramref> includes an incorrect or invalid syntax for file name, directory name, or volume label.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="buffersize">buffersize</paramref> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader"></see> class for the specified stream based on the specified character encoding, byte order mark detection option, and buffer size, and optionally leaves the stream open.</summary>
      <param name="stream">The stream to read.</param>
      <param name="encoding">The character encoding to use.</param>
      <param name="detectEncodingFromByteOrderMarks">true to look for byte order marks at the beginning of the file; otherwise, false.</param>
      <param name="bufferSize">The minimum buffer size.</param>
      <param name="leaveOpen">true to leave the stream open after the <see cref="T:System.IO.StreamReader"></see> object is disposed; otherwise, false.</param>
    </member>
    <member name="P:System.IO.StreamReader.BaseStream">
      <summary>Returns the underlying stream.</summary>
      <returns>The underlying stream.</returns>
    </member>
    <member name="M:System.IO.StreamReader.Close">
      <summary>Closes the <see cref="T:System.IO.StreamReader"></see> object and the underlying stream, and releases any system resources associated with the reader.</summary>
    </member>
    <member name="P:System.IO.StreamReader.CurrentEncoding">
      <summary>Gets the current character encoding that the current <see cref="T:System.IO.StreamReader"></see> object is using.</summary>
      <returns>The current character encoding used by the current reader. The value can be different after the first call to any <see cref="System.IO.StreamReader.Read*"></see> method of <see cref="System.IO.StreamReader"></see>, since encoding autodetection is not done until the first call to a <see cref="System.IO.StreamReader.Read*"></see> method.</returns>
    </member>
    <member name="M:System.IO.StreamReader.DiscardBufferedData">
      <summary>Clears the internal buffer.</summary>
    </member>
    <member name="M:System.IO.StreamReader.Dispose(System.Boolean)">
      <summary>Closes the underlying stream, releases the unmanaged resources used by the <see cref="T:System.IO.StreamReader"></see>, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.IO.StreamReader.EndOfStream">
      <summary>Gets a value that indicates whether the current stream position is at the end of the stream.</summary>
      <returns>true if the current stream position is at the end of the stream; otherwise false.</returns>
      <exception cref="T:System.ObjectDisposedException">The underlying stream has been disposed.</exception>
    </member>
    <member name="F:System.IO.StreamReader.Null">
      <summary>A <see cref="T:System.IO.StreamReader"></see> object around an empty stream.</summary>
      <returns></returns>
    </member>
    <member name="M:System.IO.StreamReader.Peek">
      <summary>Returns the next available character but does not consume it.</summary>
      <returns>An integer representing the next character to be read, or -1 if there are no characters to be read or if the stream does not support seeking.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read">
      <summary>Reads the next character from the input stream and advances the character position by one character.</summary>
      <returns>The next character from the input stream represented as an <see cref="System.Int32"></see> object, or -1 if no more characters are available.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a specified maximum of characters from the current stream into a buffer, beginning at the specified index.</summary>
      <param name="buffer">When this method returns, contains the specified character array with the values between index and (index + count - 1) replaced by the characters read from the current source.</param>
      <param name="index">The index of buffer at which to begin writing.</param>
      <param name="count">The maximum number of characters to read.</param>
      <returns>The number of characters that have been read, or 0 if at the end of the stream and no data was read. The number will be less than or equal to the <paramref name="count">count</paramref> parameter, depending on whether the data is available within the stream.</returns>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index">index</paramref> is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as the stream is closed.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a specified maximum number of characters from the current stream asynchronously and writes the data to a buffer, beginning at the specified index.</summary>
      <param name="buffer">When this method returns, contains the specified character array with the values between index and (index + count - 1) replaced by the characters read from the current source.</param>
      <param name="index">The position in buffer at which to begin writing.</param>
      <param name="count">The maximum number of characters to read. If the end of the stream is reached before the specified number of characters is written into the buffer, the current method returns.</param>
      <returns>A task that represents the asynchronous read operation. The value of the <paramref name="TResult">TResult</paramref> parameter contains the total number of characters read into the buffer. The result value can be less than the number of characters requested if the number of characters currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="index">index</paramref> and <paramref name="count">count</paramref> is larger than the buffer length.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a specified maximum number of characters from the current stream and writes the data to a buffer, beginning at the specified index.</summary>
      <param name="buffer">When this method returns, contains the specified character array with the values between index and (index + count - 1) replaced by the characters read from the current source.</param>
      <param name="index">The position in buffer at which to begin writing.</param>
      <param name="count">The maximum number of characters to read.</param>
      <returns>The number of characters that have been read. The number will be less than or equal to <paramref name="count">count</paramref>, depending on whether all input characters have been read.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index">index</paramref> is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.StreamReader"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a specified maximum number of characters from the current stream asynchronously and writes the data to a buffer, beginning at the specified index.</summary>
      <param name="buffer">When this method returns, contains the specified character array with the values between index and (index + count - 1) replaced by the characters read from the current source.</param>
      <param name="index">The position in buffer at which to begin writing.</param>
      <param name="count">The maximum number of characters to read. If the end of the stream is reached before the specified number of characters is written into the buffer, the method returns.</param>
      <returns>A task that represents the asynchronous read operation. The value of the <paramref name="TResult">TResult</paramref> parameter contains the total number of characters read into the buffer. The result value can be less than the number of characters requested if the number of characters currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="index">index</paramref> and <paramref name="count">count</paramref> is larger than the buffer length.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadLine">
      <summary>Reads a line of characters from the current stream and returns the data as a string.</summary>
      <returns>The next line from the input stream, or null if the end of the input stream is reached.</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadLineAsync">
      <summary>Reads a line of characters asynchronously from the current stream and returns the data as a string.</summary>
      <returns>A task that represents the asynchronous read operation. The value of the <paramref name="TResult">TResult</paramref> parameter contains the next line from the stream, or is null if all the characters have been read.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of characters in the next line is larger than <see cref="System.Int32.MaxValue"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEnd">
      <summary>Reads all characters from the current position to the end of the stream.</summary>
      <returns>The rest of the stream as a string, from the current position to the end. If the current position is at the end of the stream, returns an empty string (&amp;quot;&amp;quot;).</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEndAsync">
      <summary>Reads all characters from the current position to the end of the stream asynchronously and returns them as one string.</summary>
      <returns>A task that represents the asynchronous read operation. The value of the <paramref name="TResult">TResult</paramref> parameter contains a string with the characters from the current position to the end of the stream.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of characters is larger than <see cref="System.Int32.MaxValue"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
    </member>
    <member name="T:System.IO.StreamWriter">
      <summary>Implements a <see cref="T:System.IO.TextWriter"></see> for writing characters to a stream in a particular encoding.</summary>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamWriter"></see> class for the specified stream by using UTF-8 encoding and the default buffer size.</summary>
      <param name="stream">The stream to write to.</param>
      <exception cref="T:System.ArgumentException"><paramref name="stream">stream</paramref> is not writable.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> is null.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamWriter"></see> class for the specified file by using the default encoding and buffer size.</summary>
      <param name="path">The complete file path to write to. path can be a file name.</param>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="path">path</paramref> is an empty string (&amp;quot;&amp;quot;).  
 -or-  
 <paramref name="path">path</paramref> contains the name of a system device (com1, com2, and so on).</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="path">path</paramref> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</exception>
      <exception cref="T:System.IO.IOException"><paramref name="path">path</paramref> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamWriter"></see> class for the specified stream by using the specified encoding and the default buffer size.</summary>
      <param name="stream">The stream to write to.</param>
      <param name="encoding">The character encoding to use.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> or <paramref name="encoding">encoding</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="stream">stream</paramref> is not writable.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamWriter"></see> class for the specified file by using the default encoding and buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.</summary>
      <param name="path">The complete file path to write to.</param>
      <param name="append">true to append data to the file; false to overwrite the file. If the specified file does not exist, this parameter has no effect, and the constructor creates a new file.</param>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="path">path</paramref> is empty.  
 -or-  
 <paramref name="path">path</paramref> contains the name of a system device (com1, com2, and so on).</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="path">path</paramref> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException"><paramref name="path">path</paramref> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamWriter"></see> class for the specified stream by using the specified encoding and buffer size.</summary>
      <param name="stream">The stream to write to.</param>
      <param name="encoding">The character encoding to use.</param>
      <param name="bufferSize">The buffer size, in bytes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> or <paramref name="encoding">encoding</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize">bufferSize</paramref> is negative.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="stream">stream</paramref> is not writable.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamWriter"></see> class for the specified file by using the specified encoding and default buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.</summary>
      <param name="path">The complete file path to write to.</param>
      <param name="append">true to append data to the file; false to overwrite the file. If the specified file does not exist, this parameter has no effect, and the constructor creates a new file.</param>
      <param name="encoding">The character encoding to use.</param>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="path">path</paramref> is empty.  
 -or-  
 <paramref name="path">path</paramref> contains the name of a system device (com1, com2, and so on).</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="path">path</paramref> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException"><paramref name="path">path</paramref> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamWriter"></see> class for the specified stream by using the specified encoding and buffer size, and optionally leaves the stream open.</summary>
      <param name="stream">The stream to write to.</param>
      <param name="encoding">The character encoding to use.</param>
      <param name="bufferSize">The buffer size, in bytes.</param>
      <param name="leaveOpen">true to leave the stream open after the <see cref="T:System.IO.StreamWriter"></see> object is disposed; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> or <paramref name="encoding">encoding</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize">bufferSize</paramref> is negative.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="stream">stream</paramref> is not writable.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamWriter"></see> class for the specified file on the specified path, using the specified encoding and buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.</summary>
      <param name="path">The complete file path to write to.</param>
      <param name="append">true to append data to the file; false to overwrite the file. If the specified file does not exist, this parameter has no effect, and the constructor creates a new file.</param>
      <param name="encoding">The character encoding to use.</param>
      <param name="bufferSize">The buffer size, in bytes.</param>
      <exception cref="T:System.ArgumentException"><paramref name="path">path</paramref> is an empty string (&amp;quot;&amp;quot;).  
 -or-  
 <paramref name="path">path</paramref> contains the name of a system device (com1, com2, and so on).</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="path">path</paramref> or <paramref name="encoding">encoding</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize">bufferSize</paramref> is negative.</exception>
      <exception cref="T:System.IO.IOException"><paramref name="path">path</paramref> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</exception>
    </member>
    <member name="P:System.IO.StreamWriter.AutoFlush">
      <summary>Gets or sets a value indicating whether the <see cref="T:System.IO.StreamWriter"></see> will flush its buffer to the underlying stream after every call to <see cref="M:System.IO.StreamWriter.Write(System.Char)"></see>.</summary>
      <returns>true to force <see cref="System.IO.StreamWriter"></see> to flush its buffer; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.StreamWriter.BaseStream">
      <summary>Gets the underlying stream that interfaces with a backing store.</summary>
      <returns>The stream this StreamWriter is writing to.</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Close">
      <summary>Closes the current StreamWriter object and the underlying stream.</summary>
      <exception cref="T:System.Text.EncoderFallbackException">The current encoding does not support displaying half of a Unicode surrogate pair.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.StreamWriter"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
      <exception cref="T:System.Text.EncoderFallbackException">The current encoding does not support displaying half of a Unicode surrogate pair.</exception>
    </member>
    <member name="P:System.IO.StreamWriter.Encoding">
      <summary>Gets the <see cref="T:System.Text.Encoding"></see> in which the output is written.</summary>
      <returns>The <see cref="System.Text.Encoding"></see> specified in the constructor for the current instance, or <see cref="System.Text.UTF8Encoding"></see> if an encoding was not specified.</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Flush">
      <summary>Clears all buffers for the current writer and causes any buffered data to be written to the underlying stream.</summary>
      <exception cref="T:System.ObjectDisposedException">The current writer is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error has occurred.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">The current encoding does not support displaying half of a Unicode surrogate pair.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.FlushAsync">
      <summary>Clears all buffers for this stream asynchronously and causes any buffered data to be written to the underlying device.</summary>
      <returns>A task that represents the asynchronous flush operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
    </member>
    <member name="F:System.IO.StreamWriter.Null">
      <summary>Provides a StreamWriter with no backing store that can be written to, but not read from.</summary>
      <returns></returns>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char)">
      <summary>Writes a character to the stream.</summary>
      <param name="value">The character to write to the stream.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException"><see cref="System.IO.StreamWriter.AutoFlush"></see> is true or the <see cref="System.IO.StreamWriter"></see> buffer is full, and current writer is closed.</exception>
      <exception cref="T:System.NotSupportedException"><see cref="System.IO.StreamWriter.AutoFlush"></see> is true or the <see cref="System.IO.StreamWriter"></see> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="System.IO.StreamWriter"></see> is at the end the stream.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[])">
      <summary>Writes a character array to the stream.</summary>
      <param name="buffer">A character array containing the data to write. If buffer is null, nothing is written.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException"><see cref="System.IO.StreamWriter.AutoFlush"></see> is true or the <see cref="System.IO.StreamWriter"></see> buffer is full, and current writer is closed.</exception>
      <exception cref="T:System.NotSupportedException"><see cref="System.IO.StreamWriter.AutoFlush"></see> is true or the <see cref="System.IO.StreamWriter"></see> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="System.IO.StreamWriter"></see> is at the end the stream.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String)">
      <summary>Writes a string to the stream.</summary>
      <param name="value">The string to write to the stream. If value is null, nothing is written.</param>
      <exception cref="T:System.ObjectDisposedException"><see cref="System.IO.StreamWriter.AutoFlush"></see> is true or the <see cref="System.IO.StreamWriter"></see> buffer is full, and current writer is closed.</exception>
      <exception cref="T:System.NotSupportedException"><see cref="System.IO.StreamWriter.AutoFlush"></see> is true or the <see cref="System.IO.StreamWriter"></see> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="System.IO.StreamWriter"></see> is at the end the stream.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a subarray of characters to the stream.</summary>
      <param name="buffer">A character array that contains the data to write.</param>
      <param name="index">The character position in the buffer at which to start reading data.</param>
      <param name="count">The maximum number of characters to write.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index">index</paramref> is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException"><see cref="System.IO.StreamWriter.AutoFlush"></see> is true or the <see cref="System.IO.StreamWriter"></see> buffer is full, and current writer is closed.</exception>
      <exception cref="T:System.NotSupportedException"><see cref="System.IO.StreamWriter.AutoFlush"></see> is true or the <see cref="System.IO.StreamWriter"></see> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="System.IO.StreamWriter"></see> is at the end the stream.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.Char)">
      <summary>Writes a character to the stream asynchronously.</summary>
      <param name="value">The character to write to the stream.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The stream writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.String)">
      <summary>Writes a string to the stream asynchronously.</summary>
      <param name="value">The string to write to the stream. If value is null, nothing is written.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The stream writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a subarray of characters to the stream asynchronously.</summary>
      <param name="buffer">A character array that contains the data to write.</param>
      <param name="index">The character position in the buffer at which to begin reading data.</param>
      <param name="count">The maximum number of characters to write.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="index">index</paramref> plus <paramref name="count">count</paramref> is greater than the buffer length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The stream writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync">
      <summary>Writes a line terminator asynchronously to the stream.</summary>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The stream writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.Char)">
      <summary>Writes a character followed by a line terminator asynchronously to the stream.</summary>
      <param name="value">The character to write to the stream.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The stream writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.String)">
      <summary>Writes a string followed by a line terminator asynchronously to the stream.</summary>
      <param name="value">The string to write. If the value is null, only a line terminator is written.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The stream writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a subarray of characters followed by a line terminator asynchronously to the stream.</summary>
      <param name="buffer">The character array to write data from.</param>
      <param name="index">The character position in the buffer at which to start reading data.</param>
      <param name="count">The maximum number of characters to write.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="index">index</paramref> plus <paramref name="count">count</paramref> is greater than the buffer length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The stream writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="T:System.IO.StringReader">
      <summary>Implements a <see cref="T:System.IO.TextReader"></see> that reads from a string.</summary>
    </member>
    <member name="M:System.IO.StringReader.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StringReader"></see> class that reads from the specified string.</summary>
      <param name="s">The string to which the <see cref="T:System.IO.StringReader"></see> should be initialized.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s">s</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.IO.StringReader.Close">
      <summary>Closes the <see cref="T:System.IO.StringReader"></see>.</summary>
    </member>
    <member name="M:System.IO.StringReader.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.StringReader"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.StringReader.Peek">
      <summary>Returns the next available character but does not consume it.</summary>
      <returns>An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.</returns>
      <exception cref="T:System.ObjectDisposedException">The current reader is closed.</exception>
    </member>
    <member name="M:System.IO.StringReader.Read">
      <summary>Reads the next character from the input string and advances the character position by one character.</summary>
      <returns>The next character from the underlying string, or -1 if no more characters are available.</returns>
      <exception cref="T:System.ObjectDisposedException">The current reader is closed.</exception>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a block of characters from the input string and advances the character position by <paramref name="count">count</paramref>.</summary>
      <param name="buffer">When this method returns, contains the specified character array with the values between index and (index + count - 1) replaced by the characters read from the current source.</param>
      <param name="index">The starting index in the buffer.</param>
      <param name="count">The number of characters to read.</param>
      <returns>The total number of characters read into the buffer. This can be less than the number of characters requested if that many characters are not currently available, or zero if the end of the underlying string has been reached.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index">index</paramref> is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ObjectDisposedException">The current reader is closed.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a specified maximum number of characters from the current string asynchronously and writes the data to a buffer, beginning at the specified index.</summary>
      <param name="buffer">When this method returns, contains the specified character array with the values between index and (index + count - 1) replaced by the characters read from the current source.</param>
      <param name="index">The position in buffer at which to begin writing.</param>
      <param name="count">The maximum number of characters to read. If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.</param>
      <returns>A task that represents the asynchronous read operation. The value of the <paramref name="TResult">TResult</paramref> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="index">index</paramref> and <paramref name="count">count</paramref> is larger than the buffer length.</exception>
      <exception cref="T:System.ObjectDisposedException">The string reader has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a specified maximum number of characters from the current string asynchronously and writes the data to a buffer, beginning at the specified index.</summary>
      <param name="buffer">When this method returns, contains the specified character array with the values between index and (index + count - 1) replaced by the characters read from the current source.</param>
      <param name="index">The position in buffer at which to begin writing.</param>
      <param name="count">The maximum number of characters to read. If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.</param>
      <returns>A task that represents the asynchronous read operation. The value of the <paramref name="TResult">TResult</paramref> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="index">index</paramref> and <paramref name="count">count</paramref> is larger than the buffer length.</exception>
      <exception cref="T:System.ObjectDisposedException">The string reader has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadLine">
      <summary>Reads a line of characters from the current string and returns the data as a string.</summary>
      <returns>The next line from the current string, or null if the end of the string is reached.</returns>
      <exception cref="T:System.ObjectDisposedException">The current reader is closed.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadLineAsync">
      <summary>Reads a line of characters asynchronously from the current string and returns the data as a string.</summary>
      <returns>A task that represents the asynchronous read operation. The value of the <paramref name="TResult">TResult</paramref> parameter contains the next line from the string reader, or is null if all the characters have been read.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of characters in the next line is larger than <see cref="System.Int32.MaxValue"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The string reader has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEnd">
      <summary>Reads all characters from the current position to the end of the string and returns them as a single string.</summary>
      <returns>The content from the current position to the end of the underlying string.</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string.</exception>
      <exception cref="T:System.ObjectDisposedException">The current reader is closed.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEndAsync">
      <summary>Reads all characters from the current position to the end of the string asynchronously and returns them as a single string.</summary>
      <returns>A task that represents the asynchronous read operation. The value of the <paramref name="TResult">TResult</paramref> parameter contains a string with the characters from the current position to the end of the string.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of characters is larger than <see cref="System.Int32.MaxValue"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The string reader has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
    </member>
    <member name="T:System.IO.StringWriter">
      <summary>Implements a <see cref="T:System.IO.TextWriter"></see> for writing information to a string. The information is stored in an underlying <see cref="T:System.Text.StringBuilder"></see>.</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StringWriter"></see> class.</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.IFormatProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StringWriter"></see> class with the specified format control.</summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider"></see> object that controls formatting.</param>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StringWriter"></see> class that writes to the specified <see cref="T:System.Text.StringBuilder"></see>.</summary>
      <param name="sb">The <see cref="T:System.Text.StringBuilder"></see> object to write to.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="sb">sb</paramref> is null.</exception>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StringWriter"></see> class that writes to the specified <see cref="T:System.Text.StringBuilder"></see> and has the specified format provider.</summary>
      <param name="sb">The <see cref="T:System.Text.StringBuilder"></see> object to write to.</param>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider"></see> object that controls formatting.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="sb">sb</paramref> is null.</exception>
    </member>
    <member name="M:System.IO.StringWriter.Close">
      <summary>Closes the current <see cref="T:System.IO.StringWriter"></see> and the underlying stream.</summary>
    </member>
    <member name="M:System.IO.StringWriter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.StringWriter"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.IO.StringWriter.Encoding">
      <summary>Gets the <see cref="T:System.Text.Encoding"></see> in which the output is written.</summary>
      <returns>The Encoding in which the output is written.</returns>
    </member>
    <member name="M:System.IO.StringWriter.FlushAsync">
      <summary>Asynchronously clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</summary>
      <returns>A task that represents the asynchronous flush operation.</returns>
    </member>
    <member name="M:System.IO.StringWriter.GetStringBuilder">
      <summary>Returns the underlying <see cref="T:System.Text.StringBuilder"></see>.</summary>
      <returns>The underlying StringBuilder.</returns>
    </member>
    <member name="M:System.IO.StringWriter.ToString">
      <summary>Returns a string containing the characters written to the current StringWriter so far.</summary>
      <returns>The string containing the characters written to the current StringWriter.</returns>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char)">
      <summary>Writes a character to the string.</summary>
      <param name="value">The character to write.</param>
      <exception cref="T:System.ObjectDisposedException">The writer is closed.</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.String)">
      <summary>Writes a string to the current string.</summary>
      <param name="value">The string to write.</param>
      <exception cref="T:System.ObjectDisposedException">The writer is closed.</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a subarray of characters to the string.</summary>
      <param name="buffer">The character array to write data from.</param>
      <param name="index">The position in the buffer at which to start reading data.</param>
      <param name="count">The maximum number of characters to write.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ArgumentException">(<paramref name="index">index</paramref> + <paramref name="count">count</paramref>)&amp;gt; <paramref name="buffer">buffer</paramref>. Length.</exception>
      <exception cref="T:System.ObjectDisposedException">The writer is closed.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Char)">
      <summary>Writes a character to the string asynchronously.</summary>
      <param name="value">The character to write to the string.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The string writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The string writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.String)">
      <summary>Writes a string to the current string asynchronously.</summary>
      <param name="value">The string to write. If value is null, nothing is written to the text stream.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The string writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The string writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a subarray of characters to the string asynchronously.</summary>
      <param name="buffer">The character array to write data from.</param>
      <param name="index">The position in the buffer at which to start reading data.</param>
      <param name="count">The maximum number of characters to write.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="index">index</paramref> plus <paramref name="count">count</paramref> is greater than the buffer length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ObjectDisposedException">The string writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The string writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Char)">
      <summary>Writes a character followed by a line terminator asynchronously to the string.</summary>
      <param name="value">The character to write to the string.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The string writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The string writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.String)">
      <summary>Writes a string followed by a line terminator asynchronously to the current string.</summary>
      <param name="value">The string to write. If the value is null, only a line terminator is written.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The string writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The string writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a subarray of characters followed by a line terminator asynchronously to the string.</summary>
      <param name="buffer">The character array to write data from.</param>
      <param name="index">The position in the buffer at which to start reading data.</param>
      <param name="count">The maximum number of characters to write.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="index">index</paramref> plus <paramref name="count">count</paramref> is greater than the buffer length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ObjectDisposedException">The string writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The string writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="T:System.IO.TextReader">
      <summary>Represents a reader that can read a sequential series of characters.</summary>
    </member>
    <member name="M:System.IO.TextReader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.TextReader"></see> class.</summary>
    </member>
    <member name="M:System.IO.TextReader.Close">
      <summary>Closes the <see cref="T:System.IO.TextReader"></see> and releases any system resources associated with the TextReader.</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.TextReader"></see> object.</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.TextReader"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="F:System.IO.TextReader.Null">
      <summary>Provides a TextReader with no data to read from.</summary>
      <returns></returns>
    </member>
    <member name="M:System.IO.TextReader.Peek">
      <summary>Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it from the reader.</summary>
      <returns>An integer representing the next character to be read, or -1 if no more characters are available or the reader does not support seeking.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextReader"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextReader.Read">
      <summary>Reads the next character from the text reader and advances the character position by one character.</summary>
      <returns>The next character from the text reader, or -1 if no more characters are available. The default implementation returns -1.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextReader"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a specified maximum number of characters from the current reader and writes the data to a buffer, beginning at the specified index.</summary>
      <param name="buffer">When this method returns, contains the specified character array with the values between index and (index + count - 1) replaced by the characters read from the current source.</param>
      <param name="index">The position in buffer at which to begin writing.</param>
      <param name="count">The maximum number of characters to read. If the end of the reader is reached before the specified number of characters is read into the buffer, the method returns.</param>
      <returns>The number of characters that have been read. The number will be less than or equal to <paramref name="count">count</paramref>, depending on whether the data is available within the reader. This method returns 0 (zero) if it is called when no more characters are left to read.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index">index</paramref> is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextReader"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.</summary>
      <param name="buffer">When this method returns, contains the specified character array with the values between index and (index + count - 1) replaced by the characters read from the current source.</param>
      <param name="index">The position in buffer at which to begin writing.</param>
      <param name="count">The maximum number of characters to read. If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.</param>
      <returns>A task that represents the asynchronous read operation. The value of the <paramref name="TResult">TResult</paramref> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="index">index</paramref> and <paramref name="count">count</paramref> is larger than the buffer length.</exception>
      <exception cref="T:System.ObjectDisposedException">The text reader has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a specified maximum number of characters from the current text reader and writes the data to a buffer, beginning at the specified index.</summary>
      <param name="buffer">When this method returns, this parameter contains the specified character array with the values between index and (index + count -1) replaced by the characters read from the current source.</param>
      <param name="index">The position in buffer at which to begin writing.</param>
      <param name="count">The maximum number of characters to read.</param>
      <returns>The number of characters that have been read. The number will be less than or equal to <paramref name="count">count</paramref>, depending on whether all input characters have been read.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index">index</paramref> is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextReader"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.</summary>
      <param name="buffer">When this method returns, contains the specified character array with the values between index and (index + count - 1) replaced by the characters read from the current source.</param>
      <param name="index">The position in buffer at which to begin writing.</param>
      <param name="count">The maximum number of characters to read. If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.</param>
      <returns>A task that represents the asynchronous read operation. The value of the <paramref name="TResult">TResult</paramref> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="index">index</paramref> and <paramref name="count">count</paramref> is larger than the buffer length.</exception>
      <exception cref="T:System.ObjectDisposedException">The text reader has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadLine">
      <summary>Reads a line of characters from the text reader and returns the data as a string.</summary>
      <returns>The next line from the reader, or null if all characters have been read.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextReader"></see> is closed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of characters in the next line is larger than <see cref="System.Int32.MaxValue"></see></exception>
    </member>
    <member name="M:System.IO.TextReader.ReadLineAsync">
      <summary>Reads a line of characters asynchronously and returns the data as a string.</summary>
      <returns>A task that represents the asynchronous read operation. The value of the <paramref name="TResult">TResult</paramref> parameter contains the next line from the text reader, or is null if all of the characters have been read.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of characters in the next line is larger than <see cref="System.Int32.MaxValue"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The text reader has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEnd">
      <summary>Reads all characters from the current position to the end of the text reader and returns them as one string.</summary>
      <returns>A string that contains all characters from the current position to the end of the text reader.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextReader"></see> is closed.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of characters in the next line is larger than <see cref="System.Int32.MaxValue"></see></exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEndAsync">
      <summary>Reads all characters from the current position to the end of the text reader asynchronously and returns them as one string.</summary>
      <returns>A task that represents the asynchronous read operation. The value of the <paramref name="TResult">TResult</paramref> parameter contains a string with the characters from the current position to the end of the text reader.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of characters is larger than <see cref="System.Int32.MaxValue"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The text reader has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
    </member>
    <member name="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
      <summary>Creates a thread-safe wrapper around the specified TextReader.</summary>
      <param name="reader">The TextReader to synchronize.</param>
      <returns>A thread-safe <see cref="System.IO.TextReader"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="reader">reader</paramref> is null.</exception>
    </member>
    <member name="T:System.IO.TextWriter">
      <summary>Represents a writer that can write a sequential series of characters. This class is abstract.</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.TextWriter"></see> class.</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor(System.IFormatProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.TextWriter"></see> class with the specified format provider.</summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider"></see> object that controls formatting.</param>
    </member>
    <member name="M:System.IO.TextWriter.Close">
      <summary>Closes the current writer and releases any system resources associated with the writer.</summary>
    </member>
    <member name="F:System.IO.TextWriter.CoreNewLine">
      <summary>Stores the newline characters used for this TextWriter.</summary>
      <returns></returns>
    </member>
    <member name="M:System.IO.TextWriter.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.TextWriter"></see> object.</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.TextWriter"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.IO.TextWriter.Encoding">
      <summary>When overridden in a derived class, returns the character encoding in which the output is written.</summary>
      <returns>The character encoding in which the output is written.</returns>
    </member>
    <member name="M:System.IO.TextWriter.Flush">
      <summary>Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</summary>
    </member>
    <member name="M:System.IO.TextWriter.FlushAsync">
      <summary>Asynchronously clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</summary>
      <returns>A task that represents the asynchronous flush operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="P:System.IO.TextWriter.FormatProvider">
      <summary>Gets an object that controls formatting.</summary>
      <returns>An <see cref="System.IFormatProvider"></see> object for a specific culture, or the formatting of the current culture if no other culture is specified.</returns>
    </member>
    <member name="P:System.IO.TextWriter.NewLine">
      <summary>Gets or sets the line terminator string used by the current TextWriter.</summary>
      <returns>The line terminator string for the current TextWriter.</returns>
    </member>
    <member name="F:System.IO.TextWriter.Null">
      <summary>Provides a TextWriter with no backing store that can be written to, but not read from.</summary>
      <returns></returns>
    </member>
    <member name="M:System.IO.TextWriter.Synchronized(System.IO.TextWriter)">
      <summary>Creates a thread-safe wrapper around the specified TextWriter.</summary>
      <param name="writer">The TextWriter to synchronize.</param>
      <returns>A thread-safe wrapper.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="writer">writer</paramref> is null.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>Writes a formatted string to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)"></see> method.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format and write.</param>
      <param name="arg1">The second object to format and write.</param>
      <param name="arg2">The third object to format and write.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="format">format</paramref> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.FormatException"><paramref name="format">format</paramref> is not a valid composite format string.  
 -or-  
 The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three).</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a subarray of characters to the text string or stream.</summary>
      <param name="buffer">The character array to write data from.</param>
      <param name="index">The character position in the buffer at which to start retrieving data.</param>
      <param name="count">The number of characters to write.</param>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index">index</paramref> is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer">buffer</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object[])">
      <summary>Writes a formatted string to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object[])"></see> method.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg">An object array that contains zero or more objects to format and write.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="format">format</paramref> or <paramref name="arg">arg</paramref> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.FormatException"><paramref name="format">format</paramref> is not a valid composite format string.  
 -or-  
 The index of a format item is less than 0 (zero), or greater than or equal to the length of the <paramref name="arg">arg</paramref> array.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object)">
      <summary>Writes a formatted string to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object)"></see> method.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The object to format and write.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="format">format</paramref> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.FormatException"><paramref name="format">format</paramref> is not a valid composite format string.  
 -or-  
 The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one).</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt64)">
      <summary>Writes the text representation of an 8-byte unsigned integer to the text string or stream.</summary>
      <param name="value">The 8-byte unsigned integer to write.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt32)">
      <summary>Writes the text representation of a 4-byte unsigned integer to the text string or stream.</summary>
      <param name="value">The 4-byte unsigned integer to write.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String)">
      <summary>Writes a string to the text string or stream.</summary>
      <param name="value">The string to write.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Single)">
      <summary>Writes the text representation of a 4-byte floating-point value to the text string or stream.</summary>
      <param name="value">The 4-byte floating-point value to write.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)">
      <summary>Writes a formatted string to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object,System.Object)"></see> method.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format and write.</param>
      <param name="arg1">The second object to format and write.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="format">format</paramref> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.FormatException"><paramref name="format">format</paramref> is not a valid composite format string.  
 -or-  
 The index of a format item is less than 0 (zero) or greater than or equal to the number of objects to be formatted (which, for this method overload, is two).</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int64)">
      <summary>Writes the text representation of an 8-byte signed integer to the text string or stream.</summary>
      <param name="value">The 8-byte signed integer to write.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int32)">
      <summary>Writes the text representation of a 4-byte signed integer to the text string or stream.</summary>
      <param name="value">The 4-byte signed integer to write.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Double)">
      <summary>Writes the text representation of an 8-byte floating-point value to the text string or stream.</summary>
      <param name="value">The 8-byte floating-point value to write.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Decimal)">
      <summary>Writes the text representation of a decimal value to the text string or stream.</summary>
      <param name="value">The decimal value to write.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[])">
      <summary>Writes a character array to the text string or stream.</summary>
      <param name="buffer">The character array to write to the text stream.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char)">
      <summary>Writes a character to the text string or stream.</summary>
      <param name="value">The character to write to the text stream.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Object)">
      <summary>Writes the text representation of an object to the text string or stream by calling the ToString method on that object.</summary>
      <param name="value">The object to write.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Boolean)">
      <summary>Writes the text representation of a Boolean value to the text string or stream.</summary>
      <param name="value">The Boolean value to write.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a subarray of characters to the text string or stream asynchronously.</summary>
      <param name="buffer">The character array to write data from.</param>
      <param name="index">The character position in the buffer at which to start retrieving data.</param>
      <param name="count">The number of characters to write.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="index">index</paramref> plus <paramref name="count">count</paramref> is greater than the buffer length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.String)">
      <summary>Writes a string to the text string or stream asynchronously.</summary>
      <param name="value">The string to write. If value is null, nothing is written to the text stream.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char)">
      <summary>Writes a character to the text string or stream asynchronously.</summary>
      <param name="value">The character to write to the text stream.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char[])">
      <summary>Writes a character array to the text string or stream asynchronously.</summary>
      <param name="buffer">The character array to write to the text stream. If buffer is null, nothing is written.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String)">
      <summary>Writes a string followed by a line terminator to the text string or stream.</summary>
      <param name="value">The string to write. If value is null, only the line terminator is written.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>Writes a formatted string and a new line to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object,System.Object)"></see> method.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format and write.</param>
      <param name="arg1">The second object to format and write.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="format">format</paramref> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.FormatException"><paramref name="format">format</paramref> is not a valid composite format string.  
 -or-  
 The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is two).</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a subarray of characters followed by a line terminator to the text string or stream.</summary>
      <param name="buffer">The character array from which data is read.</param>
      <param name="index">The character position in buffer at which to start reading data.</param>
      <param name="count">The maximum number of characters to write.</param>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index">index</paramref> is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer">buffer</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object[])">
      <summary>Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"></see>.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg">An object array that contains zero or more objects to format and write.</param>
      <exception cref="T:System.ArgumentNullException">A string or object is passed in as null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.FormatException"><paramref name="format">format</paramref> is not a valid composite format string.  
 -or-  
 The index of a format item is less than 0 (zero), or greater than or equal to the length of the <paramref name="arg">arg</paramref> array.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object)">
      <summary>Writes a formatted string and a new line to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object)"></see> method.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The object to format and write.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="format">format</paramref> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.FormatException"><paramref name="format">format</paramref> is not a valid composite format string.  
 -or-  
 The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one).</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt64)">
      <summary>Writes the text representation of an 8-byte unsigned integer followed by a line terminator to the text string or stream.</summary>
      <param name="value">The 8-byte unsigned integer to write.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"></see>.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format and write.</param>
      <param name="arg1">The second object to format and write.</param>
      <param name="arg2">The third object to format and write.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="format">format</paramref> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.FormatException"><paramref name="format">format</paramref> is not a valid composite format string.  
 -or-  
 The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three).</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt32)">
      <summary>Writes the text representation of a 4-byte unsigned integer followed by a line terminator to the text string or stream.</summary>
      <param name="value">The 4-byte unsigned integer to write.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Single)">
      <summary>Writes the text representation of a 4-byte floating-point value followed by a line terminator to the text string or stream.</summary>
      <param name="value">The 4-byte floating-point value to write.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Double)">
      <summary>Writes the text representation of a 8-byte floating-point value followed by a line terminator to the text string or stream.</summary>
      <param name="value">The 8-byte floating-point value to write.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int64)">
      <summary>Writes the text representation of an 8-byte signed integer followed by a line terminator to the text string or stream.</summary>
      <param name="value">The 8-byte signed integer to write.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int32)">
      <summary>Writes the text representation of a 4-byte signed integer followed by a line terminator to the text string or stream.</summary>
      <param name="value">The 4-byte signed integer to write.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Decimal)">
      <summary>Writes the text representation of a decimal value followed by a line terminator to the text string or stream.</summary>
      <param name="value">The decimal value to write.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[])">
      <summary>Writes an array of characters followed by a line terminator to the text string or stream.</summary>
      <param name="buffer">The character array from which data is read.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char)">
      <summary>Writes a character followed by a line terminator to the text string or stream.</summary>
      <param name="value">The character to write to the text stream.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Boolean)">
      <summary>Writes the text representation of a Boolean value followed by a line terminator to the text string or stream.</summary>
      <param name="value">The Boolean value to write.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine">
      <summary>Writes a line terminator to the text string or stream.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Object)">
      <summary>Writes the text representation of an object by calling the ToString method on that object, followed by a line terminator to the text string or stream.</summary>
      <param name="value">The object to write. If value is null, only the line terminator is written.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="System.IO.TextWriter"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.String)">
      <summary>Writes a string followed by a line terminator asynchronously to the text string or stream.</summary>
      <param name="value">The string to write. If the value is null, only a line terminator is written.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync">
      <summary>Writes a line terminator asynchronously to the text string or stream.</summary>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char)">
      <summary>Writes a character followed by a line terminator asynchronously to the text string or stream.</summary>
      <param name="value">The character to write to the text stream.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char[])">
      <summary>Writes an array of characters followed by a line terminator asynchronously to the text string or stream.</summary>
      <param name="buffer">The character array to write to the text stream. If the character array is null, only the line terminator is written.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a subarray of characters followed by a line terminator asynchronously to the text string or stream.</summary>
      <param name="buffer">The character array to write data from.</param>
      <param name="index">The character position in the buffer at which to start retrieving data.</param>
      <param name="count">The number of characters to write.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="index">index</paramref> plus <paramref name="count">count</paramref> is greater than the buffer length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> or <paramref name="count">count</paramref> is negative.</exception>
      <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation.</exception>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceConsumptionAttribute">
      <summary>Specifies the resource consumed by the member of a class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceConsumptionAttribute.#ctor(System.Runtime.Versioning.ResourceScope)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Versioning.ResourceConsumptionAttribute"></see> class specifying the scope of the consumed resource.</summary>
      <param name="resourceScope">The <see cref="T:System.Runtime.Versioning.ResourceScope"></see> for the consumed resource.</param>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceConsumptionAttribute.#ctor(System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Versioning.ResourceConsumptionAttribute"></see> class specifying the scope of the consumed resource and the scope of how it is consumed.</summary>
      <param name="resourceScope">The <see cref="T:System.Runtime.Versioning.ResourceScope"></see> for the consumed resource.</param>
      <param name="consumptionScope">The <see cref="T:System.Runtime.Versioning.ResourceScope"></see> used by this member.</param>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceConsumptionAttribute.ConsumptionScope">
      <summary>Gets the consumption scope for this member.</summary>
      <returns>A <see cref="System.Runtime.Versioning.ResourceScope"></see> object specifying the resource scope used by this member.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceConsumptionAttribute.ResourceScope">
      <summary>Gets the resource scope for the consumed resource.</summary>
      <returns>A <see cref="System.Runtime.Versioning.ResourceScope"></see> object specifying the resource scope of the consumed member.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceExposureAttribute">
      <summary>Specifies the resource exposure for a member of a class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceExposureAttribute.#ctor(System.Runtime.Versioning.ResourceScope)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Versioning.ResourceExposureAttribute"></see> class with the specified exposure level.</summary>
      <param name="exposureLevel">The scope of the resource.</param>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceExposureAttribute.ResourceExposureLevel">
      <summary>Gets the resource exposure scope.</summary>
      <returns>A <see cref="System.Runtime.Versioning.ResourceScope"></see> object.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceScope">
      <summary>Identifies the scope of a sharable resource.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.AppDomain">
      <summary>The state is shared by objects within an <see cref="T:System.AppDomain"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Assembly">
      <summary>The resource is visible at an assembly scope.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Library">
      <summary>The state is shared by objects within a library.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Machine">
      <summary>The state is shared by objects within the machine.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.None">
      <summary>There is no shared state.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Private">
      <summary>The resource is visible to only the type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Process">
      <summary>The state is shared within a process.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.Versioning.VersioningHelper">
      <summary>Provides methods to aid developers in writing version-safe code. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope)">
      <summary>Returns a version-safe name based on the specified resource name and the intended resource consumption source.</summary>
      <param name="name">The name of the resource.</param>
      <param name="from">The scope of the resource.</param>
      <param name="to">The desired resource consumption scope.</param>
      <returns>A version-safe name.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope,System.Type)">
      <summary>Returns a version-safe name based on the specified resource name, the intended resource consumption scope, and the type using the resource.</summary>
      <param name="name">The name of the resource.</param>
      <param name="from">The beginning of the scope range.</param>
      <param name="to">The end of the scope range.</param>
      <param name="type">The <see cref="T:System.Type"></see> of the resource.</param>
      <returns>A version-safe name.</returns>
      <exception cref="T:System.ArgumentException">The values for <paramref name="from">from</paramref> and <paramref name="to">to</paramref> are invalid. The resource type in the <see cref="System.Runtime.Versioning.ResourceScope"></see> enumeration is going from a more restrictive resource type to a more general resource type.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> is null.</exception>
    </member>
    <member name="T:System.Security.SecurityElement">
      <summary>Represents the XML object model for encoding security objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.SecurityElement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityElement"></see> class with the specified tag.</summary>
      <param name="tag">The tag name of an XML element.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tag">tag</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tag">tag</paramref> parameter is invalid in XML.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityElement"></see> class with the specified tag and text.</summary>
      <param name="tag">The tag name of the XML element.</param>
      <param name="text">The text content within the element.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tag">tag</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tag">tag</paramref> parameter or <paramref name="text">text</paramref> parameter is invalid in XML.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
      <summary>Adds a name/value attribute to an XML element.</summary>
      <param name="name">The name of the attribute.</param>
      <param name="value">The value of the attribute.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name">name</paramref> parameter or <paramref name="value">value</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name">name</paramref> parameter or <paramref name="value">value</paramref> parameter is invalid in XML.  
 -or-  
 An attribute with the name specified by the <paramref name="name">name</paramref> parameter already exists.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.AddChild(System.Security.SecurityElement)">
      <summary>Adds a child element to the XML element.</summary>
      <param name="child">The child element to add.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="child">child</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.Attribute(System.String)">
      <summary>Finds an attribute by name in an XML element.</summary>
      <param name="name">The name of the attribute for which to search.</param>
      <returns>The value associated with the named attribute, or null if no attribute with <paramref name="name">name</paramref> exists.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name">name</paramref> parameter is null.</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Attributes">
      <summary>Gets or sets the attributes of an XML element as name/value pairs.</summary>
      <returns>The <see cref="System.Collections.Hashtable"></see> object for the attribute values of the XML element.</returns>
      <exception cref="T:System.InvalidCastException">The name or value of the <see cref="System.Collections.Hashtable"></see> object is invalid.</exception>
      <exception cref="T:System.ArgumentException">The name is not a valid XML attribute name.</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Children">
      <summary>Gets or sets the array of child elements of the XML element.</summary>
      <returns>The ordered child elements of the XML element as security elements.</returns>
      <exception cref="T:System.ArgumentException">A child of the XML parent node is null.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.Copy">
      <summary>Creates and returns an identical copy of the current <see cref="T:System.Security.SecurityElement"></see> object.</summary>
      <returns>A copy of the current <see cref="System.Security.SecurityElement"></see> object.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.Equal(System.Security.SecurityElement)">
      <summary>Compares two XML element objects for equality.</summary>
      <param name="other">An XML element object to which to compare the current XML element object.</param>
      <returns>true if the tag, attribute names and values, child elements, and text fields in the current XML element are identical to their counterparts in the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.Escape(System.String)">
      <summary>Replaces invalid XML characters in a string with their valid XML equivalent.</summary>
      <param name="str">The string within which to escape invalid characters.</param>
      <returns>The input string with invalid characters replaced.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.FromString(System.String)">
      <summary>Creates a security element from an XML-encoded string.</summary>
      <param name="xml">The XML-encoded string from which to create the security element.</param>
      <returns>A <see cref="System.Security.SecurityElement"></see> created from the XML.</returns>
      <exception cref="T:System.Security.XmlSyntaxException"><paramref name="xml">xml</paramref> contains one or more single quotation mark characters.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="xml">xml</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidAttributeName(System.String)">
      <summary>Determines whether a string is a valid attribute name.</summary>
      <param name="name">The attribute name to test for validity.</param>
      <returns>true if the <paramref name="name">name</paramref> parameter is a valid XML attribute name; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidAttributeValue(System.String)">
      <summary>Determines whether a string is a valid attribute value.</summary>
      <param name="value">The attribute value to test for validity.</param>
      <returns>true if the <paramref name="value">value</paramref> parameter is a valid XML attribute value; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidTag(System.String)">
      <summary>Determines whether a string is a valid tag.</summary>
      <param name="tag">The tag to test for validity.</param>
      <returns>true if the <paramref name="tag">tag</paramref> parameter is a valid XML tag; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidText(System.String)">
      <summary>Determines whether a string is valid as text within an XML element.</summary>
      <param name="text">The text to test for validity.</param>
      <returns>true if the <paramref name="text">text</paramref> parameter is a valid XML text element; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.SearchForChildByTag(System.String)">
      <summary>Finds a child by its tag name.</summary>
      <param name="tag">The tag for which to search in child elements.</param>
      <returns>The first child XML element with the specified tag value, or null if no child element with <paramref name="tag">tag</paramref> exists.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tag">tag</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.SearchForTextOfTag(System.String)">
      <summary>Finds a child by its tag name and returns the contained text.</summary>
      <param name="tag">The tag for which to search in child elements.</param>
      <returns>The text contents of the first child element with the specified tag value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="tag">tag</paramref> is null.</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Tag">
      <summary>Gets or sets the tag name of an XML element.</summary>
      <returns>The tag name of an XML element.</returns>
      <exception cref="T:System.ArgumentNullException">The tag is null.</exception>
      <exception cref="T:System.ArgumentException">The tag is not valid in XML.</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Text">
      <summary>Gets or sets the text within an XML element.</summary>
      <returns>The value of the text within an XML element.</returns>
      <exception cref="T:System.ArgumentException">The text is not valid in XML.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.ToString">
      <summary>Produces a string representation of an XML element and its constituent attributes, child elements, and text.</summary>
      <returns>The XML element and its contents.</returns>
    </member>
    <member name="T:System.ContextBoundObject">
      <summary>Defines the base class for all context-bound classes.</summary>
    </member>
    <member name="M:System.ContextBoundObject.#ctor">
      <summary>Instantiates an instance of the <see cref="T:System.ContextBoundObject"></see> class.</summary>
    </member>
    <member name="T:System.ContextMarshalException">
      <summary>The exception that is thrown when an attempt to marshal an object across a context boundary fails.</summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ContextMarshalException"></see> class with default properties.</summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ContextMarshalException"></see> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ContextMarshalException"></see> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ContextMarshalException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Diagnostics.Stopwatch">
      <summary>Provides a set of methods and properties that you can use to accurately measure elapsed time.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Stopwatch"></see> class.</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.Elapsed">
      <summary>Gets the total elapsed time measured by the current instance.</summary>
      <returns>A read-only <see cref="System.TimeSpan"></see> representing the total elapsed time measured by the current instance.</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
      <summary>Gets the total elapsed time measured by the current instance, in milliseconds.</summary>
      <returns>A read-only long integer representing the total number of milliseconds measured by the current instance.</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
      <summary>Gets the total elapsed time measured by the current instance, in timer ticks.</summary>
      <returns>A read-only long integer representing the total number of timer ticks measured by the current instance.</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.Frequency">
      <summary>Gets the frequency of the timer as the number of ticks per second. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetTimestamp">
      <summary>Gets the current number of ticks in the timer mechanism.</summary>
      <returns>A long integer representing the tick counter value of the underlying timer mechanism.</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.IsHighResolution">
      <summary>Indicates whether the timer is based on a high-resolution performance counter. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.IsRunning">
      <summary>Gets a value indicating whether the <see cref="T:System.Diagnostics.Stopwatch"></see> timer is running.</summary>
      <returns>true if the <see cref="System.Diagnostics.Stopwatch"></see> instance is currently running and measuring elapsed time for an interval; otherwise, false.</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Reset">
      <summary>Stops time interval measurement and resets the elapsed time to zero.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Restart">
      <summary>Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Start">
      <summary>Starts, or resumes, measuring elapsed time for an interval.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.StartNew">
      <summary>Initializes a new <see cref="T:System.Diagnostics.Stopwatch"></see> instance, sets the elapsed time property to zero, and starts measuring elapsed time.</summary>
      <returns>A <see cref="System.Diagnostics.Stopwatch"></see> that has just begun measuring elapsed time.</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Stop">
      <summary>Stops measuring elapsed time for an interval.</summary>
    </member>
    <member name="T:System.Reflection.AssemblyNameProxy">
      <summary>Provides a remotable version of the AssemblyName.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyNameProxy.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyNameProxy"></see> class.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)">
      <summary>Gets the AssemblyName for a given file.</summary>
      <param name="assemblyFile">The assembly file for which to get the AssemblyName.</param>
      <returns>An AssemblyName object representing the given file.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="assemblyFile">assemblyFile</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="assemblyFile">assemblyFile</paramref> is empty.</exception>
      <exception cref="T:System.IO.FileNotFoundException"><paramref name="assemblyFile">assemblyFile</paramref> is not found.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.BadImageFormatException"><paramref name="assemblyFile">assemblyFile</paramref> is not a valid assembly.</exception>
    </member>
    <member name="T:System.Security.Permissions.SecurityAction">
      <summary>Specifies the security actions that can be performed using declarative security.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Assert">
      <summary>The calling code can access the resource identified by the current permission object, even if callers higher in the stack have not been granted permission to access the resource (see Using the Assert Method).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Demand">
      <summary>All callers higher in the call stack are required to have been granted the permission specified by the current permission object.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Deny">
      <summary>The ability to access the resource specified by the current permission object is denied to callers, even if they have been granted permission to access it (see Using the Deny Method).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <summary>The derived class inheriting the class or overriding a method is required to have been granted the specified permission..</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.LinkDemand">
      <summary>The immediate caller is required to have been granted the specified permission. Do not use in the .NET Framework 4. For full trust, use <see cref="T:System.Security.SecurityCriticalAttribute"></see> instead; for partial trust, use <see cref="F:System.Security.Permissions.SecurityAction.Demand"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.PermitOnly">
      <summary>Only the resources specified by this permission object can be accessed, even if the code has been granted permission to access other resources.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestMinimum">
      <summary>The request for the minimum permissions required for code to run. This action can only be used within the scope of the assembly.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestOptional">
      <summary>The request for additional permissions that are optional (not required to run). This request implicitly refuses all other permissions not specifically requested. This action can only be used within the scope of the assembly.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestRefuse">
      <summary>The request that permissions that might be misused will not be granted to the calling code. This action can only be used within the scope of the assembly.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityAttribute">
      <summary>Specifies the base attribute class for declarative security from which <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute"></see> is derived.</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of <see cref="T:System.Security.Permissions.SecurityAttribute"></see> with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Action">
      <summary>Gets or sets a security action.</summary>
      <returns>One of the <see cref="System.Security.Permissions.SecurityAction"></see> values.</returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.CreatePermission">
      <summary>When overridden in a derived class, creates a permission object that can then be serialized into binary form and persistently stored along with the <see cref="T:System.Security.Permissions.SecurityAction"></see> in an assembly&amp;#39;s metadata.</summary>
      <returns>A serializable permission object.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Unrestricted">
      <summary>Gets or sets a value indicating whether full (unrestricted) permission to the resource protected by the attribute is declared.</summary>
      <returns>true if full permission to the protected resource is declared; otherwise, false.</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.SecurityPermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.SecurityPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Assertion">
      <summary>Gets or sets a value indicating whether permission to assert that all this code&amp;#39;s callers have the requisite permission for the operation is declared.</summary>
      <returns>true if permission to assert is declared; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects">
      <summary>Gets or sets a value that indicates whether code has permission to perform binding redirection in the application configuration file.</summary>
      <returns>true if code can perform binding redirects; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain">
      <summary>Gets or sets a value indicating whether permission to manipulate <see cref="T:System.AppDomain"></see> is declared.</summary>
      <returns>true if permission to manipulate <see cref="System.AppDomain"></see> is declared; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy">
      <summary>Gets or sets a value indicating whether permission to alter or manipulate domain security policy is declared.</summary>
      <returns>true if permission to alter or manipulate security policy in an application domain is declared; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence">
      <summary>Gets or sets a value indicating whether permission to alter or manipulate evidence is declared.</summary>
      <returns>true if the ability to alter or manipulate evidence is declared; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy">
      <summary>Gets or sets a value indicating whether permission to view and manipulate security policy is declared.</summary>
      <returns>true if permission to manipulate security policy is declared; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal">
      <summary>Gets or sets a value indicating whether permission to manipulate the current principal is declared.</summary>
      <returns>true if permission to manipulate the current principal is declared; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlThread">
      <summary>Gets or sets a value indicating whether permission to manipulate threads is declared.</summary>
      <returns>true if permission to manipulate threads is declared; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.Permissions.SecurityPermission"></see>.</summary>
      <returns>A <see cref="System.Security.Permissions.SecurityPermission"></see> that corresponds to this attribute.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Execution">
      <summary>Gets or sets a value indicating whether permission to execute code is declared.</summary>
      <returns>true if permission to execute code is declared; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Flags">
      <summary>Gets or sets all permission flags comprising the <see cref="T:System.Security.Permissions.SecurityPermission"></see> permissions.</summary>
      <returns>One or more of the <see cref="System.Security.Permissions.SecurityPermissionFlag"></see> values combined using a bitwise OR.</returns>
      <exception cref="T:System.ArgumentException">An attempt is made to set this property to an invalid value. See <see cref="System.Security.Permissions.SecurityPermissionFlag"></see> for the valid values.</exception>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Infrastructure">
      <summary>Gets or sets a value indicating whether code can plug into the common language runtime infrastructure, such as adding Remoting Context Sinks, Envoy Sinks and Dynamic Sinks.</summary>
      <returns>true if code can plug into the common language runtime infrastructure; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration">
      <summary>Gets or sets a value indicating whether code can configure remoting types and channels.</summary>
      <returns>true if code can configure remoting types and channels; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter">
      <summary>Gets or sets a value indicating whether code can use a serialization formatter to serialize or deserialize an object.</summary>
      <returns>true if code can use a serialization formatter to serialize or deserialize an object; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SkipVerification">
      <summary>Gets or sets a value indicating whether permission to bypass code verification is declared.</summary>
      <returns>true if permission to bypass code verification is declared; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode">
      <summary>Gets or sets a value indicating whether permission to call unmanaged code is declared.</summary>
      <returns>true if permission to call unmanaged code is declared; otherwise, false.</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionFlag">
      <summary>Specifies access flags for the security permission object.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.AllFlags">
      <summary>The unrestricted state of the permission.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Assertion">
      <summary>Ability to assert that all this code&amp;#39;s callers have the requisite permission for the operation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.BindingRedirects">
      <summary>Permission to perform explicit binding redirection in the application configuration file. This includes redirection of .NET Framework assemblies that have been unified as well as other assemblies found outside the .NET Framework.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain">
      <summary>Ability to create and manipulate an <see cref="T:System.AppDomain"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlDomainPolicy">
      <summary>Ability to specify domain policy.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence">
      <summary>Ability to provide evidence, including the ability to alter the evidence provided by the common language runtime.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy">
      <summary>Ability to view and modify policy.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal">
      <summary>Ability to manipulate the principal object.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread">
      <summary>Ability to use certain advanced operations on threads.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Execution">
      <summary>Permission for the code to run. Without this permission, managed code will not be executed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure">
      <summary>Permission to plug code into the common language runtime infrastructure, such as adding Remoting Context Sinks, Envoy Sinks and Dynamic Sinks.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.NoFlags">
      <summary>No security access.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration">
      <summary>Permission to configure Remoting types and channels.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter">
      <summary>Ability to provide serialization services. Used by serialization formatters.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SkipVerification">
      <summary>Ability to skip verification of code in this assembly. Code that is unverifiable can be run if this permission is granted.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode">
      <summary>Ability to call unmanaged code.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ContextStaticAttribute">
      <summary>Indicates that the value of a static field is unique for a particular context.</summary>
    </member>
    <member name="M:System.ContextStaticAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ContextStaticAttribute"></see> class.</summary>
    </member>
    <member name="T:System.Convert">
      <summary>Converts a base data type to another base data type.</summary>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type)">
      <summary>Returns an object of the specified type and whose value is equivalent to the specified object.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
      <param name="conversionType">The type of object to return.</param>
      <returns>An object whose type is <paramref name="conversionType">conversionType</paramref> and whose value is equivalent to <paramref name="value">value</paramref>.  
 -or-  
 A null reference (Nothing in Visual Basic), if <paramref name="value">value</paramref> is null and <paramref name="conversionType">conversionType</paramref> is not a value type.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.  
 -or-  
 <paramref name="value">value</paramref> is null and <paramref name="conversionType">conversionType</paramref> is a value type.  
 -or-  
 <paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.</exception>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in a format recognized by <paramref name="conversionType">conversionType</paramref>.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is out of the range of <paramref name="conversionType">conversionType</paramref>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="conversionType">conversionType</paramref> is null.</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
      <summary>Returns an object of the specified type whose value is equivalent to the specified object.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
      <param name="typeCode">The type of object to return.</param>
      <returns>An object whose underlying type is <paramref name="typeCode">typeCode</paramref> and whose value is equivalent to <paramref name="value">value</paramref>.  
 -or-  
 A null reference (Nothing in Visual Basic), if <paramref name="value">value</paramref> is null and <paramref name="typeCode">typeCode</paramref> is <see cref="System.TypeCode.Empty"></see>, <see cref="System.TypeCode.String"></see>, or <see cref="System.TypeCode.Object"></see>.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.  
 -or-  
 <paramref name="value">value</paramref> is null and <paramref name="typeCode">typeCode</paramref> specifies a value type.  
 -or-  
 <paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.</exception>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in a format recognized by the <paramref name="typeCode">typeCode</paramref> type.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is out of the range of the <paramref name="typeCode">typeCode</paramref> type.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="typeCode">typeCode</paramref> is invalid.</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
      <summary>Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
      <param name="conversionType">The type of object to return.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>An object whose type is <paramref name="conversionType">conversionType</paramref> and whose value is equivalent to <paramref name="value">value</paramref>.  
 -or-  
 <paramref name="value">value</paramref>, if the <see cref="System.Type"></see> of <paramref name="value">value</paramref> and <paramref name="conversionType">conversionType</paramref> are equal.  
 -or-  
 A null reference (Nothing in Visual Basic), if <paramref name="value">value</paramref> is null and <paramref name="conversionType">conversionType</paramref> is not a value type.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.  
 -or-  
 <paramref name="value">value</paramref> is null and <paramref name="conversionType">conversionType</paramref> is a value type.  
 -or-  
 <paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.</exception>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in a format for <paramref name="conversionType">conversionType</paramref> recognized by <paramref name="provider">provider</paramref>.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is out of the range of <paramref name="conversionType">conversionType</paramref>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="conversionType">conversionType</paramref> is null.</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
      <summary>Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
      <param name="typeCode">The type of object to return.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>An object whose underlying type is <paramref name="typeCode">typeCode</paramref> and whose value is equivalent to <paramref name="value">value</paramref>.  
 -or-  
 A null reference (Nothing in Visual Basic), if <paramref name="value">value</paramref> is null and <paramref name="typeCode">typeCode</paramref> is <see cref="System.TypeCode.Empty"></see>, <see cref="System.TypeCode.String"></see>, or <see cref="System.TypeCode.Object"></see>.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.  
 -or-  
 <paramref name="value">value</paramref> is null and <paramref name="typeCode">typeCode</paramref> specifies a value type.  
 -or-  
 <paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.</exception>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in a format for the <paramref name="typeCode">typeCode</paramref> type recognized by <paramref name="provider">provider</paramref>.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is out of the range of the <paramref name="typeCode">typeCode</paramref> type.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="typeCode">typeCode</paramref> is invalid.</exception>
    </member>
    <member name="F:System.Convert.DBNull">
      <summary>A constant that represents a database column that is absent of data; that is, database null.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
      <summary>Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert.</summary>
      <param name="inArray">A Unicode character array.</param>
      <param name="offset">A position within inArray.</param>
      <param name="length">The number of elements in inArray to convert.</param>
      <returns>An array of 8-bit unsigned integers equivalent to <paramref name="length">length</paramref> elements at position <paramref name="offset">offset</paramref> in <paramref name="inArray">inArray</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="inArray">inArray</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> or <paramref name="length">length</paramref> is less than 0.  
 -or-  
 <paramref name="offset">offset</paramref> plus <paramref name="length">length</paramref> indicates a position not within <paramref name="inArray">inArray</paramref>.</exception>
      <exception cref="T:System.FormatException">The length of <paramref name="inArray">inArray</paramref>, ignoring white-space characters, is not zero or a multiple of 4.  
 -or-  
 The format of <paramref name="inArray">inArray</paramref> is invalid. <paramref name="inArray">inArray</paramref> contains a non-base-64 character, more than two padding characters, or a non-white-space character among the padding characters.</exception>
    </member>
    <member name="M:System.Convert.FromBase64String(System.String)">
      <summary>Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.</summary>
      <param name="s">The string to convert.</param>
      <returns>An array of 8-bit unsigned integers that is equivalent to <paramref name="s">s</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="s">s</paramref> is null.</exception>
      <exception cref="T:System.FormatException">The length of <paramref name="s">s</paramref>, ignoring white-space characters, is not zero or a multiple of 4.  
 -or-  
 The format of <paramref name="s">s</paramref> is invalid. <paramref name="s">s</paramref> contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters.</exception>
    </member>
    <member name="M:System.Convert.GetTypeCode(System.Object)">
      <summary>Returns the <see cref="T:System.TypeCode"></see> for the specified object.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
      <returns>The <see cref="System.TypeCode"></see> for <paramref name="value">value</paramref>, or <see cref="System.TypeCode.Empty"></see> if <paramref name="value">value</paramref> is null.</returns>
    </member>
    <member name="M:System.Convert.IsDBNull(System.Object)">
      <summary>Returns an indication whether the specified object is of type <see cref="T:System.DBNull"></see>.</summary>
      <param name="value">An object.</param>
      <returns>true if <paramref name="value">value</paramref> is of type <see cref="System.DBNull"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.</summary>
      <param name="inArray">An input array of 8-bit unsigned integers.</param>
      <param name="offsetIn">A position within inArray.</param>
      <param name="length">The number of elements of inArray to convert.</param>
      <param name="outArray">An output array of Unicode characters.</param>
      <param name="offsetOut">A position within outArray.</param>
      <returns>A 32-bit signed integer containing the number of bytes in <paramref name="outArray">outArray</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="inArray">inArray</paramref> or <paramref name="outArray">outArray</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offsetIn">offsetIn</paramref>, <paramref name="offsetOut">offsetOut</paramref>, or <paramref name="length">length</paramref> is negative.  
 -or-  
 <paramref name="offsetIn">offsetIn</paramref> plus <paramref name="length">length</paramref> is greater than the length of <paramref name="inArray">inArray</paramref>.  
 -or-  
 <paramref name="offsetOut">offsetOut</paramref> plus the number of elements to return is greater than the length of <paramref name="outArray">outArray</paramref>.</exception>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
      <summary>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, the number of elements in the input array to convert, and whether line breaks are inserted in the output array.</summary>
      <param name="inArray">An input array of 8-bit unsigned integers.</param>
      <param name="offsetIn">A position within inArray.</param>
      <param name="length">The number of elements of inArray to convert.</param>
      <param name="outArray">An output array of Unicode characters.</param>
      <param name="offsetOut">A position within outArray.</param>
      <param name="options"><see cref="F:System.Base64FormattingOptions.InsertLineBreaks"></see> to insert a line break every 76 characters, or <see cref="F:System.Base64FormattingOptions.None"></see> to not insert line breaks.</param>
      <returns>A 32-bit signed integer containing the number of bytes in <paramref name="outArray">outArray</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="inArray">inArray</paramref> or <paramref name="outArray">outArray</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offsetIn">offsetIn</paramref>, <paramref name="offsetOut">offsetOut</paramref>, or <paramref name="length">length</paramref> is negative.  
 -or-  
 <paramref name="offsetIn">offsetIn</paramref> plus <paramref name="length">length</paramref> is greater than the length of <paramref name="inArray">inArray</paramref>.  
 -or-  
 <paramref name="offsetOut">offsetOut</paramref> plus the number of elements to return is greater than the length of <paramref name="outArray">outArray</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="options">options</paramref> is not a valid <see cref="System.Base64FormattingOptions"></see> value.</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
      <summary>Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value.</summary>
      <param name="inArray">An array of 8-bit unsigned integers.</param>
      <param name="offset">An offset in inArray.</param>
      <param name="length">The number of elements of inArray to convert.</param>
      <param name="options"><see cref="F:System.Base64FormattingOptions.InsertLineBreaks"></see> to insert a line break every 76 characters, or <see cref="F:System.Base64FormattingOptions.None"></see> to not insert line breaks.</param>
      <returns>The string representation in base 64 of <paramref name="length">length</paramref> elements of <paramref name="inArray">inArray</paramref>, starting at position <paramref name="offset">offset</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="inArray">inArray</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> or <paramref name="length">length</paramref> is negative.  
 -or-  
 <paramref name="offset">offset</paramref> plus <paramref name="length">length</paramref> is greater than the length of <paramref name="inArray">inArray</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="options">options</paramref> is not a valid <see cref="System.Base64FormattingOptions"></see> value.</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
      <summary>Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.</summary>
      <param name="inArray">An array of 8-bit unsigned integers.</param>
      <param name="offset">An offset in inArray.</param>
      <param name="length">The number of elements of inArray to convert.</param>
      <returns>The string representation in base 64 of <paramref name="length">length</paramref> elements of <paramref name="inArray">inArray</paramref>, starting at position <paramref name="offset">offset</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="inArray">inArray</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> or <paramref name="length">length</paramref> is negative.  
 -or-  
 <paramref name="offset">offset</paramref> plus <paramref name="length">length</paramref> is greater than the length of <paramref name="inArray">inArray</paramref>.</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[])">
      <summary>Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</summary>
      <param name="inArray">An array of 8-bit unsigned integers.</param>
      <returns>The string representation, in base 64, of the contents of <paramref name="inArray">inArray</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="inArray">inArray</paramref> is null.</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
      <summary>Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. A parameter specifies whether to insert line breaks in the return value.</summary>
      <param name="inArray">An array of 8-bit unsigned integers.</param>
      <param name="options"><see cref="F:System.Base64FormattingOptions.InsertLineBreaks"></see> to insert a line break every 76 characters, or <see cref="F:System.Base64FormattingOptions.None"></see> to not insert line breaks.</param>
      <returns>The string representation in base 64 of the elements in <paramref name="inArray">inArray</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="inArray">inArray</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="options">options</paramref> is not a valid <see cref="System.Base64FormattingOptions"></see> value.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.</summary>
      <param name="value">The 8-bit signed integer to convert.</param>
      <returns>true if <paramref name="value">value</paramref> is not zero; otherwise, false.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a logical value to its Boolean equivalent, using the specified culture-specific formatting information.</summary>
      <param name="value">A string that contains the value of either <see cref="F:System.Boolean.TrueString"></see> or <see cref="F:System.Boolean.FalseString"></see>.</param>
      <param name="provider">An object that supplies culture-specific formatting information. This parameter is ignored.</param>
      <returns>true if <paramref name="value">value</paramref> equals <see cref="System.Boolean.TrueString"></see>, or false if <paramref name="value">value</paramref> equals <see cref="System.Boolean.FalseString"></see> or null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not equal to <see cref="System.Boolean.TrueString"></see> or <see cref="System.Boolean.FalseString"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified object to an equivalent Boolean value, using the specified culture-specific formatting information.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface, or null.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>true or false, which reflects the value returned by invoking the <see cref="System.IConvertible.ToBoolean(System.IFormatProvider)"></see> method for the underlying type of <paramref name="value">value</paramref>. If <paramref name="value">value</paramref> is null, the method returns false.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is a string that does not equal <see cref="System.Boolean.TrueString"></see> or <see cref="System.Boolean.FalseString"></see>.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion of <paramref name="value">value</paramref> to a <see cref="System.Boolean"></see> is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.</summary>
      <param name="value">The 64-bit unsigned integer to convert.</param>
      <returns>true if <paramref name="value">value</paramref> is not zero; otherwise, false.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.</summary>
      <param name="value">The 32-bit unsigned integer to convert.</param>
      <returns>true if <paramref name="value">value</paramref> is not zero; otherwise, false.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.</summary>
      <param name="value">The 16-bit unsigned integer to convert.</param>
      <returns>true if <paramref name="value">value</paramref> is not zero; otherwise, false.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String)">
      <summary>Converts the specified string representation of a logical value to its Boolean equivalent.</summary>
      <param name="value">A string that contains the value of either <see cref="F:System.Boolean.TrueString"></see> or <see cref="F:System.Boolean.FalseString"></see>.</param>
      <returns>true if <paramref name="value">value</paramref> equals <see cref="System.Boolean.TrueString"></see>, or false if <paramref name="value">value</paramref> equals <see cref="System.Boolean.FalseString"></see> or null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not equal to <see cref="System.Boolean.TrueString"></see> or <see cref="System.Boolean.FalseString"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Single)">
      <summary>Converts the value of the specified single-precision floating-point number to an equivalent Boolean value.</summary>
      <param name="value">The single-precision floating-point number to convert.</param>
      <returns>true if <paramref name="value">value</paramref> is not zero; otherwise, false.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object)">
      <summary>Converts the value of a specified object to an equivalent Boolean value.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface, or null.</param>
      <returns>true or false, which reflects the value returned by invoking the <see cref="System.IConvertible.ToBoolean(System.IFormatProvider)"></see> method for the underlying type of <paramref name="value">value</paramref>. If <paramref name="value">value</paramref> is null, the method returns false.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is a string that does not equal <see cref="System.Boolean.TrueString"></see> or <see cref="System.Boolean.FalseString"></see>.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion of <paramref name="value">value</paramref> to a <see cref="System.Boolean"></see> is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Double)">
      <summary>Converts the value of the specified double-precision floating-point number to an equivalent Boolean value.</summary>
      <param name="value">The double-precision floating-point number to convert.</param>
      <returns>true if <paramref name="value">value</paramref> is not zero; otherwise, false.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <returns>true if <paramref name="value">value</paramref> is not zero; otherwise, false.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.</summary>
      <param name="value">The 16-bit signed integer to convert.</param>
      <returns>true if <paramref name="value">value</paramref> is not zero; otherwise, false.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Decimal)">
      <summary>Converts the value of the specified decimal number to an equivalent Boolean value.</summary>
      <param name="value">The number to convert.</param>
      <returns>true if <paramref name="value">value</paramref> is not zero; otherwise, false.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.DateTime)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The date and time value to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Char)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The Unicode character to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.</summary>
      <param name="value">The 8-bit unsigned integer to convert.</param>
      <returns>true if <paramref name="value">value</paramref> is not zero; otherwise, false.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Boolean)">
      <summary>Returns the specified Boolean value; no actual conversion is performed.</summary>
      <param name="value">The Boolean value to return.</param>
      <returns><paramref name="value">value</paramref> is returned unchanged.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.</summary>
      <param name="value">The 64-bit signed integer to convert.</param>
      <returns>true if <paramref name="value">value</paramref> is not zero; otherwise, false.</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.String)">
      <summary>Converts the specified string representation of a number to an equivalent 8-bit unsigned integer.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Byte.MinValue"></see> or greater than <see cref="System.Byte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.</summary>
      <param name="value">The 16-bit unsigned integer to convert.</param>
      <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Byte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.</summary>
      <param name="value">The 32-bit unsigned integer to convert.</param>
      <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Byte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <param name="fromBase">The base of the number in value, which must be 2, 8, 10, or 16.</param>
      <returns>An 8-bit unsigned integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="fromBase">fromBase</paramref> is not 2, 8, 10, or 16.  
 -or-  
 <paramref name="value">value</paramref>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value">value</paramref> is <see cref="System.String.Empty"></see>.</exception>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> contains a character that is not a valid digit in the base specified by <paramref name="fromBase">fromBase</paramref>. The exception message indicates that there are no digits to convert if the first character in <paramref name="value">value</paramref> is invalid; otherwise, the message indicates that <paramref name="value">value</paramref> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref>, which represents a base 10 unsigned number, is prefixed with a negative sign.  
 -or-  
 <paramref name="value">value</paramref> represents a number that is less than <see cref="System.Byte.MinValue"></see> or greater than <see cref="System.Byte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified object to an 8-bit unsigned integer, using the specified culture-specific formatting information.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in the property format for a <see cref="System.Byte"></see> value.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement <see cref="System.IConvertible"></see>.  
 -or-  
 Conversion from <paramref name="value">value</paramref> to the <see cref="System.Byte"></see> type is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Byte.MinValue"></see> or greater than <see cref="System.Byte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a number to an equivalent 8-bit unsigned integer, using specified culture-specific formatting information.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Byte.MinValue"></see> or greater than <see cref="System.Byte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Single)">
      <summary>Converts the value of the specified single-precision floating-point number to an equivalent 8-bit unsigned integer.</summary>
      <param name="value">A single-precision floating-point number.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 8-bit unsigned integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Byte.MaxValue"></see> or less than <see cref="System.Byte.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.</summary>
      <param name="value">The 64-bit unsigned integer to convert.</param>
      <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Byte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.</summary>
      <param name="value">The 8-bit signed integer to be converted.</param>
      <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than <see cref="System.Byte.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.</summary>
      <param name="value">The 16-bit signed integer to convert.</param>
      <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than <see cref="System.Byte.MinValue"></see> or greater than <see cref="System.Byte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.</summary>
      <param name="value">The 64-bit signed integer to convert.</param>
      <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than <see cref="System.Byte.MinValue"></see> or greater than <see cref="System.Byte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Byte)">
      <summary>Returns the specified 8-bit unsigned integer; no actual conversion is performed.</summary>
      <param name="value">The 8-bit unsigned integer to return.</param>
      <returns><paramref name="value">value</paramref> is returned unchanged.</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer.</summary>
      <param name="value">The Unicode character to convert.</param>
      <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is greater than <see cref="System.Byte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.DateTime)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The date and time value to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Boolean)">
      <summary>Converts the specified Boolean value to the equivalent 8-bit unsigned integer.</summary>
      <param name="value">The Boolean value to convert.</param>
      <returns>The number 1 if <paramref name="value">value</paramref> is true; otherwise, 0.</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Double)">
      <summary>Converts the value of the specified double-precision floating-point number to an equivalent 8-bit unsigned integer.</summary>
      <param name="value">The double-precision floating-point number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 8-bit unsigned integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Byte.MaxValue"></see> or less than <see cref="System.Byte.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than <see cref="System.Byte.MinValue"></see> or greater than <see cref="System.Byte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Decimal)">
      <summary>Converts the value of the specified decimal number to an equivalent 8-bit unsigned integer.</summary>
      <param name="value">The number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 8-bit unsigned integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Byte.MaxValue"></see> or less than <see cref="System.Byte.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object)">
      <summary>Converts the value of the specified object to an 8-bit unsigned integer.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface, or null.</param>
      <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in the property format for a <see cref="System.Byte"></see> value.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement <see cref="System.IConvertible"></see>.  
 -or-  
 Conversion from <paramref name="value">value</paramref> to the <see cref="System.Byte"></see> type is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Byte.MinValue"></see> or greater than <see cref="System.Byte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
      <summary>Converts the first character of a specified string to a Unicode character, using specified culture-specific formatting information.</summary>
      <param name="value">A string of length 1 or null.</param>
      <param name="provider">An object that supplies culture-specific formatting information. This parameter is ignored.</param>
      <returns>A Unicode character that is equivalent to the first and only character in <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.FormatException">The length of <paramref name="value">value</paramref> is not 1.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object)">
      <summary>Converts the value of the specified object to a Unicode character.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
      <returns>A Unicode character that is equivalent to value, or <see cref="System.Char.MinValue"></see> if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is a null string.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion of <paramref name="value">value</paramref> to a <see cref="System.Char"></see> is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than <see cref="System.Char.MinValue"></see> or greater than <see cref="System.Char.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified object to its equivalent Unicode character, using the specified culture-specific formatting information.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A Unicode character that is equivalent to <paramref name="value">value</paramref>, or <see cref="System.Char.MinValue"></see> if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is a null string.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion of <paramref name="value">value</paramref> to a <see cref="System.Char"></see> is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than <see cref="System.Char.MinValue"></see> or greater than <see cref="System.Char.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.</summary>
      <param name="value">The 64-bit unsigned integer to convert.</param>
      <returns>A Unicode character that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Char.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.</summary>
      <param name="value">The 32-bit unsigned integer to convert.</param>
      <returns>A Unicode character that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Char.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.</summary>
      <param name="value">The 16-bit unsigned integer to convert.</param>
      <returns>A Unicode character that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.String)">
      <summary>Converts the first character of a specified string to a Unicode character.</summary>
      <param name="value">A string of length 1.</param>
      <returns>A Unicode character that is equivalent to the first and only character in <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.FormatException">The length of <paramref name="value">value</paramref> is not 1.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Single)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The single-precision floating-point number to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.</summary>
      <param name="value">The 8-bit signed integer to convert.</param>
      <returns>A Unicode character that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than <see cref="System.Char.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.</summary>
      <param name="value">The 64-bit signed integer to convert.</param>
      <returns>A Unicode character that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than <see cref="System.Char.MinValue"></see> or greater than <see cref="System.Char.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.</summary>
      <param name="value">The 16-bit signed integer to convert.</param>
      <returns>A Unicode character that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than <see cref="System.Char.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Double)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The double-precision floating-point number to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Decimal)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The decimal number to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.DateTime)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The date and time value to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Char)">
      <summary>Returns the specified Unicode character value; no actual conversion is performed.</summary>
      <param name="value">The Unicode character to return.</param>
      <returns><paramref name="value">value</paramref> is returned unchanged.</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.</summary>
      <param name="value">The 8-bit unsigned integer to convert.</param>
      <returns>A Unicode character that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Boolean)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The Boolean value to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <returns>A Unicode character that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than <see cref="System.Char.MinValue"></see> or greater than <see cref="System.Char.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Single)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The single-precision floating-point value to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String)">
      <summary>Converts the specified string representation of a date and time to an equivalent date and time value.</summary>
      <param name="value">The string representation of a date and time.</param>
      <returns>The date and time equivalent of the value of <paramref name="value">value</paramref>, or the date and time equivalent of <see cref="System.DateTime.MinValue"></see> if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a properly formatted date and time string.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt16)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The 16-bit unsigned integer to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a number to an equivalent date and time, using the specified culture-specific formatting information.</summary>
      <param name="value">A string that contains a date and time to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The date and time equivalent of the value of <paramref name="value">value</paramref>, or the date and time equivalent of <see cref="System.DateTime.MinValue"></see> if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a properly formatted date and time string.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt64)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The 64-bit unsigned integer to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified object to a <see cref="T:System.DateTime"></see> object, using the specified culture-specific formatting information.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The date and time equivalent of the value of <paramref name="value">value</paramref>, or the date and time equivalent of <see cref="System.DateTime.MinValue"></see> if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a valid date and time value.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.SByte)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The 8-bit signed integer to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt32)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The 32-bit unsigned integer to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object)">
      <summary>Converts the value of the specified object to a <see cref="T:System.DateTime"></see> object.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface, or null.</param>
      <returns>The date and time equivalent of the value of <paramref name="value">value</paramref>, or a date and time equivalent of <see cref="System.DateTime.MinValue"></see> if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a valid date and time value.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Double)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The double-precision floating-point value to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int32)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Boolean)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The Boolean value to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Byte)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The 8-bit unsigned integer to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Char)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The Unicode character to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int64)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The 64-bit signed integer to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Decimal)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The number to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int16)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The 16-bit signed integer to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.DateTime)">
      <summary>Returns the specified <see cref="T:System.DateTime"></see> object; no actual conversion is performed.</summary>
      <param name="value">A date and time value.</param>
      <returns><paramref name="value">value</paramref> is returned unchanged.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a number to an equivalent decimal number, using the specified culture-specific formatting information.</summary>
      <param name="value">A string that contains a number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A decimal number that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Decimal.MinValue"></see> or greater than <see cref="System.Decimal.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified object to an equivalent decimal number, using the specified culture-specific formatting information.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A decimal number that is equivalent to <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format for a <see cref="System.Decimal"></see> type.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Decimal.MinValue"></see> or greater than <see cref="System.Decimal.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent decimal number.</summary>
      <param name="value">The 64-bit unsigned integer to convert.</param>
      <returns>A decimal number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent decimal number.</summary>
      <param name="value">The 32-bit unsigned integer to convert.</param>
      <returns>A decimal number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to an equivalent decimal number.</summary>
      <param name="value">The 16-bit unsigned integer to convert.</param>
      <returns>The decimal number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String)">
      <summary>Converts the specified string representation of a number to an equivalent decimal number.</summary>
      <param name="value">A string that contains a number to convert.</param>
      <returns>A decimal number that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Decimal.MinValue"></see> or greater than <see cref="System.Decimal.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent decimal number.</summary>
      <param name="value">The 8-bit signed integer to convert.</param>
      <returns>A decimal number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object)">
      <summary>Converts the value of the specified object to an equivalent decimal number.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface, or null.</param>
      <returns>A decimal number that is equivalent to <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format for a <see cref="System.Decimal"></see> type.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Decimal.MinValue"></see> or greater than <see cref="System.Decimal.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Single)">
      <summary>Converts the value of the specified single-precision floating-point number to the equivalent decimal number.</summary>
      <param name="value">The single-precision floating-point number to convert.</param>
      <returns>A decimal number that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Decimal.MaxValue"></see> or less than <see cref="System.Decimal.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent decimal number.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <returns>A decimal number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Boolean)">
      <summary>Converts the specified Boolean value to the equivalent decimal number.</summary>
      <param name="value">The Boolean value to convert.</param>
      <returns>The number 1 if <paramref name="value">value</paramref> is true; otherwise, 0.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent decimal number.</summary>
      <param name="value">The 8-bit unsigned integer to convert.</param>
      <returns>The decimal number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Char)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The Unicode character to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent decimal number.</summary>
      <param name="value">The 64-bit signed integer to convert.</param>
      <returns>A decimal number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Decimal)">
      <summary>Returns the specified decimal number; no actual conversion is performed.</summary>
      <param name="value">A decimal number.</param>
      <returns><paramref name="value">value</paramref> is returned unchanged.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Double)">
      <summary>Converts the value of the specified double-precision floating-point number to an equivalent decimal number.</summary>
      <param name="value">The double-precision floating-point number to convert.</param>
      <returns>A decimal number that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Decimal.MaxValue"></see> or less than <see cref="System.Decimal.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent decimal number.</summary>
      <param name="value">The 16-bit signed integer to convert.</param>
      <returns>A decimal number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.DateTime)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The date and time value to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating-point number.</summary>
      <param name="value">The 8-bit signed integer to convert.</param>
      <returns>The 8-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified object to an double-precision floating-point number, using the specified culture-specific formatting information.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A double-precision floating-point number that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format for a <see cref="System.Double"></see> type.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Double.MinValue"></see> or greater than <see cref="System.Double.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent double-precision floating-point number.</summary>
      <param name="value">The 64-bit unsigned integer to convert.</param>
      <returns>A double-precision floating-point number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent double-precision floating-point number.</summary>
      <param name="value">The 32-bit unsigned integer to convert.</param>
      <returns>A double-precision floating-point number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating-point number.</summary>
      <param name="value">The 16-bit unsigned integer to convert.</param>
      <returns>A double-precision floating-point number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.String)">
      <summary>Converts the specified string representation of a number to an equivalent double-precision floating-point number.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <returns>A double-precision floating-point number that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Double.MinValue"></see> or greater than <see cref="System.Double.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Single)">
      <summary>Converts the value of the specified single-precision floating-point number to an equivalent double-precision floating-point number.</summary>
      <param name="value">The single-precision floating-point number.</param>
      <returns>A double-precision floating-point number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a number to an equivalent double-precision floating-point number, using the specified culture-specific formatting information.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A double-precision floating-point number that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Double.MinValue"></see> or greater than <see cref="System.Double.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object)">
      <summary>Converts the value of the specified object to a double-precision floating-point number.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface, or null.</param>
      <returns>A double-precision floating-point number that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format for a <see cref="System.Double"></see> type.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Double.MinValue"></see> or greater than <see cref="System.Double.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating-point number.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <returns>A double-precision floating-point number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Boolean)">
      <summary>Converts the specified Boolean value to the equivalent double-precision floating-point number.</summary>
      <param name="value">The Boolean value to convert.</param>
      <returns>The number 1 if <paramref name="value">value</paramref> is true; otherwise, 0.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating-point number.</summary>
      <param name="value">The 8-bit unsigned integer to convert.</param>
      <returns>The double-precision floating-point number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Char)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The Unicode character to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent double-precision floating-point number.</summary>
      <param name="value">The 64-bit signed integer to convert.</param>
      <returns>A double-precision floating-point number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Decimal)">
      <summary>Converts the value of the specified decimal number to an equivalent double-precision floating-point number.</summary>
      <param name="value">The decimal number to convert.</param>
      <returns>A double-precision floating-point number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Double)">
      <summary>Returns the specified double-precision floating-point number; no actual conversion is performed.</summary>
      <param name="value">The double-precision floating-point number to return.</param>
      <returns><paramref name="value">value</paramref> is returned unchanged.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent double-precision floating-point number.</summary>
      <param name="value">The 16-bit signed integer to convert.</param>
      <returns>A double-precision floating-point number equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.DateTime)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The date and time value to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.</summary>
      <param name="value">The 8-bit signed integer to convert.</param>
      <returns>A 8-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a number to an equivalent 16-bit signed integer, using the specified culture-specific formatting information.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A 16-bit signed integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Int16.MinValue"></see> or greater than <see cref="System.Int16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified object to a 16-bit signed integer, using the specified culture-specific formatting information.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A 16-bit signed integer that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format for an <see cref="System.Int16"></see> type.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement <see cref="System.IConvertible"></see>.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Int16.MinValue"></see> or greater than <see cref="System.Int16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.</summary>
      <param name="value">The 64-bit unsigned integer to convert.</param>
      <returns>A 16-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Int16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.</summary>
      <param name="value">The 32-bit unsigned integer to convert.</param>
      <returns>A 16-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Int16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.</summary>
      <param name="value">The 16-bit unsigned integer to convert.</param>
      <returns>A 16-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Int16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String)">
      <summary>Converts the specified string representation of a number to an equivalent 16-bit signed integer.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <returns>A 16-bit signed integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Int16.MinValue"></see> or greater than <see cref="System.Int16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Single)">
      <summary>Converts the value of the specified single-precision floating-point number to an equivalent 16-bit signed integer.</summary>
      <param name="value">The single-precision floating-point number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 16-bit signed integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Int16.MaxValue"></see> or less than <see cref="System.Int16.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <param name="fromBase">The base of the number in value, which must be 2, 8, 10, or 16.</param>
      <returns>A 16-bit signed integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="fromBase">fromBase</paramref> is not 2, 8, 10, or 16.  
 -or-  
 <paramref name="value">value</paramref>, which represents a non-base 10 signed number, is prefixed with a negative sign.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value">value</paramref> is <see cref="System.String.Empty"></see>.</exception>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> contains a character that is not a valid digit in the base specified by <paramref name="fromBase">fromBase</paramref>. The exception message indicates that there are no digits to convert if the first character in <paramref name="value">value</paramref> is invalid; otherwise, the message indicates that <paramref name="value">value</paramref> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref>, which represents a non-base 10 signed number, is prefixed with a negative sign.  
 -or-  
 <paramref name="value">value</paramref> represents a number that is less than <see cref="System.Int16.MinValue"></see> or greater than <see cref="System.Int16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object)">
      <summary>Converts the value of the specified object to a 16-bit signed integer.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface, or null.</param>
      <returns>A 16-bit signed integer that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format for an <see cref="System.Int16"></see> type.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Int16.MinValue"></see> or greater than <see cref="System.Int16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <returns>The 16-bit signed integer equivalent of <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Int16.MaxValue"></see> or less than <see cref="System.Int16.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int16)">
      <summary>Returns the specified 16-bit signed integer; no actual conversion is performed.</summary>
      <param name="value">The 16-bit signed integer to return.</param>
      <returns><paramref name="value">value</paramref> is returned unchanged.</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Double)">
      <summary>Converts the value of the specified double-precision floating-point number to an equivalent 16-bit signed integer.</summary>
      <param name="value">The double-precision floating-point number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 16-bit signed integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Int16.MaxValue"></see> or less than <see cref="System.Int16.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Decimal)">
      <summary>Converts the value of the specified decimal number to an equivalent 16-bit signed integer.</summary>
      <param name="value">The decimal number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 16-bit signed integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Int16.MaxValue"></see> or less than <see cref="System.Int16.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.DateTime)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The date and time value to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 16-bit signed integer.</summary>
      <param name="value">The Unicode character to convert.</param>
      <returns>A 16-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Int16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.</summary>
      <param name="value">The 8-bit unsigned integer to convert.</param>
      <returns>A 16-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Boolean)">
      <summary>Converts the specified Boolean value to the equivalent 16-bit signed integer.</summary>
      <param name="value">The Boolean value to convert.</param>
      <returns>The number 1 if <paramref name="value">value</paramref> is true; otherwise, 0.</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.</summary>
      <param name="value">The 64-bit signed integer to convert.</param>
      <returns>A 16-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Int16.MaxValue"></see> or less than <see cref="System.Int16.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Single)">
      <summary>Converts the value of the specified single-precision floating-point number to an equivalent 32-bit signed integer.</summary>
      <param name="value">The single-precision floating-point number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 32-bit signed integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Int32.MaxValue"></see> or less than <see cref="System.Int32.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.</summary>
      <param name="value">The 16-bit unsigned integer to convert.</param>
      <returns>A 32-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.</summary>
      <param name="value">The 32-bit unsigned integer to convert.</param>
      <returns>A 32-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Int32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.</summary>
      <param name="value">The 8-bit signed integer to convert.</param>
      <returns>A 8-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified object to a 32-bit signed integer, using the specified culture-specific formatting information.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A 32-bit signed integer that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement <see cref="System.IConvertible"></see>.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Int32.MinValue"></see> or greater than <see cref="System.Int32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a number to an equivalent 32-bit signed integer, using the specified culture-specific formatting information.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A 32-bit signed integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Int32.MinValue"></see> or greater than <see cref="System.Int32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 32-bit signed integer.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <param name="fromBase">The base of the number in value, which must be 2, 8, 10, or 16.</param>
      <returns>A 32-bit signed integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="fromBase">fromBase</paramref> is not 2, 8, 10, or 16.  
 -or-  
 <paramref name="value">value</paramref>, which represents a non-base 10 signed number, is prefixed with a negative sign.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value">value</paramref> is <see cref="System.String.Empty"></see>.</exception>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> contains a character that is not a valid digit in the base specified by <paramref name="fromBase">fromBase</paramref>. The exception message indicates that there are no digits to convert if the first character in <paramref name="value">value</paramref> is invalid; otherwise, the message indicates that <paramref name="value">value</paramref> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref>, which represents a non-base 10 signed number, is prefixed with a negative sign.  
 -or-  
 <paramref name="value">value</paramref> represents a number that is less than <see cref="System.Int32.MinValue"></see> or greater than <see cref="System.Int32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.</summary>
      <param name="value">The 64-bit unsigned integer to convert.</param>
      <returns>A 32-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Int32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object)">
      <summary>Converts the value of the specified object to a 32-bit signed integer.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface, or null.</param>
      <returns>A 32-bit signed integer equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the  <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Int32.MinValue"></see> or greater than <see cref="System.Int32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String)">
      <summary>Converts the specified string representation of a number to an equivalent 32-bit signed integer.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <returns>A 32-bit signed integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Int32.MinValue"></see> or greater than <see cref="System.Int32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int32)">
      <summary>Returns the specified 32-bit signed integer; no actual conversion is performed.</summary>
      <param name="value">The 32-bit signed integer to return.</param>
      <returns><paramref name="value">value</paramref> is returned unchanged.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.</summary>
      <param name="value">The 8-bit unsigned integer to convert.</param>
      <returns>A 32-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 32-bit signed integer.</summary>
      <param name="value">The Unicode character to convert.</param>
      <returns>A 32-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.DateTime)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The date and time value to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Boolean)">
      <summary>Converts the specified Boolean value to the equivalent 32-bit signed integer.</summary>
      <param name="value">The Boolean value to convert.</param>
      <returns>The number 1 if <paramref name="value">value</paramref> is true; otherwise, 0.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Double)">
      <summary>Converts the value of the specified double-precision floating-point number to an equivalent 32-bit signed integer.</summary>
      <param name="value">The double-precision floating-point number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 32-bit signed integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Int32.MaxValue"></see> or less than <see cref="System.Int32.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.</summary>
      <param name="value">The 64-bit signed integer to convert.</param>
      <returns>A 32-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Int32.MaxValue"></see> or less than <see cref="System.Int32.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.</summary>
      <param name="value">The 16-bit signed integer to convert.</param>
      <returns>A 32-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Decimal)">
      <summary>Converts the value of the specified decimal number to an equivalent 32-bit signed integer.</summary>
      <param name="value">The decimal number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 32-bit signed integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Int32.MaxValue"></see> or less than <see cref="System.Int32.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Single)">
      <summary>Converts the value of the specified single-precision floating-point number to an equivalent 64-bit signed integer.</summary>
      <param name="value">The single-precision floating-point number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 64-bit signed integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Int64.MaxValue"></see> or less than <see cref="System.Int64.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <param name="fromBase">The base of the number in value, which must be 2, 8, 10, or 16.</param>
      <returns>A 64-bit signed integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="fromBase">fromBase</paramref> is not 2, 8, 10, or 16.  
 -or-  
 <paramref name="value">value</paramref>, which represents a non-base 10 signed number, is prefixed with a negative sign.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value">value</paramref> is <see cref="System.String.Empty"></see>.</exception>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> contains a character that is not a valid digit in the base specified by <paramref name="fromBase">fromBase</paramref>. The exception message indicates that there are no digits to convert if the first character in <paramref name="value">value</paramref> is invalid; otherwise, the message indicates that <paramref name="value">value</paramref> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref>, which represents a non-base 10 signed number, is prefixed with a negative sign.  
 -or-  
 <paramref name="value">value</paramref> represents a number that is less than <see cref="System.Int64.MinValue"></see> or greater than <see cref="System.Int64.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a number to an equivalent 64-bit signed integer, using the specified culture-specific formatting information.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A 64-bit signed integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Int64.MinValue"></see> or greater than <see cref="System.Int64.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified object to a 64-bit signed integer, using the specified culture-specific formatting information.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A 64-bit signed integer that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Int64.MinValue"></see> or greater than <see cref="System.Int64.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.</summary>
      <param name="value">The 64-bit unsigned integer to convert.</param>
      <returns>A 64-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Int64.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.</summary>
      <param name="value">The 32-bit unsigned integer to convert.</param>
      <returns>A 64-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.</summary>
      <param name="value">The 16-bit unsigned integer to convert.</param>
      <returns>A 64-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.String)">
      <summary>Converts the specified string representation of a number to an equivalent 64-bit signed integer.</summary>
      <param name="value">A string that contains a number to convert.</param>
      <returns>A 64-bit signed integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Int64.MinValue"></see> or greater than <see cref="System.Int64.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.</summary>
      <param name="value">The 8-bit signed integer to convert.</param>
      <returns>A 64-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object)">
      <summary>Converts the value of the specified object to a 64-bit signed integer.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface, or null.</param>
      <returns>A 64-bit signed integer that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Int64.MinValue"></see> or greater than <see cref="System.Int64.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int64)">
      <summary>Returns the specified 64-bit signed integer; no actual conversion is performed.</summary>
      <param name="value">A 64-bit signed integer.</param>
      <returns><paramref name="value">value</paramref> is returned unchanged.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</summary>
      <param name="value">The 8-bit unsigned integer to convert.</param>
      <returns>A 64-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 64-bit signed integer.</summary>
      <param name="value">The Unicode character to convert.</param>
      <returns>A 64-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.DateTime)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The date and time value to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Boolean)">
      <summary>Converts the specified Boolean value to the equivalent 64-bit signed integer.</summary>
      <param name="value">The Boolean value to convert.</param>
      <returns>The number 1 if <paramref name="value">value</paramref> is true; otherwise, 0.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Double)">
      <summary>Converts the value of the specified double-precision floating-point number to an equivalent 64-bit signed integer.</summary>
      <param name="value">The double-precision floating-point number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 64-bit signed integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Int64.MaxValue"></see> or less than <see cref="System.Int64.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.</summary>
      <param name="value">The 16-bit signed integer to convert.</param>
      <returns>A 64-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <returns>A 64-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Decimal)">
      <summary>Converts the value of the specified decimal number to an equivalent 64-bit signed integer.</summary>
      <param name="value">The decimal number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 64-bit signed integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.Int64.MaxValue"></see> or less than <see cref="System.Int64.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.SByte)">
      <summary>Returns the specified 8-bit signed integer; no actual conversion is performed.</summary>
      <param name="value">The 8-bit signed integer to return.</param>
      <returns><paramref name="value">value</paramref> is returned unchanged.</returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <param name="fromBase">The base of the number in value, which must be 2, 8, 10, or 16.</param>
      <returns>An 8-bit signed integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="fromBase">fromBase</paramref> is not 2, 8, 10, or 16.  
 -or-  
 <paramref name="value">value</paramref>, which represents a non-base 10 signed number, is prefixed with a negative sign.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value">value</paramref> is <see cref="System.String.Empty"></see>.</exception>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> contains a character that is not a valid digit in the base specified by <paramref name="fromBase">fromBase</paramref>. The exception message indicates that there are no digits to convert if the first character in <paramref name="value">value</paramref> is invalid; otherwise, the message indicates that <paramref name="value">value</paramref> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref>, which represents a non-base 10 signed number, is prefixed with a negative sign.  
 -or-  
 <paramref name="value">value</paramref> represents a number that is less than <see cref="System.SByte.MinValue"></see> or greater than <see cref="System.SByte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a number to an equivalent 8-bit signed integer, using the specified culture-specific formatting information.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>An 8-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.SByte.MinValue"></see> or greater than <see cref="System.SByte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified object to an 8-bit signed integer, using the specified culture-specific formatting information.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>An 8-bit signed integer that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.SByte.MinValue"></see> or greater than <see cref="System.SByte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit signed integer.</summary>
      <param name="value">The 64-bit unsigned integer to convert.</param>
      <returns>An 8-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.SByte.MaxValue"></see> or less than <see cref="System.SByte.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit signed integer.</summary>
      <param name="value">The 32-bit unsigned integer to convert.</param>
      <returns>An 8-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.SByte.MaxValue"></see> or less than <see cref="System.SByte.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String)">
      <summary>Converts the specified string representation of a number to an equivalent 8-bit signed integer.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <returns>An 8-bit signed integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if value is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.SByte.MinValue"></see> or greater than <see cref="System.SByte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Single)">
      <summary>Converts the value of the specified single-precision floating-point number to an equivalent 8-bit signed integer.</summary>
      <param name="value">The single-precision floating-point number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 8-bit signed integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.SByte.MaxValue"></see> or less than <see cref="System.SByte.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object)">
      <summary>Converts the value of the specified object to an 8-bit signed integer.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface, or null.</param>
      <returns>An 8-bit signed integer that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.SByte.MinValue"></see> or greater than <see cref="System.SByte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.</summary>
      <param name="value">The 16-bit unsigned integer to convert.</param>
      <returns>An 8-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.SByte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <returns>An 8-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.SByte.MaxValue"></see> or less than <see cref="System.SByte.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit signed integer.</summary>
      <param name="value">The 64-bit signed integer to convert.</param>
      <returns>An 8-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.SByte.MaxValue"></see> or less than <see cref="System.SByte.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.</summary>
      <param name="value">The 8-bit unsigned integer to convert.</param>
      <returns>An 8-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.SByte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 8-bit signed integer.</summary>
      <param name="value">The Unicode character to convert.</param>
      <returns>An 8-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.SByte.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.DateTime)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The date and time value to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Boolean)">
      <summary>Converts the specified Boolean value to the equivalent 8-bit signed integer.</summary>
      <param name="value">The Boolean value to convert.</param>
      <returns>The number 1 if <paramref name="value">value</paramref> is true; otherwise, 0.</returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Double)">
      <summary>Converts the value of the specified double-precision floating-point number to an equivalent 8-bit signed integer.</summary>
      <param name="value">The double-precision floating-point number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 8-bit signed integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.SByte.MaxValue"></see> or less than <see cref="System.SByte.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.</summary>
      <param name="value">The 16-bit signed integer to convert.</param>
      <returns>An 8-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.SByte.MaxValue"></see> or less than <see cref="System.SByte.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Decimal)">
      <summary>Converts the value of the specified decimal number to an equivalent 8-bit signed integer.</summary>
      <param name="value">The decimal number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 8-bit signed integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.SByte.MaxValue"></see> or less than <see cref="System.SByte.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a number to an equivalent single-precision floating-point number, using the specified culture-specific formatting information.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A single-precision floating-point number that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Single.MinValue"></see> or greater than <see cref="System.Single.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating-point number.</summary>
      <param name="value">The 8-bit signed integer to convert.</param>
      <returns>An 8-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified object to an single-precision floating-point number, using the specified culture-specific formatting information.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A single-precision floating-point number that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement <see cref="System.IConvertible"></see>.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Single.MinValue"></see> or greater than <see cref="System.Single.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent single-precision floating-point number.</summary>
      <param name="value">The 64-bit unsigned integer to convert.</param>
      <returns>A single-precision floating-point number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent single-precision floating-point number.</summary>
      <param name="value">The 32-bit unsigned integer to convert.</param>
      <returns>A single-precision floating-point number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.String)">
      <summary>Converts the specified string representation of a number to an equivalent single-precision floating-point number.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <returns>A single-precision floating-point number that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Single.MinValue"></see> or greater than <see cref="System.Single.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Single)">
      <summary>Returns the specified single-precision floating-point number; no actual conversion is performed.</summary>
      <param name="value">The single-precision floating-point number to return.</param>
      <returns><paramref name="value">value</paramref> is returned unchanged.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object)">
      <summary>Converts the value of the specified object to a single-precision floating-point number.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface, or null.</param>
      <returns>A single-precision floating-point number that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.Single.MinValue"></see> or greater than <see cref="System.Single.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating-point number.</summary>
      <param name="value">The 16-bit unsigned integer to convert.</param>
      <returns>A single-precision floating-point number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating-point number.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <returns>A single-precision floating-point number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent single-precision floating-point number.</summary>
      <param name="value">The 16-bit signed integer to convert.</param>
      <returns>A single-precision floating-point number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Double)">
      <summary>Converts the value of the specified double-precision floating-point number to an equivalent single-precision floating-point number.</summary>
      <param name="value">The double-precision floating-point number to convert.</param>
      <returns>A single-precision floating-point number that is equivalent to <paramref name="value">value</paramref>.  
 <paramref name="value">value</paramref> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Decimal)">
      <summary>Converts the value of the specified decimal number to an equivalent single-precision floating-point number.</summary>
      <param name="value">The decimal number to convert.</param>
      <returns>A single-precision floating-point number that is equivalent to <paramref name="value">value</paramref>.  
 <paramref name="value">value</paramref> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.DateTime)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The date and time value to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Char)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The Unicode character to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating-point number.</summary>
      <param name="value">The 8-bit unsigned integer to convert.</param>
      <returns>A single-precision floating-point number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Boolean)">
      <summary>Converts the specified Boolean value to the equivalent single-precision floating-point number.</summary>
      <param name="value">The Boolean value to convert.</param>
      <returns>The number 1 if <paramref name="value">value</paramref> is true; otherwise, 0.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent single-precision floating-point number.</summary>
      <param name="value">The 64-bit signed integer to convert.</param>
      <returns>A single-precision floating-point number that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.Int32)">
      <summary>Converts the value of a 16-bit signed integer to its equivalent string representation in a specified base.</summary>
      <param name="value">The 16-bit signed integer to convert.</param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16.</param>
      <returns>The string representation of <paramref name="value">value</paramref> in base <paramref name="toBase">toBase</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="toBase">toBase</paramref> is not 2, 8, 10, or 16.</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
      <summary>Converts the value of the specified 16-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</summary>
      <param name="value">The 16-bit signed integer to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.DateTime"></see> to its equivalent string representation, using the specified culture-specific formatting information.</summary>
      <param name="value">The date and time value to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
      <summary>Converts the value of the specified 64-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</summary>
      <param name="value">The 64-bit unsigned integer to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
      <summary>Converts the value of the specified decimal number to its equivalent string representation, using the specified culture-specific formatting information.</summary>
      <param name="value">The decimal number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
      <summary>Converts the value of the specified 32-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
      <summary>Converts the value of the specified double-precision floating-point number to its equivalent string representation.</summary>
      <param name="value">The double-precision floating-point number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.Int32)">
      <summary>Converts the value of a 32-bit signed integer to its equivalent string representation in a specified base.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16.</param>
      <returns>The string representation of <paramref name="value">value</paramref> in base <paramref name="toBase">toBase</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="toBase">toBase</paramref> is not 2, 8, 10, or 16.</exception>
    </member>
    <member name="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
      <summary>Converts the value of the specified 8-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</summary>
      <param name="value">The 8-bit signed integer to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.Int32)">
      <summary>Converts the value of a 64-bit signed integer to its equivalent string representation in a specified base.</summary>
      <param name="value">The 64-bit signed integer to convert.</param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16.</param>
      <returns>The string representation of <paramref name="value">value</paramref> in base <paramref name="toBase">toBase</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="toBase">toBase</paramref> is not 2, 8, 10, or 16.</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified object to its equivalent string representation using the specified culture-specific formatting information.</summary>
      <param name="value">An object that supplies the value to convert, or null.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of <paramref name="value">value</paramref>, or <see cref="System.String.Empty"></see> if <paramref name="value">value</paramref> is an object whose value is null. If <paramref name="value">value</paramref> is null, the method returns null.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
      <summary>Converts the value of the specified single-precision floating-point number to its equivalent string representation, using the specified culture-specific formatting information.</summary>
      <param name="value">The single-precision floating-point number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.String,System.IFormatProvider)">
      <summary>Returns the specified string instance; no actual conversion is performed.</summary>
      <param name="value">The string to return.</param>
      <param name="provider">An object that supplies culture-specific formatting information. This parameter is ignored.</param>
      <returns><paramref name="value">value</paramref> is returned unchanged.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
      <summary>Converts the value of the specified 16-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</summary>
      <param name="value">The 16-bit unsigned integer to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
      <summary>Converts the value of the specified 32-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</summary>
      <param name="value">The 32-bit unsigned integer to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
      <summary>Converts the value of the specified Unicode character to its equivalent string representation, using the specified culture-specific formatting information.</summary>
      <param name="value">The Unicode character to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information. This parameter is ignored.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
      <summary>Converts the value of the specified 64-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</summary>
      <param name="value">The 64-bit signed integer to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.Int32)">
      <summary>Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.</summary>
      <param name="value">The 8-bit unsigned integer to convert.</param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16.</param>
      <returns>The string representation of <paramref name="value">value</paramref> in base <paramref name="toBase">toBase</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="toBase">toBase</paramref> is not 2, 8, 10, or 16.</exception>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to its equivalent string representation.</summary>
      <param name="value">The 16-bit unsigned integer to convert.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
      <summary>Converts the specified Boolean value to its equivalent string representation.</summary>
      <param name="value">The Boolean value to convert.</param>
      <param name="provider">An instance of an object. This parameter is ignored.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
      <summary>Converts the value of the specified 8-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</summary>
      <param name="value">The 8-bit unsigned integer to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean)">
      <summary>Converts the specified Boolean value to its equivalent string representation.</summary>
      <param name="value">The Boolean value to convert.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to its equivalent string representation.</summary>
      <param name="value">The 8-bit unsigned integer to convert.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Char)">
      <summary>Converts the value of the specified Unicode character to its equivalent string representation.</summary>
      <param name="value">The Unicode character to convert.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal)">
      <summary>Converts the value of the specified decimal number to its equivalent string representation.</summary>
      <param name="value">The decimal number to convert.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double)">
      <summary>Converts the value of the specified double-precision floating-point number to its equivalent string representation.</summary>
      <param name="value">The double-precision floating-point number to convert.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to its equivalent string representation.</summary>
      <param name="value">The 16-bit signed integer to convert.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime)">
      <summary>Converts the value of the specified <see cref="T:System.DateTime"></see> to its equivalent string representation.</summary>
      <param name="value">The date and time value to convert.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to its equivalent string representation.</summary>
      <param name="value">The 64-bit signed integer to convert.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Object)">
      <summary>Converts the value of the specified object to its equivalent string representation.</summary>
      <param name="value">An object that supplies the value to convert, or null.</param>
      <returns>The string representation of <paramref name="value">value</paramref>, or <see cref="System.String.Empty"></see> if <paramref name="value">value</paramref> is null.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to its equivalent string representation.</summary>
      <param name="value">The 8-bit signed integer to convert.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single)">
      <summary>Converts the value of the specified single-precision floating-point number to its equivalent string representation.</summary>
      <param name="value">The single-precision floating-point number to convert.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.String)">
      <summary>Returns the specified string instance; no actual conversion is performed.</summary>
      <param name="value">The string to return.</param>
      <returns><paramref name="value">value</paramref> is returned unchanged.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to its equivalent string representation.</summary>
      <param name="value">The 32-bit unsigned integer to convert.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to its equivalent string representation.</summary>
      <param name="value">The 64-bit unsigned integer to convert.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to its equivalent string representation.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <returns>The string representation of <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String)">
      <summary>Converts the specified string representation of a number to an equivalent 16-bit unsigned integer.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <returns>A 16-bit unsigned integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.UInt16.MinValue"></see> or greater than <see cref="System.UInt16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt16)">
      <summary>Returns the specified 16-bit unsigned integer; no actual conversion is performed.</summary>
      <param name="value">The 16-bit unsigned integer to return.</param>
      <returns><paramref name="value">value</paramref> is returned unchanged.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.</summary>
      <param name="value">The 32-bit unsigned integer to convert.</param>
      <returns>A 16-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.UInt16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <param name="fromBase">The base of the number in value, which must be 2, 8, 10, or 16.</param>
      <returns>A 16-bit unsigned integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="fromBase">fromBase</paramref> is not 2, 8, 10, or 16.  
 -or-  
 <paramref name="value">value</paramref>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value">value</paramref> is <see cref="System.String.Empty"></see>.</exception>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> contains a character that is not a valid digit in the base specified by <paramref name="fromBase">fromBase</paramref>. The exception message indicates that there are no digits to convert if the first character in <paramref name="value">value</paramref> is invalid; otherwise, the message indicates that <paramref name="value">value</paramref> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.  
 -or-  
 <paramref name="value">value</paramref> represents a number that is less than <see cref="System.UInt16.MinValue"></see> or greater than <see cref="System.UInt16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified object to a 16-bit unsigned integer, using the specified culture-specific formatting information.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A 16-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the  <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.UInt16.MinValue"></see> or greater than <see cref="System.UInt16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a number to an equivalent 16-bit unsigned integer, using the specified culture-specific formatting information.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A 16-bit unsigned integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.UInt16.MinValue"></see> or greater than <see cref="System.UInt16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Single)">
      <summary>Converts the value of the specified single-precision floating-point number to an equivalent 16-bit unsigned integer.</summary>
      <param name="value">The single-precision floating-point number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 16-bit unsigned integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero or greater than <see cref="System.UInt16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.</summary>
      <param name="value">The 64-bit unsigned integer to convert.</param>
      <returns>A 16-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.UInt16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.</summary>
      <param name="value">The 8-bit signed integer to convert.</param>
      <returns>A 16-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Double)">
      <summary>Converts the value of the specified double-precision floating-point number to an equivalent 16-bit unsigned integer.</summary>
      <param name="value">The double-precision floating-point number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 16-bit unsigned integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero or greater than <see cref="System.UInt16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.</summary>
      <param name="value">The 64-bit signed integer to convert.</param>
      <returns>A 16-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero or greater than <see cref="System.UInt16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object)">
      <summary>Converts the value of the specified object to a 16-bit unsigned integer.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface, or null.</param>
      <returns>A 16-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the  <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.UInt16.MinValue"></see> or greater than <see cref="System.UInt16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.</summary>
      <param name="value">The 8-bit unsigned integer to convert.</param>
      <returns>A 16-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer.</summary>
      <param name="value">The Unicode character to convert.</param>
      <returns>The 16-bit unsigned integer equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.DateTime)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The date and time value to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Boolean)">
      <summary>Converts the specified Boolean value to the equivalent 16-bit unsigned integer.</summary>
      <param name="value">The Boolean value to convert.</param>
      <returns>The number 1 if <paramref name="value">value</paramref> is true; otherwise, 0.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.</summary>
      <param name="value">The 16-bit signed integer to convert.</param>
      <returns>A 16-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <returns>A 16-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero or greater than <see cref="System.UInt16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Decimal)">
      <summary>Converts the value of the specified decimal number to an equivalent 16-bit unsigned integer.</summary>
      <param name="value">The decimal number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 16-bit unsigned integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero or greater than <see cref="System.UInt16.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Single)">
      <summary>Converts the value of the specified single-precision floating-point number to an equivalent 32-bit unsigned integer.</summary>
      <param name="value">The single-precision floating-point number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 32-bit unsigned integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero or greater than <see cref="System.UInt32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <param name="fromBase">The base of the number in value, which must be 2, 8, 10, or 16.</param>
      <returns>A 32-bit unsigned integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="fromBase">fromBase</paramref> is not 2, 8, 10, or 16.  
 -or-  
 <paramref name="value">value</paramref>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value">value</paramref> is <see cref="System.String.Empty"></see>.</exception>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> contains a character that is not a valid digit in the base specified by <paramref name="fromBase">fromBase</paramref>. The exception message indicates that there are no digits to convert if the first character in <paramref name="value">value</paramref> is invalid; otherwise, the message indicates that <paramref name="value">value</paramref> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.  
 -or-  
 <paramref name="value">value</paramref> represents a number that is less than <see cref="System.UInt32.MinValue"></see> or greater than <see cref="System.UInt32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a number to an equivalent 32-bit unsigned integer, using the specified culture-specific formatting information.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A 32-bit unsigned integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.UInt32.MinValue"></see> or greater than <see cref="System.UInt32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified object to a 32-bit unsigned integer, using the specified culture-specific formatting information.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.UInt32.MinValue"></see> or greater than <see cref="System.UInt32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.</summary>
      <param name="value">The 64-bit unsigned integer to convert.</param>
      <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is greater than <see cref="System.UInt32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt32)">
      <summary>Returns the specified 32-bit unsigned integer; no actual conversion is performed.</summary>
      <param name="value">The 32-bit unsigned integer to return.</param>
      <returns><paramref name="value">value</paramref> is returned unchanged.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.</summary>
      <param name="value">The 16-bit unsigned integer to convert.</param>
      <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String)">
      <summary>Converts the specified string representation of a number to an equivalent 32-bit unsigned integer.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <returns>A 32-bit unsigned integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.UInt32.MinValue"></see> or greater than <see cref="System.UInt32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.</summary>
      <param name="value">The 8-bit signed integer to convert.</param>
      <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Boolean)">
      <summary>Converts the specified Boolean value to the equivalent 32-bit unsigned integer.</summary>
      <param name="value">The Boolean value to convert.</param>
      <returns>The number 1 if <paramref name="value">value</paramref> is true; otherwise, 0.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.</summary>
      <param name="value">The 64-bit signed integer to convert.</param>
      <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero or greater than <see cref="System.UInt32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.</summary>
      <param name="value">The 16-bit signed integer to convert.</param>
      <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Double)">
      <summary>Converts the value of the specified double-precision floating-point number to an equivalent 32-bit unsigned integer.</summary>
      <param name="value">The double-precision floating-point number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 32-bit unsigned integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero or greater than <see cref="System.UInt32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Decimal)">
      <summary>Converts the value of the specified decimal number to an equivalent 32-bit unsigned integer.</summary>
      <param name="value">The decimal number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 32-bit unsigned integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero or greater than <see cref="System.UInt32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.DateTime)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The date and time value to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer.</summary>
      <param name="value">The Unicode character to convert.</param>
      <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit unsigned integer.</summary>
      <param name="value">The 8-bit unsigned integer to convert.</param>
      <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object)">
      <summary>Converts the value of the specified object to a 32-bit unsigned integer.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface, or null.</param>
      <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.UInt32.MinValue"></see> or greater than <see cref="System.UInt32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Single)">
      <summary>Converts the value of the specified single-precision floating-point number to an equivalent 64-bit unsigned integer.</summary>
      <param name="value">The single-precision floating-point number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 64-bit unsigned integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero or greater than <see cref="System.UInt64.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String)">
      <summary>Converts the specified string representation of a number to an equivalent 64-bit unsigned integer.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <returns>A 64-bit signed integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.UInt64.MinValue"></see> or greater than <see cref="System.UInt64.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified object to a 64-bit unsigned integer, using the specified culture-specific formatting information.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A 64-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.UInt64.MinValue"></see> or greater than <see cref="System.UInt64.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.</summary>
      <param name="value">The 32-bit unsigned integer to convert.</param>
      <returns>A 64-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt64)">
      <summary>Returns the specified 64-bit unsigned integer; no actual conversion is performed.</summary>
      <param name="value">The 64-bit unsigned integer to return.</param>
      <returns><paramref name="value">value</paramref> is returned unchanged.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.</summary>
      <param name="value">The 8-bit signed integer to convert.</param>
      <returns>A 64-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.</summary>
      <param name="value">The 16-bit unsigned integer to convert.</param>
      <returns>A 64-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object)">
      <summary>Converts the value of the specified object to a 64-bit unsigned integer.</summary>
      <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface, or null.</param>
      <returns>A 64-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>, or zero if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in an appropriate format.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="value">value</paramref> does not implement the <see cref="System.IConvertible"></see> interface.  
 -or-  
 The conversion is not supported.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.UInt64.MinValue"></see> or greater than <see cref="System.UInt64.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Decimal)">
      <summary>Converts the value of the specified decimal number to an equivalent 64-bit unsigned integer.</summary>
      <param name="value">The decimal number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 64-bit unsigned integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero or greater than <see cref="System.UInt64.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <returns>A 64-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.</summary>
      <param name="value">The 16-bit signed integer to convert.</param>
      <returns>A 64-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Double)">
      <summary>Converts the value of the specified double-precision floating-point number to an equivalent 64-bit unsigned integer.</summary>
      <param name="value">The double-precision floating-point number to convert.</param>
      <returns><paramref name="value">value</paramref>, rounded to the nearest 64-bit unsigned integer. If <paramref name="value">value</paramref> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero or greater than <see cref="System.UInt64.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.DateTime)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException"></see>.</summary>
      <param name="value">The date and time value to convert.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer.</summary>
      <param name="value">The Unicode character to convert.</param>
      <returns>A 64-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit unsigned integer.</summary>
      <param name="value">The 8-bit unsigned integer to convert.</param>
      <returns>A 64-bit signed integer that is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Boolean)">
      <summary>Converts the specified Boolean value to the equivalent 64-bit unsigned integer.</summary>
      <param name="value">The Boolean value to convert.</param>
      <returns>The number 1 if <paramref name="value">value</paramref> is true; otherwise, 0.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a number to an equivalent 64-bit unsigned integer, using the specified culture-specific formatting information.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A 64-bit unsigned integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is less than <see cref="System.UInt64.MinValue"></see> or greater than <see cref="System.UInt64.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.</summary>
      <param name="value">The 64-bit signed integer to convert.</param>
      <returns>A 64-bit unsigned integer that is equivalent to <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <param name="fromBase">The base of the number in value, which must be 2, 8, 10, or 16.</param>
      <returns>A 64-bit unsigned integer that is equivalent to the number in <paramref name="value">value</paramref>, or 0 (zero) if <paramref name="value">value</paramref> is null.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="fromBase">fromBase</paramref> is not 2, 8, 10, or 16.  
 -or-  
 <paramref name="value">value</paramref>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value">value</paramref> is <see cref="System.String.Empty"></see>.</exception>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> contains a character that is not a valid digit in the base specified by <paramref name="fromBase">fromBase</paramref>. The exception message indicates that there are no digits to convert if the first character in <paramref name="value">value</paramref> is invalid; otherwise, the message indicates that <paramref name="value">value</paramref> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.  
 -or-  
 <paramref name="value">value</paramref> represents a number that is less than <see cref="System.UInt64.MinValue"></see> or greater than <see cref="System.UInt64.MaxValue"></see>.</exception>
    </member>
    <member name="T:System.MidpointRounding">
      <summary>Specifies how mathematical rounding methods should process a number that is midway between two numbers.</summary>
    </member>
    <member name="F:System.MidpointRounding.AwayFromZero">
      <summary>When a number is halfway between two others, it is rounded toward the nearest number that is away from zero.</summary>
      <returns></returns>
    </member>
    <member name="F:System.MidpointRounding.ToEven">
      <summary>When a number is halfway between two others, it is rounded toward the nearest even number.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Progress`1">
      <summary>Provides an <see cref="T:System.IProgress`1"></see> that invokes callbacks for each reported progress value.</summary>
      <typeparam name="T">Specifies the type of the progress report value.</typeparam>
    </member>
    <member name="M:System.Progress`1.#ctor">
      <summary>Initializes the <see cref="T:System.Progress`1"></see> object.</summary>
    </member>
    <member name="M:System.Progress`1.#ctor(System.Action{`0})">
      <summary>Initializes the <see cref="T:System.Progress`1"></see> object with the specified callback.</summary>
      <param name="handler">A handler to invoke for each reported progress value. This handler will be invoked in addition to any delegates registered with the <see cref="E:System.Progress`1.ProgressChanged"></see> event. Depending on the <see cref="T:System.Threading.SynchronizationContext"></see> instance captured by the <see cref="T:System.Progress`1"></see> at construction, it is possible that this handler instance could be invoked concurrently with itself.</param>
    </member>
    <member name="M:System.Progress`1.OnReport(`0)">
      <summary>Reports a progress change.</summary>
      <param name="value">The value of the updated progress.</param>
    </member>
    <member name="E:System.Progress`1.ProgressChanged">
      <summary>Raised for each reported progress value.</summary>
    </member>
    <member name="M:System.Progress`1.System#IProgress{T}#Report(`0)">
      <summary>Reports a progress change.</summary>
      <param name="value">The value of the updated progress.</param>
    </member>
    <member name="T:System.Random">
      <summary>Represents a pseudo-random number generator, which is a device that produces a sequence of numbers that meet certain statistical requirements for randomness.</summary>
    </member>
    <member name="M:System.Random.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Random"></see> class, using a time-dependent default seed value.</summary>
    </member>
    <member name="M:System.Random.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Random"></see> class, using the specified seed value.</summary>
      <param name="Seed">A number used to calculate a starting value for the pseudo-random number sequence. If a negative number is specified, the absolute value of the number is used.</param>
    </member>
    <member name="M:System.Random.Next">
      <summary>Returns a non-negative random integer.</summary>
      <returns>A 32-bit signed integer that is greater than or equal to 0 and less than <see cref="System.Int32.MaxValue"></see>.</returns>
    </member>
    <member name="M:System.Random.Next(System.Int32)">
      <summary>Returns a non-negative random integer that is less than the specified maximum.</summary>
      <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to 0.</param>
      <returns>A 32-bit signed integer that is greater than or equal to 0, and less than <paramref name="maxValue">maxValue</paramref>; that is, the range of return values ordinarily includes 0 but not <paramref name="maxValue">maxValue</paramref>. However, if <paramref name="maxValue">maxValue</paramref> equals 0, <paramref name="maxValue">maxValue</paramref> is returned.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxValue">maxValue</paramref> is less than 0.</exception>
    </member>
    <member name="M:System.Random.Next(System.Int32,System.Int32)">
      <summary>Returns a random integer that is within a specified range.</summary>
      <param name="minValue">The inclusive lower bound of the random number returned.</param>
      <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
      <returns>A 32-bit signed integer greater than or equal to <paramref name="minValue">minValue</paramref> and less than <paramref name="maxValue">maxValue</paramref>; that is, the range of return values includes <paramref name="minValue">minValue</paramref> but not <paramref name="maxValue">maxValue</paramref>. If <paramref name="minValue">minValue</paramref> equals <paramref name="maxValue">maxValue</paramref>, <paramref name="minValue">minValue</paramref> is returned.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="minValue">minValue</paramref> is greater than <paramref name="maxValue">maxValue</paramref>.</exception>
    </member>
    <member name="M:System.Random.NextBytes(System.Byte[])">
      <summary>Fills the elements of a specified array of bytes with random numbers.</summary>
      <param name="buffer">An array of bytes to contain random numbers.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
    </member>
    <member name="M:System.Random.NextDouble">
      <summary>Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0.</summary>
      <returns>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
    </member>
    <member name="M:System.Random.Sample">
      <summary>Returns a random floating-point number between 0.0 and 1.0.</summary>
      <returns>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
    </member>
    <member name="T:System.AssemblyLoadEventArgs">
      <summary>Provides data for the <see cref="E:System.AppDomain.AssemblyLoad"></see> event.</summary>
    </member>
    <member name="M:System.AssemblyLoadEventArgs.#ctor(System.Reflection.Assembly)">
      <summary>Initializes a new instance of the <see cref="T:System.AssemblyLoadEventArgs"></see> class using the specified <see cref="T:System.Reflection.Assembly"></see>.</summary>
      <param name="loadedAssembly">An instance that represents the currently loaded assembly.</param>
    </member>
    <member name="P:System.AssemblyLoadEventArgs.LoadedAssembly">
      <summary>Gets an <see cref="T:System.Reflection.Assembly"></see> that represents the currently loaded assembly.</summary>
      <returns>An instance of <see cref="System.Reflection.Assembly"></see> that represents the currently loaded assembly.</returns>
    </member>
    <member name="T:System.AssemblyLoadEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.AppDomain.AssemblyLoad"></see> event of an <see cref="T:System.AppDomain"></see>.</summary>
      <param name="sender">The source of the event.</param>
      <param name="args">An <see cref="T:System.AssemblyLoadEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.Base64FormattingOptions">
      <summary>Specifies whether relevant <see cref="Overload:System.Convert.ToBase64CharArray"></see> and <see cref="Overload:System.Convert.ToBase64String"></see> methods insert line breaks in their output.</summary>
    </member>
    <member name="F:System.Base64FormattingOptions.InsertLineBreaks">
      <summary>Inserts line breaks after every 76 characters in the string representation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Base64FormattingOptions.None">
      <summary>Does not insert line breaks after every 76 characters in the string representation.</summary>
      <returns></returns>
    </member>
    <member name="T:System.BitConverter">
      <summary>Converts base data types to an array of bytes, and an array of bytes to base data types.</summary>
    </member>
    <member name="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
      <summary>Converts the specified double-precision floating point number to a 64-bit signed integer.</summary>
      <param name="value">The number to convert.</param>
      <returns>A 64-bit signed integer whose value is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Boolean)">
      <summary>Returns the specified Boolean value as a byte array.</summary>
      <param name="value">A Boolean value.</param>
      <returns>A byte array with length 1.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Char)">
      <summary>Returns the specified Unicode character value as an array of bytes.</summary>
      <param name="value">A character to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Double)">
      <summary>Returns the specified double-precision floating point value as an array of bytes.</summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int16)">
      <summary>Returns the specified 16-bit signed integer value as an array of bytes.</summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int32)">
      <summary>Returns the specified 32-bit signed integer value as an array of bytes.</summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int64)">
      <summary>Returns the specified 64-bit signed integer value as an array of bytes.</summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Single)">
      <summary>Returns the specified single-precision floating point value as an array of bytes.</summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt16)">
      <summary>Returns the specified 16-bit unsigned integer value as an array of bytes.</summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt32)">
      <summary>Returns the specified 32-bit unsigned integer value as an array of bytes.</summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt64)">
      <summary>Returns the specified 64-bit unsigned integer value as an array of bytes.</summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:System.BitConverter.Int32BitsToSingle(System.Int32)">
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
      <summary>Converts the specified 64-bit signed integer to a double-precision floating point number.</summary>
      <param name="value">The number to convert.</param>
      <returns>A double-precision floating point number whose value is equivalent to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="F:System.BitConverter.IsLittleEndian">
      <summary>Indicates the byte order (&amp;quot;endianness&amp;quot;) in which data is stored in this computer architecture.</summary>
      <returns></returns>
    </member>
    <member name="M:System.BitConverter.SingleToInt32Bits(System.Single)">
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
      <summary>Returns a Boolean value converted from the byte at a specified position in a byte array.</summary>
      <param name="value">A byte array.</param>
      <param name="startIndex">The index of the byte within value.</param>
      <returns>true if the byte at <paramref name="startIndex">startIndex</paramref> in <paramref name="value">value</paramref> is nonzero; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> is less than zero or greater than the length of <paramref name="value">value</paramref> minus 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
      <summary>Returns a Unicode character converted from two bytes at a specified position in a byte array.</summary>
      <param name="value">An array.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A character formed by two bytes beginning at <paramref name="startIndex">startIndex</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="startIndex">startIndex</paramref> equals the length of <paramref name="value">value</paramref> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> is less than zero or greater than the length of <paramref name="value">value</paramref> minus 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
      <summary>Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.</summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A double precision floating point number formed by eight bytes beginning at <paramref name="startIndex">startIndex</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="startIndex">startIndex</paramref> is greater than or equal to the length of <paramref name="value">value</paramref> minus 7, and is less than or equal to the length of <paramref name="value">value</paramref> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> is less than zero or greater than the length of <paramref name="value">value</paramref> minus 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
      <summary>Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.</summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 16-bit signed integer formed by two bytes beginning at <paramref name="startIndex">startIndex</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="startIndex">startIndex</paramref> equals the length of <paramref name="value">value</paramref> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> is less than zero or greater than the length of <paramref name="value">value</paramref> minus 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
      <summary>Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.</summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 32-bit signed integer formed by four bytes beginning at <paramref name="startIndex">startIndex</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="startIndex">startIndex</paramref> is greater than or equal to the length of <paramref name="value">value</paramref> minus 3, and is less than or equal to the length of <paramref name="value">value</paramref> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> is less than zero or greater than the length of <paramref name="value">value</paramref> minus 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
      <summary>Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.</summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 64-bit signed integer formed by eight bytes beginning at <paramref name="startIndex">startIndex</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="startIndex">startIndex</paramref> is greater than or equal to the length of <paramref name="value">value</paramref> minus 7, and is less than or equal to the length of <paramref name="value">value</paramref> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> is less than zero or greater than the length of <paramref name="value">value</paramref> minus 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
      <summary>Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.</summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A single-precision floating point number formed by four bytes beginning at <paramref name="startIndex">startIndex</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="startIndex">startIndex</paramref> is greater than or equal to the length of <paramref name="value">value</paramref> minus 3, and is less than or equal to the length of <paramref name="value">value</paramref> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> is less than zero or greater than the length of <paramref name="value">value</paramref> minus 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[])">
      <summary>Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.</summary>
      <param name="value">An array of bytes.</param>
      <returns>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in <paramref name="value">value</paramref>; for example, &amp;quot;7F-2C-4A-00&amp;quot;.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
      <summary>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <paramref name="value">value</paramref>; for example, &amp;quot;7F-2C-4A-00&amp;quot;.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> is less than zero or greater than the length of <paramref name="value">value</paramref> minus 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
      <summary>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <param name="length">The number of array elements in value to convert.</param>
      <returns>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <paramref name="value">value</paramref>; for example, &amp;quot;7F-2C-4A-00&amp;quot;.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> or <paramref name="length">length</paramref> is less than zero.  
 -or-  
 <paramref name="startIndex">startIndex</paramref> is greater than zero and is greater than or equal to the length of <paramref name="value">value</paramref>.</exception>
      <exception cref="T:System.ArgumentException">The combination of <paramref name="startIndex">startIndex</paramref> and <paramref name="length">length</paramref> does not specify a position within <paramref name="value">value</paramref>; that is, the <paramref name="startIndex">startIndex</paramref> parameter is greater than the length of <paramref name="value">value</paramref> minus the <paramref name="length">length</paramref> parameter.</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
      <summary>Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.</summary>
      <param name="value">The array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 16-bit unsigned integer formed by two bytes beginning at <paramref name="startIndex">startIndex</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="startIndex">startIndex</paramref> equals the length of <paramref name="value">value</paramref> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> is less than zero or greater than the length of <paramref name="value">value</paramref> minus 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
      <summary>Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.</summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 32-bit unsigned integer formed by four bytes beginning at <paramref name="startIndex">startIndex</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="startIndex">startIndex</paramref> is greater than or equal to the length of <paramref name="value">value</paramref> minus 3, and is less than or equal to the length of <paramref name="value">value</paramref> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> is less than zero or greater than the length of <paramref name="value">value</paramref> minus 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
      <summary>Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.</summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 64-bit unsigned integer formed by the eight bytes beginning at <paramref name="startIndex">startIndex</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="startIndex">startIndex</paramref> is greater than or equal to the length of <paramref name="value">value</paramref> minus 7, and is less than or equal to the length of <paramref name="value">value</paramref> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex">startIndex</paramref> is less than zero or greater than the length of <paramref name="value">value</paramref> minus 1.</exception>
    </member>
    <member name="T:System.CannotUnloadAppDomainException">
      <summary>The exception that is thrown when an attempt to unload an application domain fails.</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException"></see> class.</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException"></see> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String"></see> that describes the error.</param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException"></see> class from serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.LoaderOptimization">
      <summary>An enumeration used with the <see cref="T:System.LoaderOptimizationAttribute"></see> class to specify loader optimizations for an executable.</summary>
    </member>
    <member name="F:System.LoaderOptimization.DisallowBindings">
      <summary>Ignored by the common language runtime.</summary>
      <returns></returns>
    </member>
    <member name="F:System.LoaderOptimization.DomainMask">
      <summary>Do not use. This mask selects the domain-related values, screening out the unused <see cref="F:System.LoaderOptimization.DisallowBindings"></see> flag.</summary>
      <returns></returns>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomain">
      <summary>Indicates that the application will probably have many domains that use the same code, and the loader must share maximal internal resources across application domains.</summary>
      <returns></returns>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomainHost">
      <summary>Indicates that the application will probably host unique code in multiple domains, and the loader must share resources across application domains only for globally available (strong-named) assemblies that have been added to the global assembly cache.</summary>
      <returns></returns>
    </member>
    <member name="F:System.LoaderOptimization.NotSpecified">
      <summary>Indicates that no optimizations for sharing internal resources are specified. If the default domain or hosting interface specified an optimization, then the loader uses that; otherwise, the loader uses <see cref="F:System.LoaderOptimization.SingleDomain"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.LoaderOptimization.SingleDomain">
      <summary>Indicates that the application will probably have a single domain, and loader must not share internal resources across application domains.</summary>
      <returns></returns>
    </member>
    <member name="T:System.LoaderOptimizationAttribute">
      <summary>Used to set the default loader optimization policy for the main method of an executable application.</summary>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:System.LoaderOptimizationAttribute"></see> class to the specified value.</summary>
      <param name="value">A value equivalent to a <see cref="T:System.LoaderOptimization"></see> constant.</param>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.LoaderOptimization)">
      <summary>Initializes a new instance of the <see cref="T:System.LoaderOptimizationAttribute"></see> class to the specified value.</summary>
      <param name="value">A <see cref="T:System.LoaderOptimization"></see> constant.</param>
    </member>
    <member name="P:System.LoaderOptimizationAttribute.Value">
      <summary>Gets the current <see cref="T:System.LoaderOptimization"></see> value for this instance.</summary>
      <returns>A <see cref="System.LoaderOptimization"></see> constant.</returns>
    </member>
    <member name="T:System.Net.WebUtility">
      <summary>Provides methods for encoding and decoding URLs when processing Web requests.</summary>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String)">
      <summary>Converts a string that has been HTML-encoded for HTTP transmission into a decoded string.</summary>
      <param name="value">The string to decode.</param>
      <returns>A decoded string.</returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String,System.IO.TextWriter)">
      <summary>Converts a string that has been HTML-encoded into a decoded string, and sends the decoded string to a <see cref="T:System.IO.TextWriter"></see> output stream.</summary>
      <param name="value">The string to decode.</param>
      <param name="output">A <see cref="T:System.IO.TextWriter"></see> stream of output.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="output">output</paramref> parameter cannot be null if the <paramref name="value">value</paramref> parameter is not null.</exception>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String)">
      <summary>Converts a string to an HTML-encoded string.</summary>
      <param name="value">The string to encode.</param>
      <returns>An encoded string.</returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String,System.IO.TextWriter)">
      <summary>Converts a string into an HTML-encoded string, and returns the output as a <see cref="T:System.IO.TextWriter"></see> stream of output.</summary>
      <param name="value">The string to encode.</param>
      <param name="output">A <see cref="T:System.IO.TextWriter"></see> output stream.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="output">output</paramref> parameter cannot be null if the <paramref name="value">value</paramref> parameter is not null.</exception>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecode(System.String)">
      <summary>Converts a string that has been encoded for transmission in a URL into a decoded string.</summary>
      <param name="encodedValue">A URL-encoded string to decode.</param>
      <returns>Returns <see cref="System.String"></see>.  
 A decoded string.</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Converts an encoded byte array that has been encoded for transmission in a URL into a decoded byte array.</summary>
      <param name="encodedValue">A URL-encoded <see cref="T:System.Byte"></see> array to decode.</param>
      <param name="offset">The offset, in bytes, from the start of the <see cref="T:System.Byte"></see> array to decode.</param>
      <param name="count">The count, in bytes, to decode from the <see cref="T:System.Byte"></see> array.</param>
      <returns>Returns <see cref="System.Byte"></see>.  
 A decoded <see cref="System.Byte"></see> array.</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncode(System.String)">
      <summary>Converts a text string into a URL-encoded string.</summary>
      <param name="value">The text to URL-encode.</param>
      <returns>Returns <see cref="System.String"></see>.  
 A URL-encoded string.</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Converts a byte array into a URL-encoded byte array.</summary>
      <param name="value">The <see cref="T:System.Byte"></see> array to URL-encode.</param>
      <param name="offset">The offset, in bytes, from the start of the <see cref="T:System.Byte"></see> array to encode.</param>
      <param name="count">The count, in bytes, to encode from the <see cref="T:System.Byte"></see> array.</param>
      <returns>Returns <see cref="System.Byte"></see>.  
 An encoded <see cref="System.Byte"></see> array.</returns>
    </member>
    <member name="T:System.UriBuilder">
      <summary>Provides a custom constructor for uniform resource identifiers (URIs) and modifies URIs for the <see cref="T:System.Uri"></see> class.</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.UriBuilder"></see> class.</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.UriBuilder"></see> class with the specified URI.</summary>
      <param name="uri">A URI string.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="uri">uri</paramref> is null.</exception>
      <exception cref="T:System.UriFormatException">
       In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="System.FormatException"></see>, instead.  

    
    <paramref name="uri">uri</paramref> is a zero length string or contains only spaces.  
 -or-  
 The parsing routine detected a scheme in an invalid form.  
 -or-  
 The parser detected more than two consecutive slashes in a URI that does not use the &amp;quot;file&amp;quot; scheme.  
 -or-  
 <paramref name="uri">uri</paramref> is not a valid URI.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.UriBuilder"></see> class with the specified <see cref="T:System.Uri"></see> instance.</summary>
      <param name="uri">An instance of the <see cref="T:System.Uri"></see> class.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="uri">uri</paramref> is null.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.UriBuilder"></see> class with the specified scheme and host.</summary>
      <param name="schemeName">An Internet access protocol.</param>
      <param name="hostName">A DNS-style domain name or IP address.</param>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.UriBuilder"></see> class with the specified scheme, host, and port.</summary>
      <param name="scheme">An Internet access protocol.</param>
      <param name="host">A DNS-style domain name or IP address.</param>
      <param name="portNumber">An IP port number for the service.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="portNumber">portNumber</paramref> is less than -1 or greater than 65,535.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.UriBuilder"></see> class with the specified scheme, host, port number, and path.</summary>
      <param name="scheme">An Internet access protocol.</param>
      <param name="host">A DNS-style domain name or IP address.</param>
      <param name="port">An IP port number for the service.</param>
      <param name="pathValue">The path to the Internet resource.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port">port</paramref> is less than -1 or greater than 65,535.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.UriBuilder"></see> class with the specified scheme, host, port number, path and query string or fragment identifier.</summary>
      <param name="scheme">An Internet access protocol.</param>
      <param name="host">A DNS-style domain name or IP address.</param>
      <param name="port">An IP port number for the service.</param>
      <param name="path">The path to the Internet resource.</param>
      <param name="extraValue">A query string or fragment identifier.</param>
      <exception cref="T:System.ArgumentException"><paramref name="extraValue">extraValue</paramref> is neither null nor <see cref="System.String.Empty"></see>, nor does a valid fragment identifier begin with a number sign (#), nor a valid query string begin with a question mark (?).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port">port</paramref> is less than -1 or greater than 65,535.</exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>Compares an existing <see cref="T:System.Uri"></see> instance with the contents of the <see cref="T:System.UriBuilder"></see> for equality.</summary>
      <param name="rparam">The object to compare with the current instance.</param>
      <returns>true if <paramref name="rparam">rparam</paramref> represents the same <see cref="System.Uri"></see> as the <see cref="System.Uri"></see> constructed by this <see cref="System.UriBuilder"></see> instance; otherwise, false.</returns>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>Gets or sets the fragment portion of the URI.</summary>
      <returns>The fragment portion of the URI. The fragment identifier (&amp;quot;#&amp;quot;) is added to the beginning of the fragment.</returns>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>Returns the hash code for the URI.</summary>
      <returns>The hash code generated for the URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>Gets or sets the Domain Name System (DNS) host name or IP address of a server.</summary>
      <returns>The DNS host name or IP address of the server.</returns>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>Gets or sets the password associated with the user that accesses the URI.</summary>
      <returns>The password of the user that accesses the URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>Gets or sets the path to the resource referenced by the URI.</summary>
      <returns>The path to the resource referenced by the URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>Gets or sets the port number of the URI.</summary>
      <returns>The port number of the URI.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The port cannot be set to a value less than -1 or greater than 65,535.</exception>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>Gets or sets any query information included in the URI.</summary>
      <returns>The query information included in the URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>Gets or sets the scheme name of the URI.</summary>
      <returns>The scheme of the URI.</returns>
      <exception cref="T:System.ArgumentException">The scheme cannot be set to an invalid scheme name.</exception>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>Returns the display string for the specified <see cref="T:System.UriBuilder"></see> instance.</summary>
      <returns>The string that contains the unescaped display string of the <see cref="System.UriBuilder"></see>.</returns>
      <exception cref="T:System.UriFormatException">
        
 In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="System.FormatException"></see>, instead.  


      

 The <see cref="System.UriBuilder"></see> instance has a bad password.</exception>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>Gets the <see cref="T:System.Uri"></see> instance constructed by the specified <see cref="T:System.UriBuilder"></see> instance.</summary>
      <returns>A <see cref="System.Uri"></see> that contains the URI constructed by the <see cref="System.UriBuilder"></see>.</returns>
      <exception cref="T:System.UriFormatException">
        
 In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="System.FormatException"></see>, instead.  


      

 The URI constructed by the <see cref="System.UriBuilder"></see> properties is invalid.</exception>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>The user name associated with the user that accesses the URI.</summary>
      <returns>The user name of the user that accesses the URI.</returns>
    </member>
    <member name="T:System.AppDomainUnloadedException">
      <summary>The exception that is thrown when an attempt is made to access an unloaded application domain.</summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AppDomainUnloadedException"></see> class.</summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.AppDomainUnloadedException"></see> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.AppDomainUnloadedException"></see> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.AppDomainUnloadedException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.ApplicationId">
      <summary>Contains information used to uniquely identify a manifest-based application. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ApplicationId.#ctor(System.Byte[],System.String,System.Version,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ApplicationId"></see> class.</summary>
      <param name="publicKeyToken">The array of bytes representing the raw public key data.</param>
      <param name="name">The name of the application.</param>
      <param name="version">A <see cref="T:System.Version"></see> object that specifies the version of the application.</param>
      <param name="processorArchitecture">The processor architecture of the application.</param>
      <param name="culture">The culture of the application.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.  
 -or-  
 <paramref name="version">version</paramref> is null.  
 -or-  
 <paramref name="publicKeyToken">publicKeyToken</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="name">name</paramref> is an empty string.</exception>
    </member>
    <member name="M:System.ApplicationId.Copy">
      <summary>Creates and returns an identical copy of the current application identity.</summary>
      <returns>An <see cref="System.ApplicationId"></see> object that represents an exact copy of the original.</returns>
    </member>
    <member name="P:System.ApplicationId.Culture">
      <summary>Gets a string representing the culture information for the application.</summary>
      <returns>The culture information for the application.</returns>
    </member>
    <member name="M:System.ApplicationId.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.ApplicationId"></see> object is equivalent to the current <see cref="T:System.ApplicationId"></see>.</summary>
      <param name="o">The <see cref="T:System.ApplicationId"></see> object to compare to the current <see cref="T:System.ApplicationId"></see>.</param>
      <returns>true if the specified <see cref="System.ApplicationId"></see> object is equivalent to the current <see cref="System.ApplicationId"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.ApplicationId.GetHashCode">
      <summary>Gets the hash code for the current application identity.</summary>
      <returns>The hash code for the current application identity.</returns>
    </member>
    <member name="P:System.ApplicationId.Name">
      <summary>Gets the name of the application.</summary>
      <returns>The name of the application.</returns>
    </member>
    <member name="P:System.ApplicationId.ProcessorArchitecture">
      <summary>Gets the target processor architecture for the application.</summary>
      <returns>The processor architecture of the application.</returns>
    </member>
    <member name="P:System.ApplicationId.PublicKeyToken">
      <summary>Gets the public key token for the application.</summary>
      <returns>A byte array containing the public key token for the application.</returns>
    </member>
    <member name="M:System.ApplicationId.ToString">
      <summary>Creates and returns a string representation of the application identity.</summary>
      <returns>A string representation of the application identity.</returns>
    </member>
    <member name="P:System.ApplicationId.Version">
      <summary>Gets the version of the application.</summary>
      <returns>A <see cref="System.Version"></see> that specifies the version of the application.</returns>
    </member>
    <member name="T:System.Collections.Comparer">
      <summary>Compares two objects for equivalence, where string comparisons are case-sensitive.</summary>
    </member>
    <member name="M:System.Collections.Comparer.#ctor(System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Comparer"></see> class using the specified <see cref="T:System.Globalization.CultureInfo"></see>.</summary>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use for the new <see cref="T:System.Collections.Comparer"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="culture">culture</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Comparer.Compare(System.Object,System.Object)">
      <summary>Performs a case-sensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <param name="a">The first object to compare.</param>
      <param name="b">The second object to compare.</param>
      <returns>A signed integer that indicates the relative values of <paramref name="a">a</paramref> and <paramref name="b">b</paramref>, as shown in the following table.  
  Value  

  Meaning  

  Less than zero  

 <paramref name="a">a</paramref> is less than <paramref name="b">b</paramref>.  

  Zero  

 <paramref name="a">a</paramref> equals <paramref name="b">b</paramref>.  

  Greater than zero  

 <paramref name="a">a</paramref> is greater than <paramref name="b">b</paramref>.  

 </returns>
      <exception cref="T:System.ArgumentException">Neither <paramref name="a">a</paramref> nor <paramref name="b">b</paramref> implements the <see cref="System.IComparable"></see> interface.  
 -or-  
 <paramref name="a">a</paramref> and <paramref name="b">b</paramref> are of different types and neither one can handle comparisons with the other.</exception>
    </member>
    <member name="F:System.Collections.Comparer.Default">
      <summary>Represents an instance of <see cref="T:System.Collections.Comparer"></see> that is associated with the <see cref="P:System.Threading.Thread.CurrentCulture"></see> of the current thread. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Collections.Comparer.DefaultInvariant">
      <summary>Represents an instance of <see cref="T:System.Collections.Comparer"></see> that is associated with <see cref="P:System.Globalization.CultureInfo.InvariantCulture"></see>. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Collections.Comparer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object with the data required for serialization.</summary>
      <param name="info">The object to populate with data.</param>
      <param name="context">The context information about the source or destination of the serialization.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="T:System.Math">
      <summary>Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.</summary>
    </member>
    <member name="M:System.Math.Abs(System.Decimal)">
      <summary>Returns the absolute value of a <see cref="T:System.Decimal"></see> number.</summary>
      <param name="value">A number that is greater than or equal to <see cref="F:System.Decimal.MinValue"></see>, but less than or equal to <see cref="F:System.Decimal.MaxValue"></see>.</param>
      <returns>A decimal number, x, such that 0 ≤ x ≤<see cref="System.Decimal.MaxValue"></see>.</returns>
    </member>
    <member name="M:System.Math.Abs(System.Double)">
      <summary>Returns the absolute value of a double-precision floating-point number.</summary>
      <param name="value">A number that is greater than or equal to <see cref="F:System.Double.MinValue"></see>, but less than or equal to <see cref="F:System.Double.MaxValue"></see>.</param>
      <returns>A double-precision floating-point number, x, such that 0 ≤ x ≤<see cref="System.Double.MaxValue"></see>.</returns>
    </member>
    <member name="M:System.Math.Abs(System.Int16)">
      <summary>Returns the absolute value of a 16-bit signed integer.</summary>
      <param name="value">A number that is greater than <see cref="F:System.Int16.MinValue"></see>, but less than or equal to <see cref="F:System.Int16.MaxValue"></see>.</param>
      <returns>A 16-bit signed integer, x, such that 0 ≤ x ≤<see cref="System.Int16.MaxValue"></see>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> equals <see cref="System.Int16.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Math.Abs(System.Int32)">
      <summary>Returns the absolute value of a 32-bit signed integer.</summary>
      <param name="value">A number that is greater than <see cref="F:System.Int32.MinValue"></see>, but less than or equal to <see cref="F:System.Int32.MaxValue"></see>.</param>
      <returns>A 32-bit signed integer, x, such that 0 ≤ x ≤<see cref="System.Int32.MaxValue"></see>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> equals <see cref="System.Int32.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Math.Abs(System.Int64)">
      <summary>Returns the absolute value of a 64-bit signed integer.</summary>
      <param name="value">A number that is greater than <see cref="F:System.Int64.MinValue"></see>, but less than or equal to <see cref="F:System.Int64.MaxValue"></see>.</param>
      <returns>A 64-bit signed integer, x, such that 0 ≤ x ≤<see cref="System.Int64.MaxValue"></see>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> equals <see cref="System.Int64.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Math.Abs(System.SByte)">
      <summary>Returns the absolute value of an 8-bit signed integer.</summary>
      <param name="value">A number that is greater than <see cref="F:System.SByte.MinValue"></see>, but less than or equal to <see cref="F:System.SByte.MaxValue"></see>.</param>
      <returns>An 8-bit signed integer, x, such that 0 ≤ x ≤<see cref="System.SByte.MaxValue"></see>.</returns>
      <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> equals <see cref="System.SByte.MinValue"></see>.</exception>
    </member>
    <member name="M:System.Math.Abs(System.Single)">
      <summary>Returns the absolute value of a single-precision floating-point number.</summary>
      <param name="value">A number that is greater than or equal to <see cref="F:System.Single.MinValue"></see>, but less than or equal to <see cref="F:System.Single.MaxValue"></see>.</param>
      <returns>A single-precision floating-point number, x, such that 0 ≤ x ≤<see cref="System.Single.MaxValue"></see>.</returns>
    </member>
    <member name="M:System.Math.Acos(System.Double)">
      <summary>Returns the angle whose cosine is the specified number.</summary>
      <param name="d">A number representing a cosine, where d must be greater than or equal to -1, but less than or equal to 1.</param>
      <returns>An angle, θ, measured in radians, such that 0 ≤θ≤π  
 -or-  
 <see cref="System.Double.NaN"></see> if <paramref name="d">d</paramref> &amp;lt; -1 or <paramref name="d">d</paramref> &amp;gt; 1 or <paramref name="d">d</paramref> equals <see cref="System.Double.NaN"></see>.</returns>
    </member>
    <member name="M:System.Math.Asin(System.Double)">
      <summary>Returns the angle whose sine is the specified number.</summary>
      <param name="d">A number representing a sine, where d must be greater than or equal to -1, but less than or equal to 1.</param>
      <returns>An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2  
 -or-  
 <see cref="System.Double.NaN"></see> if <paramref name="d">d</paramref> &amp;lt; -1 or <paramref name="d">d</paramref> &amp;gt; 1 or <paramref name="d">d</paramref> equals <see cref="System.Double.NaN"></see>.</returns>
    </member>
    <member name="M:System.Math.Atan(System.Double)">
      <summary>Returns the angle whose tangent is the specified number.</summary>
      <param name="d">A number representing a tangent.</param>
      <returns>An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.  
 -or-  
 <see cref="System.Double.NaN"></see> if <paramref name="d">d</paramref> equals <see cref="System.Double.NaN"></see>, -π/2 rounded to double precision (-1.5707963267949) if <paramref name="d">d</paramref> equals <see cref="System.Double.NegativeInfinity"></see>, or π/2 rounded to double precision (1.5707963267949) if <paramref name="d">d</paramref> equals <see cref="System.Double.PositiveInfinity"></see>.</returns>
    </member>
    <member name="M:System.Math.Atan2(System.Double,System.Double)">
      <summary>Returns the angle whose tangent is the quotient of two specified numbers.</summary>
      <param name="y">The y coordinate of a point.</param>
      <param name="x">The x coordinate of a point.</param>
      <returns>An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <paramref name="y">y</paramref> / <paramref name="x">x</paramref>, where (<paramref name="x">x</paramref>, <paramref name="y">y</paramref>) is a point in the Cartesian plane. Observe the following:  

For (<paramref name="x">x</paramref>, <paramref name="y">y</paramref>) in quadrant 1, 0 &amp;lt; θ &amp;lt; π/2.  

For (<paramref name="x">x</paramref>, <paramref name="y">y</paramref>) in quadrant 2, π/2 &amp;lt; θ≤π.  

For (<paramref name="x">x</paramref>, <paramref name="y">y</paramref>) in quadrant 3, -π &amp;lt; θ &amp;lt; -π/2.  

For (<paramref name="x">x</paramref>, <paramref name="y">y</paramref>) in quadrant 4, -π/2 &amp;lt; θ &amp;lt; 0.  


 For points on the boundaries of the quadrants, the return value is the following:  

If y is 0 and x is not negative, θ = 0.  

If y is 0 and x is negative, θ = π.  

If y is positive and x is 0, θ = π/2.  

If y is negative and x is 0, θ = -π/2.  

If y is 0 and x is 0, θ = 0.  


 If <paramref name="x">x</paramref> or <paramref name="y">y</paramref> is <see cref="System.Double.NaN"></see>, or if <paramref name="x">x</paramref> and <paramref name="y">y</paramref> are either <see cref="System.Double.PositiveInfinity"></see> or <see cref="System.Double.NegativeInfinity"></see>, the method returns <see cref="System.Double.NaN"></see>.</returns>
    </member>
    <member name="M:System.Math.BigMul(System.Int32,System.Int32)">
      <summary>Produces the full product of two 32-bit numbers.</summary>
      <param name="a">The first number to multiply.</param>
      <param name="b">The second number to multiply.</param>
      <returns>The number containing the product of the specified numbers.</returns>
    </member>
    <member name="M:System.Math.Ceiling(System.Decimal)">
      <summary>Returns the smallest integral value that is greater than or equal to the specified decimal number.</summary>
      <param name="d">A decimal number.</param>
      <returns>The smallest integral value that is greater than or equal to <paramref name="d">d</paramref>. Note that this method returns a <see cref="System.Decimal"></see> instead of an integral type.</returns>
    </member>
    <member name="M:System.Math.Ceiling(System.Double)">
      <summary>Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number.</summary>
      <param name="a">A double-precision floating-point number.</param>
      <returns>The smallest integral value that is greater than or equal to <paramref name="a">a</paramref>. If <paramref name="a">a</paramref> is equal to <see cref="System.Double.NaN"></see>, <see cref="System.Double.NegativeInfinity"></see>, or <see cref="System.Double.PositiveInfinity"></see>, that value is returned. Note that this method returns a <see cref="System.Double"></see> instead of an integral type.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)">
      <param name="value"></param>
      <param name="min"></param>
      <param name="max"></param>
      <returns></returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt32,System.UInt32,System.UInt32)">
      <param name="value"></param>
      <param name="min"></param>
      <param name="max"></param>
      <returns></returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt16,System.UInt16,System.UInt16)">
      <param name="value"></param>
      <param name="min"></param>
      <param name="max"></param>
      <returns></returns>
    </member>
    <member name="M:System.Math.Clamp(System.Single,System.Single,System.Single)">
      <param name="value"></param>
      <param name="min"></param>
      <param name="max"></param>
      <returns></returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int64,System.Int64,System.Int64)">
      <param name="value"></param>
      <param name="min"></param>
      <param name="max"></param>
      <returns></returns>
    </member>
    <member name="M:System.Math.Clamp(System.SByte,System.SByte,System.SByte)">
      <param name="value"></param>
      <param name="min"></param>
      <param name="max"></param>
      <returns></returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int16,System.Int16,System.Int16)">
      <param name="value"></param>
      <param name="min"></param>
      <param name="max"></param>
      <returns></returns>
    </member>
    <member name="M:System.Math.Clamp(System.Double,System.Double,System.Double)">
      <param name="value"></param>
      <param name="min"></param>
      <param name="max"></param>
      <returns></returns>
    </member>
    <member name="M:System.Math.Clamp(System.Decimal,System.Decimal,System.Decimal)">
      <param name="value"></param>
      <param name="min"></param>
      <param name="max"></param>
      <returns></returns>
    </member>
    <member name="M:System.Math.Clamp(System.Byte,System.Byte,System.Byte)">
      <param name="value"></param>
      <param name="min"></param>
      <param name="max"></param>
      <returns></returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int32,System.Int32,System.Int32)">
      <param name="value"></param>
      <param name="min"></param>
      <param name="max"></param>
      <returns></returns>
    </member>
    <member name="M:System.Math.Cos(System.Double)">
      <summary>Returns the cosine of the specified angle.</summary>
      <param name="d">An angle, measured in radians.</param>
      <returns>The cosine of <paramref name="d">d</paramref>. If <paramref name="d">d</paramref> is equal to <see cref="System.Double.NaN"></see>, <see cref="System.Double.NegativeInfinity"></see>, or <see cref="System.Double.PositiveInfinity"></see>, this method returns <see cref="System.Double.NaN"></see>.</returns>
    </member>
    <member name="M:System.Math.Cosh(System.Double)">
      <summary>Returns the hyperbolic cosine of the specified angle.</summary>
      <param name="value">An angle, measured in radians.</param>
      <returns>The hyperbolic cosine of <paramref name="value">value</paramref>. If <paramref name="value">value</paramref> is equal to <see cref="System.Double.NegativeInfinity"></see> or <see cref="System.Double.PositiveInfinity"></see>, <see cref="System.Double.PositiveInfinity"></see> is returned. If <paramref name="value">value</paramref> is equal to <see cref="System.Double.NaN"></see>, <see cref="System.Double.NaN"></see> is returned.</returns>
    </member>
    <member name="M:System.Math.DivRem(System.Int64,System.Int64,System.Int64@)">
      <summary>Calculates the quotient of two 64-bit signed integers and also returns the remainder in an output parameter.</summary>
      <param name="a">The dividend.</param>
      <param name="b">The divisor.</param>
      <param name="result">The remainder.</param>
      <returns>The quotient of the specified numbers.</returns>
      <exception cref="T:System.DivideByZeroException"><paramref name="b">b</paramref> is zero.</exception>
    </member>
    <member name="M:System.Math.DivRem(System.Int32,System.Int32,System.Int32@)">
      <summary>Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.</summary>
      <param name="a">The dividend.</param>
      <param name="b">The divisor.</param>
      <param name="result">The remainder.</param>
      <returns>The quotient of the specified numbers.</returns>
      <exception cref="T:System.DivideByZeroException"><paramref name="b">b</paramref> is zero.</exception>
    </member>
    <member name="F:System.Math.E">
      <summary>Represents the natural logarithmic base, specified by the constant, e.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Math.Exp(System.Double)">
      <summary>Returns e raised to the specified power.</summary>
      <param name="d">A number specifying a power.</param>
      <returns>The number e raised to the power <paramref name="d">d</paramref>. If <paramref name="d">d</paramref> equals <see cref="System.Double.NaN"></see> or <see cref="System.Double.PositiveInfinity"></see>, that value is returned. If <paramref name="d">d</paramref> equals <see cref="System.Double.NegativeInfinity"></see>, 0 is returned.</returns>
    </member>
    <member name="M:System.Math.Floor(System.Decimal)">
      <summary>Returns the largest integer less than or equal to the specified decimal number.</summary>
      <param name="d">A decimal number.</param>
      <returns>The largest integer less than or equal to <paramref name="d">d</paramref>.  Note that the method returns an integral value of type <see cref="System.Math"></see>.</returns>
    </member>
    <member name="M:System.Math.Floor(System.Double)">
      <summary>Returns the largest integer less than or equal to the specified double-precision floating-point number.</summary>
      <param name="d">A double-precision floating-point number.</param>
      <returns>The largest integer less than or equal to <paramref name="d">d</paramref>. If <paramref name="d">d</paramref> is equal to <see cref="System.Double.NaN"></see>, <see cref="System.Double.NegativeInfinity"></see>, or <see cref="System.Double.PositiveInfinity"></see>, that value is returned.</returns>
    </member>
    <member name="M:System.Math.IEEERemainder(System.Double,System.Double)">
      <summary>Returns the remainder resulting from the division of a specified number by another specified number.</summary>
      <param name="x">A dividend.</param>
      <param name="y">A divisor.</param>
      <returns>A number equal to <paramref name="x">x</paramref> - (<paramref name="y">y</paramref> Q), where Q is the quotient of <paramref name="x">x</paramref> / <paramref name="y">y</paramref> rounded to the nearest integer (if <paramref name="x">x</paramref> / <paramref name="y">y</paramref> falls halfway between two integers, the even integer is returned).  
 If <paramref name="x">x</paramref> - (<paramref name="y">y</paramref> Q) is zero, the value +0 is returned if <paramref name="x">x</paramref> is positive, or -0 if <paramref name="x">x</paramref> is negative.  
 If <paramref name="y">y</paramref> = 0, <see cref="System.Double.NaN"></see> is returned.</returns>
    </member>
    <member name="M:System.Math.Log(System.Double)">
      <summary>Returns the natural (base e) logarithm of a specified number.</summary>
      <param name="d">The number whose logarithm is to be found.</param>
      <returns>One of the values in the following table.  
 <paramref name="d">d</paramref> parameter  

  Return value  

  Positive  

  The natural logarithm of <paramref name="d">d</paramref>; that is, ln <paramref name="d">d</paramref>, or log e <paramref name="d">d</paramref> Zero  

 <see cref="System.Double.NegativeInfinity"></see> Negative  

 <see cref="System.Double.NaN"></see> Equal to <see cref="System.Double.NaN"></see><see cref="System.Double.NaN"></see> Equal to <see cref="System.Double.PositiveInfinity"></see><see cref="System.Double.PositiveInfinity"></see></returns>
    </member>
    <member name="M:System.Math.Log(System.Double,System.Double)">
      <summary>Returns the logarithm of a specified number in a specified base.</summary>
      <param name="a">The number whose logarithm is to be found.</param>
      <param name="newBase">The base of the logarithm.</param>
      <returns>One of the values in the following table. (+Infinity denotes <see cref="System.Double.PositiveInfinity"></see>, -Infinity denotes <see cref="System.Double.NegativeInfinity"></see>, and NaN denotes <see cref="System.Double.NaN"></see>.)  
 <paramref name="a">a</paramref><paramref name="newBase">newBase</paramref> Return value  

 <paramref name="a">a</paramref>&amp;gt; 0  

  (0 &amp;lt;<paramref name="newBase">newBase</paramref>&amp;lt; 1) -or-(<paramref name="newBase">newBase</paramref>&amp;gt; 1)  

  lognewBase(a)  

 <paramref name="a">a</paramref>&amp;lt; 0  

  (any value)  

  NaN  

  (any value)  

 <paramref name="newBase">newBase</paramref>&amp;lt; 0  

  NaN  

 <paramref name="a">a</paramref> != 1  

 <paramref name="newBase">newBase</paramref> = 0  

  NaN  

 <paramref name="a">a</paramref> != 1  

 <paramref name="newBase">newBase</paramref> = +Infinity  

  NaN  

 <paramref name="a">a</paramref> = NaN  

  (any value)  

  NaN  

  (any value)  

 <paramref name="newBase">newBase</paramref> = NaN  

  NaN  

  (any value)  

 <paramref name="newBase">newBase</paramref> = 1  

  NaN  

 <paramref name="a">a</paramref> = 0  

  0 &amp;lt;<paramref name="newBase">newBase</paramref>&amp;lt; 1  

  +Infinity  

 <paramref name="a">a</paramref> = 0  

 <paramref name="newBase">newBase</paramref>&amp;gt; 1  

  -Infinity  

 <paramref name="a">a</paramref> =  +Infinity  

  0 &amp;lt;<paramref name="newBase">newBase</paramref>&amp;lt; 1  

  -Infinity  

 <paramref name="a">a</paramref> =  +Infinity  

 <paramref name="newBase">newBase</paramref>&amp;gt; 1  

  +Infinity  

 <paramref name="a">a</paramref> = 1  

 <paramref name="newBase">newBase</paramref> = 0  

  0  

 <paramref name="a">a</paramref> = 1  

 <paramref name="newBase">newBase</paramref> = +Infinity  

  0  

 </returns>
    </member>
    <member name="M:System.Math.Log10(System.Double)">
      <summary>Returns the base 10 logarithm of a specified number.</summary>
      <param name="d">A number whose logarithm is to be found.</param>
      <returns>One of the values in the following table.  
 <paramref name="d">d</paramref> parameter  

  Return value  

  Positive  

  The base 10 log of <paramref name="d">d</paramref>; that is, log 10<paramref name="d">d</paramref>.  

  Zero  

 <see cref="System.Double.NegativeInfinity"></see> Negative  

 <see cref="System.Double.NaN"></see> Equal to <see cref="System.Double.NaN"></see><see cref="System.Double.NaN"></see> Equal to <see cref="System.Double.PositiveInfinity"></see><see cref="System.Double.PositiveInfinity"></see></returns>
    </member>
    <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
      <summary>Returns the larger of two 16-bit unsigned integers.</summary>
      <param name="val1">The first of two 16-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 16-bit unsigned integers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is larger.</returns>
    </member>
    <member name="M:System.Math.Max(System.Single,System.Single)">
      <summary>Returns the larger of two single-precision floating-point numbers.</summary>
      <param name="val1">The first of two single-precision floating-point numbers to compare.</param>
      <param name="val2">The second of two single-precision floating-point numbers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is larger. If <paramref name="val1">val1</paramref>, or <paramref name="val2">val2</paramref>, or both <paramref name="val1">val1</paramref> and <paramref name="val2">val2</paramref> are equal to <see cref="System.Single.NaN"></see>, <see cref="System.Single.NaN"></see> is returned.</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
      <summary>Returns the larger of two 64-bit unsigned integers.</summary>
      <param name="val1">The first of two 64-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 64-bit unsigned integers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is larger.</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
      <summary>Returns the larger of two 32-bit unsigned integers.</summary>
      <param name="val1">The first of two 32-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 32-bit unsigned integers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is larger.</returns>
    </member>
    <member name="M:System.Math.Max(System.SByte,System.SByte)">
      <summary>Returns the larger of two 8-bit signed integers.</summary>
      <param name="val1">The first of two 8-bit signed integers to compare.</param>
      <param name="val2">The second of two 8-bit signed integers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is larger.</returns>
    </member>
    <member name="M:System.Math.Max(System.Int32,System.Int32)">
      <summary>Returns the larger of two 32-bit signed integers.</summary>
      <param name="val1">The first of two 32-bit signed integers to compare.</param>
      <param name="val2">The second of two 32-bit signed integers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is larger.</returns>
    </member>
    <member name="M:System.Math.Max(System.Int16,System.Int16)">
      <summary>Returns the larger of two 16-bit signed integers.</summary>
      <param name="val1">The first of two 16-bit signed integers to compare.</param>
      <param name="val2">The second of two 16-bit signed integers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is larger.</returns>
    </member>
    <member name="M:System.Math.Max(System.Double,System.Double)">
      <summary>Returns the larger of two double-precision floating-point numbers.</summary>
      <param name="val1">The first of two double-precision floating-point numbers to compare.</param>
      <param name="val2">The second of two double-precision floating-point numbers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is larger. If <paramref name="val1">val1</paramref>, <paramref name="val2">val2</paramref>, or both <paramref name="val1">val1</paramref> and <paramref name="val2">val2</paramref> are equal to <see cref="System.Double.NaN"></see>, <see cref="System.Double.NaN"></see> is returned.</returns>
    </member>
    <member name="M:System.Math.Max(System.Decimal,System.Decimal)">
      <summary>Returns the larger of two decimal numbers.</summary>
      <param name="val1">The first of two decimal numbers to compare.</param>
      <param name="val2">The second of two decimal numbers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is larger.</returns>
    </member>
    <member name="M:System.Math.Max(System.Byte,System.Byte)">
      <summary>Returns the larger of two 8-bit unsigned integers.</summary>
      <param name="val1">The first of two 8-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 8-bit unsigned integers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is larger.</returns>
    </member>
    <member name="M:System.Math.Max(System.Int64,System.Int64)">
      <summary>Returns the larger of two 64-bit signed integers.</summary>
      <param name="val1">The first of two 64-bit signed integers to compare.</param>
      <param name="val2">The second of two 64-bit signed integers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is larger.</returns>
    </member>
    <member name="M:System.Math.Min(System.Int64,System.Int64)">
      <summary>Returns the smaller of two 64-bit signed integers.</summary>
      <param name="val1">The first of two 64-bit signed integers to compare.</param>
      <param name="val2">The second of two 64-bit signed integers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is smaller.</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
      <summary>Returns the smaller of two 64-bit unsigned integers.</summary>
      <param name="val1">The first of two 64-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 64-bit unsigned integers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is smaller.</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
      <summary>Returns the smaller of two 32-bit unsigned integers.</summary>
      <param name="val1">The first of two 32-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 32-bit unsigned integers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is smaller.</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
      <summary>Returns the smaller of two 16-bit unsigned integers.</summary>
      <param name="val1">The first of two 16-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 16-bit unsigned integers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is smaller.</returns>
    </member>
    <member name="M:System.Math.Min(System.Single,System.Single)">
      <summary>Returns the smaller of two single-precision floating-point numbers.</summary>
      <param name="val1">The first of two single-precision floating-point numbers to compare.</param>
      <param name="val2">The second of two single-precision floating-point numbers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is smaller. If <paramref name="val1">val1</paramref>, <paramref name="val2">val2</paramref>, or both <paramref name="val1">val1</paramref> and <paramref name="val2">val2</paramref> are equal to <see cref="System.Single.NaN"></see>, <see cref="System.Single.NaN"></see> is returned.</returns>
    </member>
    <member name="M:System.Math.Min(System.SByte,System.SByte)">
      <summary>Returns the smaller of two 8-bit signed integers.</summary>
      <param name="val1">The first of two 8-bit signed integers to compare.</param>
      <param name="val2">The second of two 8-bit signed integers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is smaller.</returns>
    </member>
    <member name="M:System.Math.Min(System.Int16,System.Int16)">
      <summary>Returns the smaller of two 16-bit signed integers.</summary>
      <param name="val1">The first of two 16-bit signed integers to compare.</param>
      <param name="val2">The second of two 16-bit signed integers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is smaller.</returns>
    </member>
    <member name="M:System.Math.Min(System.Double,System.Double)">
      <summary>Returns the smaller of two double-precision floating-point numbers.</summary>
      <param name="val1">The first of two double-precision floating-point numbers to compare.</param>
      <param name="val2">The second of two double-precision floating-point numbers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is smaller. If <paramref name="val1">val1</paramref>, <paramref name="val2">val2</paramref>, or both <paramref name="val1">val1</paramref> and <paramref name="val2">val2</paramref> are equal to <see cref="System.Double.NaN"></see>, <see cref="System.Double.NaN"></see> is returned.</returns>
    </member>
    <member name="M:System.Math.Min(System.Decimal,System.Decimal)">
      <summary>Returns the smaller of two decimal numbers.</summary>
      <param name="val1">The first of two decimal numbers to compare.</param>
      <param name="val2">The second of two decimal numbers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is smaller.</returns>
    </member>
    <member name="M:System.Math.Min(System.Byte,System.Byte)">
      <summary>Returns the smaller of two 8-bit unsigned integers.</summary>
      <param name="val1">The first of two 8-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 8-bit unsigned integers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is smaller.</returns>
    </member>
    <member name="M:System.Math.Min(System.Int32,System.Int32)">
      <summary>Returns the smaller of two 32-bit signed integers.</summary>
      <param name="val1">The first of two 32-bit signed integers to compare.</param>
      <param name="val2">The second of two 32-bit signed integers to compare.</param>
      <returns>Parameter <paramref name="val1">val1</paramref> or <paramref name="val2">val2</paramref>, whichever is smaller.</returns>
    </member>
    <member name="F:System.Math.PI">
      <summary>Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Math.Pow(System.Double,System.Double)">
      <summary>Returns a specified number raised to the specified power.</summary>
      <param name="x">A double-precision floating-point number to be raised to a power.</param>
      <param name="y">A double-precision floating-point number that specifies a power.</param>
      <returns>The number <paramref name="x">x</paramref> raised to the power <paramref name="y">y</paramref>.</returns>
    </member>
    <member name="M:System.Math.Round(System.Double)">
      <summary>Rounds a double-precision floating-point value to the nearest integral value.</summary>
      <param name="a">A double-precision floating-point number to be rounded.</param>
      <returns>The integer nearest <paramref name="a">a</paramref>. If the fractional component of <paramref name="a">a</paramref> is halfway between two integers, one of which is even and the other odd, then the even number is returned. Note that this method returns a <see cref="System.Double"></see> instead of an integral type.</returns>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)">
      <summary>Rounds a decimal value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.</summary>
      <param name="d">A decimal number to be rounded.</param>
      <param name="decimals">The number of decimal places in the return value.</param>
      <param name="mode">Specification for how to round d if it is midway between two other numbers.</param>
      <returns>The number nearest to <paramref name="d">d</paramref> that contains a number of fractional digits equal to <paramref name="decimals">decimals</paramref>. If <paramref name="d">d</paramref> has fewer fractional digits than <paramref name="decimals">decimals</paramref>, <paramref name="d">d</paramref> is returned unchanged.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="decimals">decimals</paramref> is less than 0 or greater than 28.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="mode">mode</paramref> is not a valid value of <see cref="System.MidpointRounding"></see>.</exception>
      <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="System.Decimal"></see>.</exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)">
      <summary>Rounds a double-precision floating-point value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.</summary>
      <param name="value">A double-precision floating-point number to be rounded.</param>
      <param name="digits">The number of fractional digits in the return value.</param>
      <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
      <returns>The number nearest to <paramref name="value">value</paramref> that has a number of fractional digits equal to <paramref name="digits">digits</paramref>. If <paramref name="value">value</paramref> has fewer fractional digits than <paramref name="digits">digits</paramref>, <paramref name="value">value</paramref> is returned unchanged.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="digits">digits</paramref> is less than 0 or greater than 15.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="mode">mode</paramref> is not a valid value of <see cref="System.MidpointRounding"></see>.</exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.MidpointRounding)">
      <summary>Rounds a double-precision floating-point value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.</summary>
      <param name="value">A double-precision floating-point number to be rounded.</param>
      <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
      <returns>The integer nearest <paramref name="value">value</paramref>. If <paramref name="value">value</paramref> is halfway between two integers, one of which is even and the other odd, then <paramref name="mode">mode</paramref> determines which of the two is returned.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="mode">mode</paramref> is not a valid value of <see cref="System.MidpointRounding"></see>.</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal)">
      <summary>Rounds a decimal value to the nearest integral value.</summary>
      <param name="d">A decimal number to be rounded.</param>
      <returns>The integer nearest parameter <paramref name="d">d</paramref>. If the fractional component of <paramref name="d">d</paramref> is halfway between two integers, one of which is even and the other odd, the even number is returned. Note that this method returns a <see cref="System.Decimal"></see> instead of an integral type.</returns>
      <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="System.Decimal"></see>.</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.MidpointRounding)">
      <summary>Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.</summary>
      <param name="d">A decimal number to be rounded.</param>
      <param name="mode">Specification for how to round d if it is midway between two other numbers.</param>
      <returns>The integer nearest <paramref name="d">d</paramref>. If <paramref name="d">d</paramref> is halfway between two numbers, one of which is even and the other odd, then <paramref name="mode">mode</paramref> determines which of the two is returned.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="mode">mode</paramref> is not a valid value of <see cref="System.MidpointRounding"></see>.</exception>
      <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="System.Decimal"></see>.</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32)">
      <summary>Rounds a decimal value to a specified number of fractional digits.</summary>
      <param name="d">A decimal number to be rounded.</param>
      <param name="decimals">The number of decimal places in the return value.</param>
      <returns>The number nearest to <paramref name="d">d</paramref> that contains a number of fractional digits equal to <paramref name="decimals">decimals</paramref>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="decimals">decimals</paramref> is less than 0 or greater than 28.</exception>
      <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="System.Decimal"></see>.</exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32)">
      <summary>Rounds a double-precision floating-point value to a specified number of fractional digits.</summary>
      <param name="value">A double-precision floating-point number to be rounded.</param>
      <param name="digits">The number of fractional digits in the return value.</param>
      <returns>The number nearest to <paramref name="value">value</paramref> that contains a number of fractional digits equal to <paramref name="digits">digits</paramref>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="digits">digits</paramref> is less than 0 or greater than 15.</exception>
    </member>
    <member name="M:System.Math.Sign(System.Decimal)">
      <summary>Returns an integer that indicates the sign of a decimal number.</summary>
      <param name="value">A signed decimal number.</param>
      <returns>A number that indicates the sign of <paramref name="value">value</paramref>, as shown in the following table.  
  Return value  

  Meaning  

  -1  

 <paramref name="value">value</paramref> is less than zero.  

  0  

 <paramref name="value">value</paramref> is equal to zero.  

  1  

 <paramref name="value">value</paramref> is greater than zero.  

 </returns>
    </member>
    <member name="M:System.Math.Sign(System.Double)">
      <summary>Returns an integer that indicates the sign of a double-precision floating-point number.</summary>
      <param name="value">A signed number.</param>
      <returns>A number that indicates the sign of <paramref name="value">value</paramref>, as shown in the following table.  
  Return value  

  Meaning  

  -1  

 <paramref name="value">value</paramref> is less than zero.  

  0  

 <paramref name="value">value</paramref> is equal to zero.  

  1  

 <paramref name="value">value</paramref> is greater than zero.  

 </returns>
      <exception cref="T:System.ArithmeticException"><paramref name="value">value</paramref> is equal to <see cref="System.Double.NaN"></see>.</exception>
    </member>
    <member name="M:System.Math.Sign(System.Int16)">
      <summary>Returns an integer that indicates the sign of a 16-bit signed integer.</summary>
      <param name="value">A signed number.</param>
      <returns>A number that indicates the sign of <paramref name="value">value</paramref>, as shown in the following table.  
  Return value  

  Meaning  

  -1  

 <paramref name="value">value</paramref> is less than zero.  

  0  

 <paramref name="value">value</paramref> is equal to zero.  

  1  

 <paramref name="value">value</paramref> is greater than zero.  

 </returns>
    </member>
    <member name="M:System.Math.Sign(System.Int32)">
      <summary>Returns an integer that indicates the sign of a 32-bit signed integer.</summary>
      <param name="value">A signed number.</param>
      <returns>A number that indicates the sign of <paramref name="value">value</paramref>, as shown in the following table.  
  Return value  

  Meaning  

  -1  

 <paramref name="value">value</paramref> is less than zero.  

  0  

 <paramref name="value">value</paramref> is equal to zero.  

  1  

 <paramref name="value">value</paramref> is greater than zero.  

 </returns>
    </member>
    <member name="M:System.Math.Sign(System.Int64)">
      <summary>Returns an integer that indicates the sign of a 64-bit signed integer.</summary>
      <param name="value">A signed number.</param>
      <returns>A number that indicates the sign of <paramref name="value">value</paramref>, as shown in the following table.  
  Return value  

  Meaning  

  -1  

 <paramref name="value">value</paramref> is less than zero.  

  0  

 <paramref name="value">value</paramref> is equal to zero.  

  1  

 <paramref name="value">value</paramref> is greater than zero.  

 </returns>
    </member>
    <member name="M:System.Math.Sign(System.SByte)">
      <summary>Returns an integer that indicates the sign of an 8-bit signed integer.</summary>
      <param name="value">A signed number.</param>
      <returns>A number that indicates the sign of <paramref name="value">value</paramref>, as shown in the following table.  
  Return value  

  Meaning  

  -1  

 <paramref name="value">value</paramref> is less than zero.  

  0  

 <paramref name="value">value</paramref> is equal to zero.  

  1  

 <paramref name="value">value</paramref> is greater than zero.  

 </returns>
    </member>
    <member name="M:System.Math.Sign(System.Single)">
      <summary>Returns an integer that indicates the sign of a single-precision floating-point number.</summary>
      <param name="value">A signed number.</param>
      <returns>A number that indicates the sign of <paramref name="value">value</paramref>, as shown in the following table.  
  Return value  

  Meaning  

  -1  

 <paramref name="value">value</paramref> is less than zero.  

  0  

 <paramref name="value">value</paramref> is equal to zero.  

  1  

 <paramref name="value">value</paramref> is greater than zero.  

 </returns>
      <exception cref="T:System.ArithmeticException"><paramref name="value">value</paramref> is equal to <see cref="System.Single.NaN"></see>.</exception>
    </member>
    <member name="M:System.Math.Sin(System.Double)">
      <summary>Returns the sine of the specified angle.</summary>
      <param name="a">An angle, measured in radians.</param>
      <returns>The sine of <paramref name="a">a</paramref>. If <paramref name="a">a</paramref> is equal to <see cref="System.Double.NaN"></see>, <see cref="System.Double.NegativeInfinity"></see>, or <see cref="System.Double.PositiveInfinity"></see>, this method returns <see cref="System.Double.NaN"></see>.</returns>
    </member>
    <member name="M:System.Math.Sinh(System.Double)">
      <summary>Returns the hyperbolic sine of the specified angle.</summary>
      <param name="value">An angle, measured in radians.</param>
      <returns>The hyperbolic sine of <paramref name="value">value</paramref>. If <paramref name="value">value</paramref> is equal to <see cref="System.Double.NegativeInfinity"></see>, <see cref="System.Double.PositiveInfinity"></see>, or <see cref="System.Double.NaN"></see>, this method returns a <see cref="System.Double"></see> equal to <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Math.Sqrt(System.Double)">
      <summary>Returns the square root of a specified number.</summary>
      <param name="d">The number whose square root is to be found.</param>
      <returns>One of the values in the following table.  
 <paramref name="d">d</paramref> parameter  

  Return value  

  Zero or positive  

  The positive square root of <paramref name="d">d</paramref>.  

  Negative  

 <see cref="System.Double.NaN"></see> Equals <see cref="System.Double.NaN"></see><see cref="System.Double.NaN"></see> Equals <see cref="System.Double.PositiveInfinity"></see><see cref="System.Double.PositiveInfinity"></see></returns>
    </member>
    <member name="M:System.Math.Tan(System.Double)">
      <summary>Returns the tangent of the specified angle.</summary>
      <param name="a">An angle, measured in radians.</param>
      <returns>The tangent of <paramref name="a">a</paramref>. If <paramref name="a">a</paramref> is equal to <see cref="System.Double.NaN"></see>, <see cref="System.Double.NegativeInfinity"></see>, or <see cref="System.Double.PositiveInfinity"></see>, this method returns <see cref="System.Double.NaN"></see>.</returns>
    </member>
    <member name="M:System.Math.Tanh(System.Double)">
      <summary>Returns the hyperbolic tangent of the specified angle.</summary>
      <param name="value">An angle, measured in radians.</param>
      <returns>The hyperbolic tangent of <paramref name="value">value</paramref>. If <paramref name="value">value</paramref> is equal to <see cref="System.Double.NegativeInfinity"></see>, this method returns -1. If value is equal to <see cref="System.Double.PositiveInfinity"></see>, this method returns 1. If <paramref name="value">value</paramref> is equal to <see cref="System.Double.NaN"></see>, this method returns <see cref="System.Double.NaN"></see>.</returns>
    </member>
    <member name="M:System.Math.Truncate(System.Decimal)">
      <summary>Calculates the integral part of a specified decimal number.</summary>
      <param name="d">A number to truncate.</param>
      <returns>The integral part of <paramref name="d">d</paramref>; that is, the number that remains after any fractional digits have been discarded.</returns>
    </member>
    <member name="M:System.Math.Truncate(System.Double)">
      <summary>Calculates the integral part of a specified double-precision floating-point number.</summary>
      <param name="d">A number to truncate.</param>
      <returns>The integral part of <paramref name="d">d</paramref>; that is, the number that remains after any fractional digits have been discarded, or one of the values listed in the following table.  
 <paramref name="d">d</paramref> Return value  

 <see cref="System.Double.NaN"></see><see cref="System.Double.NaN"></see><see cref="System.Double.NegativeInfinity"></see><see cref="System.Double.NegativeInfinity"></see><see cref="System.Double.PositiveInfinity"></see><see cref="System.Double.PositiveInfinity"></see></returns>
    </member>
    <member name="T:System.MathF">
      
    </member>
    <member name="M:System.MathF.Abs(System.Single)">
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Acos(System.Single)">
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Asin(System.Single)">
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Atan(System.Single)">
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Atan2(System.Single,System.Single)">
      <param name="y"></param>
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Ceiling(System.Single)">
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Cos(System.Single)">
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Cosh(System.Single)">
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="F:System.MathF.E">
      <returns></returns>
    </member>
    <member name="M:System.MathF.Exp(System.Single)">
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Floor(System.Single)">
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.IEEERemainder(System.Single,System.Single)">
      <param name="x"></param>
      <param name="y"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Log(System.Single)">
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Log(System.Single,System.Single)">
      <param name="x"></param>
      <param name="y"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Log10(System.Single)">
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Max(System.Single,System.Single)">
      <param name="x"></param>
      <param name="y"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Min(System.Single,System.Single)">
      <param name="x"></param>
      <param name="y"></param>
      <returns></returns>
    </member>
    <member name="F:System.MathF.PI">
      <returns></returns>
    </member>
    <member name="M:System.MathF.Pow(System.Single,System.Single)">
      <param name="x"></param>
      <param name="y"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Round(System.Single)">
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.Int32)">
      <param name="x"></param>
      <param name="digits"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.MidpointRounding)">
      <param name="x"></param>
      <param name="mode"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.Int32,System.MidpointRounding)">
      <param name="x"></param>
      <param name="digits"></param>
      <param name="mode"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Sign(System.Single)">
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Sin(System.Single)">
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Sinh(System.Single)">
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Sqrt(System.Single)">
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Tan(System.Single)">
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Tanh(System.Single)">
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="M:System.MathF.Truncate(System.Single)">
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="T:System.OperatingSystem">
      <summary>Represents information about an operating system, such as the version and platform identifier. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.OperatingSystem.#ctor(System.PlatformID,System.Version)">
      <summary>Initializes a new instance of the <see cref="T:System.OperatingSystem"></see> class, using the specified platform identifier value and version object.</summary>
      <param name="platform">One of the <see cref="T:System.PlatformID"></see> values that indicates the operating system platform.</param>
      <param name="version">A <see cref="T:System.Version"></see> object that indicates the version of the operating system.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="version">version</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="platform">platform</paramref> is not a <see cref="System.PlatformID"></see> enumeration value.</exception>
    </member>
    <member name="M:System.OperatingSystem.Clone">
      <summary>Creates an <see cref="T:System.OperatingSystem"></see> object that is identical to this instance.</summary>
      <returns>An <see cref="System.OperatingSystem"></see> object that is a copy of this instance.</returns>
    </member>
    <member name="M:System.OperatingSystem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object with the data necessary to deserialize this instance.</summary>
      <param name="info">The object to populate with serialization information.</param>
      <param name="context">The place to store and retrieve serialized data. Reserved for future use.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="P:System.OperatingSystem.Platform">
      <summary>Gets a <see cref="T:System.PlatformID"></see> enumeration value that identifies the operating system platform.</summary>
      <returns>One of the <see cref="System.PlatformID"></see> values.</returns>
    </member>
    <member name="P:System.OperatingSystem.ServicePack">
      <summary>Gets the service pack version represented by this <see cref="T:System.OperatingSystem"></see> object.</summary>
      <returns>The service pack version, if service packs are supported and at least one is installed; otherwise, an empty string (&amp;quot;&amp;quot;).</returns>
    </member>
    <member name="M:System.OperatingSystem.ToString">
      <summary>Converts the value of this <see cref="T:System.OperatingSystem"></see> object to its equivalent string representation.</summary>
      <returns>The string representation of the values returned by the <see cref="System.OperatingSystem.Platform"></see>, <see cref="System.OperatingSystem.Version"></see>, and <see cref="System.OperatingSystem.ServicePack"></see> properties.</returns>
    </member>
    <member name="P:System.OperatingSystem.Version">
      <summary>Gets a <see cref="T:System.Version"></see> object that identifies the operating system.</summary>
      <returns>A <see cref="System.Version"></see> object that describes the major version, minor version, build, and revision numbers for the operating system.</returns>
    </member>
    <member name="P:System.OperatingSystem.VersionString">
      <summary>Gets the concatenated string representation of the platform identifier, version, and service pack that are currently installed on the operating system.</summary>
      <returns>The string representation of the values returned by the <see cref="System.OperatingSystem.Platform"></see>, <see cref="System.OperatingSystem.Version"></see>, and <see cref="System.OperatingSystem.ServicePack"></see> properties.</returns>
    </member>
    <member name="T:System.PlatformID">
      <summary>Identifies the operating system, or platform, supported by an assembly.</summary>
    </member>
    <member name="F:System.PlatformID.MacOSX">
      <summary>The operating system is Macintosh.</summary>
      <returns></returns>
    </member>
    <member name="F:System.PlatformID.Unix">
      <summary>The operating system is Unix.</summary>
      <returns></returns>
    </member>
    <member name="F:System.PlatformID.Win32NT">
      <summary>The operating system is Windows NT or later.</summary>
      <returns></returns>
    </member>
    <member name="F:System.PlatformID.Win32S">
      <summary>The operating system is Win32s. Win32s is a layer that runs on 16-bit versions of Windows to provide access to 32-bit applications.</summary>
      <returns></returns>
    </member>
    <member name="F:System.PlatformID.Win32Windows">
      <summary>The operating system is Windows 95 or Windows 98.</summary>
      <returns></returns>
    </member>
    <member name="F:System.PlatformID.WinCE">
      <summary>The operating system is Windows CE.</summary>
      <returns></returns>
    </member>
    <member name="F:System.PlatformID.Xbox">
      <summary>The development platform is Xbox 360.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ResolveEventHandler">
      <summary>Represents a method that handles the <see cref="E:System.AppDomain.TypeResolve"></see>, <see cref="E:System.AppDomain.ResourceResolve"></see>, or <see cref="E:System.AppDomain.AssemblyResolve"></see> event of an <see cref="T:System.AppDomain"></see>.</summary>
      <param name="sender">The source of the event.</param>
      <param name="args">The event data.</param>
      <returns>The assembly that resolves the type, assembly, or resource; or null if the assembly cannot be resolved.</returns>
    </member>
  </members>
</doc>