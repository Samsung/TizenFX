/*
 * Generated by tidlc 1.2.4.
 *
 * Copyright (c) 2018 Samsung Electronics Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Threading;
using Tizen.Applications;
using Tizen.Applications.RPCPort;
namespace RPCPort
{
namespace message
{
    namespace Proxy
    {
        public class message : ProxyBase
        {
            public event EventHandler Connected;
            public event EventHandler Disconnected;
            public event EventHandler Rejected;

            private bool _online = false;
            private string _appId;
            private Object _lock = new Object();
            private List<CallbackBase> _delegateList = new List<CallbackBase>();

            public abstract class CallbackBase
            {
                internal int Id;
                internal int SeqId;
                internal bool Once;
                private static volatile int _seqNum = 0;

                public string Tag
                {
                    get
                    {
                        return Id.ToString() + "::" + SeqId.ToString();
                    }
                }

                public CallbackBase(int delegateId, bool once)
                {
                    Id = delegateId;
                    SeqId = _seqNum++;
                    Once = once;
                }

                internal virtual void OnReceivedEvent(Parcel p) {}

                internal static void Serialize(Parcel h, CallbackBase param)
                {
                    h.WriteInt(param.Id);
                    h.WriteInt(param.SeqId);
                    h.WriteBool(param.Once);
                }

                internal static void Deserialize(Parcel h, CallbackBase param)
                {
                    param.Id = h.ReadInt();
                    param.SeqId = h.ReadInt();
                    param.Once = h.ReadBool();
                }
            }

            public sealed class notify_cb : CallbackBase
            {
                public notify_cb(bool once = false) : base((int)DelegateId.notify_cb, once)
                {
                }

                public delegate void Callback(string sender, Bundle msg);
                public event Callback Received;

                internal override void OnReceivedEvent(Parcel parcel)
                {
                    string param1 = parcel.ReadString();
                    Bundle param2 = parcel.ReadBundle();
                    Received?.Invoke(param1, param2);
                }

            }

            private enum DelegateId : int
            {
                notify_cb = 1,
            }

            private enum MethodId : int
            {
                __Result = 0,
                __Callback = 1,
                coregister = 2,
                unregister = 3,
                send = 4,
            }

            protected override void OnConnectedEvent(string endPoint, string portName, Port port)
            {
                _online = true;
                Connected?.Invoke(this, null);
            }

            protected override void OnDisconnectedEvent(string endPoint, string portName)
            {
                _online = false;
                Disconnected?.Invoke(this, null);
            }

            protected override void OnRejectedEvent(string endPoint, string portName)
            {
                Rejected?.Invoke(this, null);
            }

            private void ProcessReceivedEvent(Parcel parcel)
            {
                int id = parcel.ReadInt();
                int seqId = parcel.ReadInt();
                bool once = parcel.ReadBool();

                foreach (var i in _delegateList)
                {
                    if ((int)i.Id == id && i.SeqId == seqId)
                    {
                        i.OnReceivedEvent(parcel);
                        if (i.Once)
                            _delegateList.Remove(i);
                        break;
                    }
                }
            }

            protected override void OnReceivedEvent(string endPoint, string portName)
            {
                Parcel parcelReceived;

                parcelReceived = new Parcel(CallbackPort);

                using (parcelReceived)
                {
                    int cmd = parcelReceived.ReadInt();
                    if (cmd != (int)MethodId.__Callback)
                    {
                        return;
                    }

                    ProcessReceivedEvent(parcelReceived);
                }
            }

            private void ConsumeCommand(out Parcel parcel, Port port)
            {
                do
                {
                    var p = new Parcel(port);

                    int cmd = p.ReadInt();
                    if (cmd == (int)MethodId.__Result)
                    {
                        parcel = p;
                        return;
                    }

                    p.Dispose();
                    parcel = null;
                } while (true);
            }

            public message(string appId) => _appId = appId;

            /// <summary>
            /// Connects to the service app.
            /// </summary>
            /// <privilege>http://tizen.org/privilege/appmanager.launch</privilege>
            /// <privilege>http://tizen.org/privilege/datasharing</privilege>
            /// <exception cref="InvalidIDException">
            /// Thrown when the appid to connect is invalid.
            /// </exception>
            /// <exception cref="InvalidIOException">
            /// Thrown when internal I/O error happen.
            /// </exception>
            /// <exception cref="PermissionDeniedException">
            /// Thrown when the permission is denied.
            /// </exception>
            /// <remark> If you want to use this method, you must add privileges.</remark>
            public void Connect()
            {
                Connect(_appId, "message");
            }

            /// <summary>
            /// Disposes delegate objects in this interface
            /// </summary>
            /// <param name="tag">The tag string from delegate object</param>
            void DisposeCallback(string tag)
            {
                foreach (var i in _delegateList)
                {
                    if (i.Tag.Equals(tag))
                    {
                        _delegateList.Remove(i);
                        return;
                    }
                }
            }

            public int coregister(string name, notify_cb cb)
            {
                if (!_online)
                    throw new NotConnectedSocketException();

                using (Parcel p = new Parcel())
                {
                    p.WriteInt((int)MethodId.coregister);
                    p.WriteString(name);
                    CallbackBase.Serialize(p, cb);

                    Parcel parcelReceived;
                    lock (_lock)
                    {
                        _delegateList.Add(cb);

                        // Send
                        p.Send(Port);

                        // Receive
                        ConsumeCommand(out parcelReceived, Port);
                    }
                    if (parcelReceived == null)
                    {
                        throw new InvalidProtocolException();
                    }

                    int ret = parcelReceived.ReadInt();
                    parcelReceived.Dispose();
                    return ret;
        }
            }

            public void unregister()
            {
                if (!_online)
                    throw new NotConnectedSocketException();

                using (Parcel p = new Parcel())
                {
                    p.WriteInt((int)MethodId.unregister);

                    lock (_lock)
                    {
                        // Send
                        p.Send(Port);

                    }
        }
            }

            public int send(Bundle msg)
            {
                if (!_online)
                    throw new NotConnectedSocketException();

                using (Parcel p = new Parcel())
                {
                    p.WriteInt((int)MethodId.send);
                    p.WriteBundle(msg);

                    Parcel parcelReceived;
                    lock (_lock)
                    {
                        // Send
                        p.Send(Port);

                        // Receive
                        ConsumeCommand(out parcelReceived, Port);
                    }
                    if (parcelReceived == null)
                    {
                        throw new InvalidProtocolException();
                    }

                    int ret = parcelReceived.ReadInt();
                    parcelReceived.Dispose();
                    return ret;
        }
            }

        }

    }
}
}
